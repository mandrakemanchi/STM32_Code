
008_QueuesAndTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  080099a4  080099a4  0000a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a040  0800a040  0000c088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a040  0800a040  0000b040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a048  0800a048  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a048  0800a048  0000b048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a04c  0800a04c  0000b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800a050  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc9c  20000088  0800a0d8  0000c088  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  2000bd24  0800a0d8  0000cd24  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001850d  00000000  00000000  0000c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b89  00000000  00000000  000245c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00028150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d4  00000000  00000000  00029718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000059a7  00000000  00000000  0002a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d301  00000000  00000000  00030193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d0c9  00000000  00000000  0004d494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a55d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062bc  00000000  00000000  0015a5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0016085c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	0800998c 	.word	0x0800998c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	0800998c 	.word	0x0800998c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f103 0208 	add.w	r2, r3, #8
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f04f 32ff 	mov.w	r2, #4294967295
 8000618:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f103 0208 	add.w	r2, r3, #8
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f103 0208 	add.w	r2, r3, #8
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800065a:	b480      	push	{r7}
 800065c:	b085      	sub	sp, #20
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006a2:	b480      	push	{r7}
 80006a4:	b085      	sub	sp, #20
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b8:	d103      	bne.n	80006c2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	e00c      	b.n	80006dc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3308      	adds	r3, #8
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e002      	b.n	80006d0 <vListInsert+0x2e>
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d2f6      	bcs.n	80006ca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	601a      	str	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	691b      	ldr	r3, [r3, #16]
 8000720:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	6892      	ldr	r2, [r2, #8]
 800072a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	6852      	ldr	r2, [r2, #4]
 8000734:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	429a      	cmp	r2, r3
 800073e:	d103      	bne.n	8000748 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d104      	bne.n	8000786 <xQueueGenericReset+0x1e>
 800077c:	492a      	ldr	r1, [pc, #168]	@ (8000828 <xQueueGenericReset+0xc0>)
 800077e:	f240 100d 	movw	r0, #269	@ 0x10d
 8000782:	f003 fa0d 	bl	8003ba0 <vAssertCalled>

    taskENTER_CRITICAL();
 8000786:	f002 fad7 	bl	8002d38 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000792:	68f9      	ldr	r1, [r7, #12]
 8000794:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000796:	fb01 f303 	mul.w	r3, r1, r3
 800079a:	441a      	add	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2200      	movs	r2, #0
 80007a4:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	68f9      	ldr	r1, [r7, #12]
 80007ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80007bc:	fb01 f303 	mul.w	r3, r1, r3
 80007c0:	441a      	add	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	22ff      	movs	r2, #255	@ 0xff
 80007ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	22ff      	movs	r2, #255	@ 0xff
 80007d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d114      	bne.n	8000806 <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d01a      	beq.n	800081a <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3310      	adds	r3, #16
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 f89f 	bl	800192c <xTaskRemoveFromEventList>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d012      	beq.n	800081a <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <xQueueGenericReset+0xc4>)
 80007f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	f3bf 8f4f 	dsb	sy
 8000800:	f3bf 8f6f 	isb	sy
 8000804:	e009      	b.n	800081a <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3310      	adds	r3, #16
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fef8 	bl	8000600 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3324      	adds	r3, #36	@ 0x24
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fef3 	bl	8000600 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800081a:	f002 fab7 	bl	8002d8c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	080099a4 	.word	0x080099a4
 800082c:	e000ed04 	.word	0xe000ed04

08000830 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af02      	add	r7, sp, #8
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	4613      	mov	r3, r2
 800083c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <xQueueGenericCreate+0x1e>
 8000844:	4921      	ldr	r1, [pc, #132]	@ (80008cc <xQueueGenericCreate+0x9c>)
 8000846:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 800084a:	f003 f9a9 	bl	8003ba0 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d006      	beq.n	800086c <xQueueGenericCreate+0x3c>
 800085e:	69fa      	ldr	r2, [r7, #28]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	d101      	bne.n	8000870 <xQueueGenericCreate+0x40>
 800086c:	2301      	movs	r3, #1
 800086e:	e000      	b.n	8000872 <xQueueGenericCreate+0x42>
 8000870:	2300      	movs	r3, #0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d104      	bne.n	8000880 <xQueueGenericCreate+0x50>
 8000876:	4915      	ldr	r1, [pc, #84]	@ (80008cc <xQueueGenericCreate+0x9c>)
 8000878:	f44f 70c7 	mov.w	r0, #398	@ 0x18e
 800087c:	f003 f990 	bl	8003ba0 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8000886:	d904      	bls.n	8000892 <xQueueGenericCreate+0x62>
 8000888:	4910      	ldr	r1, [pc, #64]	@ (80008cc <xQueueGenericCreate+0x9c>)
 800088a:	f240 1091 	movw	r0, #401	@ 0x191
 800088e:	f003 f987 	bl	8003ba0 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3350      	adds	r3, #80	@ 0x50
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fb5c 	bl	8002f54 <pvPortMalloc>
 800089c:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00d      	beq.n	80008c0 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3350      	adds	r3, #80	@ 0x50
 80008ac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	4613      	mov	r3, r2
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f000 f808 	bl	80008d0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80008c0:	69bb      	ldr	r3, [r7, #24]
    }
 80008c2:	4618      	mov	r0, r3
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	080099a4 	.word	0x080099a4

080008d0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d103      	bne.n	80008ec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e002      	b.n	80008f2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008fe:	2101      	movs	r1, #1
 8000900:	69b8      	ldr	r0, [r7, #24]
 8000902:	f7ff ff31 	bl	8000768 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	78fa      	ldrb	r2, [r7, #3]
 800090a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d104      	bne.n	800093e <xQueueGenericSend+0x26>
 8000934:	496a      	ldr	r1, [pc, #424]	@ (8000ae0 <xQueueGenericSend+0x1c8>)
 8000936:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 800093a:	f003 f931 	bl	8003ba0 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d103      	bne.n	800094c <xQueueGenericSend+0x34>
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	2b00      	cmp	r3, #0
 800094a:	d101      	bne.n	8000950 <xQueueGenericSend+0x38>
 800094c:	2301      	movs	r3, #1
 800094e:	e000      	b.n	8000952 <xQueueGenericSend+0x3a>
 8000950:	2300      	movs	r3, #0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d104      	bne.n	8000960 <xQueueGenericSend+0x48>
 8000956:	4962      	ldr	r1, [pc, #392]	@ (8000ae0 <xQueueGenericSend+0x1c8>)
 8000958:	f240 300d 	movw	r0, #781	@ 0x30d
 800095c:	f003 f920 	bl	8003ba0 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d103      	bne.n	800096e <xQueueGenericSend+0x56>
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <xQueueGenericSend+0x5a>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <xQueueGenericSend+0x5c>
 8000972:	2300      	movs	r3, #0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d104      	bne.n	8000982 <xQueueGenericSend+0x6a>
 8000978:	4959      	ldr	r1, [pc, #356]	@ (8000ae0 <xQueueGenericSend+0x1c8>)
 800097a:	f240 300e 	movw	r0, #782	@ 0x30e
 800097e:	f003 f90f 	bl	8003ba0 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000982:	f001 f963 	bl	8001c4c <xTaskGetSchedulerState>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <xQueueGenericSend+0x7a>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <xQueueGenericSend+0x7e>
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <xQueueGenericSend+0x80>
 8000996:	2300      	movs	r3, #0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <xQueueGenericSend+0x8e>
 800099c:	4950      	ldr	r1, [pc, #320]	@ (8000ae0 <xQueueGenericSend+0x1c8>)
 800099e:	f240 3011 	movw	r0, #785	@ 0x311
 80009a2:	f003 f8fd 	bl	8003ba0 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009a6:	f002 f9c7 	bl	8002d38 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d302      	bcc.n	80009bc <xQueueGenericSend+0xa4>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d129      	bne.n	8000a10 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	68b9      	ldr	r1, [r7, #8]
 80009c0:	6a38      	ldr	r0, [r7, #32]
 80009c2:	f000 fa8d 	bl	8000ee0 <prvCopyDataToQueue>
 80009c6:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d010      	beq.n	80009f2 <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	3324      	adds	r3, #36	@ 0x24
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 ffa9 	bl	800192c <xTaskRemoveFromEventList>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d013      	beq.n	8000a08 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009e0:	4b40      	ldr	r3, [pc, #256]	@ (8000ae4 <xQueueGenericSend+0x1cc>)
 80009e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	f3bf 8f4f 	dsb	sy
 80009ec:	f3bf 8f6f 	isb	sy
 80009f0:	e00a      	b.n	8000a08 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d007      	beq.n	8000a08 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009f8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae4 <xQueueGenericSend+0x1cc>)
 80009fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	f3bf 8f4f 	dsb	sy
 8000a04:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a08:	f002 f9c0 	bl	8002d8c <vPortExitCritical>
                return pdPASS;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e063      	b.n	8000ad8 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d103      	bne.n	8000a1e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a16:	f002 f9b9 	bl	8002d8c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e05c      	b.n	8000ad8 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d106      	bne.n	8000a32 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 ffdd 	bl	80019e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a32:	f002 f9ab 	bl	8002d8c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a36:	f000 fd71 	bl	800151c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a3a:	f002 f97d 	bl	8002d38 <vPortEnterCritical>
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4a:	d103      	bne.n	8000a54 <xQueueGenericSend+0x13c>
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d103      	bne.n	8000a6a <xQueueGenericSend+0x152>
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a6a:	f002 f98f 	bl	8002d8c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a6e:	1d3a      	adds	r2, r7, #4
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 ffcc 	bl	8001a14 <xTaskCheckForTimeOut>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d124      	bne.n	8000acc <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a82:	6a38      	ldr	r0, [r7, #32]
 8000a84:	f000 fb24 	bl	80010d0 <prvIsQueueFull>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d018      	beq.n	8000ac0 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
 8000a90:	3310      	adds	r3, #16
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 ff00 	bl	800189c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a9c:	6a38      	ldr	r0, [r7, #32]
 8000a9e:	f000 faaf 	bl	8001000 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aa2:	f000 fd49 	bl	8001538 <xTaskResumeAll>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f47f af7c 	bne.w	80009a6 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <xQueueGenericSend+0x1cc>)
 8000ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	f3bf 8f4f 	dsb	sy
 8000aba:	f3bf 8f6f 	isb	sy
 8000abe:	e772      	b.n	80009a6 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ac0:	6a38      	ldr	r0, [r7, #32]
 8000ac2:	f000 fa9d 	bl	8001000 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ac6:	f000 fd37 	bl	8001538 <xTaskResumeAll>
 8000aca:	e76c      	b.n	80009a6 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000acc:	6a38      	ldr	r0, [r7, #32]
 8000ace:	f000 fa97 	bl	8001000 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ad2:	f000 fd31 	bl	8001538 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000ad6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	080099a4 	.word	0x080099a4
 8000ae4:	e000ed04 	.word	0xe000ed04

08000ae8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8000afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d104      	bne.n	8000b0a <xQueueGenericSendFromISR+0x22>
 8000b00:	4942      	ldr	r1, [pc, #264]	@ (8000c0c <xQueueGenericSendFromISR+0x124>)
 8000b02:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8000b06:	f003 f84b 	bl	8003ba0 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d103      	bne.n	8000b18 <xQueueGenericSendFromISR+0x30>
 8000b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <xQueueGenericSendFromISR+0x34>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <xQueueGenericSendFromISR+0x36>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d104      	bne.n	8000b2c <xQueueGenericSendFromISR+0x44>
 8000b22:	493a      	ldr	r1, [pc, #232]	@ (8000c0c <xQueueGenericSendFromISR+0x124>)
 8000b24:	f240 30e1 	movw	r0, #993	@ 0x3e1
 8000b28:	f003 f83a 	bl	8003ba0 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d103      	bne.n	8000b3a <xQueueGenericSendFromISR+0x52>
 8000b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d101      	bne.n	8000b3e <xQueueGenericSendFromISR+0x56>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <xQueueGenericSendFromISR+0x58>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <xQueueGenericSendFromISR+0x66>
 8000b44:	4931      	ldr	r1, [pc, #196]	@ (8000c0c <xQueueGenericSendFromISR+0x124>)
 8000b46:	f240 30e2 	movw	r0, #994	@ 0x3e2
 8000b4a:	f003 f829 	bl	8003ba0 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b4e:	f002 f9cd 	bl	8002eec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b52:	f3ef 8211 	mrs	r2, BASEPRI
 8000b56:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000b5a:	f383 8811 	msr	BASEPRI, r3
 8000b5e:	f3bf 8f6f 	isb	sy
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	61ba      	str	r2, [r7, #24]
 8000b68:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b6a:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d302      	bcc.n	8000b80 <xQueueGenericSendFromISR+0x98>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d138      	bne.n	8000bf2 <xQueueGenericSendFromISR+0x10a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b8e:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	68b9      	ldr	r1, [r7, #8]
 8000b94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b96:	f000 f9a3 	bl	8000ee0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000b9a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba2:	d112      	bne.n	8000bca <xQueueGenericSendFromISR+0xe2>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d01f      	beq.n	8000bec <xQueueGenericSendFromISR+0x104>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bae:	3324      	adds	r3, #36	@ 0x24
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 febb 	bl	800192c <xTaskRemoveFromEventList>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d017      	beq.n	8000bec <xQueueGenericSendFromISR+0x104>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d014      	beq.n	8000bec <xQueueGenericSendFromISR+0x104>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e010      	b.n	8000bec <xQueueGenericSendFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000bca:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd0:	d104      	bne.n	8000bdc <xQueueGenericSendFromISR+0xf4>
 8000bd2:	490e      	ldr	r1, [pc, #56]	@ (8000c0c <xQueueGenericSendFromISR+0x124>)
 8000bd4:	f240 406b 	movw	r0, #1131	@ 0x46b
 8000bd8:	f002 ffe2 	bl	8003ba0 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8000bf0:	e001      	b.n	8000bf6 <xQueueGenericSendFromISR+0x10e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c00:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3730      	adds	r7, #48	@ 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	080099a4 	.word	0x080099a4

08000c10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	@ 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d104      	bne.n	8000c34 <xQueueReceive+0x24>
 8000c2a:	495f      	ldr	r1, [pc, #380]	@ (8000da8 <xQueueReceive+0x198>)
 8000c2c:	f240 502f 	movw	r0, #1327	@ 0x52f
 8000c30:	f002 ffb6 	bl	8003ba0 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d103      	bne.n	8000c42 <xQueueReceive+0x32>
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <xQueueReceive+0x36>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <xQueueReceive+0x38>
 8000c46:	2300      	movs	r3, #0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d104      	bne.n	8000c56 <xQueueReceive+0x46>
 8000c4c:	4956      	ldr	r1, [pc, #344]	@ (8000da8 <xQueueReceive+0x198>)
 8000c4e:	f240 5033 	movw	r0, #1331	@ 0x533
 8000c52:	f002 ffa5 	bl	8003ba0 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c56:	f000 fff9 	bl	8001c4c <xTaskGetSchedulerState>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <xQueueReceive+0x56>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <xQueueReceive+0x5a>
 8000c66:	2301      	movs	r3, #1
 8000c68:	e000      	b.n	8000c6c <xQueueReceive+0x5c>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <xQueueReceive+0x6a>
 8000c70:	494d      	ldr	r1, [pc, #308]	@ (8000da8 <xQueueReceive+0x198>)
 8000c72:	f44f 60a7 	mov.w	r0, #1336	@ 0x538
 8000c76:	f002 ff93 	bl	8003ba0 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c7a:	f002 f85d 	bl	8002d38 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c82:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d01f      	beq.n	8000cca <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	6a38      	ldr	r0, [r7, #32]
 8000c8e:	f000 f991 	bl	8000fb4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00f      	beq.n	8000cc2 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fe40 	bl	800192c <xTaskRemoveFromEventList>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dac <xQueueReceive+0x19c>)
 8000cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000cc2:	f002 f863 	bl	8002d8c <vPortExitCritical>
                return pdPASS;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e069      	b.n	8000d9e <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d103      	bne.n	8000cd8 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000cd0:	f002 f85c 	bl	8002d8c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e062      	b.n	8000d9e <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d106      	bne.n	8000cec <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fe80 	bl	80019e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cec:	f002 f84e 	bl	8002d8c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000cf0:	f000 fc14 	bl	800151c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cf4:	f002 f820 	bl	8002d38 <vPortEnterCritical>
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d103      	bne.n	8000d0e <xQueueReceive+0xfe>
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000d0e:	6a3b      	ldr	r3, [r7, #32]
 8000d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1a:	d103      	bne.n	8000d24 <xQueueReceive+0x114>
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000d24:	f002 f832 	bl	8002d8c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d28:	1d3a      	adds	r2, r7, #4
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fe6f 	bl	8001a14 <xTaskCheckForTimeOut>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d123      	bne.n	8000d84 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d3c:	6a38      	ldr	r0, [r7, #32]
 8000d3e:	f000 f9b1 	bl	80010a4 <prvIsQueueEmpty>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d017      	beq.n	8000d78 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	3324      	adds	r3, #36	@ 0x24
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fda3 	bl	800189c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d56:	6a38      	ldr	r0, [r7, #32]
 8000d58:	f000 f952 	bl	8001000 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d5c:	f000 fbec 	bl	8001538 <xTaskResumeAll>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d189      	bne.n	8000c7a <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <xQueueReceive+0x19c>)
 8000d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	f3bf 8f4f 	dsb	sy
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	e780      	b.n	8000c7a <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d78:	6a38      	ldr	r0, [r7, #32]
 8000d7a:	f000 f941 	bl	8001000 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d7e:	f000 fbdb 	bl	8001538 <xTaskResumeAll>
 8000d82:	e77a      	b.n	8000c7a <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d84:	6a38      	ldr	r0, [r7, #32]
 8000d86:	f000 f93b 	bl	8001000 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d8a:	f000 fbd5 	bl	8001538 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d8e:	6a38      	ldr	r0, [r7, #32]
 8000d90:	f000 f988 	bl	80010a4 <prvIsQueueEmpty>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f43f af6f 	beq.w	8000c7a <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000d9c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	080099a4 	.word	0x080099a4
 8000dac:	e000ed04 	.word	0xe000ed04

08000db0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8000dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <xQueueReceiveFromISR+0x20>
 8000dc6:	4938      	ldr	r1, [pc, #224]	@ (8000ea8 <xQueueReceiveFromISR+0xf8>)
 8000dc8:	f240 702f 	movw	r0, #1839	@ 0x72f
 8000dcc:	f002 fee8 	bl	8003ba0 <vAssertCalled>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <xQueueReceiveFromISR+0x2e>
 8000dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <xQueueReceiveFromISR+0x32>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <xQueueReceiveFromISR+0x34>
 8000de2:	2300      	movs	r3, #0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d104      	bne.n	8000df2 <xQueueReceiveFromISR+0x42>
 8000de8:	492f      	ldr	r1, [pc, #188]	@ (8000ea8 <xQueueReceiveFromISR+0xf8>)
 8000dea:	f44f 60e6 	mov.w	r0, #1840	@ 0x730
 8000dee:	f002 fed7 	bl	8003ba0 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000df2:	f002 f87b 	bl	8002eec <vPortValidateInterruptPriority>
        __asm volatile
 8000df6:	f3ef 8211 	mrs	r2, BASEPRI
 8000dfa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000dfe:	f383 8811 	msr	BASEPRI, r3
 8000e02:	f3bf 8f6f 	isb	sy
 8000e06:	f3bf 8f4f 	dsb	sy
 8000e0a:	61ba      	str	r2, [r7, #24]
 8000e0c:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8000e0e:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e16:	623b      	str	r3, [r7, #32]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d036      	beq.n	8000e8c <xQueueReceiveFromISR+0xdc>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8000e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e24:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e2a:	f000 f8c3 	bl	8000fb4 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e34:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8000e36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3e:	d112      	bne.n	8000e66 <xQueueReceiveFromISR+0xb6>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d01e      	beq.n	8000e86 <xQueueReceiveFromISR+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e4a:	3310      	adds	r3, #16
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fd6d 	bl	800192c <xTaskRemoveFromEventList>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d016      	beq.n	8000e86 <xQueueReceiveFromISR+0xd6>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d013      	beq.n	8000e86 <xQueueReceiveFromISR+0xd6>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e00f      	b.n	8000e86 <xQueueReceiveFromISR+0xd6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8000e66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e6c:	d104      	bne.n	8000e78 <xQueueReceiveFromISR+0xc8>
 8000e6e:	490e      	ldr	r1, [pc, #56]	@ (8000ea8 <xQueueReceiveFromISR+0xf8>)
 8000e70:	f240 7073 	movw	r0, #1907	@ 0x773
 8000e74:	f002 fe94 	bl	8003ba0 <vAssertCalled>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8000e78:	7ffb      	ldrb	r3, [r7, #31]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b25a      	sxtb	r2, r3
 8000e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8000e86:	2301      	movs	r3, #1
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e8a:	e001      	b.n	8000e90 <xQueueReceiveFromISR+0xe0>
        }
        else
        {
            xReturn = pdFAIL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	613b      	str	r3, [r7, #16]
        __asm volatile
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	f383 8811 	msr	BASEPRI, r3
    }
 8000e9a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3730      	adds	r7, #48	@ 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	080099a4 	.word	0x080099a4

08000eac <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <uxQueueMessagesWaiting+0x18>
 8000eba:	4908      	ldr	r1, [pc, #32]	@ (8000edc <uxQueueMessagesWaiting+0x30>)
 8000ebc:	f240 70c1 	movw	r0, #1985	@ 0x7c1
 8000ec0:	f002 fe6e 	bl	8003ba0 <vAssertCalled>

    taskENTER_CRITICAL();
 8000ec4:	f001 ff38 	bl	8002d38 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ecc:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8000ece:	f001 ff5d 	bl	8002d8c <vPortExitCritical>

    return uxReturn;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	080099a4 	.word	0x080099a4

08000ee0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ef4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10d      	bne.n	8000f1a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d14d      	bne.n	8000fa2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 febc 	bl	8001c88 <xTaskPriorityDisinherit>
 8000f10:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	e043      	b.n	8000fa2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d119      	bne.n	8000f54 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6858      	ldr	r0, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	f007 fddb 	bl	8008ae6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	441a      	add	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d32b      	bcc.n	8000fa2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	e026      	b.n	8000fa2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	68d8      	ldr	r0, [r3, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	f007 fdc1 	bl	8008ae6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	425b      	negs	r3, r3
 8000f6e:	441a      	add	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	425b      	negs	r3, r3
 8000f8a:	441a      	add	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d105      	bne.n	8000fa2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000faa:	697b      	ldr	r3, [r7, #20]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d018      	beq.n	8000ff8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	441a      	add	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d303      	bcc.n	8000fe8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68d9      	ldr	r1, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	6838      	ldr	r0, [r7, #0]
 8000ff4:	f007 fd77 	bl	8008ae6 <memcpy>
    }
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001008:	f001 fe96 	bl	8002d38 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001012:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001014:	e011      	b.n	800103a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101a:	2b00      	cmp	r3, #0
 800101c:	d012      	beq.n	8001044 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3324      	adds	r3, #36	@ 0x24
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fc82 	bl	800192c <xTaskRemoveFromEventList>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800102e:	f000 fd4d 	bl	8001acc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3b01      	subs	r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dce9      	bgt.n	8001016 <prvUnlockQueue+0x16>
 8001042:	e000      	b.n	8001046 <prvUnlockQueue+0x46>
                        break;
 8001044:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	22ff      	movs	r2, #255	@ 0xff
 800104a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800104e:	f001 fe9d 	bl	8002d8c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001052:	f001 fe71 	bl	8002d38 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800105c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800105e:	e011      	b.n	8001084 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d012      	beq.n	800108e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3310      	adds	r3, #16
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fc5d 	bl	800192c <xTaskRemoveFromEventList>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001078:	f000 fd28 	bl	8001acc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	3b01      	subs	r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001088:	2b00      	cmp	r3, #0
 800108a:	dce9      	bgt.n	8001060 <prvUnlockQueue+0x60>
 800108c:	e000      	b.n	8001090 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800108e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	22ff      	movs	r2, #255	@ 0xff
 8001094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001098:	f001 fe78 	bl	8002d8c <vPortExitCritical>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010ac:	f001 fe44 	bl	8002d38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e001      	b.n	80010c2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010c2:	f001 fe63 	bl	8002d8c <vPortExitCritical>

    return xReturn;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010d8:	f001 fe2e 	bl	8002d38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d102      	bne.n	80010ee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e001      	b.n	80010f2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010f2:	f001 fe4b 	bl	8002d8c <vPortExitCritical>

    return xReturn;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d104      	bne.n	800111c <xQueueIsQueueFullFromISR+0x1c>
 8001112:	490a      	ldr	r1, [pc, #40]	@ (800113c <xQueueIsQueueFullFromISR+0x3c>)
 8001114:	f640 1071 	movw	r0, #2417	@ 0x971
 8001118:	f002 fd42 	bl	8003ba0 <vAssertCalled>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001124:	429a      	cmp	r2, r3
 8001126:	d102      	bne.n	800112e <xQueueIsQueueFullFromISR+0x2e>
    {
        xReturn = pdTRUE;
 8001128:	2301      	movs	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e001      	b.n	8001132 <xQueueIsQueueFullFromISR+0x32>
    }
    else
    {
        xReturn = pdFALSE;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8001132:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	080099a4 	.word	0x080099a4

08001140 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e014      	b.n	800117a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001150:	4a0f      	ldr	r2, [pc, #60]	@ (8001190 <vQueueAddToRegistry+0x50>)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10b      	bne.n	8001174 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800115c:	490c      	ldr	r1, [pc, #48]	@ (8001190 <vQueueAddToRegistry+0x50>)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <vQueueAddToRegistry+0x50>)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001172:	e006      	b.n	8001182 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b07      	cmp	r3, #7
 800117e:	d9e7      	bls.n	8001150 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200000a4 	.word	0x200000a4

08001194 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80011a4:	f001 fdc8 	bl	8002d38 <vPortEnterCritical>
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d103      	bne.n	80011be <vQueueWaitForMessageRestricted+0x2a>
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ca:	d103      	bne.n	80011d4 <vQueueWaitForMessageRestricted+0x40>
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80011d4:	f001 fdda 	bl	8002d8c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d106      	bne.n	80011ee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3324      	adds	r3, #36	@ 0x24
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fb77 	bl	80018dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff06 	bl	8001000 <prvUnlockQueue>
    }
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	@ 0x30
 8001200:	af04      	add	r7, sp, #16
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fe9f 	bl	8002f54 <pvPortMalloc>
 8001216:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00e      	beq.n	800123c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800121e:	2058      	movs	r0, #88	@ 0x58
 8001220:	f001 fe98 	bl	8002f54 <pvPortMalloc>
 8001224:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	631a      	str	r2, [r3, #48]	@ 0x30
 8001232:	e005      	b.n	8001240 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001234:	6978      	ldr	r0, [r7, #20]
 8001236:	f001 ff5b 	bl	80030f0 <vPortFree>
 800123a:	e001      	b.n	8001240 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d013      	beq.n	800126e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	2300      	movs	r3, #0
 800124a:	9303      	str	r3, [sp, #12]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f80f 	bl	8001280 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001262:	69f8      	ldr	r0, [r7, #28]
 8001264:	f000 f89e 	bl	80013a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	e002      	b.n	8001274 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001274:	69bb      	ldr	r3, [r7, #24]
    }
 8001276:	4618      	mov	r0, r3
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800128e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001290:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	461a      	mov	r2, r3
 8001298:	21a5      	movs	r1, #165	@ 0xa5
 800129a:	f007 fba8 	bl	80089ee <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80012a8:	440b      	add	r3, r1
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f023 0307 	bic.w	r3, r3, #7
 80012b6:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <prvInitialiseNewTask+0x4c>
 80012c2:	4937      	ldr	r1, [pc, #220]	@ (80013a0 <prvInitialiseNewTask+0x120>)
 80012c4:	f240 3069 	movw	r0, #873	@ 0x369
 80012c8:	f002 fc6a 	bl	8003ba0 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01f      	beq.n	8001312 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e012      	b.n	80012fe <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	4413      	add	r3, r2
 80012de:	7819      	ldrb	r1, [r3, #0]
 80012e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	3334      	adds	r3, #52	@ 0x34
 80012e8:	460a      	mov	r2, r1
 80012ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b09      	cmp	r3, #9
 8001302:	d9e9      	bls.n	80012d8 <prvInitialiseNewTask+0x58>
 8001304:	e000      	b.n	8001308 <prvInitialiseNewTask+0x88>
            {
                break;
 8001306:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001310:	e003      	b.n	800131a <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d901      	bls.n	8001324 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001320:	2304      	movs	r3, #4
 8001322:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001326:	6a3a      	ldr	r2, [r7, #32]
 8001328:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132c:	6a3a      	ldr	r2, [r7, #32]
 800132e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001338:	3304      	adds	r3, #4
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f980 	bl	8000640 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001342:	3318      	adds	r3, #24
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f97b 	bl	8000640 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800134a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800134e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	f1c3 0205 	rsb	r2, r3, #5
 8001356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001358:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800135a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800135e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001362:	3350      	adds	r3, #80	@ 0x50
 8001364:	2204      	movs	r2, #4
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f007 fb40 	bl	80089ee <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001370:	3354      	adds	r3, #84	@ 0x54
 8001372:	2201      	movs	r2, #1
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f007 fb39 	bl	80089ee <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	68f9      	ldr	r1, [r7, #12]
 8001380:	6938      	ldr	r0, [r7, #16]
 8001382:	f001 fb3d 	bl	8002a00 <pxPortInitialiseStack>
 8001386:	4602      	mov	r2, r0
 8001388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800138a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001396:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	08009a10 	.word	0x08009a10

080013a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80013ac:	f001 fcc4 	bl	8002d38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80013b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <prvAddNewTaskToReadyList+0xc0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001464 <prvAddNewTaskToReadyList+0xc0>)
 80013b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80013ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <prvAddNewTaskToReadyList+0xc4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80013c2:	4a29      	ldr	r2, [pc, #164]	@ (8001468 <prvAddNewTaskToReadyList+0xc4>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <prvAddNewTaskToReadyList+0xc0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d110      	bne.n	80013f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80013d0:	f000 fba2 	bl	8001b18 <prvInitialiseTaskLists>
 80013d4:	e00d      	b.n	80013f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80013d6:	4b25      	ldr	r3, [pc, #148]	@ (800146c <prvAddNewTaskToReadyList+0xc8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <prvAddNewTaskToReadyList+0xc4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d802      	bhi.n	80013f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80013ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001468 <prvAddNewTaskToReadyList+0xc4>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <prvAddNewTaskToReadyList+0xcc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001470 <prvAddNewTaskToReadyList+0xcc>)
 80013fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <prvAddNewTaskToReadyList+0xcc>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001408:	2201      	movs	r2, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <prvAddNewTaskToReadyList+0xd0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4313      	orrs	r3, r2
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <prvAddNewTaskToReadyList+0xd0>)
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4a15      	ldr	r2, [pc, #84]	@ (8001478 <prvAddNewTaskToReadyList+0xd4>)
 8001424:	441a      	add	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3304      	adds	r3, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4610      	mov	r0, r2
 800142e:	f7ff f914 	bl	800065a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001432:	f001 fcab 	bl	8002d8c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <prvAddNewTaskToReadyList+0xc8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00e      	beq.n	800145c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <prvAddNewTaskToReadyList+0xc4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800144c:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <prvAddNewTaskToReadyList+0xd8>)
 800144e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	f3bf 8f4f 	dsb	sy
 8001458:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200001bc 	.word	0x200001bc
 8001468:	200000e4 	.word	0x200000e4
 800146c:	200001c8 	.word	0x200001c8
 8001470:	200001d8 	.word	0x200001d8
 8001474:	200001c4 	.word	0x200001c4
 8001478:	200000e8 	.word	0x200000e8
 800147c:	e000ed04 	.word	0xe000ed04

08001480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <vTaskStartScheduler+0x7c>)
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2300      	movs	r3, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	2282      	movs	r2, #130	@ 0x82
 8001492:	491b      	ldr	r1, [pc, #108]	@ (8001500 <vTaskStartScheduler+0x80>)
 8001494:	481b      	ldr	r0, [pc, #108]	@ (8001504 <vTaskStartScheduler+0x84>)
 8001496:	f7ff feb1 	bl	80011fc <xTaskCreate>
 800149a:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d102      	bne.n	80014a8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80014a2:	f000 fefb 	bl	800229c <xTimerCreateTimerTask>
 80014a6:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d116      	bne.n	80014dc <vTaskStartScheduler+0x5c>
        __asm volatile
 80014ae:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	f3bf 8f4f 	dsb	sy
 80014be:	603b      	str	r3, [r7, #0]
    }
 80014c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <vTaskStartScheduler+0x88>)
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <vTaskStartScheduler+0x8c>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <vTaskStartScheduler+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80014d6:	f001 fb1d 	bl	8002b14 <xPortStartScheduler>
 80014da:	e008      	b.n	80014ee <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e2:	d104      	bne.n	80014ee <vTaskStartScheduler+0x6e>
 80014e4:	490b      	ldr	r1, [pc, #44]	@ (8001514 <vTaskStartScheduler+0x94>)
 80014e6:	f640 0041 	movw	r0, #2113	@ 0x841
 80014ea:	f002 fb59 	bl	8003ba0 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <vTaskStartScheduler+0x98>)
 80014f0:	681b      	ldr	r3, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001e0 	.word	0x200001e0
 8001500:	08009a7c 	.word	0x08009a7c
 8001504:	08001ae5 	.word	0x08001ae5
 8001508:	200001dc 	.word	0x200001dc
 800150c:	200001c8 	.word	0x200001c8
 8001510:	200001c0 	.word	0x200001c0
 8001514:	08009a10 	.word	0x08009a10
 8001518:	20000000 	.word	0x20000000

0800151c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001520:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <vTaskSuspendAll+0x18>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a03      	ldr	r2, [pc, #12]	@ (8001534 <vTaskSuspendAll+0x18>)
 8001528:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	200001e4 	.word	0x200001e4

08001538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <xTaskResumeAll+0x108>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d104      	bne.n	8001558 <xTaskResumeAll+0x20>
 800154e:	493d      	ldr	r1, [pc, #244]	@ (8001644 <xTaskResumeAll+0x10c>)
 8001550:	f640 00b4 	movw	r0, #2228	@ 0x8b4
 8001554:	f002 fb24 	bl	8003ba0 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001558:	f001 fbee 	bl	8002d38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800155c:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <xTaskResumeAll+0x108>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	4a37      	ldr	r2, [pc, #220]	@ (8001640 <xTaskResumeAll+0x108>)
 8001564:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <xTaskResumeAll+0x108>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d161      	bne.n	8001632 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800156e:	4b36      	ldr	r3, [pc, #216]	@ (8001648 <xTaskResumeAll+0x110>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d05d      	beq.n	8001632 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001576:	e02e      	b.n	80015d6 <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001578:	4b34      	ldr	r3, [pc, #208]	@ (800164c <xTaskResumeAll+0x114>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3318      	adds	r3, #24
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f8c5 	bl	8000714 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3304      	adds	r3, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f8c0 	bl	8000714 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	2201      	movs	r2, #1
 800159a:	409a      	lsls	r2, r3
 800159c:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <xTaskResumeAll+0x118>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001650 <xTaskResumeAll+0x118>)
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4a28      	ldr	r2, [pc, #160]	@ (8001654 <xTaskResumeAll+0x11c>)
 80015b4:	441a      	add	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3304      	adds	r3, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f7ff f84c 	bl	800065a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <xTaskResumeAll+0x120>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d302      	bcc.n	80015d6 <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <xTaskResumeAll+0x124>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <xTaskResumeAll+0x114>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1cc      	bne.n	8001578 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80015e4:	f000 fb16 	bl	8001c14 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <xTaskResumeAll+0x128>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d010      	beq.n	8001616 <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80015f4:	f000 f848 	bl	8001688 <xTaskIncrementTick>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <xTaskResumeAll+0x124>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f1      	bne.n	80015f4 <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <xTaskResumeAll+0x128>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <xTaskResumeAll+0x124>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800161e:	2301      	movs	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <xTaskResumeAll+0x12c>)
 8001624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f3bf 8f4f 	dsb	sy
 800162e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001632:	f001 fbab 	bl	8002d8c <vPortExitCritical>

    return xAlreadyYielded;
 8001636:	68bb      	ldr	r3, [r7, #8]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200001e4 	.word	0x200001e4
 8001644:	08009a10 	.word	0x08009a10
 8001648:	200001bc 	.word	0x200001bc
 800164c:	2000017c 	.word	0x2000017c
 8001650:	200001c4 	.word	0x200001c4
 8001654:	200000e8 	.word	0x200000e8
 8001658:	200000e4 	.word	0x200000e4
 800165c:	200001d0 	.word	0x200001d0
 8001660:	200001cc 	.word	0x200001cc
 8001664:	e000ed04 	.word	0xe000ed04

08001668 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <xTaskGetTickCount+0x1c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200001c0 	.word	0x200001c0

08001688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001692:	4b4b      	ldr	r3, [pc, #300]	@ (80017c0 <xTaskIncrementTick+0x138>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 8088 	bne.w	80017ac <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800169c:	4b49      	ldr	r3, [pc, #292]	@ (80017c4 <xTaskIncrementTick+0x13c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80016a4:	4a47      	ldr	r2, [pc, #284]	@ (80017c4 <xTaskIncrementTick+0x13c>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d11a      	bne.n	80016e6 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 80016b0:	4b45      	ldr	r3, [pc, #276]	@ (80017c8 <xTaskIncrementTick+0x140>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <xTaskIncrementTick+0x3c>
 80016ba:	4944      	ldr	r1, [pc, #272]	@ (80017cc <xTaskIncrementTick+0x144>)
 80016bc:	f640 20c7 	movw	r0, #2759	@ 0xac7
 80016c0:	f002 fa6e 	bl	8003ba0 <vAssertCalled>
 80016c4:	4b40      	ldr	r3, [pc, #256]	@ (80017c8 <xTaskIncrementTick+0x140>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <xTaskIncrementTick+0x148>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a3e      	ldr	r2, [pc, #248]	@ (80017c8 <xTaskIncrementTick+0x140>)
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4a3f      	ldr	r2, [pc, #252]	@ (80017d0 <xTaskIncrementTick+0x148>)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <xTaskIncrementTick+0x14c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a3d      	ldr	r2, [pc, #244]	@ (80017d4 <xTaskIncrementTick+0x14c>)
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	f000 fa97 	bl	8001c14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80016e6:	4b3c      	ldr	r3, [pc, #240]	@ (80017d8 <xTaskIncrementTick+0x150>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d348      	bcc.n	8001782 <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016f0:	4b35      	ldr	r3, [pc, #212]	@ (80017c8 <xTaskIncrementTick+0x140>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d104      	bne.n	8001704 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016fa:	4b37      	ldr	r3, [pc, #220]	@ (80017d8 <xTaskIncrementTick+0x150>)
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	601a      	str	r2, [r3, #0]
                    break;
 8001702:	e03e      	b.n	8001782 <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001704:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <xTaskIncrementTick+0x140>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	d203      	bcs.n	8001724 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800171c:	4a2e      	ldr	r2, [pc, #184]	@ (80017d8 <xTaskIncrementTick+0x150>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001722:	e02e      	b.n	8001782 <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3304      	adds	r3, #4
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fff3 	bl	8000714 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3318      	adds	r3, #24
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ffea 	bl	8000714 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001744:	2201      	movs	r2, #1
 8001746:	409a      	lsls	r2, r3
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <xTaskIncrementTick+0x154>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4313      	orrs	r3, r2
 800174e:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <xTaskIncrementTick+0x154>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <xTaskIncrementTick+0x158>)
 8001760:	441a      	add	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3304      	adds	r3, #4
 8001766:	4619      	mov	r1, r3
 8001768:	4610      	mov	r0, r2
 800176a:	f7fe ff76 	bl	800065a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <xTaskIncrementTick+0x15c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	429a      	cmp	r2, r3
 800177a:	d3b9      	bcc.n	80016f0 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 800177c:	2301      	movs	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001780:	e7b6      	b.n	80016f0 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <xTaskIncrementTick+0x15c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001788:	4915      	ldr	r1, [pc, #84]	@ (80017e0 <xTaskIncrementTick+0x158>)
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d901      	bls.n	800179e <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 800179a:	2301      	movs	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <xTaskIncrementTick+0x160>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e004      	b.n	80017b6 <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <xTaskIncrementTick+0x164>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <xTaskIncrementTick+0x164>)
 80017b4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80017b6:	697b      	ldr	r3, [r7, #20]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200001e4 	.word	0x200001e4
 80017c4:	200001c0 	.word	0x200001c0
 80017c8:	20000174 	.word	0x20000174
 80017cc:	08009a10 	.word	0x08009a10
 80017d0:	20000178 	.word	0x20000178
 80017d4:	200001d4 	.word	0x200001d4
 80017d8:	200001dc 	.word	0x200001dc
 80017dc:	200001c4 	.word	0x200001c4
 80017e0:	200000e8 	.word	0x200000e8
 80017e4:	200000e4 	.word	0x200000e4
 80017e8:	200001d0 	.word	0x200001d0
 80017ec:	200001cc 	.word	0x200001cc

080017f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017f6:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <vTaskSwitchContext+0x94>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017fe:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <vTaskSwitchContext+0x98>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001804:	e039      	b.n	800187a <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <vTaskSwitchContext+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <vTaskSwitchContext+0x9c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	f1c3 031f 	rsb	r3, r3, #31
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	491b      	ldr	r1, [pc, #108]	@ (8001890 <vTaskSwitchContext+0xa0>)
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d104      	bne.n	8001840 <vTaskSwitchContext+0x50>
 8001836:	4917      	ldr	r1, [pc, #92]	@ (8001894 <vTaskSwitchContext+0xa4>)
 8001838:	f640 4002 	movw	r0, #3074	@ 0xc02
 800183c:	f002 f9b0 	bl	8003ba0 <vAssertCalled>
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <vTaskSwitchContext+0xa0>)
 800184c:	4413      	add	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3308      	adds	r3, #8
 8001862:	429a      	cmp	r2, r3
 8001864:	d104      	bne.n	8001870 <vTaskSwitchContext+0x80>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <vTaskSwitchContext+0xa8>)
 8001878:	6013      	str	r3, [r2, #0]
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001e4 	.word	0x200001e4
 8001888:	200001d0 	.word	0x200001d0
 800188c:	200001c4 	.word	0x200001c4
 8001890:	200000e8 	.word	0x200000e8
 8001894:	08009a10 	.word	0x08009a10
 8001898:	200000e4 	.word	0x200000e4

0800189c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d104      	bne.n	80018b6 <vTaskPlaceOnEventList+0x1a>
 80018ac:	4909      	ldr	r1, [pc, #36]	@ (80018d4 <vTaskPlaceOnEventList+0x38>)
 80018ae:	f640 401c 	movw	r0, #3100	@ 0xc1c
 80018b2:	f002 f975 	bl	8003ba0 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <vTaskPlaceOnEventList+0x3c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3318      	adds	r3, #24
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7fe feef 	bl	80006a2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018c4:	2101      	movs	r1, #1
 80018c6:	6838      	ldr	r0, [r7, #0]
 80018c8:	f000 fc82 	bl	80021d0 <prvAddCurrentTaskToDelayedList>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	08009a10 	.word	0x08009a10
 80018d8:	200000e4 	.word	0x200000e4

080018dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d104      	bne.n	80018f8 <vTaskPlaceOnEventListRestricted+0x1c>
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <vTaskPlaceOnEventListRestricted+0x48>)
 80018f0:	f640 404b 	movw	r0, #3147	@ 0xc4b
 80018f4:	f002 f954 	bl	8003ba0 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <vTaskPlaceOnEventListRestricted+0x4c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3318      	adds	r3, #24
 80018fe:	4619      	mov	r1, r3
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7fe feaa 	bl	800065a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	f000 fc5b 	bl	80021d0 <prvAddCurrentTaskToDelayedList>
    }
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	08009a10 	.word	0x08009a10
 8001928:	200000e4 	.word	0x200000e4

0800192c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d104      	bne.n	800194c <xTaskRemoveFromEventList+0x20>
 8001942:	4922      	ldr	r1, [pc, #136]	@ (80019cc <xTaskRemoveFromEventList+0xa0>)
 8001944:	f640 407b 	movw	r0, #3195	@ 0xc7b
 8001948:	f002 f92a 	bl	8003ba0 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3318      	adds	r3, #24
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fedf 	bl	8000714 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <xTaskRemoveFromEventList+0xa4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d11c      	bne.n	8001998 <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3304      	adds	r3, #4
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fed6 	bl	8000714 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <xTaskRemoveFromEventList+0xa8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4313      	orrs	r3, r2
 8001976:	4a17      	ldr	r2, [pc, #92]	@ (80019d4 <xTaskRemoveFromEventList+0xa8>)
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <xTaskRemoveFromEventList+0xac>)
 8001988:	441a      	add	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3304      	adds	r3, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f7fe fe62 	bl	800065a <vListInsertEnd>
 8001996:	e005      	b.n	80019a4 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3318      	adds	r3, #24
 800199c:	4619      	mov	r1, r3
 800199e:	480f      	ldr	r0, [pc, #60]	@ (80019dc <xTaskRemoveFromEventList+0xb0>)
 80019a0:	f7fe fe5b 	bl	800065a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a8:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <xTaskRemoveFromEventList+0xb4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d905      	bls.n	80019be <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <xTaskRemoveFromEventList+0xb8>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e001      	b.n	80019c2 <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	08009a10 	.word	0x08009a10
 80019d0:	200001e4 	.word	0x200001e4
 80019d4:	200001c4 	.word	0x200001c4
 80019d8:	200000e8 	.word	0x200000e8
 80019dc:	2000017c 	.word	0x2000017c
 80019e0:	200000e4 	.word	0x200000e4
 80019e4:	200001d0 	.word	0x200001d0

080019e8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <vTaskInternalSetTimeOutState+0x24>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <vTaskInternalSetTimeOutState+0x28>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	605a      	str	r2, [r3, #4]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	200001d4 	.word	0x200001d4
 8001a10:	200001c0 	.word	0x200001c0

08001a14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d104      	bne.n	8001a2e <xTaskCheckForTimeOut+0x1a>
 8001a24:	4926      	ldr	r1, [pc, #152]	@ (8001ac0 <xTaskCheckForTimeOut+0xac>)
 8001a26:	f640 40f6 	movw	r0, #3318	@ 0xcf6
 8001a2a:	f002 f8b9 	bl	8003ba0 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d104      	bne.n	8001a3e <xTaskCheckForTimeOut+0x2a>
 8001a34:	4922      	ldr	r1, [pc, #136]	@ (8001ac0 <xTaskCheckForTimeOut+0xac>)
 8001a36:	f640 40f7 	movw	r0, #3319	@ 0xcf7
 8001a3a:	f002 f8b1 	bl	8003ba0 <vAssertCalled>

    taskENTER_CRITICAL();
 8001a3e:	f001 f97b 	bl	8002d38 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <xTaskCheckForTimeOut+0xb0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	d102      	bne.n	8001a62 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e026      	b.n	8001ab0 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <xTaskCheckForTimeOut+0xb4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d00a      	beq.n	8001a84 <xTaskCheckForTimeOut+0x70>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d305      	bcc.n	8001a84 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e015      	b.n	8001ab0 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d20b      	bcs.n	8001aa6 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad2      	subs	r2, r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa4 	bl	80019e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e004      	b.n	8001ab0 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001ab0:	f001 f96c 	bl	8002d8c <vPortExitCritical>

    return xReturn;
 8001ab4:	697b      	ldr	r3, [r7, #20]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	08009a10 	.word	0x08009a10
 8001ac4:	200001c0 	.word	0x200001c0
 8001ac8:	200001d4 	.word	0x200001d4

08001acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <vTaskMissedYield+0x14>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	200001d0 	.word	0x200001d0

08001ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001aec:	f000 f854 	bl	8001b98 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001af0:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <prvIdleTask+0x2c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d907      	bls.n	8001b08 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <prvIdleTask+0x30>)
 8001afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8001b08:	f002 f842 	bl	8003b90 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8001b0c:	e7ee      	b.n	8001aec <prvIdleTask+0x8>
 8001b0e:	bf00      	nop
 8001b10:	200000e8 	.word	0x200000e8
 8001b14:	e000ed04 	.word	0xe000ed04

08001b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	e00c      	b.n	8001b3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <prvInitialiseTaskLists+0x60>)
 8001b30:	4413      	add	r3, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd64 	bl	8000600 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d9ef      	bls.n	8001b24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b44:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <prvInitialiseTaskLists+0x64>)
 8001b46:	f7fe fd5b 	bl	8000600 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001b4a:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <prvInitialiseTaskLists+0x68>)
 8001b4c:	f7fe fd58 	bl	8000600 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <prvInitialiseTaskLists+0x6c>)
 8001b52:	f7fe fd55 	bl	8000600 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001b56:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <prvInitialiseTaskLists+0x70>)
 8001b58:	f7fe fd52 	bl	8000600 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001b5c:	480b      	ldr	r0, [pc, #44]	@ (8001b8c <prvInitialiseTaskLists+0x74>)
 8001b5e:	f7fe fd4f 	bl	8000600 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <prvInitialiseTaskLists+0x78>)
 8001b64:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <prvInitialiseTaskLists+0x64>)
 8001b66:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <prvInitialiseTaskLists+0x7c>)
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <prvInitialiseTaskLists+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200000e8 	.word	0x200000e8
 8001b7c:	2000014c 	.word	0x2000014c
 8001b80:	20000160 	.word	0x20000160
 8001b84:	2000017c 	.word	0x2000017c
 8001b88:	20000190 	.word	0x20000190
 8001b8c:	200001a8 	.word	0x200001a8
 8001b90:	20000174 	.word	0x20000174
 8001b94:	20000178 	.word	0x20000178

08001b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b9e:	e019      	b.n	8001bd4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001ba0:	f001 f8ca 	bl	8002d38 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ba4:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <prvCheckTasksWaitingTermination+0x50>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fdaf 	bl	8000714 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <prvCheckTasksWaitingTermination+0x54>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bec <prvCheckTasksWaitingTermination+0x54>)
 8001bbe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <prvCheckTasksWaitingTermination+0x58>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <prvCheckTasksWaitingTermination+0x58>)
 8001bc8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001bca:	f001 f8df 	bl	8002d8c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f810 	bl	8001bf4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <prvCheckTasksWaitingTermination+0x58>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e1      	bne.n	8001ba0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000190 	.word	0x20000190
 8001bec:	200001bc 	.word	0x200001bc
 8001bf0:	200001a4 	.word	0x200001a4

08001bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 fa75 	bl	80030f0 <vPortFree>
                vPortFree( pxTCB );
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f001 fa72 	bl	80030f0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <prvResetNextTaskUnblockTime+0x30>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d104      	bne.n	8001c2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <prvResetNextTaskUnblockTime+0x34>)
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c2a:	e005      	b.n	8001c38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <prvResetNextTaskUnblockTime+0x30>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <prvResetNextTaskUnblockTime+0x34>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000174 	.word	0x20000174
 8001c48:	200001dc 	.word	0x200001dc

08001c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <xTaskGetSchedulerState+0x34>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	e008      	b.n	8001c72 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <xTaskGetSchedulerState+0x38>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	e001      	b.n	8001c72 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c72:	687b      	ldr	r3, [r7, #4]
    }
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	200001c8 	.word	0x200001c8
 8001c84:	200001e4 	.word	0x200001e4

08001c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d057      	beq.n	8001d4e <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d58 <xTaskPriorityDisinherit+0xd0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d004      	beq.n	8001cb2 <xTaskPriorityDisinherit+0x2a>
 8001ca8:	492c      	ldr	r1, [pc, #176]	@ (8001d5c <xTaskPriorityDisinherit+0xd4>)
 8001caa:	f241 0056 	movw	r0, #4182	@ 0x1056
 8001cae:	f001 ff77 	bl	8003ba0 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d104      	bne.n	8001cc4 <xTaskPriorityDisinherit+0x3c>
 8001cba:	4928      	ldr	r1, [pc, #160]	@ (8001d5c <xTaskPriorityDisinherit+0xd4>)
 8001cbc:	f241 0057 	movw	r0, #4183	@ 0x1057
 8001cc0:	f001 ff6e 	bl	8003ba0 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d039      	beq.n	8001d4e <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d135      	bne.n	8001d4e <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fd14 	bl	8000714 <uxListRemove>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <xTaskPriorityDisinherit+0xd8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4013      	ands	r3, r2
 8001d04:	4a16      	ldr	r2, [pc, #88]	@ (8001d60 <xTaskPriorityDisinherit+0xd8>)
 8001d06:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	f1c3 0205 	rsb	r2, r3, #5
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	2201      	movs	r2, #1
 8001d22:	409a      	lsls	r2, r3
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <xTaskPriorityDisinherit+0xd8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <xTaskPriorityDisinherit+0xd8>)
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <xTaskPriorityDisinherit+0xdc>)
 8001d3c:	441a      	add	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3304      	adds	r3, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f7fe fc88 	bl	800065a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    }
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200000e4 	.word	0x200000e4
 8001d5c:	08009a10 	.word	0x08009a10
 8001d60:	200001c4 	.word	0x200001c4
 8001d64:	200000e8 	.word	0x200000e8

08001d68 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <xTaskGenericNotifyWait+0x1e>
 8001d7c:	4935      	ldr	r1, [pc, #212]	@ (8001e54 <xTaskGenericNotifyWait+0xec>)
 8001d7e:	f241 20b5 	movw	r0, #4789	@ 0x12b5
 8001d82:	f001 ff0d 	bl	8003ba0 <vAssertCalled>

        taskENTER_CRITICAL();
 8001d86:	f000 ffd7 	bl	8002d38 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001d8a:	4b33      	ldr	r3, [pc, #204]	@ (8001e58 <xTaskGenericNotifyWait+0xf0>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4413      	add	r3, r2
 8001d92:	3354      	adds	r3, #84	@ 0x54
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d022      	beq.n	8001de2 <xTaskGenericNotifyWait+0x7a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <xTaskGenericNotifyWait+0xf0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	3214      	adds	r2, #20
 8001da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	43d2      	mvns	r2, r2
 8001dac:	4011      	ands	r1, r2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	3214      	adds	r2, #20
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <xTaskGenericNotifyWait+0xf0>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3354      	adds	r3, #84	@ 0x54
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <xTaskGenericNotifyWait+0x7a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dca:	2101      	movs	r1, #1
 8001dcc:	6a38      	ldr	r0, [r7, #32]
 8001dce:	f000 f9ff 	bl	80021d0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <xTaskGenericNotifyWait+0xf4>)
 8001dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f3bf 8f4f 	dsb	sy
 8001dde:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001de2:	f000 ffd3 	bl	8002d8c <vPortExitCritical>

        taskENTER_CRITICAL();
 8001de6:	f000 ffa7 	bl	8002d38 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <xTaskGenericNotifyWait+0x98>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <xTaskGenericNotifyWait+0xf0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	3214      	adds	r2, #20
 8001df8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <xTaskGenericNotifyWait+0xf0>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	3354      	adds	r3, #84	@ 0x54
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d002      	beq.n	8001e18 <xTaskGenericNotifyWait+0xb0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e00e      	b.n	8001e36 <xTaskGenericNotifyWait+0xce>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <xTaskGenericNotifyWait+0xf0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	3214      	adds	r2, #20
 8001e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	43d2      	mvns	r2, r2
 8001e28:	4011      	ands	r1, r2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	3214      	adds	r2, #20
 8001e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <xTaskGenericNotifyWait+0xf0>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3354      	adds	r3, #84	@ 0x54
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001e44:	f000 ffa2 	bl	8002d8c <vPortExitCritical>

        return xReturn;
 8001e48:	697b      	ldr	r3, [r7, #20]
    }
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08009a10 	.word	0x08009a10
 8001e58:	200000e4 	.word	0x200000e4
 8001e5c:	e000ed04 	.word	0xe000ed04

08001e60 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <xTaskGenericNotify+0x22>
 8001e78:	4958      	ldr	r1, [pc, #352]	@ (8001fdc <xTaskGenericNotify+0x17c>)
 8001e7a:	f241 300d 	movw	r0, #4877	@ 0x130d
 8001e7e:	f001 fe8f 	bl	8003ba0 <vAssertCalled>
        configASSERT( xTaskToNotify );
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d104      	bne.n	8001e92 <xTaskGenericNotify+0x32>
 8001e88:	4954      	ldr	r1, [pc, #336]	@ (8001fdc <xTaskGenericNotify+0x17c>)
 8001e8a:	f241 300e 	movw	r0, #4878	@ 0x130e
 8001e8e:	f001 fe87 	bl	8003ba0 <vAssertCalled>
        pxTCB = xTaskToNotify;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	61bb      	str	r3, [r7, #24]

        taskENTER_CRITICAL();
 8001e96:	f000 ff4f 	bl	8002d38 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <xTaskGenericNotify+0x4e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	3214      	adds	r2, #20
 8001ea6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eac:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3354      	adds	r3, #84	@ 0x54
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	75fb      	strb	r3, [r7, #23]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3354      	adds	r3, #84	@ 0x54
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d83b      	bhi.n	8001f44 <xTaskGenericNotify+0xe4>
 8001ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed4 <xTaskGenericNotify+0x74>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001f59 	.word	0x08001f59
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	08001f1d 	.word	0x08001f1d
 8001ee4:	08001f2b 	.word	0x08001f2b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	3214      	adds	r2, #20
 8001eee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	ea42 0103 	orr.w	r1, r2, r3
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	3214      	adds	r2, #20
 8001efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f02:	e02c      	b.n	8001f5e <xTaskGenericNotify+0xfe>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	3214      	adds	r2, #20
 8001f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0e:	1c59      	adds	r1, r3, #1
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	3214      	adds	r2, #20
 8001f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f1a:	e020      	b.n	8001f5e <xTaskGenericNotify+0xfe>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	3214      	adds	r2, #20
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f28:	e019      	b.n	8001f5e <xTaskGenericNotify+0xfe>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d006      	beq.n	8001f3e <xTaskGenericNotify+0xde>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	3214      	adds	r2, #20
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001f3c:	e00f      	b.n	8001f5e <xTaskGenericNotify+0xfe>
                        xReturn = pdFAIL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
                    break;
 8001f42:	e00c      	b.n	8001f5e <xTaskGenericNotify+0xfe>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001f44:	4b26      	ldr	r3, [pc, #152]	@ (8001fe0 <xTaskGenericNotify+0x180>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <xTaskGenericNotify+0xfc>
 8001f4c:	4923      	ldr	r1, [pc, #140]	@ (8001fdc <xTaskGenericNotify+0x17c>)
 8001f4e:	f241 3043 	movw	r0, #4931	@ 0x1343
 8001f52:	f001 fe25 	bl	8003ba0 <vAssertCalled>

                    break;
 8001f56:	e001      	b.n	8001f5c <xTaskGenericNotify+0xfc>
                    break;
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <xTaskGenericNotify+0xfe>
                    break;
 8001f5c:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d133      	bne.n	8001fcc <xTaskGenericNotify+0x16c>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	3304      	adds	r3, #4
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fbd3 	bl	8000714 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	2201      	movs	r2, #1
 8001f74:	409a      	lsls	r2, r3
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <xTaskGenericNotify+0x184>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <xTaskGenericNotify+0x184>)
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4a16      	ldr	r2, [pc, #88]	@ (8001fe8 <xTaskGenericNotify+0x188>)
 8001f8e:	441a      	add	r2, r3
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f7fe fb5f 	bl	800065a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <xTaskGenericNotify+0x14e>
 8001fa4:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <xTaskGenericNotify+0x17c>)
 8001fa6:	f241 3052 	movw	r0, #4946	@ 0x1352
 8001faa:	f001 fdf9 	bl	8003ba0 <vAssertCalled>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <xTaskGenericNotify+0x18c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d907      	bls.n	8001fcc <xTaskGenericNotify+0x16c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <xTaskGenericNotify+0x190>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001fcc:	f000 fede 	bl	8002d8c <vPortExitCritical>

        return xReturn;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
    }
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	08009a10 	.word	0x08009a10
 8001fe0:	200001c0 	.word	0x200001c0
 8001fe4:	200001c4 	.word	0x200001c4
 8001fe8:	200000e8 	.word	0x200000e8
 8001fec:	200000e4 	.word	0x200000e4
 8001ff0:	e000ed04 	.word	0xe000ed04

08001ff4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	@ 0x30
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002002:	2301      	movs	r3, #1
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <xTaskGenericNotifyFromISR+0x22>
 800200c:	4968      	ldr	r1, [pc, #416]	@ (80021b0 <xTaskGenericNotifyFromISR+0x1bc>)
 800200e:	f241 308a 	movw	r0, #5002	@ 0x138a
 8002012:	f001 fdc5 	bl	8003ba0 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <xTaskGenericNotifyFromISR+0x32>
 800201c:	4964      	ldr	r1, [pc, #400]	@ (80021b0 <xTaskGenericNotifyFromISR+0x1bc>)
 800201e:	f241 308b 	movw	r0, #5003	@ 0x138b
 8002022:	f001 fdbd 	bl	8003ba0 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002026:	f000 ff61 	bl	8002eec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
        __asm volatile
 800202e:	f3ef 8211 	mrs	r2, BASEPRI
 8002032:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002036:	f383 8811 	msr	BASEPRI, r3
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	61fa      	str	r2, [r7, #28]
 8002044:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8002046:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
        {
            if( pulPreviousNotificationValue != NULL )
 800204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <xTaskGenericNotifyFromISR+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	3214      	adds	r2, #20
 8002056:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800205a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800205c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800205e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4413      	add	r3, r2
 8002064:	3354      	adds	r3, #84	@ 0x54
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800206c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	3354      	adds	r3, #84	@ 0x54
 8002074:	2202      	movs	r2, #2
 8002076:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d83b      	bhi.n	80020f6 <xTaskGenericNotifyFromISR+0x102>
 800207e:	a201      	add	r2, pc, #4	@ (adr r2, 8002084 <xTaskGenericNotifyFromISR+0x90>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	0800210b 	.word	0x0800210b
 8002088:	08002099 	.word	0x08002099
 800208c:	080020b5 	.word	0x080020b5
 8002090:	080020cd 	.word	0x080020cd
 8002094:	080020db 	.word	0x080020db
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	3214      	adds	r2, #20
 800209e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	ea42 0103 	orr.w	r1, r2, r3
 80020a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	3214      	adds	r2, #20
 80020ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80020b2:	e02d      	b.n	8002110 <xTaskGenericNotifyFromISR+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80020b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	3214      	adds	r2, #20
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	1c59      	adds	r1, r3, #1
 80020c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	3214      	adds	r2, #20
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80020ca:	e021      	b.n	8002110 <xTaskGenericNotifyFromISR+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80020cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	3214      	adds	r2, #20
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80020d8:	e01a      	b.n	8002110 <xTaskGenericNotifyFromISR+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80020da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d006      	beq.n	80020f0 <xTaskGenericNotifyFromISR+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80020e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	3214      	adds	r2, #20
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80020ee:	e00f      	b.n	8002110 <xTaskGenericNotifyFromISR+0x11c>
                        xReturn = pdFAIL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 80020f4:	e00c      	b.n	8002110 <xTaskGenericNotifyFromISR+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80020f6:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <xTaskGenericNotifyFromISR+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <xTaskGenericNotifyFromISR+0x11a>
 80020fe:	492c      	ldr	r1, [pc, #176]	@ (80021b0 <xTaskGenericNotifyFromISR+0x1bc>)
 8002100:	f241 30d2 	movw	r0, #5074	@ 0x13d2
 8002104:	f001 fd4c 	bl	8003ba0 <vAssertCalled>
                    break;
 8002108:	e001      	b.n	800210e <xTaskGenericNotifyFromISR+0x11a>
                    break;
 800210a:	bf00      	nop
 800210c:	e000      	b.n	8002110 <xTaskGenericNotifyFromISR+0x11c>
                    break;
 800210e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002114:	2b01      	cmp	r3, #1
 8002116:	d13f      	bne.n	8002198 <xTaskGenericNotifyFromISR+0x1a4>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <xTaskGenericNotifyFromISR+0x136>
 8002120:	4923      	ldr	r1, [pc, #140]	@ (80021b0 <xTaskGenericNotifyFromISR+0x1bc>)
 8002122:	f241 30dd 	movw	r0, #5085	@ 0x13dd
 8002126:	f001 fd3b 	bl	8003ba0 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800212a:	4b23      	ldr	r3, [pc, #140]	@ (80021b8 <xTaskGenericNotifyFromISR+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11c      	bne.n	800216c <xTaskGenericNotifyFromISR+0x178>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002134:	3304      	adds	r3, #4
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe faec 	bl	8000714 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	2201      	movs	r2, #1
 8002142:	409a      	lsls	r2, r3
 8002144:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <xTaskGenericNotifyFromISR+0x1c8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <xTaskGenericNotifyFromISR+0x1c8>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <xTaskGenericNotifyFromISR+0x1cc>)
 800215c:	441a      	add	r2, r3
 800215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002160:	3304      	adds	r3, #4
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7fe fa78 	bl	800065a <vListInsertEnd>
 800216a:	e005      	b.n	8002178 <xTaskGenericNotifyFromISR+0x184>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	3318      	adds	r3, #24
 8002170:	4619      	mov	r1, r3
 8002172:	4814      	ldr	r0, [pc, #80]	@ (80021c4 <xTaskGenericNotifyFromISR+0x1d0>)
 8002174:	f7fe fa71 	bl	800065a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <xTaskGenericNotifyFromISR+0x1d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	429a      	cmp	r2, r3
 8002184:	d908      	bls.n	8002198 <xTaskGenericNotifyFromISR+0x1a4>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <xTaskGenericNotifyFromISR+0x19e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800218c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <xTaskGenericNotifyFromISR+0x1d8>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f383 8811 	msr	BASEPRI, r3
    }
 80021a2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80021a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80021a6:	4618      	mov	r0, r3
 80021a8:	3730      	adds	r7, #48	@ 0x30
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	08009a10 	.word	0x08009a10
 80021b4:	200001c0 	.word	0x200001c0
 80021b8:	200001e4 	.word	0x200001e4
 80021bc:	200001c4 	.word	0x200001c4
 80021c0:	200000e8 	.word	0x200000e8
 80021c4:	2000017c 	.word	0x2000017c
 80021c8:	200000e4 	.word	0x200000e4
 80021cc:	200001d0 	.word	0x200001d0

080021d0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80021da:	4b29      	ldr	r3, [pc, #164]	@ (8002280 <prvAddCurrentTaskToDelayedList+0xb0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021e0:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3304      	adds	r3, #4
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fa94 	bl	8000714 <uxListRemove>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10b      	bne.n	800220a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80021f2:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f8:	2201      	movs	r2, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4013      	ands	r3, r2
 8002206:	4a20      	ldr	r2, [pc, #128]	@ (8002288 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002208:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d10a      	bne.n	8002228 <prvAddCurrentTaskToDelayedList+0x58>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002218:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3304      	adds	r3, #4
 800221e:	4619      	mov	r1, r3
 8002220:	481a      	ldr	r0, [pc, #104]	@ (800228c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002222:	f7fe fa1a 	bl	800065a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002226:	e026      	b.n	8002276 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d209      	bcs.n	8002254 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002240:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3304      	adds	r3, #4
 800224a:	4619      	mov	r1, r3
 800224c:	4610      	mov	r0, r2
 800224e:	f7fe fa28 	bl	80006a2 <vListInsert>
}
 8002252:	e010      	b.n	8002276 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002254:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3304      	adds	r3, #4
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7fe fa1e 	bl	80006a2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	429a      	cmp	r2, r3
 800226e:	d202      	bcs.n	8002276 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002270:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6013      	str	r3, [r2, #0]
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200001c0 	.word	0x200001c0
 8002284:	200000e4 	.word	0x200000e4
 8002288:	200001c4 	.word	0x200001c4
 800228c:	200001a8 	.word	0x200001a8
 8002290:	20000178 	.word	0x20000178
 8002294:	20000174 	.word	0x20000174
 8002298:	200001dc 	.word	0x200001dc

0800229c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80022a6:	f000 fb33 	bl	8002910 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <xTimerCreateTimerTask+0x48>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <xTimerCreateTimerTask+0x4c>)
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2304      	movs	r3, #4
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022c0:	490a      	ldr	r1, [pc, #40]	@ (80022ec <xTimerCreateTimerTask+0x50>)
 80022c2:	480b      	ldr	r0, [pc, #44]	@ (80022f0 <xTimerCreateTimerTask+0x54>)
 80022c4:	f7fe ff9a 	bl	80011fc <xTaskCreate>
 80022c8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <xTimerCreateTimerTask+0x3e>
 80022d0:	4908      	ldr	r1, [pc, #32]	@ (80022f4 <xTimerCreateTimerTask+0x58>)
 80022d2:	f240 100d 	movw	r0, #269	@ 0x10d
 80022d6:	f001 fc63 	bl	8003ba0 <vAssertCalled>
        return xReturn;
 80022da:	687b      	ldr	r3, [r7, #4]
    }
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000218 	.word	0x20000218
 80022e8:	2000021c 	.word	0x2000021c
 80022ec:	08009a94 	.word	0x08009a94
 80022f0:	080024d5 	.word	0x080024d5
 80022f4:	08009a9c 	.word	0x08009a9c

080022f8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002306:	202c      	movs	r0, #44	@ 0x2c
 8002308:	f000 fe24 	bl	8002f54 <pvPortMalloc>
 800230c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00d      	beq.n	8002330 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f806 	bl	800233c <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8002330:	697b      	ldr	r3, [r7, #20]
        }
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <prvInitialiseNewTimer+0x1e>
 8002350:	4915      	ldr	r1, [pc, #84]	@ (80023a8 <prvInitialiseNewTimer+0x6c>)
 8002352:	f240 105f 	movw	r0, #351	@ 0x15f
 8002356:	f001 fc23 	bl	8003ba0 <vAssertCalled>

        if( pxNewTimer != NULL )
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01e      	beq.n	800239e <prvInitialiseNewTimer+0x62>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8002360:	f000 fad6 	bl	8002910 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3304      	adds	r3, #4
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f95d 	bl	8000640 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <prvInitialiseNewTimer+0x62>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	b2da      	uxtb	r2, r3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	08009a9c 	.word	0x08009a9c

080023ac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d104      	bne.n	80023ce <xTimerGenericCommand+0x22>
 80023c4:	491c      	ldr	r1, [pc, #112]	@ (8002438 <xTimerGenericCommand+0x8c>)
 80023c6:	f44f 70c1 	mov.w	r0, #386	@ 0x182
 80023ca:	f001 fbe9 	bl	8003ba0 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80023ce:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <xTimerGenericCommand+0x90>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d02a      	beq.n	800242c <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	dc18      	bgt.n	800241a <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80023e8:	f7ff fc30 	bl	8001c4c <xTaskGetSchedulerState>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d109      	bne.n	8002406 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <xTimerGenericCommand+0x90>)
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	f107 0114 	add.w	r1, r7, #20
 80023fa:	2300      	movs	r3, #0
 80023fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023fe:	f7fe fa8b 	bl	8000918 <xQueueGenericSend>
 8002402:	6278      	str	r0, [r7, #36]	@ 0x24
 8002404:	e012      	b.n	800242c <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002406:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <xTimerGenericCommand+0x90>)
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	f107 0114 	add.w	r1, r7, #20
 800240e:	2300      	movs	r3, #0
 8002410:	2200      	movs	r2, #0
 8002412:	f7fe fa81 	bl	8000918 <xQueueGenericSend>
 8002416:	6278      	str	r0, [r7, #36]	@ 0x24
 8002418:	e008      	b.n	800242c <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <xTimerGenericCommand+0x90>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	f107 0114 	add.w	r1, r7, #20
 8002422:	2300      	movs	r3, #0
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	f7fe fb5f 	bl	8000ae8 <xQueueGenericSendFromISR>
 800242a:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800242e:	4618      	mov	r0, r3
 8002430:	3728      	adds	r7, #40	@ 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	08009a9c 	.word	0x08009a9c
 800243c:	20000218 	.word	0x20000218

08002440 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af02      	add	r7, sp, #8
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800244a:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <prvProcessExpiredTimer+0x8c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3304      	adds	r3, #4
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f95b 	bl	8000714 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01d      	beq.n	80024a8 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	18d1      	adds	r1, r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f8d1 	bl	8002620 <prvInsertTimerInActiveList>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01a      	beq.n	80024ba <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002484:	2300      	movs	r3, #0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2300      	movs	r3, #0
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	2100      	movs	r1, #0
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff ff8c 	bl	80023ac <xTimerGenericCommand>
 8002494:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10e      	bne.n	80024ba <prvProcessExpiredTimer+0x7a>
 800249c:	490c      	ldr	r1, [pc, #48]	@ (80024d0 <prvProcessExpiredTimer+0x90>)
 800249e:	f44f 7005 	mov.w	r0, #532	@ 0x214
 80024a2:	f001 fb7d 	bl	8003ba0 <vAssertCalled>
 80024a6:	e008      	b.n	80024ba <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	4798      	blx	r3
    }
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000210 	.word	0x20000210
 80024d0:	08009a9c 	.word	0x08009a9c

080024d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f859 	bl	8002598 <prvGetNextExpireTime>
 80024e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4619      	mov	r1, r3
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f805 	bl	80024fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80024f2:	f000 f8d7 	bl	80026a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024f6:	bf00      	nop
 80024f8:	e7f0      	b.n	80024dc <prvTimerTask+0x8>
	...

080024fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002506:	f7ff f809 	bl	800151c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800250a:	f107 0308 	add.w	r3, r7, #8
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f866 	bl	80025e0 <prvSampleTimeNow>
 8002514:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d130      	bne.n	800257e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <prvProcessTimerOrBlockTask+0x3c>
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	429a      	cmp	r2, r3
 8002528:	d806      	bhi.n	8002538 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800252a:	f7ff f805 	bl	8001538 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff85 	bl	8002440 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002536:	e024      	b.n	8002582 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800253e:	4b13      	ldr	r3, [pc, #76]	@ (800258c <prvProcessTimerOrBlockTask+0x90>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <prvProcessTimerOrBlockTask+0x50>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <prvProcessTimerOrBlockTask+0x52>
 800254c:	2300      	movs	r3, #0
 800254e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002550:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <prvProcessTimerOrBlockTask+0x94>)
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	4619      	mov	r1, r3
 800255e:	f7fe fe19 	bl	8001194 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002562:	f7fe ffe9 	bl	8001538 <xTaskResumeAll>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <prvProcessTimerOrBlockTask+0x98>)
 800256e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	f3bf 8f6f 	isb	sy
    }
 800257c:	e001      	b.n	8002582 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800257e:	f7fe ffdb 	bl	8001538 <xTaskResumeAll>
    }
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000214 	.word	0x20000214
 8002590:	20000218 	.word	0x20000218
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025a0:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <prvGetNextExpireTime+0x44>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <prvGetNextExpireTime+0x16>
 80025aa:	2201      	movs	r2, #1
 80025ac:	e000      	b.n	80025b0 <prvGetNextExpireTime+0x18>
 80025ae:	2200      	movs	r2, #0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025bc:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <prvGetNextExpireTime+0x44>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e001      	b.n	80025cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80025cc:	68fb      	ldr	r3, [r7, #12]
    }
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000210 	.word	0x20000210

080025e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80025e8:	f7ff f83e 	bl	8001668 <xTaskGetTickCount>
 80025ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <prvSampleTimeNow+0x3c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d205      	bcs.n	8002604 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80025f8:	f000 f92a 	bl	8002850 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e002      	b.n	800260a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800260a:	4a04      	ldr	r2, [pc, #16]	@ (800261c <prvSampleTimeNow+0x3c>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002610:	68fb      	ldr	r3, [r7, #12]
    }
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000220 	.word	0x20000220

08002620 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	d812      	bhi.n	800266c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	1ad2      	subs	r2, r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002654:	2301      	movs	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e01b      	b.n	8002692 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <prvInsertTimerInActiveList+0x7c>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3304      	adds	r3, #4
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f7fe f81c 	bl	80006a2 <vListInsert>
 800266a:	e012      	b.n	8002692 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d206      	bcs.n	8002682 <prvInsertTimerInActiveList+0x62>
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d302      	bcc.n	8002682 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800267c:	2301      	movs	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e007      	b.n	8002692 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002682:	4b07      	ldr	r3, [pc, #28]	@ (80026a0 <prvInsertTimerInActiveList+0x80>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3304      	adds	r3, #4
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f7fe f808 	bl	80006a2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002692:	697b      	ldr	r3, [r7, #20]
    }
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000214 	.word	0x20000214
 80026a0:	20000210 	.word	0x20000210

080026a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	@ 0x30
 80026a8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026aa:	e0bb      	b.n	8002824 <prvProcessReceivedCommands+0x180>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	da13      	bge.n	80026da <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	3304      	adds	r3, #4
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <prvProcessReceivedCommands+0x26>
 80026c0:	4961      	ldr	r1, [pc, #388]	@ (8002848 <prvProcessReceivedCommands+0x1a4>)
 80026c2:	f240 20fa 	movw	r0, #762	@ 0x2fa
 80026c6:	f001 fa6b 	bl	8003ba0 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d0:	6850      	ldr	r0, [r2, #4]
 80026d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f2c0 80a1 	blt.w	8002824 <prvProcessReceivedCommands+0x180>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	3304      	adds	r3, #4
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe f80e 	bl	8000714 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ff70 	bl	80025e0 <prvSampleTimeNow>
 8002700:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b09      	cmp	r3, #9
 8002706:	f200 808a 	bhi.w	800281e <prvProcessReceivedCommands+0x17a>
 800270a:	a201      	add	r2, pc, #4	@ (adr r2, 8002710 <prvProcessReceivedCommands+0x6c>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002739 	.word	0x08002739
 8002714:	08002739 	.word	0x08002739
 8002718:	08002739 	.word	0x08002739
 800271c:	080027a3 	.word	0x080027a3
 8002720:	080027b7 	.word	0x080027b7
 8002724:	080027f5 	.word	0x080027f5
 8002728:	08002739 	.word	0x08002739
 800272c:	08002739 	.word	0x08002739
 8002730:	080027a3 	.word	0x080027a3
 8002734:	080027b7 	.word	0x080027b7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	18d1      	adds	r1, r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	6a38      	ldr	r0, [r7, #32]
 8002758:	f7ff ff62 	bl	8002620 <prvInsertTimerInActiveList>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d05f      	beq.n	8002822 <prvProcessReceivedCommands+0x17e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	6a38      	ldr	r0, [r7, #32]
 8002768:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d054      	beq.n	8002822 <prvProcessReceivedCommands+0x17e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	441a      	add	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2300      	movs	r3, #0
 8002786:	2100      	movs	r1, #0
 8002788:	6a38      	ldr	r0, [r7, #32]
 800278a:	f7ff fe0f 	bl	80023ac <xTimerGenericCommand>
 800278e:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d145      	bne.n	8002822 <prvProcessReceivedCommands+0x17e>
 8002796:	492c      	ldr	r1, [pc, #176]	@ (8002848 <prvProcessReceivedCommands+0x1a4>)
 8002798:	f240 3036 	movw	r0, #822	@ 0x336
 800279c:	f001 fa00 	bl	8003ba0 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80027a0:	e03f      	b.n	8002822 <prvProcessReceivedCommands+0x17e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80027b4:	e036      	b.n	8002824 <prvProcessReceivedCommands+0x180>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <prvProcessReceivedCommands+0x13c>
 80027d6:	491c      	ldr	r1, [pc, #112]	@ (8002848 <prvProcessReceivedCommands+0x1a4>)
 80027d8:	f240 304f 	movw	r0, #847	@ 0x34f
 80027dc:	f001 f9e0 	bl	8003ba0 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	18d1      	adds	r1, r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	6a38      	ldr	r0, [r7, #32]
 80027ee:	f7ff ff17 	bl	8002620 <prvInsertTimerInActiveList>
                        break;
 80027f2:	e017      	b.n	8002824 <prvProcessReceivedCommands+0x180>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8002802:	6a38      	ldr	r0, [r7, #32]
 8002804:	f000 fc74 	bl	80030f0 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002808:	e00c      	b.n	8002824 <prvProcessReceivedCommands+0x180>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	b2da      	uxtb	r2, r3
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800281c:	e002      	b.n	8002824 <prvProcessReceivedCommands+0x180>

                    default:
                        /* Don't expect to get here. */
                        break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <prvProcessReceivedCommands+0x180>
                        break;
 8002822:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002824:	4b09      	ldr	r3, [pc, #36]	@ (800284c <prvProcessReceivedCommands+0x1a8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f107 0108 	add.w	r1, r7, #8
 800282c:	2200      	movs	r2, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe f9ee 	bl	8000c10 <xQueueReceive>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f47f af38 	bne.w	80026ac <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3728      	adds	r7, #40	@ 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	08009a9c 	.word	0x08009a9c
 800284c:	20000218 	.word	0x20000218

08002850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002856:	e042      	b.n	80028de <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002858:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <prvSwitchTimerLists+0xb4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002862:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <prvSwitchTimerLists+0xb4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3304      	adds	r3, #4
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd ff4f 	bl	8000714 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d028      	beq.n	80028de <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	429a      	cmp	r2, r3
 800289c:	d90e      	bls.n	80028bc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028aa:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <prvSwitchTimerLists+0xb4>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3304      	adds	r3, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f7fd fef4 	bl	80006a2 <vListInsert>
 80028ba:	e010      	b.n	80028de <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80028bc:	2300      	movs	r3, #0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2300      	movs	r3, #0
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	2100      	movs	r1, #0
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fd70 	bl	80023ac <xTimerGenericCommand>
 80028cc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d104      	bne.n	80028de <prvSwitchTimerLists+0x8e>
 80028d4:	490c      	ldr	r1, [pc, #48]	@ (8002908 <prvSwitchTimerLists+0xb8>)
 80028d6:	f240 30a9 	movw	r0, #937	@ 0x3a9
 80028da:	f001 f961 	bl	8003ba0 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80028de:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <prvSwitchTimerLists+0xb4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1b7      	bne.n	8002858 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <prvSwitchTimerLists+0xb4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80028ee:	4b07      	ldr	r3, [pc, #28]	@ (800290c <prvSwitchTimerLists+0xbc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a04      	ldr	r2, [pc, #16]	@ (8002904 <prvSwitchTimerLists+0xb4>)
 80028f4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80028f6:	4a05      	ldr	r2, [pc, #20]	@ (800290c <prvSwitchTimerLists+0xbc>)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	6013      	str	r3, [r2, #0]
    }
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000210 	.word	0x20000210
 8002908:	08009a9c 	.word	0x08009a9c
 800290c:	20000214 	.word	0x20000214

08002910 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002914:	f000 fa10 	bl	8002d38 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <prvCheckForValidListAndQueue+0x54>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d11d      	bne.n	800295c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002920:	4811      	ldr	r0, [pc, #68]	@ (8002968 <prvCheckForValidListAndQueue+0x58>)
 8002922:	f7fd fe6d 	bl	8000600 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002926:	4811      	ldr	r0, [pc, #68]	@ (800296c <prvCheckForValidListAndQueue+0x5c>)
 8002928:	f7fd fe6a 	bl	8000600 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <prvCheckForValidListAndQueue+0x60>)
 800292e:	4a0e      	ldr	r2, [pc, #56]	@ (8002968 <prvCheckForValidListAndQueue+0x58>)
 8002930:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002932:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <prvCheckForValidListAndQueue+0x64>)
 8002934:	4a0d      	ldr	r2, [pc, #52]	@ (800296c <prvCheckForValidListAndQueue+0x5c>)
 8002936:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002938:	2200      	movs	r2, #0
 800293a:	2110      	movs	r1, #16
 800293c:	2005      	movs	r0, #5
 800293e:	f7fd ff77 	bl	8000830 <xQueueGenericCreate>
 8002942:	4603      	mov	r3, r0
 8002944:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <prvCheckForValidListAndQueue+0x54>)
 8002946:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <prvCheckForValidListAndQueue+0x54>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <prvCheckForValidListAndQueue+0x54>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4908      	ldr	r1, [pc, #32]	@ (8002978 <prvCheckForValidListAndQueue+0x68>)
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fbf2 	bl	8001140 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800295c:	f000 fa16 	bl	8002d8c <vPortExitCritical>
    }
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000218 	.word	0x20000218
 8002968:	200001e8 	.word	0x200001e8
 800296c:	200001fc 	.word	0x200001fc
 8002970:	20000210 	.word	0x20000210
 8002974:	20000214 	.word	0x20000214
 8002978:	08009b08 	.word	0x08009b08

0800297c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60bb      	str	r3, [r7, #8]

        configASSERT( xTimer );
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d104      	bne.n	8002998 <xTimerIsTimerActive+0x1c>
 800298e:	490d      	ldr	r1, [pc, #52]	@ (80029c4 <xTimerIsTimerActive+0x48>)
 8002990:	f240 30f1 	movw	r0, #1009	@ 0x3f1
 8002994:	f001 f904 	bl	8003ba0 <vAssertCalled>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8002998:	f000 f9ce 	bl	8002d38 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <xTimerIsTimerActive+0x34>
            {
                xReturn = pdFALSE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e001      	b.n	80029b4 <xTimerIsTimerActive+0x38>
            }
            else
            {
                xReturn = pdTRUE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
            }
        }
        taskEXIT_CRITICAL();
 80029b4:	f000 f9ea 	bl	8002d8c <vPortExitCritical>

        return xReturn;
 80029b8:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08009a9c 	.word	0x08009a9c

080029c8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60fb      	str	r3, [r7, #12]
        void * pvReturn;

        configASSERT( xTimer );
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <pvTimerGetTimerID+0x1c>
 80029da:	4908      	ldr	r1, [pc, #32]	@ (80029fc <pvTimerGetTimerID+0x34>)
 80029dc:	f240 400a 	movw	r0, #1034	@ 0x40a
 80029e0:	f001 f8de 	bl	8003ba0 <vAssertCalled>

        taskENTER_CRITICAL();
 80029e4:	f000 f9a8 	bl	8002d38 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80029ee:	f000 f9cd 	bl	8002d8c <vPortExitCritical>

        return pvReturn;
 80029f2:	68bb      	ldr	r3, [r7, #8]
    }
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	08009a9c 	.word	0x08009a9c

08002a00 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3b04      	subs	r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f023 0201 	bic.w	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3b04      	subs	r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a30:	4a0c      	ldr	r2, [pc, #48]	@ (8002a64 <pxPortInitialiseStack+0x64>)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b14      	subs	r3, #20
 8002a3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b04      	subs	r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f06f 0202 	mvn.w	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3b20      	subs	r3, #32
 8002a54:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	08002a69 	.word	0x08002a69

08002a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a72:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <prvTaskExitError+0x44>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d003      	beq.n	8002a84 <prvTaskExitError+0x1c>
 8002a7c:	490c      	ldr	r1, [pc, #48]	@ (8002ab0 <prvTaskExitError+0x48>)
 8002a7e:	20e6      	movs	r0, #230	@ 0xe6
 8002a80:	f001 f88e 	bl	8003ba0 <vAssertCalled>
        __asm volatile
 8002a84:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	607b      	str	r3, [r7, #4]
    }
 8002a96:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a98:	bf00      	nop
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0fc      	beq.n	8002a9a <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	08009b10 	.word	0x08009b10
	...

08002ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ac0:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <pxCurrentTCBConst2>)
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	6808      	ldr	r0, [r1, #0]
 8002ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aca:	f380 8809 	msr	PSP, r0
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f380 8811 	msr	BASEPRI, r0
 8002ada:	4770      	bx	lr
 8002adc:	f3af 8000 	nop.w

08002ae0 <pxCurrentTCBConst2>:
 8002ae0:	200000e4 	.word	0x200000e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop

08002ae8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ae8:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <prvPortStartFirstTask+0x24>)
 8002aea:	6800      	ldr	r0, [r0, #0]
 8002aec:	6800      	ldr	r0, [r0, #0]
 8002aee:	f380 8808 	msr	MSP, r0
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8814 	msr	CONTROL, r0
 8002afa:	b662      	cpsie	i
 8002afc:	b661      	cpsie	f
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	df00      	svc	0
 8002b08:	bf00      	nop
 8002b0a:	0000      	.short	0x0000
 8002b0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop

08002b14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b1a:	4b42      	ldr	r3, [pc, #264]	@ (8002c24 <xPortStartScheduler+0x110>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a42      	ldr	r2, [pc, #264]	@ (8002c28 <xPortStartScheduler+0x114>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d104      	bne.n	8002b2e <xPortStartScheduler+0x1a>
 8002b24:	4941      	ldr	r1, [pc, #260]	@ (8002c2c <xPortStartScheduler+0x118>)
 8002b26:	f240 102d 	movw	r0, #301	@ 0x12d
 8002b2a:	f001 f839 	bl	8003ba0 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c24 <xPortStartScheduler+0x110>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3f      	ldr	r2, [pc, #252]	@ (8002c30 <xPortStartScheduler+0x11c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d104      	bne.n	8002b42 <xPortStartScheduler+0x2e>
 8002b38:	493c      	ldr	r1, [pc, #240]	@ (8002c2c <xPortStartScheduler+0x118>)
 8002b3a:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 8002b3e:	f001 f82f 	bl	8003ba0 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b42:	4b3c      	ldr	r3, [pc, #240]	@ (8002c34 <xPortStartScheduler+0x120>)
 8002b44:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	22ff      	movs	r2, #255	@ 0xff
 8002b52:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b34      	ldr	r3, [pc, #208]	@ (8002c38 <xPortStartScheduler+0x124>)
 8002b68:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b6a:	4b34      	ldr	r3, [pc, #208]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b70:	e009      	b.n	8002b86 <xPortStartScheduler+0x72>
            {
                ulMaxPRIGROUPValue--;
 8002b72:	4b32      	ldr	r3, [pc, #200]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	4a30      	ldr	r2, [pc, #192]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002b7a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8e:	2b80      	cmp	r3, #128	@ 0x80
 8002b90:	d0ef      	beq.n	8002b72 <xPortStartScheduler+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002b92:	4b2a      	ldr	r3, [pc, #168]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d004      	beq.n	8002ba8 <xPortStartScheduler+0x94>
 8002b9e:	4923      	ldr	r1, [pc, #140]	@ (8002c2c <xPortStartScheduler+0x118>)
 8002ba0:	f240 1057 	movw	r0, #343	@ 0x157
 8002ba4:	f000 fffc 	bl	8003ba0 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ba8:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1c3 0307 	rsb	r3, r3, #7
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d004      	beq.n	8002bbe <xPortStartScheduler+0xaa>
 8002bb4:	491d      	ldr	r1, [pc, #116]	@ (8002c2c <xPortStartScheduler+0x118>)
 8002bb6:	f44f 70b0 	mov.w	r0, #352	@ 0x160
 8002bba:	f000 fff1 	bl	8003ba0 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002bc6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c3c <xPortStartScheduler+0x128>)
 8002bd2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bdc:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <xPortStartScheduler+0x12c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <xPortStartScheduler+0x12c>)
 8002be2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002be8:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <xPortStartScheduler+0x12c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <xPortStartScheduler+0x12c>)
 8002bee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002bf2:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bf4:	f000 f94a 	bl	8002e8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <xPortStartScheduler+0x130>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bfe:	f000 f969 	bl	8002ed4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c02:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <xPortStartScheduler+0x134>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a10      	ldr	r2, [pc, #64]	@ (8002c48 <xPortStartScheduler+0x134>)
 8002c08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002c0c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c0e:	f7ff ff6b 	bl	8002ae8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c12:	f7fe fded 	bl	80017f0 <vTaskSwitchContext>
    prvTaskExitError();
 8002c16:	f7ff ff27 	bl	8002a68 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	e000ed00 	.word	0xe000ed00
 8002c28:	410fc271 	.word	0x410fc271
 8002c2c:	08009b10 	.word	0x08009b10
 8002c30:	410fc270 	.word	0x410fc270
 8002c34:	e000e400 	.word	0xe000e400
 8002c38:	20000224 	.word	0x20000224
 8002c3c:	20000228 	.word	0x20000228
 8002c40:	e000ed20 	.word	0xe000ed20
 8002c44:	20000004 	.word	0x20000004
 8002c48:	e000ef34 	.word	0xe000ef34

08002c4c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c52:	4b32      	ldr	r3, [pc, #200]	@ (8002d1c <vInitPrioGroupValue+0xd0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a32      	ldr	r2, [pc, #200]	@ (8002d20 <vInitPrioGroupValue+0xd4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d104      	bne.n	8002c66 <vInitPrioGroupValue+0x1a>
 8002c5c:	4931      	ldr	r1, [pc, #196]	@ (8002d24 <vInitPrioGroupValue+0xd8>)
 8002c5e:	f240 109b 	movw	r0, #411	@ 0x19b
 8002c62:	f000 ff9d 	bl	8003ba0 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c66:	4b2d      	ldr	r3, [pc, #180]	@ (8002d1c <vInitPrioGroupValue+0xd0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d28 <vInitPrioGroupValue+0xdc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d104      	bne.n	8002c7a <vInitPrioGroupValue+0x2e>
 8002c70:	492c      	ldr	r1, [pc, #176]	@ (8002d24 <vInitPrioGroupValue+0xd8>)
 8002c72:	f44f 70ce 	mov.w	r0, #412	@ 0x19c
 8002c76:	f000 ff93 	bl	8003ba0 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d2c <vInitPrioGroupValue+0xe0>)
 8002c7c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	22ff      	movs	r2, #255	@ 0xff
 8002c8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <vInitPrioGroupValue+0xe4>)
 8002ca0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ca2:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ca8:	e009      	b.n	8002cbe <vInitPrioGroupValue+0x72>
            {
                ulMaxPRIGROUPValue--;
 8002caa:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	4a20      	ldr	r2, [pc, #128]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002cb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d0ef      	beq.n	8002caa <vInitPrioGroupValue+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002cca:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d004      	beq.n	8002ce0 <vInitPrioGroupValue+0x94>
 8002cd6:	4913      	ldr	r1, [pc, #76]	@ (8002d24 <vInitPrioGroupValue+0xd8>)
 8002cd8:	f240 10c5 	movw	r0, #453	@ 0x1c5
 8002cdc:	f000 ff60 	bl	8003ba0 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ce0:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1c3 0307 	rsb	r3, r3, #7
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d004      	beq.n	8002cf6 <vInitPrioGroupValue+0xaa>
 8002cec:	490d      	ldr	r1, [pc, #52]	@ (8002d24 <vInitPrioGroupValue+0xd8>)
 8002cee:	f44f 70e7 	mov.w	r0, #462	@ 0x1ce
 8002cf2:	f000 ff55 	bl	8003ba0 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002cfe:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d08:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <vInitPrioGroupValue+0xe8>)
 8002d0a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	e000ed00 	.word	0xe000ed00
 8002d20:	410fc271 	.word	0x410fc271
 8002d24:	08009b10 	.word	0x08009b10
 8002d28:	410fc270 	.word	0x410fc270
 8002d2c:	e000e400 	.word	0xe000e400
 8002d30:	20000224 	.word	0x20000224
 8002d34:	20000228 	.word	0x20000228

08002d38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d3e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	607b      	str	r3, [r7, #4]
    }
 8002d50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <vPortEnterCritical+0x48>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a09      	ldr	r2, [pc, #36]	@ (8002d80 <vPortEnterCritical+0x48>)
 8002d5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d5c:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <vPortEnterCritical+0x48>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d109      	bne.n	8002d78 <vPortEnterCritical+0x40>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d64:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <vPortEnterCritical+0x4c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <vPortEnterCritical+0x40>
 8002d6e:	4906      	ldr	r1, [pc, #24]	@ (8002d88 <vPortEnterCritical+0x50>)
 8002d70:	f44f 70f9 	mov.w	r0, #498	@ 0x1f2
 8002d74:	f000 ff14 	bl	8003ba0 <vAssertCalled>
    }
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000004 	.word	0x20000004
 8002d84:	e000ed04 	.word	0xe000ed04
 8002d88:	08009b10 	.word	0x08009b10

08002d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <vPortExitCritical+0x40>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <vPortExitCritical+0x18>
 8002d9a:	490d      	ldr	r1, [pc, #52]	@ (8002dd0 <vPortExitCritical+0x44>)
 8002d9c:	f240 10f9 	movw	r0, #505	@ 0x1f9
 8002da0:	f000 fefe 	bl	8003ba0 <vAssertCalled>
    uxCriticalNesting--;
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <vPortExitCritical+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	4a08      	ldr	r2, [pc, #32]	@ (8002dcc <vPortExitCritical+0x40>)
 8002dac:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002dae:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <vPortExitCritical+0x40>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <vPortExitCritical+0x36>
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
        __asm volatile
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f383 8811 	msr	BASEPRI, r3
    }
 8002dc0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	08009b10 	.word	0x08009b10
	...

08002de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002de0:	f3ef 8009 	mrs	r0, PSP
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <pxCurrentTCBConst>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f01e 0f10 	tst.w	lr, #16
 8002df0:	bf08      	it	eq
 8002df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e00:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8002e04:	f380 8811 	msr	BASEPRI, r0
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f7fe fcee 	bl	80017f0 <vTaskSwitchContext>
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f380 8811 	msr	BASEPRI, r0
 8002e1c:	bc09      	pop	{r0, r3}
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	6808      	ldr	r0, [r1, #0]
 8002e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e26:	f01e 0f10 	tst.w	lr, #16
 8002e2a:	bf08      	it	eq
 8002e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e30:	f380 8809 	msr	PSP, r0
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst>:
 8002e40:	200000e4 	.word	0x200000e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e4e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	607b      	str	r3, [r7, #4]
    }
 8002e60:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e62:	f7fe fc11 	bl	8001688 <xTaskIncrementTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <SysTick_Handler+0x40>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f383 8811 	msr	BASEPRI, r3
    }
 8002e7e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <vPortSetupTimerInterrupt+0x38>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <vPortSetupTimerInterrupt+0x3c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <vPortSetupTimerInterrupt+0x40>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	4a09      	ldr	r2, [pc, #36]	@ (8002ed0 <vPortSetupTimerInterrupt+0x44>)
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eae:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010
 8002ec4:	e000e018 	.word	0xe000e018
 8002ec8:	2000001c 	.word	0x2000001c
 8002ecc:	10624dd3 	.word	0x10624dd3
 8002ed0:	e000e014 	.word	0xe000e014

08002ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002ee4 <vPortEnableVFP+0x10>
 8002ed8:	6801      	ldr	r1, [r0, #0]
 8002eda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002ede:	6001      	str	r1, [r0, #0]
 8002ee0:	4770      	bx	lr
 8002ee2:	0000      	.short	0x0000
 8002ee4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop

08002eec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002ef2:	f3ef 8305 	mrs	r3, IPSR
 8002ef6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	d90e      	bls.n	8002f1c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <vPortValidateInterruptPriority+0x54>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f08:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <vPortValidateInterruptPriority+0x58>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d204      	bcs.n	8002f1c <vPortValidateInterruptPriority+0x30>
 8002f12:	490d      	ldr	r1, [pc, #52]	@ (8002f48 <vPortValidateInterruptPriority+0x5c>)
 8002f14:	f44f 7054 	mov.w	r0, #848	@ 0x350
 8002f18:	f000 fe42 	bl	8003ba0 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <vPortValidateInterruptPriority+0x60>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f24:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <vPortValidateInterruptPriority+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d904      	bls.n	8002f36 <vPortValidateInterruptPriority+0x4a>
 8002f2c:	4906      	ldr	r1, [pc, #24]	@ (8002f48 <vPortValidateInterruptPriority+0x5c>)
 8002f2e:	f44f 7058 	mov.w	r0, #864	@ 0x360
 8002f32:	f000 fe35 	bl	8003ba0 <vAssertCalled>
    }
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e3f0 	.word	0xe000e3f0
 8002f44:	20000224 	.word	0x20000224
 8002f48:	08009b10 	.word	0x08009b10
 8002f4c:	e000ed0c 	.word	0xe000ed0c
 8002f50:	20000228 	.word	0x20000228

08002f54 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002f60:	f7fe fadc 	bl	800151c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f64:	4b5b      	ldr	r3, [pc, #364]	@ (80030d4 <pvPortMalloc+0x180>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f6c:	f000 f918 	bl	80031a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f70:	4b59      	ldr	r3, [pc, #356]	@ (80030d8 <pvPortMalloc+0x184>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f040 809a 	bne.w	80030b2 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d027      	beq.n	8002fd4 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002f84:	2208      	movs	r2, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d221      	bcs.n	8002fd4 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8002f90:	2208      	movs	r2, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01b      	beq.n	8002fda <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f023 0307 	bic.w	r3, r3, #7
 8002fa8:	3308      	adds	r3, #8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d20e      	bcs.n	8002fce <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f023 0307 	bic.w	r3, r3, #7
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <pvPortMalloc+0x86>
 8002fc4:	4945      	ldr	r1, [pc, #276]	@ (80030dc <pvPortMalloc+0x188>)
 8002fc6:	209a      	movs	r0, #154	@ 0x9a
 8002fc8:	f000 fdea 	bl	8003ba0 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fcc:	e005      	b.n	8002fda <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fd2:	e002      	b.n	8002fda <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	e000      	b.n	8002fdc <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fda:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d067      	beq.n	80030b2 <pvPortMalloc+0x15e>
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80030e0 <pvPortMalloc+0x18c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d862      	bhi.n	80030b2 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002fec:	4b3d      	ldr	r3, [pc, #244]	@ (80030e4 <pvPortMalloc+0x190>)
 8002fee:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8002ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80030e4 <pvPortMalloc+0x190>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ff6:	e004      	b.n	8003002 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d903      	bls.n	8003014 <pvPortMalloc+0xc0>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f1      	bne.n	8002ff8 <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003014:	4b2f      	ldr	r3, [pc, #188]	@ (80030d4 <pvPortMalloc+0x180>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	429a      	cmp	r2, r3
 800301c:	d049      	beq.n	80030b2 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2208      	movs	r2, #8
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad2      	subs	r2, r2, r3
 8003038:	2308      	movs	r3, #8
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	429a      	cmp	r2, r3
 800303e:	d918      	bls.n	8003072 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <pvPortMalloc+0x106>
 8003052:	4922      	ldr	r1, [pc, #136]	@ (80030dc <pvPortMalloc+0x188>)
 8003054:	20cd      	movs	r0, #205	@ 0xcd
 8003056:	f000 fda3 	bl	8003ba0 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad2      	subs	r2, r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800306c:	68b8      	ldr	r0, [r7, #8]
 800306e:	f000 f8f9 	bl	8003264 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003072:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <pvPortMalloc+0x18c>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <pvPortMalloc+0x18c>)
 800307e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003080:	4b17      	ldr	r3, [pc, #92]	@ (80030e0 <pvPortMalloc+0x18c>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b18      	ldr	r3, [pc, #96]	@ (80030e8 <pvPortMalloc+0x194>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d203      	bcs.n	8003094 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800308c:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <pvPortMalloc+0x18c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a15      	ldr	r2, [pc, #84]	@ (80030e8 <pvPortMalloc+0x194>)
 8003092:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <pvPortMalloc+0x184>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	431a      	orrs	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030a8:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <pvPortMalloc+0x198>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a0f      	ldr	r2, [pc, #60]	@ (80030ec <pvPortMalloc+0x198>)
 80030b0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030b2:	f7fe fa41 	bl	8001538 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <pvPortMalloc+0x176>
 80030c0:	4906      	ldr	r1, [pc, #24]	@ (80030dc <pvPortMalloc+0x188>)
 80030c2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80030c6:	f000 fd6b 	bl	8003ba0 <vAssertCalled>
    return pvReturn;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	2000ba34 	.word	0x2000ba34
 80030d8:	2000ba48 	.word	0x2000ba48
 80030dc:	08009b90 	.word	0x08009b90
 80030e0:	2000ba38 	.word	0x2000ba38
 80030e4:	2000ba2c 	.word	0x2000ba2c
 80030e8:	2000ba3c 	.word	0x2000ba3c
 80030ec:	2000ba40 	.word	0x2000ba40

080030f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d041      	beq.n	8003186 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003102:	2308      	movs	r3, #8
 8003104:	425b      	negs	r3, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <vPortFree+0xa0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <vPortFree+0x38>
 800311e:	491d      	ldr	r1, [pc, #116]	@ (8003194 <vPortFree+0xa4>)
 8003120:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8003124:	f000 fd3c 	bl	8003ba0 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <vPortFree+0x4a>
 8003130:	4918      	ldr	r1, [pc, #96]	@ (8003194 <vPortFree+0xa4>)
 8003132:	f240 1023 	movw	r0, #291	@ 0x123
 8003136:	f000 fd33 	bl	8003ba0 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <vPortFree+0xa0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01e      	beq.n	8003186 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11a      	bne.n	8003186 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4b0e      	ldr	r3, [pc, #56]	@ (8003190 <vPortFree+0xa0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	43db      	mvns	r3, r3
 800315a:	401a      	ands	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003160:	f7fe f9dc 	bl	800151c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <vPortFree+0xa8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4413      	add	r3, r2
 800316e:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <vPortFree+0xa8>)
 8003170:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	f000 f876 	bl	8003264 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003178:	4b08      	ldr	r3, [pc, #32]	@ (800319c <vPortFree+0xac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	4a07      	ldr	r2, [pc, #28]	@ (800319c <vPortFree+0xac>)
 8003180:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003182:	f7fe f9d9 	bl	8001538 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000ba48 	.word	0x2000ba48
 8003194:	08009b90 	.word	0x08009b90
 8003198:	2000ba38 	.word	0x2000ba38
 800319c:	2000ba44 	.word	0x2000ba44

080031a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031a6:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80031aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80031ac:	4b27      	ldr	r3, [pc, #156]	@ (800324c <prvHeapInit+0xac>)
 80031ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00c      	beq.n	80031d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3307      	adds	r3, #7
 80031be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0307 	bic.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	4a1f      	ldr	r2, [pc, #124]	@ (800324c <prvHeapInit+0xac>)
 80031d0:	4413      	add	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003250 <prvHeapInit+0xb0>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80031de:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <prvHeapInit+0xb0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80031ec:	2208      	movs	r2, #8
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0307 	bic.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a15      	ldr	r2, [pc, #84]	@ (8003254 <prvHeapInit+0xb4>)
 8003200:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003202:	4b14      	ldr	r3, [pc, #80]	@ (8003254 <prvHeapInit+0xb4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2200      	movs	r2, #0
 8003208:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800320a:	4b12      	ldr	r3, [pc, #72]	@ (8003254 <prvHeapInit+0xb4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <prvHeapInit+0xb4>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <prvHeapInit+0xb8>)
 800322e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a09      	ldr	r2, [pc, #36]	@ (800325c <prvHeapInit+0xbc>)
 8003236:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <prvHeapInit+0xc0>)
 800323a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800323e:	601a      	str	r2, [r3, #0]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	2000022c 	.word	0x2000022c
 8003250:	2000ba2c 	.word	0x2000ba2c
 8003254:	2000ba34 	.word	0x2000ba34
 8003258:	2000ba3c 	.word	0x2000ba3c
 800325c:	2000ba38 	.word	0x2000ba38
 8003260:	2000ba48 	.word	0x2000ba48

08003264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800326c:	4b28      	ldr	r3, [pc, #160]	@ (8003310 <prvInsertBlockIntoFreeList+0xac>)
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e002      	b.n	8003278 <prvInsertBlockIntoFreeList+0x14>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d8f7      	bhi.n	8003272 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4413      	add	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d108      	bne.n	80032a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	441a      	add	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d118      	bne.n	80032ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <prvInsertBlockIntoFreeList+0xb0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d00d      	beq.n	80032e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	441a      	add	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e008      	b.n	80032f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <prvInsertBlockIntoFreeList+0xb0>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e003      	b.n	80032f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d002      	beq.n	8003302 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000ba2c 	.word	0x2000ba2c
 8003314:	2000ba34 	.word	0x2000ba34

08003318 <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af02      	add	r7, sp, #8
	for (int i=0;i<4;i++)
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	e00e      	b.n	8003342 <led_effect_stop+0x2a>
		{
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 8003324:	4a12      	ldr	r2, [pc, #72]	@ (8003370 <led_effect_stop+0x58>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	2300      	movs	r3, #0
 8003334:	2200      	movs	r2, #0
 8003336:	2103      	movs	r1, #3
 8003338:	f7ff f838 	bl	80023ac <xTimerGenericCommand>
	for (int i=0;i<4;i++)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b03      	cmp	r3, #3
 8003346:	dded      	ble.n	8003324 <led_effect_stop+0xc>
		}
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003348:	2200      	movs	r2, #0
 800334a:	2101      	movs	r1, #1
 800334c:	4809      	ldr	r0, [pc, #36]	@ (8003374 <led_effect_stop+0x5c>)
 800334e:	f001 ff71 	bl	8005234 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003352:	2200      	movs	r2, #0
 8003354:	2180      	movs	r1, #128	@ 0x80
 8003356:	4807      	ldr	r0, [pc, #28]	@ (8003374 <led_effect_stop+0x5c>)
 8003358:	f001 ff6c 	bl	8005234 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003362:	4804      	ldr	r0, [pc, #16]	@ (8003374 <led_effect_stop+0x5c>)
 8003364:	f001 ff66 	bl	8005234 <HAL_GPIO_WritePin>

}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	2000bb1c 	.word	0x2000bb1c
 8003374:	40020400 	.word	0x40020400

08003378 <led_effect>:

void led_effect(uint8_t n)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b085      	sub	sp, #20
 800337c:	af02      	add	r7, sp, #8
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]

	led_effect_stop();
 8003382:	f7ff ffc9 	bl	8003318 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1],portMAX_DELAY);
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	3b01      	subs	r3, #1
 800338a:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <led_effect+0x38>)
 800338c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003390:	f7fe f96a 	bl	8001668 <xTaskGetTickCount>
 8003394:	4602      	mov	r2, r0
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	2101      	movs	r1, #1
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff f803 	bl	80023ac <xTimerGenericCommand>

}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000bb1c 	.word	0x2000bb1c

080033b4 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80033b8:	2201      	movs	r2, #1
 80033ba:	2101      	movs	r1, #1
 80033bc:	4807      	ldr	r0, [pc, #28]	@ (80033dc <turn_on_all_leds+0x28>)
 80033be:	f001 ff39 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80033c2:	2201      	movs	r2, #1
 80033c4:	2180      	movs	r1, #128	@ 0x80
 80033c6:	4805      	ldr	r0, [pc, #20]	@ (80033dc <turn_on_all_leds+0x28>)
 80033c8:	f001 ff34 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80033cc:	2201      	movs	r2, #1
 80033ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033d2:	4802      	ldr	r0, [pc, #8]	@ (80033dc <turn_on_all_leds+0x28>)
 80033d4:	f001 ff2e 	bl	8005234 <HAL_GPIO_WritePin>
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40020400 	.word	0x40020400

080033e0 <turn_off_all_leds>:

void turn_off_all_leds (void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2101      	movs	r1, #1
 80033e8:	4807      	ldr	r0, [pc, #28]	@ (8003408 <turn_off_all_leds+0x28>)
 80033ea:	f001 ff23 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2180      	movs	r1, #128	@ 0x80
 80033f2:	4805      	ldr	r0, [pc, #20]	@ (8003408 <turn_off_all_leds+0x28>)
 80033f4:	f001 ff1e 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033fe:	4802      	ldr	r0, [pc, #8]	@ (8003408 <turn_off_all_leds+0x28>)
 8003400:	f001 ff18 	bl	8005234 <HAL_GPIO_WritePin>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40020400 	.word	0x40020400

0800340c <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LED1,GPIO_PIN_SET);
 8003410:	2201      	movs	r2, #1
 8003412:	2101      	movs	r1, #1
 8003414:	4807      	ldr	r0, [pc, #28]	@ (8003434 <turn_on_odd_leds+0x28>)
 8003416:	f001 ff0d 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LED2,GPIO_PIN_RESET);
 800341a:	2200      	movs	r2, #0
 800341c:	2180      	movs	r1, #128	@ 0x80
 800341e:	4805      	ldr	r0, [pc, #20]	@ (8003434 <turn_on_odd_leds+0x28>)
 8003420:	f001 ff08 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED3,GPIO_PIN_SET);
 8003424:	2201      	movs	r2, #1
 8003426:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800342a:	4802      	ldr	r0, [pc, #8]	@ (8003434 <turn_on_odd_leds+0x28>)
 800342c:	f001 ff02 	bl	8005234 <HAL_GPIO_WritePin>

}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40020400 	.word	0x40020400

08003438 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LED1,GPIO_PIN_RESET);
 800343c:	2200      	movs	r2, #0
 800343e:	2101      	movs	r1, #1
 8003440:	4807      	ldr	r0, [pc, #28]	@ (8003460 <turn_on_even_leds+0x28>)
 8003442:	f001 fef7 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LED2,GPIO_PIN_SET);
 8003446:	2201      	movs	r2, #1
 8003448:	2180      	movs	r1, #128	@ 0x80
 800344a:	4805      	ldr	r0, [pc, #20]	@ (8003460 <turn_on_even_leds+0x28>)
 800344c:	f001 fef2 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED3,GPIO_PIN_RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003456:	4802      	ldr	r0, [pc, #8]	@ (8003460 <turn_on_even_leds+0x28>)
 8003458:	f001 feec 	bl	8005234 <HAL_GPIO_WritePin>

}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40020400 	.word	0x40020400

08003464 <LED_control>:
void LED_control( int value )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 3 ; i++)
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e015      	b.n	800349e <LED_control+0x3a>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, (LED1 << 7*i), ((value==i)&0x1));
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	2201      	movs	r2, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	b299      	uxth	r1, r3
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	429a      	cmp	r2, r3
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	4807      	ldr	r0, [pc, #28]	@ (80034b0 <LED_control+0x4c>)
 8003494:	f001 fece 	bl	8005234 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 3 ; i++)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	dde6      	ble.n	8003472 <LED_control+0xe>
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40020400 	.word	0x40020400

080034b4 <LED_effect1>:



void LED_effect1(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag^=1) ? turn_on_all_leds():turn_off_all_leds();
 80034b8:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <LED_effect1+0x28>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	4a06      	ldr	r2, [pc, #24]	@ (80034dc <LED_effect1+0x28>)
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <LED_effect1+0x28>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <LED_effect1+0x1e>
 80034cc:	f7ff ff72 	bl	80033b4 <turn_on_all_leds>
}
 80034d0:	e001      	b.n	80034d6 <LED_effect1+0x22>
	(flag^=1) ? turn_on_all_leds():turn_off_all_leds();
 80034d2:	f7ff ff85 	bl	80033e0 <turn_off_all_leds>
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000008 	.word	0x20000008

080034e0 <LED_effect2>:

void LED_effect2(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80034e4:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <LED_effect2+0x28>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f083 0301 	eor.w	r3, r3, #1
 80034ec:	4a06      	ldr	r2, [pc, #24]	@ (8003508 <LED_effect2+0x28>)
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <LED_effect2+0x28>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <LED_effect2+0x1e>
 80034f8:	f7ff ff9e 	bl	8003438 <turn_on_even_leds>
}
 80034fc:	e001      	b.n	8003502 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80034fe:	f7ff ff85 	bl	800340c <turn_on_odd_leds>
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000000c 	.word	0x2000000c

0800350c <LED_effect3>:

void LED_effect3(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
	static int j = 2;
	if (j == -1) j=2;
 8003510:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <LED_effect3+0x3c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d102      	bne.n	8003520 <LED_effect3+0x14>
 800351a:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <LED_effect3+0x3c>)
 800351c:	2202      	movs	r2, #2
 800351e:	601a      	str	r2, [r3, #0]
	LED_control(( j-- % 3) );
 8003520:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <LED_effect3+0x3c>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	1e53      	subs	r3, r2, #1
 8003526:	4908      	ldr	r1, [pc, #32]	@ (8003548 <LED_effect3+0x3c>)
 8003528:	600b      	str	r3, [r1, #0]
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <LED_effect3+0x40>)
 800352c:	fb83 3102 	smull	r3, r1, r3, r2
 8003530:	17d3      	asrs	r3, r2, #31
 8003532:	1ac9      	subs	r1, r1, r3
 8003534:	460b      	mov	r3, r1
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	440b      	add	r3, r1
 800353a:	1ad1      	subs	r1, r2, r3
 800353c:	4608      	mov	r0, r1
 800353e:	f7ff ff91 	bl	8003464 <LED_control>

}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000010 	.word	0x20000010
 800354c:	55555556 	.word	0x55555556

08003550 <LED_effect4>:

void LED_effect4(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( (i++ % 3) );
 8003554:	4b09      	ldr	r3, [pc, #36]	@ (800357c <LED_effect4+0x2c>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	1c53      	adds	r3, r2, #1
 800355a:	4908      	ldr	r1, [pc, #32]	@ (800357c <LED_effect4+0x2c>)
 800355c:	600b      	str	r3, [r1, #0]
 800355e:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <LED_effect4+0x30>)
 8003560:	fb83 3102 	smull	r3, r1, r3, r2
 8003564:	17d3      	asrs	r3, r2, #31
 8003566:	1ac9      	subs	r1, r1, r3
 8003568:	460b      	mov	r3, r1
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	440b      	add	r3, r1
 800356e:	1ad1      	subs	r1, r2, r3
 8003570:	4608      	mov	r0, r1
 8003572:	f7ff ff77 	bl	8003464 <LED_control>
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	2000ba4c 	.word	0x2000ba4c
 8003580:	55555556 	.word	0x55555556

08003584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800358a:	f001 fb06 	bl	8004b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800358e:	f000 f8f5 	bl	800377c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003592:	f000 f9b5 	bl	8003900 <MX_GPIO_Init>
  MX_RTC_Init();
 8003596:	f000 f95d 	bl	8003854 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800359a:	f000 f981 	bl	80038a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status  = xTaskCreate(print_task, "print_task", 250, NULL,2, &handle_print_task);
 800359e:	4b5c      	ldr	r3, [pc, #368]	@ (8003710 <main+0x18c>)
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2302      	movs	r3, #2
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	22fa      	movs	r2, #250	@ 0xfa
 80035aa:	495a      	ldr	r1, [pc, #360]	@ (8003714 <main+0x190>)
 80035ac:	485a      	ldr	r0, [pc, #360]	@ (8003718 <main+0x194>)
 80035ae:	f7fd fe25 	bl	80011fc <xTaskCreate>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a59      	ldr	r2, [pc, #356]	@ (800371c <main+0x198>)
 80035b6:	6013      	str	r3, [r2, #0]
  configASSERT(status==pdPASS);
 80035b8:	4b58      	ldr	r3, [pc, #352]	@ (800371c <main+0x198>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d003      	beq.n	80035c8 <main+0x44>
 80035c0:	4957      	ldr	r1, [pc, #348]	@ (8003720 <main+0x19c>)
 80035c2:	2070      	movs	r0, #112	@ 0x70
 80035c4:	f000 faec 	bl	8003ba0 <vAssertCalled>
  status  = xTaskCreate(menu_task, "menu_task", 250, NULL,2, &handle_menu_task);
 80035c8:	4b56      	ldr	r3, [pc, #344]	@ (8003724 <main+0x1a0>)
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2302      	movs	r3, #2
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2300      	movs	r3, #0
 80035d2:	22fa      	movs	r2, #250	@ 0xfa
 80035d4:	4954      	ldr	r1, [pc, #336]	@ (8003728 <main+0x1a4>)
 80035d6:	4855      	ldr	r0, [pc, #340]	@ (800372c <main+0x1a8>)
 80035d8:	f7fd fe10 	bl	80011fc <xTaskCreate>
 80035dc:	4603      	mov	r3, r0
 80035de:	4a4f      	ldr	r2, [pc, #316]	@ (800371c <main+0x198>)
 80035e0:	6013      	str	r3, [r2, #0]
  configASSERT(status==pdPASS);
 80035e2:	4b4e      	ldr	r3, [pc, #312]	@ (800371c <main+0x198>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d003      	beq.n	80035f2 <main+0x6e>
 80035ea:	494d      	ldr	r1, [pc, #308]	@ (8003720 <main+0x19c>)
 80035ec:	2072      	movs	r0, #114	@ 0x72
 80035ee:	f000 fad7 	bl	8003ba0 <vAssertCalled>
  status  = xTaskCreate(led_task, "led_task", 250, NULL,2, &handle_led_task);
 80035f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003730 <main+0x1ac>)
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	2302      	movs	r3, #2
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	22fa      	movs	r2, #250	@ 0xfa
 80035fe:	494d      	ldr	r1, [pc, #308]	@ (8003734 <main+0x1b0>)
 8003600:	484d      	ldr	r0, [pc, #308]	@ (8003738 <main+0x1b4>)
 8003602:	f7fd fdfb 	bl	80011fc <xTaskCreate>
 8003606:	4603      	mov	r3, r0
 8003608:	4a44      	ldr	r2, [pc, #272]	@ (800371c <main+0x198>)
 800360a:	6013      	str	r3, [r2, #0]
  configASSERT(status==pdPASS);
 800360c:	4b43      	ldr	r3, [pc, #268]	@ (800371c <main+0x198>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d003      	beq.n	800361c <main+0x98>
 8003614:	4942      	ldr	r1, [pc, #264]	@ (8003720 <main+0x19c>)
 8003616:	2074      	movs	r0, #116	@ 0x74
 8003618:	f000 fac2 	bl	8003ba0 <vAssertCalled>
  status  = xTaskCreate(rtc_task, "rtc_task", 250, NULL,2, &handle_rtc_task);
 800361c:	4b47      	ldr	r3, [pc, #284]	@ (800373c <main+0x1b8>)
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	2302      	movs	r3, #2
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2300      	movs	r3, #0
 8003626:	22fa      	movs	r2, #250	@ 0xfa
 8003628:	4945      	ldr	r1, [pc, #276]	@ (8003740 <main+0x1bc>)
 800362a:	4846      	ldr	r0, [pc, #280]	@ (8003744 <main+0x1c0>)
 800362c:	f7fd fde6 	bl	80011fc <xTaskCreate>
 8003630:	4603      	mov	r3, r0
 8003632:	4a3a      	ldr	r2, [pc, #232]	@ (800371c <main+0x198>)
 8003634:	6013      	str	r3, [r2, #0]
  configASSERT(status==pdPASS);
 8003636:	4b39      	ldr	r3, [pc, #228]	@ (800371c <main+0x198>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d003      	beq.n	8003646 <main+0xc2>
 800363e:	4938      	ldr	r1, [pc, #224]	@ (8003720 <main+0x19c>)
 8003640:	2076      	movs	r0, #118	@ 0x76
 8003642:	f000 faad 	bl	8003ba0 <vAssertCalled>
  status  = xTaskCreate(cmd_handler_task, "cmd_handler_task", 250, NULL,2, &handle_cmd_task);
 8003646:	4b40      	ldr	r3, [pc, #256]	@ (8003748 <main+0x1c4>)
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	2302      	movs	r3, #2
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2300      	movs	r3, #0
 8003650:	22fa      	movs	r2, #250	@ 0xfa
 8003652:	493e      	ldr	r1, [pc, #248]	@ (800374c <main+0x1c8>)
 8003654:	483e      	ldr	r0, [pc, #248]	@ (8003750 <main+0x1cc>)
 8003656:	f7fd fdd1 	bl	80011fc <xTaskCreate>
 800365a:	4603      	mov	r3, r0
 800365c:	4a2f      	ldr	r2, [pc, #188]	@ (800371c <main+0x198>)
 800365e:	6013      	str	r3, [r2, #0]
  configASSERT(status==pdPASS);
 8003660:	4b2e      	ldr	r3, [pc, #184]	@ (800371c <main+0x198>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d003      	beq.n	8003670 <main+0xec>
 8003668:	492d      	ldr	r1, [pc, #180]	@ (8003720 <main+0x19c>)
 800366a:	2078      	movs	r0, #120	@ 0x78
 800366c:	f000 fa98 	bl	8003ba0 <vAssertCalled>
  q_data = xQueueCreate(10, sizeof(char));
 8003670:	2200      	movs	r2, #0
 8003672:	2101      	movs	r1, #1
 8003674:	200a      	movs	r0, #10
 8003676:	f7fd f8db 	bl	8000830 <xQueueGenericCreate>
 800367a:	4603      	mov	r3, r0
 800367c:	4a35      	ldr	r2, [pc, #212]	@ (8003754 <main+0x1d0>)
 800367e:	6013      	str	r3, [r2, #0]
  configASSERT(q_data!=NULL);
 8003680:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <main+0x1d0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <main+0x10c>
 8003688:	4925      	ldr	r1, [pc, #148]	@ (8003720 <main+0x19c>)
 800368a:	207a      	movs	r0, #122	@ 0x7a
 800368c:	f000 fa88 	bl	8003ba0 <vAssertCalled>
  q_print = xQueueCreate(10,sizeof(size_t));
 8003690:	2200      	movs	r2, #0
 8003692:	2104      	movs	r1, #4
 8003694:	200a      	movs	r0, #10
 8003696:	f7fd f8cb 	bl	8000830 <xQueueGenericCreate>
 800369a:	4603      	mov	r3, r0
 800369c:	4a2e      	ldr	r2, [pc, #184]	@ (8003758 <main+0x1d4>)
 800369e:	6013      	str	r3, [r2, #0]
  configASSERT(q_print!=NULL);
 80036a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <main+0x1d4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <main+0x12c>
 80036a8:	491d      	ldr	r1, [pc, #116]	@ (8003720 <main+0x19c>)
 80036aa:	207c      	movs	r0, #124	@ 0x7c
 80036ac:	f000 fa78 	bl	8003ba0 <vAssertCalled>


  for (int i=0;i<4;i++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	e013      	b.n	80036de <main+0x15a>
		handle_led_timer[i] = xTimerCreate("led timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i+1, led_effect_callback);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3301      	adds	r3, #1
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b27      	ldr	r3, [pc, #156]	@ (800375c <main+0x1d8>)
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	2201      	movs	r2, #1
 80036c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80036c8:	4825      	ldr	r0, [pc, #148]	@ (8003760 <main+0x1dc>)
 80036ca:	f7fe fe15 	bl	80022f8 <xTimerCreate>
 80036ce:	4602      	mov	r2, r0
 80036d0:	4924      	ldr	r1, [pc, #144]	@ (8003764 <main+0x1e0>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i=0;i<4;i++)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3301      	adds	r3, #1
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	dde8      	ble.n	80036b6 <main+0x132>
  rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80036e4:	4b20      	ldr	r3, [pc, #128]	@ (8003768 <main+0x1e4>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	2201      	movs	r2, #1
 80036ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036f0:	481e      	ldr	r0, [pc, #120]	@ (800376c <main+0x1e8>)
 80036f2:	f7fe fe01 	bl	80022f8 <xTimerCreate>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <main+0x1ec>)
 80036fa:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&huart2, (void*)&user_data, 1);
 80036fc:	2201      	movs	r2, #1
 80036fe:	491d      	ldr	r1, [pc, #116]	@ (8003774 <main+0x1f0>)
 8003700:	481d      	ldr	r0, [pc, #116]	@ (8003778 <main+0x1f4>)
 8003702:	f003 fdb8 	bl	8007276 <HAL_UART_Receive_IT>
  vTaskStartScheduler();
 8003706:	f7fd febb 	bl	8001480 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800370a:	bf00      	nop
 800370c:	e7fd      	b.n	800370a <main+0x186>
 800370e:	bf00      	nop
 8003710:	2000bb08 	.word	0x2000bb08
 8003714:	08009c0c 	.word	0x08009c0c
 8003718:	08004531 	.word	0x08004531
 800371c:	2000bb04 	.word	0x2000bb04
 8003720:	08009c18 	.word	0x08009c18
 8003724:	2000bb0c 	.word	0x2000bb0c
 8003728:	08009c2c 	.word	0x08009c2c
 800372c:	08004325 	.word	0x08004325
 8003730:	2000bb10 	.word	0x2000bb10
 8003734:	08009c38 	.word	0x08009c38
 8003738:	08004405 	.word	0x08004405
 800373c:	2000bb14 	.word	0x2000bb14
 8003740:	08009c44 	.word	0x08009c44
 8003744:	080045b9 	.word	0x080045b9
 8003748:	2000bb18 	.word	0x2000bb18
 800374c:	08009c50 	.word	0x08009c50
 8003750:	08004a2d 	.word	0x08004a2d
 8003754:	2000bb00 	.word	0x2000bb00
 8003758:	2000bafc 	.word	0x2000bafc
 800375c:	08003b41 	.word	0x08003b41
 8003760:	08009c64 	.word	0x08009c64
 8003764:	2000bb1c 	.word	0x2000bb1c
 8003768:	08003b2d 	.word	0x08003b2d
 800376c:	08009c70 	.word	0x08009c70
 8003770:	2000bb2c 	.word	0x2000bb2c
 8003774:	2000baf8 	.word	0x2000baf8
 8003778:	2000ba70 	.word	0x2000ba70

0800377c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b094      	sub	sp, #80	@ 0x50
 8003780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003782:	f107 031c 	add.w	r3, r7, #28
 8003786:	2234      	movs	r2, #52	@ 0x34
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f005 f92f 	bl	80089ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003790:	f107 0308 	add.w	r3, r7, #8
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a0:	4b2a      	ldr	r3, [pc, #168]	@ (800384c <SystemClock_Config+0xd0>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	4a29      	ldr	r2, [pc, #164]	@ (800384c <SystemClock_Config+0xd0>)
 80037a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ac:	4b27      	ldr	r3, [pc, #156]	@ (800384c <SystemClock_Config+0xd0>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80037b8:	4b25      	ldr	r3, [pc, #148]	@ (8003850 <SystemClock_Config+0xd4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80037c0:	4a23      	ldr	r2, [pc, #140]	@ (8003850 <SystemClock_Config+0xd4>)
 80037c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b21      	ldr	r3, [pc, #132]	@ (8003850 <SystemClock_Config+0xd4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80037d4:	230a      	movs	r3, #10
 80037d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037d8:	2301      	movs	r3, #1
 80037da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037dc:	2310      	movs	r3, #16
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037e0:	2301      	movs	r3, #1
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037e4:	2302      	movs	r3, #2
 80037e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037e8:	2300      	movs	r3, #0
 80037ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037ec:	2308      	movs	r3, #8
 80037ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80037f0:	23a8      	movs	r3, #168	@ 0xa8
 80037f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037f4:	2302      	movs	r3, #2
 80037f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037f8:	2302      	movs	r3, #2
 80037fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037fc:	2302      	movs	r3, #2
 80037fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fd51 	bl	80052ac <HAL_RCC_OscConfig>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003810:	f000 fa34 	bl	8003c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003814:	230f      	movs	r3, #15
 8003816:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003818:	2302      	movs	r3, #2
 800381a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003820:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800382a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800382c:	f107 0308 	add.w	r3, r7, #8
 8003830:	2105      	movs	r1, #5
 8003832:	4618      	mov	r0, r3
 8003834:	f001 ffe8 	bl	8005808 <HAL_RCC_ClockConfig>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800383e:	f000 fa1d 	bl	8003c7c <Error_Handler>
  }
}
 8003842:	bf00      	nop
 8003844:	3750      	adds	r7, #80	@ 0x50
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	40007000 	.word	0x40007000

08003854 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <MX_RTC_Init+0x44>)
 800385a:	4a10      	ldr	r2, [pc, #64]	@ (800389c <MX_RTC_Init+0x48>)
 800385c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800385e:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <MX_RTC_Init+0x44>)
 8003860:	2240      	movs	r2, #64	@ 0x40
 8003862:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <MX_RTC_Init+0x44>)
 8003866:	227f      	movs	r2, #127	@ 0x7f
 8003868:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800386a:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <MX_RTC_Init+0x44>)
 800386c:	22ff      	movs	r2, #255	@ 0xff
 800386e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003870:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <MX_RTC_Init+0x44>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003876:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <MX_RTC_Init+0x44>)
 8003878:	2200      	movs	r2, #0
 800387a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800387c:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <MX_RTC_Init+0x44>)
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003882:	4805      	ldr	r0, [pc, #20]	@ (8003898 <MX_RTC_Init+0x44>)
 8003884:	f002 fe3e 	bl	8006504 <HAL_RTC_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800388e:	f000 f9f5 	bl	8003c7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000ba50 	.word	0x2000ba50
 800389c:	40002800 	.word	0x40002800

080038a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038a4:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038a6:	4a15      	ldr	r2, [pc, #84]	@ (80038fc <MX_USART2_UART_Init+0x5c>)
 80038a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038aa:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038b8:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038be:	4b0e      	ldr	r3, [pc, #56]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038c6:	220c      	movs	r2, #12
 80038c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ca:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038d6:	4b08      	ldr	r3, [pc, #32]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038d8:	2200      	movs	r2, #0
 80038da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038dc:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038de:	2200      	movs	r2, #0
 80038e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038e2:	4805      	ldr	r0, [pc, #20]	@ (80038f8 <MX_USART2_UART_Init+0x58>)
 80038e4:	f003 fbf0 	bl	80070c8 <HAL_UART_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038ee:	f000 f9c5 	bl	8003c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2000ba70 	.word	0x2000ba70
 80038fc:	40004400 	.word	0x40004400

08003900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08c      	sub	sp, #48	@ 0x30
 8003904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003916:	4b7f      	ldr	r3, [pc, #508]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b14 <MX_GPIO_Init+0x214>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	6313      	str	r3, [r2, #48]	@ 0x30
 8003922:	4b7c      	ldr	r3, [pc, #496]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800392e:	4b79      	ldr	r3, [pc, #484]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	4a78      	ldr	r2, [pc, #480]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003938:	6313      	str	r3, [r2, #48]	@ 0x30
 800393a:	4b76      	ldr	r3, [pc, #472]	@ (8003b14 <MX_GPIO_Init+0x214>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	4b73      	ldr	r3, [pc, #460]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	4a72      	ldr	r2, [pc, #456]	@ (8003b14 <MX_GPIO_Init+0x214>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6313      	str	r3, [r2, #48]	@ 0x30
 8003952:	4b70      	ldr	r3, [pc, #448]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800395e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003962:	4a6c      	ldr	r2, [pc, #432]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	6313      	str	r3, [r2, #48]	@ 0x30
 800396a:	4b6a      	ldr	r3, [pc, #424]	@ (8003b14 <MX_GPIO_Init+0x214>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003976:	4b67      	ldr	r3, [pc, #412]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	4a66      	ldr	r2, [pc, #408]	@ (8003b14 <MX_GPIO_Init+0x214>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6313      	str	r3, [r2, #48]	@ 0x30
 8003982:	4b64      	ldr	r3, [pc, #400]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800398e:	4b61      	ldr	r3, [pc, #388]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	4a60      	ldr	r2, [pc, #384]	@ (8003b14 <MX_GPIO_Init+0x214>)
 8003994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003998:	6313      	str	r3, [r2, #48]	@ 0x30
 800399a:	4b5e      	ldr	r3, [pc, #376]	@ (8003b14 <MX_GPIO_Init+0x214>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80039a6:	2200      	movs	r2, #0
 80039a8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80039ac:	485a      	ldr	r0, [pc, #360]	@ (8003b18 <MX_GPIO_Init+0x218>)
 80039ae:	f001 fc41 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	4859      	ldr	r0, [pc, #356]	@ (8003b1c <MX_GPIO_Init+0x21c>)
 80039b8:	f001 fc3c 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80039bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80039cc:	f107 031c 	add.w	r3, r7, #28
 80039d0:	4619      	mov	r1, r3
 80039d2:	4853      	ldr	r0, [pc, #332]	@ (8003b20 <MX_GPIO_Init+0x220>)
 80039d4:	f001 fa82 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80039d8:	2332      	movs	r3, #50	@ 0x32
 80039da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	2302      	movs	r3, #2
 80039de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039e8:	230b      	movs	r3, #11
 80039ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ec:	f107 031c 	add.w	r3, r7, #28
 80039f0:	4619      	mov	r1, r3
 80039f2:	484b      	ldr	r0, [pc, #300]	@ (8003b20 <MX_GPIO_Init+0x220>)
 80039f4:	f001 fa72 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80039f8:	2386      	movs	r3, #134	@ 0x86
 80039fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a04:	2303      	movs	r3, #3
 8003a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a08:	230b      	movs	r3, #11
 8003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	4619      	mov	r1, r3
 8003a12:	4844      	ldr	r0, [pc, #272]	@ (8003b24 <MX_GPIO_Init+0x224>)
 8003a14:	f001 fa62 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003a18:	f244 0381 	movw	r3, #16513	@ 0x4081
 8003a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2a:	f107 031c 	add.w	r3, r7, #28
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4839      	ldr	r0, [pc, #228]	@ (8003b18 <MX_GPIO_Init+0x218>)
 8003a32:	f001 fa53 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a44:	2303      	movs	r3, #3
 8003a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a48:	230b      	movs	r3, #11
 8003a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003a4c:	f107 031c 	add.w	r3, r7, #28
 8003a50:	4619      	mov	r1, r3
 8003a52:	4831      	ldr	r0, [pc, #196]	@ (8003b18 <MX_GPIO_Init+0x218>)
 8003a54:	f001 fa42 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a66:	2303      	movs	r3, #3
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6e:	f107 031c 	add.w	r3, r7, #28
 8003a72:	4619      	mov	r1, r3
 8003a74:	482c      	ldr	r0, [pc, #176]	@ (8003b28 <MX_GPIO_Init+0x228>)
 8003a76:	f001 fa31 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003a7a:	2340      	movs	r3, #64	@ 0x40
 8003a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4822      	ldr	r0, [pc, #136]	@ (8003b1c <MX_GPIO_Init+0x21c>)
 8003a92:	f001 fa23 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003aa2:	f107 031c 	add.w	r3, r7, #28
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	481c      	ldr	r0, [pc, #112]	@ (8003b1c <MX_GPIO_Init+0x21c>)
 8003aaa:	f001 fa17 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003aae:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ac0:	230a      	movs	r3, #10
 8003ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4816      	ldr	r0, [pc, #88]	@ (8003b24 <MX_GPIO_Init+0x224>)
 8003acc:	f001 fa06 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003ade:	f107 031c 	add.w	r3, r7, #28
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	480f      	ldr	r0, [pc, #60]	@ (8003b24 <MX_GPIO_Init+0x224>)
 8003ae6:	f001 f9f9 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003aea:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af8:	2303      	movs	r3, #3
 8003afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003afc:	230b      	movs	r3, #11
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	4619      	mov	r1, r3
 8003b06:	4805      	ldr	r0, [pc, #20]	@ (8003b1c <MX_GPIO_Init+0x21c>)
 8003b08:	f001 f9e8 	bl	8004edc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b0c:	bf00      	nop
 8003b0e:	3730      	adds	r7, #48	@ 0x30
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40020400 	.word	0x40020400
 8003b1c:	40021800 	.word	0x40021800
 8003b20:	40020800 	.word	0x40020800
 8003b24:	40020000 	.word	0x40020000
 8003b28:	40020c00 	.word	0x40020c00

08003b2c <rtc_report_callback>:

/* USER CODE BEGIN 4 */
void rtc_report_callback( TimerHandle_t xTimer )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8003b34:	f000 f8a8 	bl	8003c88 <show_time_date_itm>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fe ff3d 	bl	80029c8 <pvTimerGetTimerID>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	60fb      	str	r3, [r7, #12]
	switch (id)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d816      	bhi.n	8003b88 <led_effect_callback+0x48>
 8003b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <led_effect_callback+0x20>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b77 	.word	0x08003b77
 8003b68:	08003b7d 	.word	0x08003b7d
 8003b6c:	08003b83 	.word	0x08003b83
	{
		case 1:
			LED_effect1();
 8003b70:	f7ff fca0 	bl	80034b4 <LED_effect1>
			break;
 8003b74:	e008      	b.n	8003b88 <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 8003b76:	f7ff fcb3 	bl	80034e0 <LED_effect2>
			break;
 8003b7a:	e005      	b.n	8003b88 <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8003b7c:	f7ff fcc6 	bl	800350c <LED_effect3>
			break;
 8003b80:	e002      	b.n	8003b88 <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 8003b82:	f7ff fce5 	bl	8003550 <LED_effect4>
			break;
 8003b86:	bf00      	nop


	}
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <vApplicationIdleHook>:
void vApplicationIdleHook()
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003b94:	2101      	movs	r1, #1
 8003b96:	2000      	movs	r0, #0
 8003b98:	f001 fb66 	bl	8005268 <HAL_PWR_EnterSLEEPMode>
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <vAssertCalled>:
void vAssertCalled( unsigned long ulLine, const char * const pcFileName )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
//static portBASE_TYPE xPrinted = pdFALSE;
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]

    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 1 )
 8003bae:	bf00      	nop
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d0fc      	beq.n	8003bb0 <vAssertCalled+0x10>
        {
        }
    }
    taskEXIT_CRITICAL();
 8003bb6:	f7ff f8e9 	bl	8002d8c <vPortExitCritical>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	6078      	str	r0, [r7, #4]

	uint8_t dummy;
	if(xQueueIsQueueFullFromISR( q_data ) == pdFALSE)
 8003bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <HAL_UART_RxCpltCallback+0x84>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fd fa95 	bl	8001100 <xQueueIsQueueFullFromISR>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */
		xQueueSendToBackFromISR(q_data,(void*)&user_data,NULL);
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c48 <HAL_UART_RxCpltCallback+0x84>)
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	2300      	movs	r3, #0
 8003be2:	2200      	movs	r2, #0
 8003be4:	4919      	ldr	r1, [pc, #100]	@ (8003c4c <HAL_UART_RxCpltCallback+0x88>)
 8003be6:	f7fc ff7f 	bl	8000ae8 <xQueueGenericSendFromISR>
 8003bea:	e013      	b.n	8003c14 <HAL_UART_RxCpltCallback+0x50>

	}
	else{
		/*Queue is full */

		if( user_data == '\n')
 8003bec:	4b17      	ldr	r3, [pc, #92]	@ (8003c4c <HAL_UART_RxCpltCallback+0x88>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b0a      	cmp	r3, #10
 8003bf4:	d10e      	bne.n	8003c14 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8003bf6:	4b14      	ldr	r3, [pc, #80]	@ (8003c48 <HAL_UART_RxCpltCallback+0x84>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f107 010f 	add.w	r1, r7, #15
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd f8d5 	bl	8000db0 <xQueueReceiveFromISR>
			xQueueSendToBackFromISR(q_data,(void*)&user_data,NULL);
 8003c06:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <HAL_UART_RxCpltCallback+0x84>)
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	490f      	ldr	r1, [pc, #60]	@ (8003c4c <HAL_UART_RxCpltCallback+0x88>)
 8003c10:	f7fc ff6a 	bl	8000ae8 <xQueueGenericSendFromISR>
			/*TODO: make sure that last data byte of the queue is '\n' */
		}
	}
	/*Send notification to command handling task if user_data = '\n' */
		if( user_data == '\n' ){
 8003c14:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <HAL_UART_RxCpltCallback+0x88>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b0a      	cmp	r3, #10
 8003c1c:	d10a      	bne.n	8003c34 <HAL_UART_RxCpltCallback+0x70>
			/*send notification to command handling task */
			xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <HAL_UART_RxCpltCallback+0x8c>)
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f7fe f9e0 	bl	8001ff4 <xTaskGenericNotifyFromISR>
		}
	/*TODO: send notification to command handling task if user_data = '\n' */
	HAL_UART_Receive_IT(&huart2, (void*)&user_data, 1);
 8003c34:	2201      	movs	r2, #1
 8003c36:	4905      	ldr	r1, [pc, #20]	@ (8003c4c <HAL_UART_RxCpltCallback+0x88>)
 8003c38:	4806      	ldr	r0, [pc, #24]	@ (8003c54 <HAL_UART_RxCpltCallback+0x90>)
 8003c3a:	f003 fb1c 	bl	8007276 <HAL_UART_Receive_IT>
	/* TODO: Enable UART data byte reception again in IT mode */
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	2000bb00 	.word	0x2000bb00
 8003c4c:	2000baf8 	.word	0x2000baf8
 8003c50:	2000bb18 	.word	0x2000bb18
 8003c54:	2000ba70 	.word	0x2000ba70

08003c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003c6a:	f000 ffa3 	bl	8004bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40001000 	.word	0x40001000

08003c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c80:	b672      	cpsid	i
}
 8003c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <Error_Handler+0x8>

08003c88 <show_time_date_itm>:
 *      Author: Naveen
 */
#include "main.h"

void show_time_date_itm(void)
 {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	@ 0x28
 8003c8c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8003c8e:	f107 0318 	add.w	r3, r7, #24
 8003c92:	2204      	movs	r2, #4
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fea9 	bl	80089ee <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8003c9c:	1d3b      	adds	r3, r7, #4
 8003c9e:	2214      	movs	r2, #20
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 fea3 	bl	80089ee <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	2200      	movs	r2, #0
 8003cac:	4619      	mov	r1, r3
 8003cae:	4815      	ldr	r0, [pc, #84]	@ (8003d04 <show_time_date_itm+0x7c>)
 8003cb0:	f002 fd46 	bl	8006740 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8003cb4:	f107 0318 	add.w	r3, r7, #24
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4811      	ldr	r0, [pc, #68]	@ (8003d04 <show_time_date_itm+0x7c>)
 8003cbe:	f002 fe21 	bl	8006904 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <show_time_date_itm+0x44>
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <show_time_date_itm+0x80>)
 8003cca:	e000      	b.n	8003cce <show_time_date_itm+0x46>
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d0c <show_time_date_itm+0x84>)
 8003cce:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8003cd0:	793b      	ldrb	r3, [r7, #4]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	797b      	ldrb	r3, [r7, #5]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	79bb      	ldrb	r3, [r7, #6]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	480b      	ldr	r0, [pc, #44]	@ (8003d10 <show_time_date_itm+0x88>)
 8003ce4:	f004 fe0e 	bl	8008904 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8003ce8:	7e7b      	ldrb	r3, [r7, #25]
 8003cea:	4619      	mov	r1, r3
 8003cec:	7ebb      	ldrb	r3, [r7, #26]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	7efb      	ldrb	r3, [r7, #27]
 8003cf2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003cf6:	4807      	ldr	r0, [pc, #28]	@ (8003d14 <show_time_date_itm+0x8c>)
 8003cf8:	f004 fe04 	bl	8008904 <iprintf>

 }
 8003cfc:	bf00      	nop
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000ba50 	.word	0x2000ba50
 8003d08:	08009c84 	.word	0x08009c84
 8003d0c:	08009c88 	.word	0x08009c88
 8003d10:	08009c8c 	.word	0x08009c8c
 8003d14:	08009ca0 	.word	0x08009ca0

08003d18 <show_time_date>:

void show_time_date(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	@ 0x30
 8003d1c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8003d1e:	f107 0318 	add.w	r3, r7, #24
 8003d22:	2204      	movs	r2, #4
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fe61 	bl	80089ee <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8003d2c:	1d3b      	adds	r3, r7, #4
 8003d2e:	2214      	movs	r2, #20
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f004 fe5b 	bl	80089ee <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4821      	ldr	r0, [pc, #132]	@ (8003dc4 <show_time_date+0xac>)
 8003d40:	f002 fcfe 	bl	8006740 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8003d44:	f107 0318 	add.w	r3, r7, #24
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	481d      	ldr	r0, [pc, #116]	@ (8003dc4 <show_time_date+0xac>)
 8003d4e:	f002 fdd9 	bl	8006904 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <show_time_date+0x44>
 8003d58:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <show_time_date+0xb0>)
 8003d5a:	e000      	b.n	8003d5e <show_time_date+0x46>
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <show_time_date+0xb4>)
 8003d5e:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8003d60:	793b      	ldrb	r3, [r7, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	797b      	ldrb	r3, [r7, #5]
 8003d66:	461a      	mov	r2, r3
 8003d68:	79bb      	ldrb	r3, [r7, #6]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	9302      	str	r3, [sp, #8]
 8003d70:	9101      	str	r1, [sp, #4]
 8003d72:	9200      	str	r2, [sp, #0]
 8003d74:	4603      	mov	r3, r0
 8003d76:	4a16      	ldr	r2, [pc, #88]	@ (8003dd0 <show_time_date+0xb8>)
 8003d78:	4916      	ldr	r1, [pc, #88]	@ (8003dd4 <show_time_date+0xbc>)
 8003d7a:	4817      	ldr	r0, [pc, #92]	@ (8003dd8 <show_time_date+0xc0>)
 8003d7c:	f004 fdd4 	bl	8008928 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8003d80:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <show_time_date+0xc4>)
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8a:	4915      	ldr	r1, [pc, #84]	@ (8003de0 <show_time_date+0xc8>)
 8003d8c:	f7fc fdc4 	bl	8000918 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8003d90:	7e7b      	ldrb	r3, [r7, #25]
 8003d92:	461a      	mov	r2, r3
 8003d94:	7ebb      	ldrb	r3, [r7, #26]
 8003d96:	4619      	mov	r1, r3
 8003d98:	7efb      	ldrb	r3, [r7, #27]
 8003d9a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	460b      	mov	r3, r1
 8003da2:	4910      	ldr	r1, [pc, #64]	@ (8003de4 <show_time_date+0xcc>)
 8003da4:	4810      	ldr	r0, [pc, #64]	@ (8003de8 <show_time_date+0xd0>)
 8003da6:	f004 fdbf 	bl	8008928 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8003daa:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <show_time_date+0xc4>)
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	2300      	movs	r3, #0
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	490d      	ldr	r1, [pc, #52]	@ (8003dec <show_time_date+0xd4>)
 8003db6:	f7fc fdaf 	bl	8000918 <xQueueGenericSend>
}
 8003dba:	bf00      	nop
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000ba50 	.word	0x2000ba50
 8003dc8:	08009c84 	.word	0x08009c84
 8003dcc:	08009c88 	.word	0x08009c88
 8003dd0:	08009cb0 	.word	0x08009cb0
 8003dd4:	08009cc4 	.word	0x08009cc4
 8003dd8:	2000bb30 	.word	0x2000bb30
 8003ddc:	2000bafc 	.word	0x2000bafc
 8003de0:	20000014 	.word	0x20000014
 8003de4:	08009ca0 	.word	0x08009ca0
 8003de8:	2000bb58 	.word	0x2000bb58
 8003dec:	20000018 	.word	0x20000018

08003df0 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4803      	ldr	r0, [pc, #12]	@ (8003e1c <rtc_configure_time+0x2c>)
 8003e10:	f002 fbfc 	bl	800660c <HAL_RTC_SetTime>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	2000ba50 	.word	0x2000ba50

08003e20 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4803      	ldr	r0, [pc, #12]	@ (8003e3c <rtc_configure_date+0x1c>)
 8003e2e:	f002 fce5 	bl	80067fc <HAL_RTC_SetDate>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	2000ba50 	.word	0x2000ba50

08003e40 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
	if(time){
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d807      	bhi.n	8003e68 <validate_rtc_information+0x28>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	2b3b      	cmp	r3, #59	@ 0x3b
 8003e5e:	d803      	bhi.n	8003e68 <validate_rtc_information+0x28>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	789b      	ldrb	r3, [r3, #2]
 8003e64:	2b3b      	cmp	r3, #59	@ 0x3b
 8003e66:	d901      	bls.n	8003e6c <validate_rtc_information+0x2c>
			return 1;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e015      	b.n	8003e98 <validate_rtc_information+0x58>
	}

	if(date){
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d011      	beq.n	8003e96 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	789b      	ldrb	r3, [r3, #2]
 8003e76:	2b1f      	cmp	r3, #31
 8003e78:	d80b      	bhi.n	8003e92 <validate_rtc_information+0x52>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b07      	cmp	r3, #7
 8003e80:	d807      	bhi.n	8003e92 <validate_rtc_information+0x52>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	78db      	ldrb	r3, [r3, #3]
 8003e86:	2b63      	cmp	r3, #99	@ 0x63
 8003e88:	d803      	bhi.n	8003e92 <validate_rtc_information+0x52>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d901      	bls.n	8003e96 <validate_rtc_information+0x56>
			return 1;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <validate_rtc_information+0x58>
	}

	return 0;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <HAL_MspInit+0x44>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	4a0e      	ldr	r2, [pc, #56]	@ (8003ee8 <HAL_MspInit+0x44>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee8 <HAL_MspInit+0x44>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_MspInit+0x44>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	4a08      	ldr	r2, [pc, #32]	@ (8003ee8 <HAL_MspInit+0x44>)
 8003ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <HAL_MspInit+0x44>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8003eda:	f7fe feb7 	bl	8002c4c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800

08003eec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b0a6      	sub	sp, #152	@ 0x98
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ef4:	f107 0308 	add.w	r3, r7, #8
 8003ef8:	2290      	movs	r2, #144	@ 0x90
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fd76 	bl	80089ee <memset>
  if(hrtc->Instance==RTC)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <HAL_RTC_MspInit+0x54>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d114      	bne.n	8003f36 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f14:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f16:	f107 0308 	add.w	r3, r7, #8
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 feca 	bl	8005cb4 <HAL_RCCEx_PeriphCLKConfig>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003f26:	f7ff fea9 	bl	8003c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_RTC_MspInit+0x58>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2e:	4a05      	ldr	r2, [pc, #20]	@ (8003f44 <HAL_RTC_MspInit+0x58>)
 8003f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f34:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f36:	bf00      	nop
 8003f38:	3798      	adds	r7, #152	@ 0x98
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40002800 	.word	0x40002800
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0ae      	sub	sp, #184	@ 0xb8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	2290      	movs	r2, #144	@ 0x90
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fd40 	bl	80089ee <memset>
  if(huart->Instance==USART2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a25      	ldr	r2, [pc, #148]	@ (8004008 <HAL_UART_MspInit+0xc0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d142      	bne.n	8003ffe <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f78:	2380      	movs	r3, #128	@ 0x80
 8003f7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 fe95 	bl	8005cb4 <HAL_RCCEx_PeriphCLKConfig>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f90:	f7ff fe74 	bl	8003c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f94:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <HAL_UART_MspInit+0xc4>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <HAL_UART_MspInit+0xc4>)
 8003f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <HAL_UART_MspInit+0xc4>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fac:	4b17      	ldr	r3, [pc, #92]	@ (800400c <HAL_UART_MspInit+0xc4>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	4a16      	ldr	r2, [pc, #88]	@ (800400c <HAL_UART_MspInit+0xc4>)
 8003fb2:	f043 0308 	orr.w	r3, r3, #8
 8003fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb8:	4b14      	ldr	r3, [pc, #80]	@ (800400c <HAL_UART_MspInit+0xc4>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003fc4:	2360      	movs	r3, #96	@ 0x60
 8003fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fdc:	2307      	movs	r3, #7
 8003fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fe2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4809      	ldr	r0, [pc, #36]	@ (8004010 <HAL_UART_MspInit+0xc8>)
 8003fea:	f000 ff77 	bl	8004edc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2106      	movs	r1, #6
 8003ff2:	2026      	movs	r0, #38	@ 0x26
 8003ff4:	f000 feb6 	bl	8004d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ff8:	2026      	movs	r0, #38	@ 0x26
 8003ffa:	f000 fecf 	bl	8004d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ffe:	bf00      	nop
 8004000:	37b8      	adds	r7, #184	@ 0xb8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40004400 	.word	0x40004400
 800400c:	40023800 	.word	0x40023800
 8004010:	40020c00 	.word	0x40020c00

08004014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08e      	sub	sp, #56	@ 0x38
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004024:	4b33      	ldr	r3, [pc, #204]	@ (80040f4 <HAL_InitTick+0xe0>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	4a32      	ldr	r2, [pc, #200]	@ (80040f4 <HAL_InitTick+0xe0>)
 800402a:	f043 0310 	orr.w	r3, r3, #16
 800402e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004030:	4b30      	ldr	r3, [pc, #192]	@ (80040f4 <HAL_InitTick+0xe0>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800403c:	f107 0210 	add.w	r2, r7, #16
 8004040:	f107 0314 	add.w	r3, r7, #20
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f001 fe02 	bl	8005c50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004056:	f001 fdd3 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 800405a:	6378      	str	r0, [r7, #52]	@ 0x34
 800405c:	e004      	b.n	8004068 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800405e:	f001 fdcf 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8004062:	4603      	mov	r3, r0
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	4a23      	ldr	r2, [pc, #140]	@ (80040f8 <HAL_InitTick+0xe4>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	0c9b      	lsrs	r3, r3, #18
 8004072:	3b01      	subs	r3, #1
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004076:	4b21      	ldr	r3, [pc, #132]	@ (80040fc <HAL_InitTick+0xe8>)
 8004078:	4a21      	ldr	r2, [pc, #132]	@ (8004100 <HAL_InitTick+0xec>)
 800407a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800407c:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <HAL_InitTick+0xe8>)
 800407e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004082:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004084:	4a1d      	ldr	r2, [pc, #116]	@ (80040fc <HAL_InitTick+0xe8>)
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800408a:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <HAL_InitTick+0xe8>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004090:	4b1a      	ldr	r3, [pc, #104]	@ (80040fc <HAL_InitTick+0xe8>)
 8004092:	2200      	movs	r2, #0
 8004094:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004096:	4b19      	ldr	r3, [pc, #100]	@ (80040fc <HAL_InitTick+0xe8>)
 8004098:	2200      	movs	r2, #0
 800409a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800409c:	4817      	ldr	r0, [pc, #92]	@ (80040fc <HAL_InitTick+0xe8>)
 800409e:	f002 fd3f 	bl	8006b20 <HAL_TIM_Base_Init>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80040a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d11b      	bne.n	80040e8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80040b0:	4812      	ldr	r0, [pc, #72]	@ (80040fc <HAL_InitTick+0xe8>)
 80040b2:	f002 fd97 	bl	8006be4 <HAL_TIM_Base_Start_IT>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80040bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d111      	bne.n	80040e8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80040c4:	2036      	movs	r0, #54	@ 0x36
 80040c6:	f000 fe69 	bl	8004d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b0f      	cmp	r3, #15
 80040ce:	d808      	bhi.n	80040e2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80040d0:	2200      	movs	r2, #0
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	2036      	movs	r0, #54	@ 0x36
 80040d6:	f000 fe45 	bl	8004d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040da:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <HAL_InitTick+0xf0>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e002      	b.n	80040e8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80040e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3738      	adds	r7, #56	@ 0x38
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40023800 	.word	0x40023800
 80040f8:	431bde83 	.word	0x431bde83
 80040fc:	2000bb80 	.word	0x2000bb80
 8004100:	40001000 	.word	0x40001000
 8004104:	20000024 	.word	0x20000024

08004108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <NMI_Handler+0x4>

08004110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <HardFault_Handler+0x4>

08004118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <MemManage_Handler+0x4>

08004120 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <BusFault_Handler+0x4>

08004128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <UsageFault_Handler+0x4>

08004130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004144:	4802      	ldr	r0, [pc, #8]	@ (8004150 <USART2_IRQHandler+0x10>)
 8004146:	f003 f8db 	bl	8007300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	2000ba70 	.word	0x2000ba70

08004154 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004158:	4802      	ldr	r0, [pc, #8]	@ (8004164 <TIM6_DAC_IRQHandler+0x10>)
 800415a:	f002 fdbb 	bl	8006cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	2000bb80 	.word	0x2000bb80

08004168 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8004172:	4b0f      	ldr	r3, [pc, #60]	@ (80041b0 <ITM_SendChar+0x48>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a0e      	ldr	r2, [pc, #56]	@ (80041b0 <ITM_SendChar+0x48>)
 8004178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <ITM_SendChar+0x4c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a0c      	ldr	r2, [pc, #48]	@ (80041b4 <ITM_SendChar+0x4c>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800418a:	bf00      	nop
 800418c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f8      	beq.n	800418c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800419a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	6013      	str	r3, [r2, #0]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	e000edfc 	.word	0xe000edfc
 80041b4:	e0000e00 	.word	0xe0000e00

080041b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e00a      	b.n	80041e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041ca:	f3af 8000 	nop.w
 80041ce:	4601      	mov	r1, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	60ba      	str	r2, [r7, #8]
 80041d6:	b2ca      	uxtb	r2, r1
 80041d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	3301      	adds	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	dbf0      	blt.n	80041ca <_read+0x12>
  }

  return len;
 80041e8:	687b      	ldr	r3, [r7, #4]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e009      	b.n	8004218 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	60ba      	str	r2, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ffab 	bl	8004168 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	3301      	adds	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	dbf1      	blt.n	8004204 <_write+0x12>
  }
  return len;
 8004220:	687b      	ldr	r3, [r7, #4]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <_close>:

int _close(int file)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004252:	605a      	str	r2, [r3, #4]
  return 0;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <_isatty>:

int _isatty(int file)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800426a:	2301      	movs	r3, #1
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800429c:	4a14      	ldr	r2, [pc, #80]	@ (80042f0 <_sbrk+0x5c>)
 800429e:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <_sbrk+0x60>)
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042a8:	4b13      	ldr	r3, [pc, #76]	@ (80042f8 <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <_sbrk+0x64>)
 80042b2:	4a12      	ldr	r2, [pc, #72]	@ (80042fc <_sbrk+0x68>)
 80042b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042b6:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <_sbrk+0x64>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d207      	bcs.n	80042d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c4:	f004 fbe2 	bl	8008a8c <__errno>
 80042c8:	4603      	mov	r3, r0
 80042ca:	220c      	movs	r2, #12
 80042cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e009      	b.n	80042e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d4:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <_sbrk+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042da:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <_sbrk+0x64>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	4a05      	ldr	r2, [pc, #20]	@ (80042f8 <_sbrk+0x64>)
 80042e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20080000 	.word	0x20080000
 80042f4:	00002000 	.word	0x00002000
 80042f8:	2000bbcc 	.word	0x2000bbcc
 80042fc:	2000bd28 	.word	0x2000bd28

08004300 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004304:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <SystemInit+0x20>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430a:	4a05      	ldr	r2, [pc, #20]	@ (8004320 <SystemInit+0x20>)
 800430c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <menu_task>:
void process_command (command_t* cmd);

const char* msg_inv = "////Invalid Option ////\n";

void menu_task (void* params)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8
 800432a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	uint8_t option;
	const char* msg_menu = "======================\n"
 800432c:	4b2f      	ldr	r3, [pc, #188]	@ (80043ec <menu_task+0xc8>)
 800432e:	60bb      	str	r3, [r7, #8]
						   "Date and Time ----> 1 \n"
						   "Exit          ----> 2 \n"
						   "Enter your choice here :";
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8004330:	4b2f      	ldr	r3, [pc, #188]	@ (80043f0 <menu_task+0xcc>)
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	f107 0108 	add.w	r1, r7, #8
 8004338:	2300      	movs	r3, #0
 800433a:	f04f 32ff 	mov.w	r2, #4294967295
 800433e:	f7fc faeb 	bl	8000918 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8004342:	f107 030c 	add.w	r3, r7, #12
 8004346:	f04f 32ff 	mov.w	r2, #4294967295
 800434a:	9200      	str	r2, [sp, #0]
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	2000      	movs	r0, #0
 8004352:	f7fd fd09 	bl	8001d68 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	617b      	str	r3, [r7, #20]
		if(cmd->len == 1)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d130      	bne.n	80043c4 <menu_task+0xa0>
		{
			option = cmd ->payload[0] -48;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	3b30      	subs	r3, #48	@ 0x30
 8004368:	74fb      	strb	r3, [r7, #19]
			switch (option)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d032      	beq.n	80043d6 <menu_task+0xb2>
 8004370:	2b02      	cmp	r3, #2
 8004372:	dc1e      	bgt.n	80043b2 <menu_task+0x8e>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <menu_task+0x5a>
 8004378:	2b01      	cmp	r3, #1
 800437a:	d00d      	beq.n	8004398 <menu_task+0x74>
 800437c:	e019      	b.n	80043b2 <menu_task+0x8e>
			{
			case 0:
				curr_state = sLedEffect;
 800437e:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <menu_task+0xd0>)
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task,0,eNoAction);
 8004384:	4b1c      	ldr	r3, [pc, #112]	@ (80043f8 <menu_task+0xd4>)
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	2300      	movs	r3, #0
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	2200      	movs	r2, #0
 8004390:	2100      	movs	r1, #0
 8004392:	f7fd fd65 	bl	8001e60 <xTaskGenericNotify>
				break;
 8004396:	e01f      	b.n	80043d8 <menu_task+0xb4>
			case 1:
				curr_state = sRtcMenu;
 8004398:	4b16      	ldr	r3, [pc, #88]	@ (80043f4 <menu_task+0xd0>)
 800439a:	2202      	movs	r2, #2
 800439c:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 800439e:	4b17      	ldr	r3, [pc, #92]	@ (80043fc <menu_task+0xd8>)
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	2200      	movs	r2, #0
 80043aa:	2100      	movs	r1, #0
 80043ac:	f7fd fd58 	bl	8001e60 <xTaskGenericNotify>
				break;
 80043b0:	e012      	b.n	80043d8 <menu_task+0xb4>
			case 2:
				break;
			default:
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80043b2:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <menu_task+0xcc>)
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	2300      	movs	r3, #0
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	4910      	ldr	r1, [pc, #64]	@ (8004400 <menu_task+0xdc>)
 80043be:	f7fc faab 	bl	8000918 <xQueueGenericSend>
				continue;
 80043c2:	e012      	b.n	80043ea <menu_task+0xc6>
			}
		} else {
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80043c4:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <menu_task+0xcc>)
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	f04f 32ff 	mov.w	r2, #4294967295
 80043ce:	490c      	ldr	r1, [pc, #48]	@ (8004400 <menu_task+0xdc>)
 80043d0:	f7fc faa2 	bl	8000918 <xQueueGenericSend>
			continue;
 80043d4:	e009      	b.n	80043ea <menu_task+0xc6>
				break;
 80043d6:	bf00      	nop
		}
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2300      	movs	r3, #0
 80043e0:	2200      	movs	r2, #0
 80043e2:	2100      	movs	r1, #0
 80043e4:	2000      	movs	r0, #0
 80043e6:	f7fd fcbf 	bl	8001d68 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80043ea:	e7a1      	b.n	8004330 <menu_task+0xc>
 80043ec:	08009cf8 	.word	0x08009cf8
 80043f0:	2000bafc 	.word	0x2000bafc
 80043f4:	2000baf9 	.word	0x2000baf9
 80043f8:	2000bb10 	.word	0x2000bb10
 80043fc:	2000bb14 	.word	0x2000bb14
 8004400:	20000020 	.word	0x20000020

08004404 <led_task>:
	}
}

void led_task (void* params)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
		command_t *cmd;
		const char* msg_led = "========================\n"
 800440c:	4b3e      	ldr	r3, [pc, #248]	@ (8004508 <led_task+0x104>)
 800440e:	60fb      	str	r3, [r7, #12]
							  "(none,e1,e2,e3,e4)\n"
							  "Enter your choice here : ";

		while(1){
			/*TODO: Wait for notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8004410:	f107 0310 	add.w	r3, r7, #16
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	9200      	str	r2, [sp, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	2100      	movs	r1, #0
 800441e:	2000      	movs	r0, #0
 8004420:	f7fd fca2 	bl	8001d68 <xTaskGenericNotifyWait>
			/*TODO: Print LED menu */
			xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8004424:	4b39      	ldr	r3, [pc, #228]	@ (800450c <led_task+0x108>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	f107 010c 	add.w	r1, r7, #12
 800442c:	2300      	movs	r3, #0
 800442e:	f04f 32ff 	mov.w	r2, #4294967295
 8004432:	f7fc fa71 	bl	8000918 <xQueueGenericSend>
			/*TODO: wait for LED command (Notify wait) */
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2300      	movs	r3, #0
 800443e:	2200      	movs	r2, #0
 8004440:	2100      	movs	r1, #0
 8004442:	2000      	movs	r0, #0
 8004444:	f7fd fc90 	bl	8001d68 <xTaskGenericNotifyWait>
			cmd = (command_t*) cmd_addr;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	617b      	str	r3, [r7, #20]
			if(cmd->len <= 4)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d843      	bhi.n	80044dc <led_task+0xd8>
			{
				if(! strcmp((char*)cmd->payload,"none"))
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	492e      	ldr	r1, [pc, #184]	@ (8004510 <led_task+0x10c>)
 8004458:	4618      	mov	r0, r3
 800445a:	f7fb fef1 	bl	8000240 <strcmp>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <led_task+0x66>
					led_effect_stop();
 8004464:	f7fe ff58 	bl	8003318 <led_effect_stop>
 8004468:	e040      	b.n	80044ec <led_task+0xe8>
				else if (! strcmp((char*)cmd->payload,"e1"))
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4929      	ldr	r1, [pc, #164]	@ (8004514 <led_task+0x110>)
 800446e:	4618      	mov	r0, r3
 8004470:	f7fb fee6 	bl	8000240 <strcmp>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <led_task+0x7e>
					led_effect(1);
 800447a:	2001      	movs	r0, #1
 800447c:	f7fe ff7c 	bl	8003378 <led_effect>
 8004480:	e034      	b.n	80044ec <led_task+0xe8>
				else if (! strcmp((char*)cmd->payload,"e2"))
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4924      	ldr	r1, [pc, #144]	@ (8004518 <led_task+0x114>)
 8004486:	4618      	mov	r0, r3
 8004488:	f7fb feda 	bl	8000240 <strcmp>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <led_task+0x96>
					led_effect(2);
 8004492:	2002      	movs	r0, #2
 8004494:	f7fe ff70 	bl	8003378 <led_effect>
 8004498:	e028      	b.n	80044ec <led_task+0xe8>
				else if (! strcmp((char*)cmd->payload,"e3"))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	491f      	ldr	r1, [pc, #124]	@ (800451c <led_task+0x118>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fb fece 	bl	8000240 <strcmp>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <led_task+0xae>
					led_effect(3);
 80044aa:	2003      	movs	r0, #3
 80044ac:	f7fe ff64 	bl	8003378 <led_effect>
 80044b0:	e01c      	b.n	80044ec <led_task+0xe8>
				else if (! strcmp((char*)cmd->payload,"e4"))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	491a      	ldr	r1, [pc, #104]	@ (8004520 <led_task+0x11c>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fb fec2 	bl	8000240 <strcmp>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <led_task+0xc6>
					led_effect(4);
 80044c2:	2004      	movs	r0, #4
 80044c4:	f7fe ff58 	bl	8003378 <led_effect>
 80044c8:	e010      	b.n	80044ec <led_task+0xe8>
				else
					/*TODO: print invalid message */
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80044ca:	4b10      	ldr	r3, [pc, #64]	@ (800450c <led_task+0x108>)
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	2300      	movs	r3, #0
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	4913      	ldr	r1, [pc, #76]	@ (8004524 <led_task+0x120>)
 80044d6:	f7fc fa1f 	bl	8000918 <xQueueGenericSend>
 80044da:	e007      	b.n	80044ec <led_task+0xe8>
			}else {
				/*TODO: print invalid message */
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <led_task+0x108>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	f04f 32ff 	mov.w	r2, #4294967295
 80044e6:	490f      	ldr	r1, [pc, #60]	@ (8004524 <led_task+0x120>)
 80044e8:	f7fc fa16 	bl	8000918 <xQueueGenericSend>
			}
			/*TODO : update state variable */
			curr_state = sMainMenu;
 80044ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <led_task+0x124>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]

			/*TODO : Notify menu task */
			xTaskNotify(handle_menu_task,0,eNoAction);
 80044f2:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <led_task+0x128>)
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2300      	movs	r3, #0
 80044fc:	2200      	movs	r2, #0
 80044fe:	2100      	movs	r1, #0
 8004500:	f7fd fcae 	bl	8001e60 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8004504:	e784      	b.n	8004410 <led_task+0xc>
 8004506:	bf00      	nop
 8004508:	08009d9c 	.word	0x08009d9c
 800450c:	2000bafc 	.word	0x2000bafc
 8004510:	08009e14 	.word	0x08009e14
 8004514:	08009e1c 	.word	0x08009e1c
 8004518:	08009e20 	.word	0x08009e20
 800451c:	08009e24 	.word	0x08009e24
 8004520:	08009e28 	.word	0x08009e28
 8004524:	20000020 	.word	0x20000020
 8004528:	2000baf9 	.word	0x2000baf9
 800452c:	2000bb0c 	.word	0x2000bb0c

08004530 <print_task>:
}
}

void print_task (void* params)
{
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <print_task+0x38>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f107 010c 	add.w	r1, r7, #12
 8004540:	f04f 32ff 	mov.w	r2, #4294967295
 8004544:	4618      	mov	r0, r3
 8004546:	f7fc fb63 	bl	8000c10 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 800454a:	68fc      	ldr	r4, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fb fe80 	bl	8000254 <strlen>
 8004554:	4603      	mov	r3, r0
 8004556:	b29a      	uxth	r2, r3
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	4621      	mov	r1, r4
 800455e:	4803      	ldr	r0, [pc, #12]	@ (800456c <print_task+0x3c>)
 8004560:	f002 fe00 	bl	8007164 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8004564:	bf00      	nop
 8004566:	e7e7      	b.n	8004538 <print_task+0x8>
 8004568:	2000bafc 	.word	0x2000bafc
 800456c:	2000ba70 	.word	0x2000ba70

08004570 <getnumber>:
	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
	int value;
	if (len>1)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	dd0f      	ble.n	80045a0 <getnumber+0x30>
			value = (((p[0]-48)*10)+(p[1] -48));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3301      	adds	r3, #1
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	3b30      	subs	r3, #48	@ 0x30
 800459a:	4413      	add	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e003      	b.n	80045a8 <getnumber+0x38>
	else
		value = p[0]-48;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	3b30      	subs	r3, #48	@ 0x30
 80045a6:	60fb      	str	r3, [r7, #12]
	return value;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	b2db      	uxtb	r3, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <rtc_task>:

void rtc_task (void* params)
{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b09b      	sub	sp, #108	@ 0x6c
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 80045c0:	4bb3      	ldr	r3, [pc, #716]	@ (8004890 <rtc_task+0x2d8>)
 80045c2:	653b      	str	r3, [r7, #80]	@ 0x50
								"|         RTC          |\n"
								"========================\n";

		const char* msg_rtc2 = "Configure Time            ----> 0\n"
 80045c4:	4bb3      	ldr	r3, [pc, #716]	@ (8004894 <rtc_task+0x2dc>)
 80045c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
								"Enable reporting          ----> 2\n"
								"Exit                      ----> 4\n"
								"Enter your choice here : ";


		const char *msg_rtc_hh = "Enter hour(1-12):";
 80045c8:	4bb3      	ldr	r3, [pc, #716]	@ (8004898 <rtc_task+0x2e0>)
 80045ca:	64bb      	str	r3, [r7, #72]	@ 0x48
		const char *msg_rtc_mm = "Enter minutes(0-59):";
 80045cc:	4bb3      	ldr	r3, [pc, #716]	@ (800489c <rtc_task+0x2e4>)
 80045ce:	647b      	str	r3, [r7, #68]	@ 0x44
		const char *msg_rtc_ss = "Enter seconds(0-59):";
 80045d0:	4bb3      	ldr	r3, [pc, #716]	@ (80048a0 <rtc_task+0x2e8>)
 80045d2:	643b      	str	r3, [r7, #64]	@ 0x40

		const char *msg_rtc_dd  = "Enter date(1-31):";
 80045d4:	4bb3      	ldr	r3, [pc, #716]	@ (80048a4 <rtc_task+0x2ec>)
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		const char *msg_rtc_mo  ="Enter month(1-12):";
 80045d8:	4bb3      	ldr	r3, [pc, #716]	@ (80048a8 <rtc_task+0x2f0>)
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
		const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80045dc:	4bb3      	ldr	r3, [pc, #716]	@ (80048ac <rtc_task+0x2f4>)
 80045de:	637b      	str	r3, [r7, #52]	@ 0x34
		const char *msg_rtc_yr  = "Enter year(0-99):";
 80045e0:	4bb3      	ldr	r3, [pc, #716]	@ (80048b0 <rtc_task+0x2f8>)
 80045e2:	633b      	str	r3, [r7, #48]	@ 0x30

		const char *msg_conf = "Configuration successful\n";
 80045e4:	4bb3      	ldr	r3, [pc, #716]	@ (80048b4 <rtc_task+0x2fc>)
 80045e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 80045e8:	4bb3      	ldr	r3, [pc, #716]	@ (80048b8 <rtc_task+0x300>)
 80045ea:	62bb      	str	r3, [r7, #40]	@ 0x28
		#define DAY_CONFIG 2
		#define YEAR_CONFIG 3


		while(1){
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80045ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295
 80045f4:	9200      	str	r2, [sp, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	2100      	movs	r1, #0
 80045fa:	2000      	movs	r0, #0
 80045fc:	f7fd fbb4 	bl	8001d68 <xTaskGenericNotifyWait>
			/*TODO : Print the menu and show current date and time information */
			xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 8004600:	4bae      	ldr	r3, [pc, #696]	@ (80048bc <rtc_task+0x304>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004608:	2300      	movs	r3, #0
 800460a:	f04f 32ff 	mov.w	r2, #4294967295
 800460e:	f7fc f983 	bl	8000918 <xQueueGenericSend>
			show_time_date();
 8004612:	f7ff fb81 	bl	8003d18 <show_time_date>
			xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 8004616:	4ba9      	ldr	r3, [pc, #676]	@ (80048bc <rtc_task+0x304>)
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800461e:	2300      	movs	r3, #0
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	f7fc f978 	bl	8000918 <xQueueGenericSend>

			while(curr_state != sMainMenu){
 8004628:	e1e4      	b.n	80049f4 <rtc_task+0x43c>

				/*TODO: Wait for command notification (Notify wait) */
				xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800462a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800462e:	f04f 32ff 	mov.w	r2, #4294967295
 8004632:	9200      	str	r2, [sp, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	2100      	movs	r1, #0
 8004638:	2000      	movs	r0, #0
 800463a:	f7fd fb95 	bl	8001d68 <xTaskGenericNotifyWait>
				cmd = (command_t*)cmd_addr;
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	65fb      	str	r3, [r7, #92]	@ 0x5c
				switch(curr_state)
 8004642:	4b9f      	ldr	r3, [pc, #636]	@ (80048c0 <rtc_task+0x308>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	3b02      	subs	r3, #2
 8004648:	2b03      	cmp	r3, #3
 800464a:	f200 81d3 	bhi.w	80049f4 <rtc_task+0x43c>
 800464e:	a201      	add	r2, pc, #4	@ (adr r2, 8004654 <rtc_task+0x9c>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004665 	.word	0x08004665
 8004658:	0800471d 	.word	0x0800471d
 800465c:	08004807 	.word	0x08004807
 8004660:	0800496b 	.word	0x0800496b
				{
					case sRtcMenu:{

						/*process RTC menu commands */
						if (cmd->len == 1)
 8004664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d14a      	bne.n	8004702 <rtc_task+0x14a>
						{
							menu_selection = cmd->payload[0] - 48;
 800466c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	3b30      	subs	r3, #48	@ 0x30
 8004672:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
							switch (menu_selection)
 8004676:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800467a:	2b03      	cmp	r3, #3
 800467c:	d835      	bhi.n	80046ea <rtc_task+0x132>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <rtc_task+0xcc>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	08004695 	.word	0x08004695
 8004688:	080046af 	.word	0x080046af
 800468c:	080046c9 	.word	0x080046c9
 8004690:	080046e3 	.word	0x080046e3
							{
							case 0 :
								curr_state = sRtcTimeConfig;
 8004694:	4b8a      	ldr	r3, [pc, #552]	@ (80048c0 <rtc_task+0x308>)
 8004696:	2203      	movs	r2, #3
 8004698:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 800469a:	4b88      	ldr	r3, [pc, #544]	@ (80048bc <rtc_task+0x304>)
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80046a2:	2300      	movs	r3, #0
 80046a4:	f04f 32ff 	mov.w	r2, #4294967295
 80046a8:	f7fc f936 	bl	8000918 <xQueueGenericSend>
								break;
 80046ac:	e035      	b.n	800471a <rtc_task+0x162>
							case 1 :
								curr_state =sRtcDateConfig;
 80046ae:	4b84      	ldr	r3, [pc, #528]	@ (80048c0 <rtc_task+0x308>)
 80046b0:	2204      	movs	r2, #4
 80046b2:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 80046b4:	4b81      	ldr	r3, [pc, #516]	@ (80048bc <rtc_task+0x304>)
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80046bc:	2300      	movs	r3, #0
 80046be:	f04f 32ff 	mov.w	r2, #4294967295
 80046c2:	f7fc f929 	bl	8000918 <xQueueGenericSend>
								break;
 80046c6:	e028      	b.n	800471a <rtc_task+0x162>
							case 2 :
								curr_state = sRtcReport;
 80046c8:	4b7d      	ldr	r3, [pc, #500]	@ (80048c0 <rtc_task+0x308>)
 80046ca:	2205      	movs	r2, #5
 80046cc:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 80046ce:	4b7b      	ldr	r3, [pc, #492]	@ (80048bc <rtc_task+0x304>)
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80046d6:	2300      	movs	r3, #0
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	f7fc f91c 	bl	8000918 <xQueueGenericSend>
								break;
 80046e0:	e01b      	b.n	800471a <rtc_task+0x162>
							case 3 :
								curr_state = sMainMenu;
 80046e2:	4b77      	ldr	r3, [pc, #476]	@ (80048c0 <rtc_task+0x308>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
								break;
 80046e8:	e017      	b.n	800471a <rtc_task+0x162>
							default:
								curr_state = sMainMenu;
 80046ea:	4b75      	ldr	r3, [pc, #468]	@ (80048c0 <rtc_task+0x308>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80046f0:	4b72      	ldr	r3, [pc, #456]	@ (80048bc <rtc_task+0x304>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	2300      	movs	r3, #0
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295
 80046fa:	4972      	ldr	r1, [pc, #456]	@ (80048c4 <rtc_task+0x30c>)
 80046fc:	f7fc f90c 	bl	8000918 <xQueueGenericSend>
						else
						{
							curr_state = sMainMenu;
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						}
						break;}
 8004700:	e178      	b.n	80049f4 <rtc_task+0x43c>
							curr_state = sMainMenu;
 8004702:	4b6f      	ldr	r3, [pc, #444]	@ (80048c0 <rtc_task+0x308>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8004708:	4b6c      	ldr	r3, [pc, #432]	@ (80048bc <rtc_task+0x304>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	f04f 32ff 	mov.w	r2, #4294967295
 8004712:	496c      	ldr	r1, [pc, #432]	@ (80048c4 <rtc_task+0x30c>)
 8004714:	f7fc f900 	bl	8000918 <xQueueGenericSend>
						break;}
 8004718:	e16c      	b.n	80049f4 <rtc_task+0x43c>
 800471a:	e16b      	b.n	80049f4 <rtc_task+0x43c>

					case sRtcTimeConfig:{
						/*get hh, mm, ss infor and configure RTC */
						switch (rtc_state)
 800471c:	4b6a      	ldr	r3, [pc, #424]	@ (80048c8 <rtc_task+0x310>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d03b      	beq.n	800479c <rtc_task+0x1e4>
 8004724:	2b02      	cmp	r3, #2
 8004726:	f300 8162 	bgt.w	80049ee <rtc_task+0x436>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <rtc_task+0x17c>
 800472e:	2b01      	cmp	r3, #1
 8004730:	d01a      	beq.n	8004768 <rtc_task+0x1b0>
								curr_state = sMainMenu;
								rtc_state = 0;
								break;
							}
						}
						break;
 8004732:	e15c      	b.n	80049ee <rtc_task+0x436>
								uint8_t hour = getnumber (cmd->payload, cmd->len);
 8004734:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f7ff ff17 	bl	8004570 <getnumber>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
								time.Hours = hour;
 8004748:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800474c:	743b      	strb	r3, [r7, #16]
								rtc_state = MM_CONFIG;
 800474e:	4b5e      	ldr	r3, [pc, #376]	@ (80048c8 <rtc_task+0x310>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 8004754:	4b59      	ldr	r3, [pc, #356]	@ (80048bc <rtc_task+0x304>)
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800475c:	2300      	movs	r3, #0
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	f7fc f8d9 	bl	8000918 <xQueueGenericSend>
								break;
 8004766:	e04d      	b.n	8004804 <rtc_task+0x24c>
								uint8_t min = getnumber(cmd->payload, cmd->len);
 8004768:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800476a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7ff fefd 	bl	8004570 <getnumber>
 8004776:	4603      	mov	r3, r0
 8004778:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
								time.Minutes = min;
 800477c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8004780:	747b      	strb	r3, [r7, #17]
								rtc_state = SS_CONFIG;
 8004782:	4b51      	ldr	r3, [pc, #324]	@ (80048c8 <rtc_task+0x310>)
 8004784:	2202      	movs	r2, #2
 8004786:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 8004788:	4b4c      	ldr	r3, [pc, #304]	@ (80048bc <rtc_task+0x304>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8004790:	2300      	movs	r3, #0
 8004792:	f04f 32ff 	mov.w	r2, #4294967295
 8004796:	f7fc f8bf 	bl	8000918 <xQueueGenericSend>
								break;
 800479a:	e033      	b.n	8004804 <rtc_task+0x24c>
								uint8_t sec = getnumber (cmd->payload,cmd->len);
 800479c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800479e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7ff fee3 	bl	8004570 <getnumber>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
								time.Seconds = sec;
 80047b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047b4:	74bb      	strb	r3, [r7, #18]
								if(!validate_rtc_information(&time, NULL))
 80047b6:	f107 0310 	add.w	r3, r7, #16
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fb3f 	bl	8003e40 <validate_rtc_information>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10e      	bne.n	80047e6 <rtc_task+0x22e>
									rtc_configure_time(&time);
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fb0f 	bl	8003df0 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 80047d2:	4b3a      	ldr	r3, [pc, #232]	@ (80048bc <rtc_task+0x304>)
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80047da:	2300      	movs	r3, #0
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295
 80047e0:	f7fc f89a 	bl	8000918 <xQueueGenericSend>
 80047e4:	e007      	b.n	80047f6 <rtc_task+0x23e>
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80047e6:	4b35      	ldr	r3, [pc, #212]	@ (80048bc <rtc_task+0x304>)
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	2300      	movs	r3, #0
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295
 80047f0:	4934      	ldr	r1, [pc, #208]	@ (80048c4 <rtc_task+0x30c>)
 80047f2:	f7fc f891 	bl	8000918 <xQueueGenericSend>
								curr_state = sMainMenu;
 80047f6:	4b32      	ldr	r3, [pc, #200]	@ (80048c0 <rtc_task+0x308>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 80047fc:	4b32      	ldr	r3, [pc, #200]	@ (80048c8 <rtc_task+0x310>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
								break;
 8004802:	bf00      	nop
						break;
 8004804:	e0f3      	b.n	80049ee <rtc_task+0x436>
					}

					case sRtcDateConfig:{

						/*get date, month, day , year info and configure RTC */
						switch (rtc_state)
 8004806:	4b30      	ldr	r3, [pc, #192]	@ (80048c8 <rtc_task+0x310>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b03      	cmp	r3, #3
 800480c:	f200 80f1 	bhi.w	80049f2 <rtc_task+0x43a>
 8004810:	a201      	add	r2, pc, #4	@ (adr r2, 8004818 <rtc_task+0x260>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	08004829 	.word	0x08004829
 800481c:	0800485d 	.word	0x0800485d
 8004820:	080048cd 	.word	0x080048cd
 8004824:	08004901 	.word	0x08004901
						{
							case DATE_CONFIG:
							{
								uint8_t d = getnumber(cmd->payload,cmd->len);
 8004828:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800482a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7ff fe9d 	bl	8004570 <getnumber>
 8004836:	4603      	mov	r3, r0
 8004838:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
								date.Date = d;
 800483c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8004840:	73bb      	strb	r3, [r7, #14]
								rtc_state = MONTH_CONFIG;
 8004842:	4b21      	ldr	r3, [pc, #132]	@ (80048c8 <rtc_task+0x310>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8004848:	4b1c      	ldr	r3, [pc, #112]	@ (80048bc <rtc_task+0x304>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004850:	2300      	movs	r3, #0
 8004852:	f04f 32ff 	mov.w	r2, #4294967295
 8004856:	f7fc f85f 	bl	8000918 <xQueueGenericSend>
								break;
 800485a:	e085      	b.n	8004968 <rtc_task+0x3b0>
							}
							case MONTH_CONFIG:
							{
								uint8_t month = getnumber(cmd->payload,cmd->len);
 800485c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800485e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f7ff fe83 	bl	8004570 <getnumber>
 800486a:	4603      	mov	r3, r0
 800486c:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
								date.Month = month;
 8004870:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8004874:	737b      	strb	r3, [r7, #13]
								rtc_state = DAY_CONFIG;
 8004876:	4b14      	ldr	r3, [pc, #80]	@ (80048c8 <rtc_task+0x310>)
 8004878:	2202      	movs	r2, #2
 800487a:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 800487c:	4b0f      	ldr	r3, [pc, #60]	@ (80048bc <rtc_task+0x304>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8004884:	2300      	movs	r3, #0
 8004886:	f04f 32ff 	mov.w	r2, #4294967295
 800488a:	f7fc f845 	bl	8000918 <xQueueGenericSend>
								break;
 800488e:	e06b      	b.n	8004968 <rtc_task+0x3b0>
 8004890:	08009e2c 	.word	0x08009e2c
 8004894:	08009e78 	.word	0x08009e78
 8004898:	08009f1c 	.word	0x08009f1c
 800489c:	08009f30 	.word	0x08009f30
 80048a0:	08009f48 	.word	0x08009f48
 80048a4:	08009f60 	.word	0x08009f60
 80048a8:	08009f74 	.word	0x08009f74
 80048ac:	08009f88 	.word	0x08009f88
 80048b0:	08009fa0 	.word	0x08009fa0
 80048b4:	08009fb4 	.word	0x08009fb4
 80048b8:	08009fd0 	.word	0x08009fd0
 80048bc:	2000bafc 	.word	0x2000bafc
 80048c0:	2000baf9 	.word	0x2000baf9
 80048c4:	20000020 	.word	0x20000020
 80048c8:	2000bbd0 	.word	0x2000bbd0
							}
							case DAY_CONFIG:
							{
								uint8_t day = getnumber(cmd->payload, cmd->len);
 80048cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7ff fe4b 	bl	8004570 <getnumber>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
								date.WeekDay = day;
 80048e0:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80048e4:	733b      	strb	r3, [r7, #12]
								rtc_state = YEAR_CONFIG;
 80048e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004a14 <rtc_task+0x45c>)
 80048e8:	2203      	movs	r2, #3
 80048ea:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 80048ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004a18 <rtc_task+0x460>)
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80048f4:	2300      	movs	r3, #0
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295
 80048fa:	f7fc f80d 	bl	8000918 <xQueueGenericSend>
								break;
 80048fe:	e033      	b.n	8004968 <rtc_task+0x3b0>
							}
							case YEAR_CONFIG:
							{
								uint8_t year = getnumber(cmd->payload, cmd->len);
 8004900:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7ff fe31 	bl	8004570 <getnumber>
 800490e:	4603      	mov	r3, r0
 8004910:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
								date.Year = year;
 8004914:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004918:	73fb      	strb	r3, [r7, #15]
								if (!validate_rtc_information(NULL, &date))
 800491a:	f107 030c 	add.w	r3, r7, #12
 800491e:	4619      	mov	r1, r3
 8004920:	2000      	movs	r0, #0
 8004922:	f7ff fa8d 	bl	8003e40 <validate_rtc_information>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10e      	bne.n	800494a <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fa75 	bl	8003e20 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8004936:	4b38      	ldr	r3, [pc, #224]	@ (8004a18 <rtc_task+0x460>)
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800493e:	2300      	movs	r3, #0
 8004940:	f04f 32ff 	mov.w	r2, #4294967295
 8004944:	f7fb ffe8 	bl	8000918 <xQueueGenericSend>
 8004948:	e007      	b.n	800495a <rtc_task+0x3a2>
								}
								else
								{
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800494a:	4b33      	ldr	r3, [pc, #204]	@ (8004a18 <rtc_task+0x460>)
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	2300      	movs	r3, #0
 8004950:	f04f 32ff 	mov.w	r2, #4294967295
 8004954:	4931      	ldr	r1, [pc, #196]	@ (8004a1c <rtc_task+0x464>)
 8004956:	f7fb ffdf 	bl	8000918 <xQueueGenericSend>
								}
								curr_state = sMainMenu;
 800495a:	4b31      	ldr	r3, [pc, #196]	@ (8004a20 <rtc_task+0x468>)
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8004960:	4b2c      	ldr	r3, [pc, #176]	@ (8004a14 <rtc_task+0x45c>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
								break;
 8004966:	bf00      	nop
							}
						}

					break;}
 8004968:	e043      	b.n	80049f2 <rtc_task+0x43a>

					case sRtcReport:
					{
						/*enable or disable RTC current time reporting over ITM printf */
						if(cmd->len == 1)
 800496a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d131      	bne.n	80049d6 <rtc_task+0x41e>
						{
							if(cmd->payload[0] == 'y')
 8004972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b79      	cmp	r3, #121	@ 0x79
 8004978:	d115      	bne.n	80049a6 <rtc_task+0x3ee>
							{
								if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 800497a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a24 <rtc_task+0x46c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fd fffc 	bl	800297c <xTimerIsTimerActive>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d12d      	bne.n	80049e6 <rtc_task+0x42e>
									xTimerStart(rtc_timer,portMAX_DELAY);
 800498a:	4b26      	ldr	r3, [pc, #152]	@ (8004a24 <rtc_task+0x46c>)
 800498c:	681c      	ldr	r4, [r3, #0]
 800498e:	f7fc fe6b 	bl	8001668 <xTaskGetTickCount>
 8004992:	4602      	mov	r2, r0
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2300      	movs	r3, #0
 800499c:	2101      	movs	r1, #1
 800499e:	4620      	mov	r0, r4
 80049a0:	f7fd fd04 	bl	80023ac <xTimerGenericCommand>
 80049a4:	e01f      	b.n	80049e6 <rtc_task+0x42e>
							}
							else if (cmd->payload[0] == 'n')
 80049a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b6e      	cmp	r3, #110	@ 0x6e
 80049ac:	d10a      	bne.n	80049c4 <rtc_task+0x40c>
							{
								xTimerStop(rtc_timer,portMAX_DELAY);
 80049ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004a24 <rtc_task+0x46c>)
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	2200      	movs	r2, #0
 80049bc:	2103      	movs	r1, #3
 80049be:	f7fd fcf5 	bl	80023ac <xTimerGenericCommand>
 80049c2:	e010      	b.n	80049e6 <rtc_task+0x42e>
							}
							else
							{
								xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80049c4:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <rtc_task+0x460>)
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	2300      	movs	r3, #0
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	4913      	ldr	r1, [pc, #76]	@ (8004a1c <rtc_task+0x464>)
 80049d0:	f7fb ffa2 	bl	8000918 <xQueueGenericSend>
 80049d4:	e007      	b.n	80049e6 <rtc_task+0x42e>
							}

						}
						else
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80049d6:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <rtc_task+0x460>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	2300      	movs	r3, #0
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295
 80049e0:	490e      	ldr	r1, [pc, #56]	@ (8004a1c <rtc_task+0x464>)
 80049e2:	f7fb ff99 	bl	8000918 <xQueueGenericSend>

					curr_state = sMainMenu;
 80049e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <rtc_task+0x468>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
					break;
 80049ec:	e002      	b.n	80049f4 <rtc_task+0x43c>
						break;
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <rtc_task+0x43c>
					break;}
 80049f2:	bf00      	nop
			while(curr_state != sMainMenu){
 80049f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <rtc_task+0x468>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f47f ae16 	bne.w	800462a <rtc_task+0x72>

				}// switch end

			} //while end

			 xTaskNotify(handle_menu_task,0,eNoAction);
 80049fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004a28 <rtc_task+0x470>)
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2300      	movs	r3, #0
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	f7fd fa28 	bl	8001e60 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8004a10:	e5ec      	b.n	80045ec <rtc_task+0x34>
 8004a12:	bf00      	nop
 8004a14:	2000bbd0 	.word	0x2000bbd0
 8004a18:	2000bafc 	.word	0x2000bafc
 8004a1c:	20000020 	.word	0x20000020
 8004a20:	2000baf9 	.word	0x2000baf9
 8004a24:	2000bb2c 	.word	0x2000bb2c
 8004a28:	2000bb0c 	.word	0x2000bb0c

08004a2c <cmd_handler_task>:

}


void cmd_handler_task (void* params)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	@ 0x28
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	6078      	str	r0, [r7, #4]

	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8004a34:	f04f 33ff 	mov.w	r3, #4294967295
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2100      	movs	r1, #0
 8004a40:	2000      	movs	r0, #0
 8004a42:	f7fd f991 	bl	8001d68 <xTaskGenericNotifyWait>
 8004a46:	61f8      	str	r0, [r7, #28]
		if (ret == pdTRUE)
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d1f2      	bne.n	8004a34 <cmd_handler_task+0x8>
		{
			process_command(&cmd);
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f802 	bl	8004a5c <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8004a58:	e7ec      	b.n	8004a34 <cmd_handler_task+0x8>
	...

08004a5c <process_command>:
		}
	}
}

void process_command (command_t* cmd)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f835 	bl	8004ad4 <extract_command>
	switch(curr_state)
 8004a6a:	4b16      	ldr	r3, [pc, #88]	@ (8004ac4 <process_command+0x68>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	dc24      	bgt.n	8004abc <process_command+0x60>
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	da18      	bge.n	8004aa8 <process_command+0x4c>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <process_command+0x24>
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d00a      	beq.n	8004a94 <process_command+0x38>
		case sRtcDateConfig:
			xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
			break;

	}
}
 8004a7e:	e01d      	b.n	8004abc <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8004a80:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <process_command+0x6c>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	f7fd f9e7 	bl	8001e60 <xTaskGenericNotify>
			break;
 8004a92:	e013      	b.n	8004abc <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8004a94:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <process_command+0x70>)
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	f7fd f9dd 	bl	8001e60 <xTaskGenericNotify>
			break;
 8004aa6:	e009      	b.n	8004abc <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8004aa8:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <process_command+0x74>)
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	f7fd f9d3 	bl	8001e60 <xTaskGenericNotify>
			break;
 8004aba:	bf00      	nop
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	2000baf9 	.word	0x2000baf9
 8004ac8:	2000bb0c 	.word	0x2000bb0c
 8004acc:	2000bb10 	.word	0x2000bb10
 8004ad0:	2000bb14 	.word	0x2000bb14

08004ad4 <extract_command>:

int extract_command (command_t* cmd)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;
	status = uxQueueMessagesWaiting(q_data);
 8004adc:	4b19      	ldr	r3, [pc, #100]	@ (8004b44 <extract_command+0x70>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fc f9e3 	bl	8000eac <uxQueueMessagesWaiting>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	613b      	str	r3, [r7, #16]
	if (!status) return -1;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <extract_command+0x22>
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	e022      	b.n	8004b3c <extract_command+0x68>
	uint8_t i = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data, &item, 0);
 8004afa:	4b12      	ldr	r3, [pc, #72]	@ (8004b44 <extract_command+0x70>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f107 010f 	add.w	r1, r7, #15
 8004b02:	2200      	movs	r2, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fc f883 	bl	8000c10 <xQueueReceive>
 8004b0a:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d106      	bne.n	8004b20 <extract_command+0x4c>
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	75fa      	strb	r2, [r7, #23]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	7bf9      	ldrb	r1, [r7, #15]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	5499      	strb	r1, [r3, r2]
	}while (item != '\n');
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b0a      	cmp	r3, #10
 8004b24:	d1e9      	bne.n	8004afa <extract_command+0x26>
	cmd ->payload[i-1] = '\0';
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /* save length of command excluding null character */
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	461a      	mov	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]
	return 0;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	2000bb00 	.word	0x2000bb00

08004b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b4c:	f7ff fbd8 	bl	8004300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b50:	480c      	ldr	r0, [pc, #48]	@ (8004b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b52:	490d      	ldr	r1, [pc, #52]	@ (8004b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b54:	4a0d      	ldr	r2, [pc, #52]	@ (8004b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b58:	e002      	b.n	8004b60 <LoopCopyDataInit>

08004b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b5e:	3304      	adds	r3, #4

08004b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b64:	d3f9      	bcc.n	8004b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b66:	4a0a      	ldr	r2, [pc, #40]	@ (8004b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b68:	4c0a      	ldr	r4, [pc, #40]	@ (8004b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b6c:	e001      	b.n	8004b72 <LoopFillZerobss>

08004b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b70:	3204      	adds	r2, #4

08004b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b74:	d3fb      	bcc.n	8004b6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004b76:	f003 ff8f 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b7a:	f7fe fd03 	bl	8003584 <main>
  bx  lr    
 8004b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b80:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b88:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8004b8c:	0800a050 	.word	0x0800a050
  ldr r2, =_sbss
 8004b90:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8004b94:	2000bd24 	.word	0x2000bd24

08004b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b98:	e7fe      	b.n	8004b98 <ADC_IRQHandler>

08004b9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b9e:	2003      	movs	r0, #3
 8004ba0:	f000 f8d5 	bl	8004d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ba4:	200f      	movs	r0, #15
 8004ba6:	f7ff fa35 	bl	8004014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004baa:	f7ff f97b 	bl	8003ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bb8:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_IncTick+0x20>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_IncTick+0x24>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	4a04      	ldr	r2, [pc, #16]	@ (8004bd8 <HAL_IncTick+0x24>)
 8004bc6:	6013      	str	r3, [r2, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000028 	.word	0x20000028
 8004bd8:	2000bbd4 	.word	0x2000bbd4

08004bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return uwTick;
 8004be0:	4b03      	ldr	r3, [pc, #12]	@ (8004bf0 <HAL_GetTick+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	2000bbd4 	.word	0x2000bbd4

08004bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c04:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <__NVIC_SetPriorityGrouping+0x40>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c10:	4013      	ands	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c22:	4a04      	ldr	r2, [pc, #16]	@ (8004c34 <__NVIC_SetPriorityGrouping+0x40>)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	60d3      	str	r3, [r2, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000ed00 	.word	0xe000ed00
 8004c38:	05fa0000 	.word	0x05fa0000

08004c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c40:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <__NVIC_GetPriorityGrouping+0x18>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0307 	and.w	r3, r3, #7
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	db0b      	blt.n	8004c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	f003 021f 	and.w	r2, r3, #31
 8004c70:	4907      	ldr	r1, [pc, #28]	@ (8004c90 <__NVIC_EnableIRQ+0x38>)
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2001      	movs	r0, #1
 8004c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	6039      	str	r1, [r7, #0]
 8004c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	db0a      	blt.n	8004cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	490c      	ldr	r1, [pc, #48]	@ (8004ce0 <__NVIC_SetPriority+0x4c>)
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cbc:	e00a      	b.n	8004cd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	4908      	ldr	r1, [pc, #32]	@ (8004ce4 <__NVIC_SetPriority+0x50>)
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	0112      	lsls	r2, r2, #4
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	761a      	strb	r2, [r3, #24]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000e100 	.word	0xe000e100
 8004ce4:	e000ed00 	.word	0xe000ed00

08004ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	@ 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f1c3 0307 	rsb	r3, r3, #7
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	bf28      	it	cs
 8004d06:	2304      	movcs	r3, #4
 8004d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	2b06      	cmp	r3, #6
 8004d10:	d902      	bls.n	8004d18 <NVIC_EncodePriority+0x30>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3b03      	subs	r3, #3
 8004d16:	e000      	b.n	8004d1a <NVIC_EncodePriority+0x32>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43da      	mvns	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d30:	f04f 31ff 	mov.w	r1, #4294967295
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	43d9      	mvns	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d40:	4313      	orrs	r3, r2
         );
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	@ 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff ff4c 	bl	8004bf4 <__NVIC_SetPriorityGrouping>
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d76:	f7ff ff61 	bl	8004c3c <__NVIC_GetPriorityGrouping>
 8004d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	6978      	ldr	r0, [r7, #20]
 8004d82:	f7ff ffb1 	bl	8004ce8 <NVIC_EncodePriority>
 8004d86:	4602      	mov	r2, r0
 8004d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff80 	bl	8004c94 <__NVIC_SetPriority>
}
 8004d94:	bf00      	nop
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff54 	bl	8004c58 <__NVIC_EnableIRQ>
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dc6:	f7ff ff09 	bl	8004bdc <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d008      	beq.n	8004dea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2280      	movs	r2, #128	@ 0x80
 8004ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e052      	b.n	8004e90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0216 	bic.w	r2, r2, #22
 8004df8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <HAL_DMA_Abort+0x62>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0208 	bic.w	r2, r2, #8
 8004e28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e3a:	e013      	b.n	8004e64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e3c:	f7ff fece 	bl	8004bdc <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d90c      	bls.n	8004e64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2203      	movs	r2, #3
 8004e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e015      	b.n	8004e90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e4      	bne.n	8004e3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	223f      	movs	r2, #63	@ 0x3f
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2280      	movs	r2, #128	@ 0x80
 8004eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e00c      	b.n	8004ed0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2205      	movs	r2, #5
 8004eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b089      	sub	sp, #36	@ 0x24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	e175      	b.n	80051e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004efc:	2201      	movs	r2, #1
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	f040 8164 	bne.w	80051e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d005      	beq.n	8004f32 <HAL_GPIO_Init+0x56>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d130      	bne.n	8004f94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f68:	2201      	movs	r2, #1
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 0201 	and.w	r2, r3, #1
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d017      	beq.n	8004fd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2203      	movs	r2, #3
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d123      	bne.n	8005024 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	08da      	lsrs	r2, r3, #3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3208      	adds	r2, #8
 8004fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	220f      	movs	r2, #15
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4313      	orrs	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	08da      	lsrs	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3208      	adds	r2, #8
 800501e:	69b9      	ldr	r1, [r7, #24]
 8005020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	2203      	movs	r2, #3
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	43db      	mvns	r3, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 0203 	and.w	r2, r3, #3
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4313      	orrs	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80be 	beq.w	80051e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005066:	4b66      	ldr	r3, [pc, #408]	@ (8005200 <HAL_GPIO_Init+0x324>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	4a65      	ldr	r2, [pc, #404]	@ (8005200 <HAL_GPIO_Init+0x324>)
 800506c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005070:	6453      	str	r3, [r2, #68]	@ 0x44
 8005072:	4b63      	ldr	r3, [pc, #396]	@ (8005200 <HAL_GPIO_Init+0x324>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800507e:	4a61      	ldr	r2, [pc, #388]	@ (8005204 <HAL_GPIO_Init+0x328>)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4013      	ands	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a58      	ldr	r2, [pc, #352]	@ (8005208 <HAL_GPIO_Init+0x32c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d037      	beq.n	800511a <HAL_GPIO_Init+0x23e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a57      	ldr	r2, [pc, #348]	@ (800520c <HAL_GPIO_Init+0x330>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d031      	beq.n	8005116 <HAL_GPIO_Init+0x23a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a56      	ldr	r2, [pc, #344]	@ (8005210 <HAL_GPIO_Init+0x334>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02b      	beq.n	8005112 <HAL_GPIO_Init+0x236>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a55      	ldr	r2, [pc, #340]	@ (8005214 <HAL_GPIO_Init+0x338>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d025      	beq.n	800510e <HAL_GPIO_Init+0x232>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a54      	ldr	r2, [pc, #336]	@ (8005218 <HAL_GPIO_Init+0x33c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01f      	beq.n	800510a <HAL_GPIO_Init+0x22e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a53      	ldr	r2, [pc, #332]	@ (800521c <HAL_GPIO_Init+0x340>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d019      	beq.n	8005106 <HAL_GPIO_Init+0x22a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a52      	ldr	r2, [pc, #328]	@ (8005220 <HAL_GPIO_Init+0x344>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_GPIO_Init+0x226>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a51      	ldr	r2, [pc, #324]	@ (8005224 <HAL_GPIO_Init+0x348>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00d      	beq.n	80050fe <HAL_GPIO_Init+0x222>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a50      	ldr	r2, [pc, #320]	@ (8005228 <HAL_GPIO_Init+0x34c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <HAL_GPIO_Init+0x21e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a4f      	ldr	r2, [pc, #316]	@ (800522c <HAL_GPIO_Init+0x350>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_GPIO_Init+0x21a>
 80050f2:	2309      	movs	r3, #9
 80050f4:	e012      	b.n	800511c <HAL_GPIO_Init+0x240>
 80050f6:	230a      	movs	r3, #10
 80050f8:	e010      	b.n	800511c <HAL_GPIO_Init+0x240>
 80050fa:	2308      	movs	r3, #8
 80050fc:	e00e      	b.n	800511c <HAL_GPIO_Init+0x240>
 80050fe:	2307      	movs	r3, #7
 8005100:	e00c      	b.n	800511c <HAL_GPIO_Init+0x240>
 8005102:	2306      	movs	r3, #6
 8005104:	e00a      	b.n	800511c <HAL_GPIO_Init+0x240>
 8005106:	2305      	movs	r3, #5
 8005108:	e008      	b.n	800511c <HAL_GPIO_Init+0x240>
 800510a:	2304      	movs	r3, #4
 800510c:	e006      	b.n	800511c <HAL_GPIO_Init+0x240>
 800510e:	2303      	movs	r3, #3
 8005110:	e004      	b.n	800511c <HAL_GPIO_Init+0x240>
 8005112:	2302      	movs	r3, #2
 8005114:	e002      	b.n	800511c <HAL_GPIO_Init+0x240>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_GPIO_Init+0x240>
 800511a:	2300      	movs	r3, #0
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	f002 0203 	and.w	r2, r2, #3
 8005122:	0092      	lsls	r2, r2, #2
 8005124:	4093      	lsls	r3, r2
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800512c:	4935      	ldr	r1, [pc, #212]	@ (8005204 <HAL_GPIO_Init+0x328>)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	089b      	lsrs	r3, r3, #2
 8005132:	3302      	adds	r3, #2
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800513a:	4b3d      	ldr	r3, [pc, #244]	@ (8005230 <HAL_GPIO_Init+0x354>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800515e:	4a34      	ldr	r2, [pc, #208]	@ (8005230 <HAL_GPIO_Init+0x354>)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005164:	4b32      	ldr	r3, [pc, #200]	@ (8005230 <HAL_GPIO_Init+0x354>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005188:	4a29      	ldr	r2, [pc, #164]	@ (8005230 <HAL_GPIO_Init+0x354>)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800518e:	4b28      	ldr	r3, [pc, #160]	@ (8005230 <HAL_GPIO_Init+0x354>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005230 <HAL_GPIO_Init+0x354>)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005230 <HAL_GPIO_Init+0x354>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051dc:	4a14      	ldr	r2, [pc, #80]	@ (8005230 <HAL_GPIO_Init+0x354>)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	f67f ae86 	bls.w	8004efc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	3724      	adds	r7, #36	@ 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	40013800 	.word	0x40013800
 8005208:	40020000 	.word	0x40020000
 800520c:	40020400 	.word	0x40020400
 8005210:	40020800 	.word	0x40020800
 8005214:	40020c00 	.word	0x40020c00
 8005218:	40021000 	.word	0x40021000
 800521c:	40021400 	.word	0x40021400
 8005220:	40021800 	.word	0x40021800
 8005224:	40021c00 	.word	0x40021c00
 8005228:	40022000 	.word	0x40022000
 800522c:	40022400 	.word	0x40022400
 8005230:	40013c00 	.word	0x40013c00

08005234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
 8005240:	4613      	mov	r3, r2
 8005242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005244:	787b      	ldrb	r3, [r7, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800524a:	887a      	ldrh	r2, [r7, #2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005250:	e003      	b.n	800525a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005252:	887b      	ldrh	r3, [r7, #2]
 8005254:	041a      	lsls	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	619a      	str	r2, [r3, #24]
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005274:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <HAL_PWR_EnterSLEEPMode+0x40>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	4a0b      	ldr	r2, [pc, #44]	@ (80052a8 <HAL_PWR_EnterSLEEPMode+0x40>)
 800527a:	f023 0304 	bic.w	r3, r3, #4
 800527e:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005280:	f3bf 8f4f 	dsb	sy
}
 8005284:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005286:	f3bf 8f6f 	isb	sy
}
 800528a:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8005292:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005294:	e002      	b.n	800529c <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 8005296:	bf40      	sev
    __WFE();
 8005298:	bf20      	wfe
    __WFE();
 800529a:	bf20      	wfe
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80052b4:	2300      	movs	r3, #0
 80052b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e29b      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8087 	beq.w	80053de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052d0:	4b96      	ldr	r3, [pc, #600]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d00c      	beq.n	80052f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052dc:	4b93      	ldr	r3, [pc, #588]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 030c 	and.w	r3, r3, #12
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d112      	bne.n	800530e <HAL_RCC_OscConfig+0x62>
 80052e8:	4b90      	ldr	r3, [pc, #576]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052f4:	d10b      	bne.n	800530e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f6:	4b8d      	ldr	r3, [pc, #564]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d06c      	beq.n	80053dc <HAL_RCC_OscConfig+0x130>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d168      	bne.n	80053dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e275      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x7a>
 8005318:	4b84      	ldr	r3, [pc, #528]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a83      	ldr	r2, [pc, #524]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e02e      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x9c>
 800532e:	4b7f      	ldr	r3, [pc, #508]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a7e      	ldr	r2, [pc, #504]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b7c      	ldr	r3, [pc, #496]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a7b      	ldr	r2, [pc, #492]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e01d      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0xc0>
 8005352:	4b76      	ldr	r3, [pc, #472]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a75      	ldr	r2, [pc, #468]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4b73      	ldr	r3, [pc, #460]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a72      	ldr	r2, [pc, #456]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e00b      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 800536c:	4b6f      	ldr	r3, [pc, #444]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6e      	ldr	r2, [pc, #440]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b6c      	ldr	r3, [pc, #432]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a6b      	ldr	r2, [pc, #428]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800537e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d013      	beq.n	80053b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7ff fc26 	bl	8004bdc <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005394:	f7ff fc22 	bl	8004bdc <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	@ 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e229      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a6:	4b61      	ldr	r3, [pc, #388]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0xe8>
 80053b2:	e014      	b.n	80053de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7ff fc12 	bl	8004bdc <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053bc:	f7ff fc0e 	bl	8004bdc <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	@ 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e215      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ce:	4b57      	ldr	r3, [pc, #348]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x110>
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d069      	beq.n	80054be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053ea:	4b50      	ldr	r3, [pc, #320]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f6:	4b4d      	ldr	r3, [pc, #308]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d11c      	bne.n	800543c <HAL_RCC_OscConfig+0x190>
 8005402:	4b4a      	ldr	r3, [pc, #296]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d116      	bne.n	800543c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540e:	4b47      	ldr	r3, [pc, #284]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_RCC_OscConfig+0x17a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d001      	beq.n	8005426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e1e9      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005426:	4b41      	ldr	r3, [pc, #260]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	493d      	ldr	r1, [pc, #244]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543a:	e040      	b.n	80054be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d023      	beq.n	800548c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005444:	4b39      	ldr	r3, [pc, #228]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a38      	ldr	r2, [pc, #224]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7ff fbc4 	bl	8004bdc <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005458:	f7ff fbc0 	bl	8004bdc <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1c7      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546a:	4b30      	ldr	r3, [pc, #192]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005476:	4b2d      	ldr	r3, [pc, #180]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4929      	ldr	r1, [pc, #164]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]
 800548a:	e018      	b.n	80054be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548c:	4b27      	ldr	r3, [pc, #156]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a26      	ldr	r2, [pc, #152]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7ff fba0 	bl	8004bdc <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a0:	f7ff fb9c 	bl	8004bdc <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e1a3      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b2:	4b1e      	ldr	r3, [pc, #120]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d038      	beq.n	800553c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d019      	beq.n	8005506 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d2:	4b16      	ldr	r3, [pc, #88]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80054d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d6:	4a15      	ldr	r2, [pc, #84]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054de:	f7ff fb7d 	bl	8004bdc <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e6:	f7ff fb79 	bl	8004bdc <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e180      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f8:	4b0c      	ldr	r3, [pc, #48]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 80054fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x23a>
 8005504:	e01a      	b.n	800553c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 8005508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550a:	4a08      	ldr	r2, [pc, #32]	@ (800552c <HAL_RCC_OscConfig+0x280>)
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7ff fb63 	bl	8004bdc <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551a:	f7ff fb5f 	bl	8004bdc <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d903      	bls.n	8005530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e166      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
 800552c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005530:	4b92      	ldr	r3, [pc, #584]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ee      	bne.n	800551a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a4 	beq.w	8005692 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554a:	4b8c      	ldr	r3, [pc, #560]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005556:	4b89      	ldr	r3, [pc, #548]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	4a88      	ldr	r2, [pc, #544]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800555c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005560:	6413      	str	r3, [r2, #64]	@ 0x40
 8005562:	4b86      	ldr	r3, [pc, #536]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005572:	4b83      	ldr	r3, [pc, #524]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d118      	bne.n	80055b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800557e:	4b80      	ldr	r3, [pc, #512]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7f      	ldr	r2, [pc, #508]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 8005584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558a:	f7ff fb27 	bl	8004bdc <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005592:	f7ff fb23 	bl	8004bdc <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b64      	cmp	r3, #100	@ 0x64
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e12a      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a4:	4b76      	ldr	r3, [pc, #472]	@ (8005780 <HAL_RCC_OscConfig+0x4d4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x31a>
 80055b8:	4b70      	ldr	r3, [pc, #448]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055bc:	4a6f      	ldr	r2, [pc, #444]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c4:	e02d      	b.n	8005622 <HAL_RCC_OscConfig+0x376>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x33c>
 80055ce:	4b6b      	ldr	r3, [pc, #428]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	4a6a      	ldr	r2, [pc, #424]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055da:	4b68      	ldr	r3, [pc, #416]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055de:	4a67      	ldr	r2, [pc, #412]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055e0:	f023 0304 	bic.w	r3, r3, #4
 80055e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e6:	e01c      	b.n	8005622 <HAL_RCC_OscConfig+0x376>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d10c      	bne.n	800560a <HAL_RCC_OscConfig+0x35e>
 80055f0:	4b62      	ldr	r3, [pc, #392]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f4:	4a61      	ldr	r2, [pc, #388]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80055fc:	4b5f      	ldr	r3, [pc, #380]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005600:	4a5e      	ldr	r2, [pc, #376]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	@ 0x70
 8005608:	e00b      	b.n	8005622 <HAL_RCC_OscConfig+0x376>
 800560a:	4b5c      	ldr	r3, [pc, #368]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560e:	4a5b      	ldr	r2, [pc, #364]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	6713      	str	r3, [r2, #112]	@ 0x70
 8005616:	4b59      	ldr	r3, [pc, #356]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561a:	4a58      	ldr	r2, [pc, #352]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800561c:	f023 0304 	bic.w	r3, r3, #4
 8005620:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d015      	beq.n	8005656 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562a:	f7ff fad7 	bl	8004bdc <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005630:	e00a      	b.n	8005648 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7ff fad3 	bl	8004bdc <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0d8      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005648:	4b4c      	ldr	r3, [pc, #304]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ee      	beq.n	8005632 <HAL_RCC_OscConfig+0x386>
 8005654:	e014      	b.n	8005680 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005656:	f7ff fac1 	bl	8004bdc <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800565c:	e00a      	b.n	8005674 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7ff fabd 	bl	8004bdc <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e0c2      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005674:	4b41      	ldr	r3, [pc, #260]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1ee      	bne.n	800565e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d105      	bne.n	8005692 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005686:	4b3d      	ldr	r3, [pc, #244]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	4a3c      	ldr	r2, [pc, #240]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800568c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005690:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80ae 	beq.w	80057f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800569c:	4b37      	ldr	r3, [pc, #220]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d06d      	beq.n	8005784 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d14b      	bne.n	8005748 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b0:	4b32      	ldr	r3, [pc, #200]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a31      	ldr	r2, [pc, #196]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80056b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7ff fa8e 	bl	8004bdc <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c4:	f7ff fa8a 	bl	8004bdc <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e091      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d6:	4b29      	ldr	r3, [pc, #164]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	3b01      	subs	r3, #1
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	061b      	lsls	r3, r3, #24
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	071b      	lsls	r3, r3, #28
 800570e:	491b      	ldr	r1, [pc, #108]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005714:	4b19      	ldr	r3, [pc, #100]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a18      	ldr	r2, [pc, #96]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800571a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800571e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7ff fa5c 	bl	8004bdc <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005728:	f7ff fa58 	bl	8004bdc <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e05f      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573a:	4b10      	ldr	r3, [pc, #64]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x47c>
 8005746:	e057      	b.n	80057f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a0b      	ldr	r2, [pc, #44]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 800574e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7ff fa42 	bl	8004bdc <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7ff fa3e 	bl	8004bdc <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e045      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576e:	4b03      	ldr	r3, [pc, #12]	@ (800577c <HAL_RCC_OscConfig+0x4d0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x4b0>
 800577a:	e03d      	b.n	80057f8 <HAL_RCC_OscConfig+0x54c>
 800577c:	40023800 	.word	0x40023800
 8005780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005784:	4b1f      	ldr	r3, [pc, #124]	@ (8005804 <HAL_RCC_OscConfig+0x558>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d030      	beq.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d129      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d122      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057b4:	4013      	ands	r3, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057bc:	4293      	cmp	r3, r2
 80057be:	d119      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	3b01      	subs	r3, #1
 80057ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d10f      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d107      	bne.n	80057f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800

08005808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0d0      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b6a      	ldr	r3, [pc, #424]	@ (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d910      	bls.n	8005850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b67      	ldr	r3, [pc, #412]	@ (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 020f 	bic.w	r2, r3, #15
 8005836:	4965      	ldr	r1, [pc, #404]	@ (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b63      	ldr	r3, [pc, #396]	@ (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0b8      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005868:	4b59      	ldr	r3, [pc, #356]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a58      	ldr	r2, [pc, #352]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800586e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005880:	4b53      	ldr	r3, [pc, #332]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4a52      	ldr	r2, [pc, #328]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800588a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588c:	4b50      	ldr	r3, [pc, #320]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	494d      	ldr	r1, [pc, #308]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800589a:	4313      	orrs	r3, r2
 800589c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d040      	beq.n	800592c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d107      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b2:	4b47      	ldr	r3, [pc, #284]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d115      	bne.n	80058ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e07f      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d107      	bne.n	80058da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	4b41      	ldr	r3, [pc, #260]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e073      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	4b3d      	ldr	r3, [pc, #244]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e06b      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ea:	4b39      	ldr	r3, [pc, #228]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4936      	ldr	r1, [pc, #216]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fc:	f7ff f96e 	bl	8004bdc <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	e00a      	b.n	800591a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005904:	f7ff f96a 	bl	8004bdc <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e053      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	4b2d      	ldr	r3, [pc, #180]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 020c 	and.w	r2, r3, #12
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	429a      	cmp	r2, r3
 800592a:	d1eb      	bne.n	8005904 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800592c:	4b27      	ldr	r3, [pc, #156]	@ (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d210      	bcs.n	800595c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b24      	ldr	r3, [pc, #144]	@ (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 020f 	bic.w	r2, r3, #15
 8005942:	4922      	ldr	r1, [pc, #136]	@ (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b20      	ldr	r3, [pc, #128]	@ (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e032      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005968:	4b19      	ldr	r3, [pc, #100]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4916      	ldr	r1, [pc, #88]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005986:	4b12      	ldr	r3, [pc, #72]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	490e      	ldr	r1, [pc, #56]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800599a:	f000 f821 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	490a      	ldr	r1, [pc, #40]	@ (80059d4 <HAL_RCC_ClockConfig+0x1cc>)
 80059ac:	5ccb      	ldrb	r3, [r1, r3]
 80059ae:	fa22 f303 	lsr.w	r3, r2, r3
 80059b2:	4a09      	ldr	r2, [pc, #36]	@ (80059d8 <HAL_RCC_ClockConfig+0x1d0>)
 80059b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059b6:	4b09      	ldr	r3, [pc, #36]	@ (80059dc <HAL_RCC_ClockConfig+0x1d4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fb2a 	bl	8004014 <HAL_InitTick>

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40023c00 	.word	0x40023c00
 80059d0:	40023800 	.word	0x40023800
 80059d4:	08009ff4 	.word	0x08009ff4
 80059d8:	2000001c 	.word	0x2000001c
 80059dc:	20000024 	.word	0x20000024

080059e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e4:	b094      	sub	sp, #80	@ 0x50
 80059e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ec:	2300      	movs	r3, #0
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f0:	2300      	movs	r3, #0
 80059f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f8:	4b79      	ldr	r3, [pc, #484]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 030c 	and.w	r3, r3, #12
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d00d      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x40>
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	f200 80e1 	bhi.w	8005bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_RCC_GetSysClockFreq+0x34>
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d003      	beq.n	8005a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a12:	e0db      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a14:	4b73      	ldr	r3, [pc, #460]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a18:	e0db      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a1a:	4b72      	ldr	r3, [pc, #456]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a1e:	e0d8      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a20:	4b6f      	ldr	r3, [pc, #444]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d063      	beq.n	8005afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a36:	4b6a      	ldr	r3, [pc, #424]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	f04f 0000 	mov.w	r0, #0
 8005a5a:	f04f 0100 	mov.w	r1, #0
 8005a5e:	0159      	lsls	r1, r3, #5
 8005a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a64:	0150      	lsls	r0, r2, #5
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	1a51      	subs	r1, r2, r1
 8005a6e:	6139      	str	r1, [r7, #16]
 8005a70:	4629      	mov	r1, r5
 8005a72:	eb63 0301 	sbc.w	r3, r3, r1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a84:	4659      	mov	r1, fp
 8005a86:	018b      	lsls	r3, r1, #6
 8005a88:	4651      	mov	r1, sl
 8005a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a8e:	4651      	mov	r1, sl
 8005a90:	018a      	lsls	r2, r1, #6
 8005a92:	4651      	mov	r1, sl
 8005a94:	ebb2 0801 	subs.w	r8, r2, r1
 8005a98:	4659      	mov	r1, fp
 8005a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ab2:	4690      	mov	r8, r2
 8005ab4:	4699      	mov	r9, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	eb18 0303 	adds.w	r3, r8, r3
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	462b      	mov	r3, r5
 8005ac0:	eb49 0303 	adc.w	r3, r9, r3
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	028b      	lsls	r3, r1, #10
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005adc:	4621      	mov	r1, r4
 8005ade:	028a      	lsls	r2, r1, #10
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005af0:	f7fa fc0e 	bl	8000310 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4613      	mov	r3, r2
 8005afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005afc:	e058      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afe:	4b38      	ldr	r3, [pc, #224]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	2200      	movs	r2, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	4611      	mov	r1, r2
 8005b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	2300      	movs	r3, #0
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	f04f 0000 	mov.w	r0, #0
 8005b20:	f04f 0100 	mov.w	r1, #0
 8005b24:	0159      	lsls	r1, r3, #5
 8005b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b2a:	0150      	lsls	r0, r2, #5
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4641      	mov	r1, r8
 8005b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b36:	4649      	mov	r1, r9
 8005b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b50:	ebb2 040a 	subs.w	r4, r2, sl
 8005b54:	eb63 050b 	sbc.w	r5, r3, fp
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	00eb      	lsls	r3, r5, #3
 8005b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b66:	00e2      	lsls	r2, r4, #3
 8005b68:	4614      	mov	r4, r2
 8005b6a:	461d      	mov	r5, r3
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	18e3      	adds	r3, r4, r3
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	464b      	mov	r3, r9
 8005b74:	eb45 0303 	adc.w	r3, r5, r3
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b86:	4629      	mov	r1, r5
 8005b88:	028b      	lsls	r3, r1, #10
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b90:	4621      	mov	r1, r4
 8005b92:	028a      	lsls	r2, r1, #10
 8005b94:	4610      	mov	r0, r2
 8005b96:	4619      	mov	r1, r3
 8005b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	61fa      	str	r2, [r7, #28]
 8005ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba4:	f7fa fbb4 	bl	8000310 <__aeabi_uldivmod>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4613      	mov	r3, r2
 8005bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bca:	e002      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bcc:	4b05      	ldr	r3, [pc, #20]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3750      	adds	r7, #80	@ 0x50
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800
 8005be4:	00f42400 	.word	0x00f42400

08005be8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bec:	4b03      	ldr	r3, [pc, #12]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	2000001c 	.word	0x2000001c

08005c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c04:	f7ff fff0 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	0a9b      	lsrs	r3, r3, #10
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4903      	ldr	r1, [pc, #12]	@ (8005c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40023800 	.word	0x40023800
 8005c24:	0800a004 	.word	0x0800a004

08005c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c2c:	f7ff ffdc 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c30:	4602      	mov	r2, r0
 8005c32:	4b05      	ldr	r3, [pc, #20]	@ (8005c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	0b5b      	lsrs	r3, r3, #13
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	4903      	ldr	r1, [pc, #12]	@ (8005c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3e:	5ccb      	ldrb	r3, [r1, r3]
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	0800a004 	.word	0x0800a004

08005c50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	220f      	movs	r2, #15
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c60:	4b12      	ldr	r3, [pc, #72]	@ (8005cac <HAL_RCC_GetClockConfig+0x5c>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0203 	and.w	r2, r3, #3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005cac <HAL_RCC_GetClockConfig+0x5c>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c78:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <HAL_RCC_GetClockConfig+0x5c>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005c84:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <HAL_RCC_GetClockConfig+0x5c>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	08db      	lsrs	r3, r3, #3
 8005c8a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c92:	4b07      	ldr	r3, [pc, #28]	@ (8005cb0 <HAL_RCC_GetClockConfig+0x60>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 020f 	and.w	r2, r3, #15
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	601a      	str	r2, [r3, #0]
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40023c00 	.word	0x40023c00

08005cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cdc:	4b69      	ldr	r3, [pc, #420]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a68      	ldr	r2, [pc, #416]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ce6:	6093      	str	r3, [r2, #8]
 8005ce8:	4b66      	ldr	r3, [pc, #408]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf0:	4964      	ldr	r1, [pc, #400]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d017      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1c:	4959      	ldr	r1, [pc, #356]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d017      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d58:	494a      	ldr	r1, [pc, #296]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d68:	d101      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005d86:	2301      	movs	r3, #1
 8005d88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 808b 	beq.w	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d98:	4b3a      	ldr	r3, [pc, #232]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	4a39      	ldr	r2, [pc, #228]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005da4:	4b37      	ldr	r3, [pc, #220]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005db0:	4b35      	ldr	r3, [pc, #212]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a34      	ldr	r2, [pc, #208]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dbc:	f7fe ff0e 	bl	8004bdc <HAL_GetTick>
 8005dc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc4:	f7fe ff0a 	bl	8004bdc <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	@ 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e38f      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de2:	4b28      	ldr	r3, [pc, #160]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d035      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d02e      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e00:	4b20      	ldr	r3, [pc, #128]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e14:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e16:	4b1b      	ldr	r3, [pc, #108]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e22:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e28:	4b16      	ldr	r3, [pc, #88]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d114      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fe fed2 	bl	8004bdc <HAL_GetTick>
 8005e38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e3c:	f7fe fece 	bl	8004bdc <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e351      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e52:	4b0c      	ldr	r3, [pc, #48]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ee      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e6a:	d111      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005e6c:	4b05      	ldr	r3, [pc, #20]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e78:	4b04      	ldr	r3, [pc, #16]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e7a:	400b      	ands	r3, r1
 8005e7c:	4901      	ldr	r1, [pc, #4]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	608b      	str	r3, [r1, #8]
 8005e82:	e00b      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005e84:	40023800 	.word	0x40023800
 8005e88:	40007000 	.word	0x40007000
 8005e8c:	0ffffcff 	.word	0x0ffffcff
 8005e90:	4bac      	ldr	r3, [pc, #688]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	4aab      	ldr	r2, [pc, #684]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e9a:	6093      	str	r3, [r2, #8]
 8005e9c:	4ba9      	ldr	r3, [pc, #676]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea8:	49a6      	ldr	r1, [pc, #664]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d010      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005eba:	4ba2      	ldr	r3, [pc, #648]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ec0:	4aa0      	ldr	r2, [pc, #640]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ec6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005eca:	4b9e      	ldr	r3, [pc, #632]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ecc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed4:	499b      	ldr	r1, [pc, #620]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ee8:	4b96      	ldr	r3, [pc, #600]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef6:	4993      	ldr	r1, [pc, #588]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f0a:	4b8e      	ldr	r3, [pc, #568]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f18:	498a      	ldr	r1, [pc, #552]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f2c:	4b85      	ldr	r3, [pc, #532]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f3a:	4982      	ldr	r1, [pc, #520]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5c:	4979      	ldr	r1, [pc, #484]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f70:	4b74      	ldr	r3, [pc, #464]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f76:	f023 0203 	bic.w	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7e:	4971      	ldr	r1, [pc, #452]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f92:	4b6c      	ldr	r3, [pc, #432]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f98:	f023 020c 	bic.w	r2, r3, #12
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa0:	4968      	ldr	r1, [pc, #416]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fb4:	4b63      	ldr	r3, [pc, #396]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc2:	4960      	ldr	r1, [pc, #384]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fdc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe4:	4957      	ldr	r1, [pc, #348]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ff8:	4b52      	ldr	r3, [pc, #328]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ffe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006006:	494f      	ldr	r1, [pc, #316]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800601a:	4b4a      	ldr	r3, [pc, #296]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800601c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006020:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006028:	4946      	ldr	r1, [pc, #280]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800603c:	4b41      	ldr	r3, [pc, #260]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006042:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604a:	493e      	ldr	r1, [pc, #248]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800605e:	4b39      	ldr	r3, [pc, #228]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006064:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800606c:	4935      	ldr	r1, [pc, #212]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006080:	4b30      	ldr	r3, [pc, #192]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006086:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800608e:	492d      	ldr	r1, [pc, #180]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d011      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060a2:	4b28      	ldr	r3, [pc, #160]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b0:	4924      	ldr	r1, [pc, #144]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060c0:	d101      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060e2:	4b18      	ldr	r3, [pc, #96]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060f0:	4914      	ldr	r1, [pc, #80]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00b      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006114:	490b      	ldr	r1, [pc, #44]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00f      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006128:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006138:	4902      	ldr	r1, [pc, #8]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006140:	e002      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00b      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006154:	4b8a      	ldr	r3, [pc, #552]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800615a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006164:	4986      	ldr	r1, [pc, #536]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006178:	4b81      	ldr	r3, [pc, #516]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800617a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800617e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006188:	497d      	ldr	r1, [pc, #500]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d006      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80d6 	beq.w	8006350 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061a4:	4b76      	ldr	r3, [pc, #472]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a75      	ldr	r2, [pc, #468]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b0:	f7fe fd14 	bl	8004bdc <HAL_GetTick>
 80061b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061b8:	f7fe fd10 	bl	8004bdc <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	@ 0x64
 80061c4:	d901      	bls.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e195      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d021      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d11d      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061ea:	4b65      	ldr	r3, [pc, #404]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061f8:	4b61      	ldr	r3, [pc, #388]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061fe:	0e1b      	lsrs	r3, r3, #24
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	019a      	lsls	r2, r3, #6
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	431a      	orrs	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	061b      	lsls	r3, r3, #24
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	071b      	lsls	r3, r3, #28
 800621e:	4958      	ldr	r1, [pc, #352]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d004      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800623a:	d00a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006244:	2b00      	cmp	r3, #0
 8006246:	d02e      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006250:	d129      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006252:	4b4b      	ldr	r3, [pc, #300]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006258:	0c1b      	lsrs	r3, r3, #16
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006260:	4b47      	ldr	r3, [pc, #284]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006266:	0f1b      	lsrs	r3, r3, #28
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	019a      	lsls	r2, r3, #6
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	041b      	lsls	r3, r3, #16
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	061b      	lsls	r3, r3, #24
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	071b      	lsls	r3, r3, #28
 8006286:	493e      	ldr	r1, [pc, #248]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800628e:	4b3c      	ldr	r3, [pc, #240]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006294:	f023 021f 	bic.w	r2, r3, #31
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	3b01      	subs	r3, #1
 800629e:	4938      	ldr	r1, [pc, #224]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01d      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062b2:	4b33      	ldr	r3, [pc, #204]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062b8:	0e1b      	lsrs	r3, r3, #24
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062c0:	4b2f      	ldr	r3, [pc, #188]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c6:	0f1b      	lsrs	r3, r3, #28
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	019a      	lsls	r2, r3, #6
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	431a      	orrs	r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	061b      	lsls	r3, r3, #24
 80062e0:	431a      	orrs	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	071b      	lsls	r3, r3, #28
 80062e6:	4926      	ldr	r1, [pc, #152]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d011      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	019a      	lsls	r2, r3, #6
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	061b      	lsls	r3, r3, #24
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	071b      	lsls	r3, r3, #28
 8006316:	491a      	ldr	r1, [pc, #104]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800631e:	4b18      	ldr	r3, [pc, #96]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632a:	f7fe fc57 	bl	8004bdc <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006330:	e008      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006332:	f7fe fc53 	bl	8004bdc <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b64      	cmp	r3, #100	@ 0x64
 800633e:	d901      	bls.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e0d8      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006344:	4b0e      	ldr	r3, [pc, #56]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b01      	cmp	r3, #1
 8006354:	f040 80ce 	bne.w	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006358:	4b09      	ldr	r3, [pc, #36]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a08      	ldr	r2, [pc, #32]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800635e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006364:	f7fe fc3a 	bl	8004bdc <HAL_GetTick>
 8006368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800636a:	e00b      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800636c:	f7fe fc36 	bl	8004bdc <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	@ 0x64
 8006378:	d904      	bls.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e0bb      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800637e:	bf00      	nop
 8006380:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006384:	4b5e      	ldr	r3, [pc, #376]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800638c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006390:	d0ec      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d02e      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d12a      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063ba:	4b51      	ldr	r3, [pc, #324]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ce:	0f1b      	lsrs	r3, r3, #28
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	019a      	lsls	r2, r3, #6
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	061b      	lsls	r3, r3, #24
 80063e8:	431a      	orrs	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	071b      	lsls	r3, r3, #28
 80063ee:	4944      	ldr	r1, [pc, #272]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063f6:	4b42      	ldr	r3, [pc, #264]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	3b01      	subs	r3, #1
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	493d      	ldr	r1, [pc, #244]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800640a:	4313      	orrs	r3, r2
 800640c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d022      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006424:	d11d      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006426:	4b36      	ldr	r3, [pc, #216]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642c:	0e1b      	lsrs	r3, r3, #24
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006434:	4b32      	ldr	r3, [pc, #200]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643a:	0f1b      	lsrs	r3, r3, #28
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	019a      	lsls	r2, r3, #6
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	041b      	lsls	r3, r3, #16
 800644e:	431a      	orrs	r2, r3
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	061b      	lsls	r3, r3, #24
 8006454:	431a      	orrs	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	071b      	lsls	r3, r3, #28
 800645a:	4929      	ldr	r1, [pc, #164]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d028      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800646e:	4b24      	ldr	r3, [pc, #144]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006474:	0e1b      	lsrs	r3, r3, #24
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800647c:	4b20      	ldr	r3, [pc, #128]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	019a      	lsls	r2, r3, #6
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	431a      	orrs	r2, r3
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	061b      	lsls	r3, r3, #24
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	071b      	lsls	r3, r3, #28
 80064a2:	4917      	ldr	r1, [pc, #92]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80064aa:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b8:	4911      	ldr	r1, [pc, #68]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80064c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a0e      	ldr	r2, [pc, #56]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064cc:	f7fe fb86 	bl	8004bdc <HAL_GetTick>
 80064d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064d4:	f7fe fb82 	bl	8004bdc <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	@ 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e007      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064e6:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064f2:	d1ef      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40023800 	.word	0x40023800

08006504 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e071      	b.n	80065fe <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	7f5b      	ldrb	r3, [r3, #29]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fd fcde 	bl	8003eec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b10      	cmp	r3, #16
 8006542:	d053      	beq.n	80065ec <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	22ca      	movs	r2, #202	@ 0xca
 800654a:	625a      	str	r2, [r3, #36]	@ 0x24
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2253      	movs	r2, #83	@ 0x53
 8006552:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa4b 	bl	80069f0 <RTC_EnterInitMode>
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d12a      	bne.n	80065ba <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6899      	ldr	r1, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b26      	ldr	r3, [pc, #152]	@ (8006608 <HAL_RTC_Init+0x104>)
 8006570:	400b      	ands	r3, r1
 8006572:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6899      	ldr	r1, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	68d2      	ldr	r2, [r2, #12]
 800659a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6919      	ldr	r1, [r3, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	041a      	lsls	r2, r3, #16
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa54 	bl	8006a5e <RTC_ExitInitMode>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d110      	bne.n	80065e2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0208 	bic.w	r2, r2, #8
 80065ce:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699a      	ldr	r2, [r3, #24]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	22ff      	movs	r2, #255	@ 0xff
 80065e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80065ea:	e001      	b.n	80065f0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	ff8fffbf 	.word	0xff8fffbf

0800660c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	7f1b      	ldrb	r3, [r3, #28]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_RTC_SetTime+0x1c>
 8006624:	2302      	movs	r3, #2
 8006626:	e085      	b.n	8006734 <HAL_RTC_SetTime+0x128>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2202      	movs	r2, #2
 8006632:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d126      	bne.n	8006688 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fa28 	bl	8006aa8 <RTC_ByteToBcd2>
 8006658:	4603      	mov	r3, r0
 800665a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fa21 	bl	8006aa8 <RTC_ByteToBcd2>
 8006666:	4603      	mov	r3, r0
 8006668:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800666a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	789b      	ldrb	r3, [r3, #2]
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fa19 	bl	8006aa8 <RTC_ByteToBcd2>
 8006676:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006678:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	78db      	ldrb	r3, [r3, #3]
 8006680:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	e018      	b.n	80066ba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d102      	bne.n	800669c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2200      	movs	r2, #0
 800669a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066a8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80066ae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	78db      	ldrb	r3, [r3, #3]
 80066b4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	22ca      	movs	r2, #202	@ 0xca
 80066c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2253      	movs	r2, #83	@ 0x53
 80066c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f990 	bl	80069f0 <RTC_EnterInitMode>
 80066d0:	4603      	mov	r3, r0
 80066d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80066d4:	7cfb      	ldrb	r3, [r7, #19]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d11e      	bne.n	8006718 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	6979      	ldr	r1, [r7, #20]
 80066e0:	4b16      	ldr	r3, [pc, #88]	@ (800673c <HAL_RTC_SetTime+0x130>)
 80066e2:	400b      	ands	r3, r1
 80066e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80066f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6899      	ldr	r1, [r3, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	431a      	orrs	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 f9a5 	bl	8006a5e <RTC_ExitInitMode>
 8006714:	4603      	mov	r3, r0
 8006716:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006718:	7cfb      	ldrb	r3, [r7, #19]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	22ff      	movs	r2, #255	@ 0xff
 800672a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	771a      	strb	r2, [r3, #28]

  return status;
 8006732:	7cfb      	ldrb	r3, [r7, #19]
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	bd90      	pop	{r4, r7, pc}
 800673c:	007f7f7f 	.word	0x007f7f7f

08006740 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4b22      	ldr	r3, [pc, #136]	@ (80067f8 <HAL_RTC_GetTime+0xb8>)
 8006770:	4013      	ands	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	0c1b      	lsrs	r3, r3, #16
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800677e:	b2da      	uxtb	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800678e:	b2da      	uxtb	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800679c:	b2da      	uxtb	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	0d9b      	lsrs	r3, r3, #22
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d11a      	bne.n	80067ee <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 f991 	bl	8006ae4 <RTC_Bcd2ToByte>
 80067c2:	4603      	mov	r3, r0
 80067c4:	461a      	mov	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f988 	bl	8006ae4 <RTC_Bcd2ToByte>
 80067d4:	4603      	mov	r3, r0
 80067d6:	461a      	mov	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	789b      	ldrb	r3, [r3, #2]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 f97f 	bl	8006ae4 <RTC_Bcd2ToByte>
 80067e6:	4603      	mov	r3, r0
 80067e8:	461a      	mov	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	007f7f7f 	.word	0x007f7f7f

080067fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80067fc:	b590      	push	{r4, r7, lr}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	7f1b      	ldrb	r3, [r3, #28]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_RTC_SetDate+0x1c>
 8006814:	2302      	movs	r3, #2
 8006816:	e06f      	b.n	80068f8 <HAL_RTC_SetDate+0xfc>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2202      	movs	r2, #2
 8006822:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10e      	bne.n	8006848 <HAL_RTC_SetDate+0x4c>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b00      	cmp	r3, #0
 8006834:	d008      	beq.n	8006848 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	f023 0310 	bic.w	r3, r3, #16
 800683e:	b2db      	uxtb	r3, r3
 8006840:	330a      	adds	r3, #10
 8006842:	b2da      	uxtb	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11c      	bne.n	8006888 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 f928 	bl	8006aa8 <RTC_ByteToBcd2>
 8006858:	4603      	mov	r3, r0
 800685a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	4618      	mov	r0, r3
 8006862:	f000 f921 	bl	8006aa8 <RTC_ByteToBcd2>
 8006866:	4603      	mov	r3, r0
 8006868:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800686a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	789b      	ldrb	r3, [r3, #2]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 f919 	bl	8006aa8 <RTC_ByteToBcd2>
 8006876:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006878:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e00e      	b.n	80068a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	78db      	ldrb	r3, [r3, #3]
 800688c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006894:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800689a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	22ca      	movs	r2, #202	@ 0xca
 80068ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2253      	movs	r2, #83	@ 0x53
 80068b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f89a 	bl	80069f0 <RTC_EnterInitMode>
 80068bc:	4603      	mov	r3, r0
 80068be:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80068c0:	7cfb      	ldrb	r3, [r7, #19]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	6979      	ldr	r1, [r7, #20]
 80068cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006900 <HAL_RTC_SetDate+0x104>)
 80068ce:	400b      	ands	r3, r1
 80068d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f8c3 	bl	8006a5e <RTC_ExitInitMode>
 80068d8:	4603      	mov	r3, r0
 80068da:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80068dc:	7cfb      	ldrb	r3, [r7, #19]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	22ff      	movs	r2, #255	@ 0xff
 80068ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	771a      	strb	r2, [r3, #28]

  return status;
 80068f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}
 8006900:	00ffff3f 	.word	0x00ffff3f

08006904 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <HAL_RTC_GetDate+0x9c>)
 800691c:	4013      	ands	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	0c1b      	lsrs	r3, r3, #16
 8006924:	b2da      	uxtb	r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	0b5b      	lsrs	r3, r3, #13
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	b2da      	uxtb	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d11a      	bne.n	8006994 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	78db      	ldrb	r3, [r3, #3]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 f8be 	bl	8006ae4 <RTC_Bcd2ToByte>
 8006968:	4603      	mov	r3, r0
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 f8b5 	bl	8006ae4 <RTC_Bcd2ToByte>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	789b      	ldrb	r3, [r3, #2]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 f8ac 	bl	8006ae4 <RTC_Bcd2ToByte>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	00ffff3f 	.word	0x00ffff3f

080069a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a0d      	ldr	r2, [pc, #52]	@ (80069ec <HAL_RTC_WaitForSynchro+0x48>)
 80069b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069b8:	f7fe f910 	bl	8004bdc <HAL_GetTick>
 80069bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069be:	e009      	b.n	80069d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069c0:	f7fe f90c 	bl	8004bdc <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069ce:	d901      	bls.n	80069d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e007      	b.n	80069e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0ee      	beq.n	80069c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	0001ff5f 	.word	0x0001ff5f

080069f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d122      	bne.n	8006a54 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a1c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a1e:	f7fe f8dd 	bl	8004bdc <HAL_GetTick>
 8006a22:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a24:	e00c      	b.n	8006a40 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a26:	f7fe f8d9 	bl	8004bdc <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a34:	d904      	bls.n	8006a40 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <RTC_EnterInitMode+0x64>
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d1e8      	bne.n	8006a26 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a78:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ff8b 	bl	80069a4 <HAL_RTC_WaitForSynchro>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2204      	movs	r2, #4
 8006a98:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006ab6:	e005      	b.n	8006ac4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	3b0a      	subs	r3, #10
 8006ac2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	2b09      	cmp	r3, #9
 8006ac8:	d8f6      	bhi.n	8006ab8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	b2db      	uxtb	r3, r3
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	b2db      	uxtb	r3, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e049      	b.n	8006bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f841 	bl	8006bce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 f9e8 	bl	8006f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d001      	beq.n	8006bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e054      	b.n	8006ca6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a26      	ldr	r2, [pc, #152]	@ (8006cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d022      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x80>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c26:	d01d      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x80>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a22      	ldr	r2, [pc, #136]	@ (8006cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x80>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a21      	ldr	r2, [pc, #132]	@ (8006cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d013      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x80>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00e      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x80>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x80>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x80>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006ccc <HAL_TIM_Base_Start_IT+0xe8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d115      	bne.n	8006c90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	4b19      	ldr	r3, [pc, #100]	@ (8006cd0 <HAL_TIM_Base_Start_IT+0xec>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b06      	cmp	r3, #6
 8006c74:	d015      	beq.n	8006ca2 <HAL_TIM_Base_Start_IT+0xbe>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c7c:	d011      	beq.n	8006ca2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0201 	orr.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	e008      	b.n	8006ca2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e000      	b.n	8006ca4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	40010400 	.word	0x40010400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40001800 	.word	0x40001800
 8006cd0:	00010007 	.word	0x00010007

08006cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d020      	beq.n	8006d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01b      	beq.n	8006d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0202 	mvn.w	r2, #2
 8006d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f8e9 	bl	8006ef6 <HAL_TIM_IC_CaptureCallback>
 8006d24:	e005      	b.n	8006d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f8db 	bl	8006ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f8ec 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d020      	beq.n	8006d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01b      	beq.n	8006d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0204 	mvn.w	r2, #4
 8006d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f8c3 	bl	8006ef6 <HAL_TIM_IC_CaptureCallback>
 8006d70:	e005      	b.n	8006d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8b5 	bl	8006ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8c6 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d020      	beq.n	8006dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01b      	beq.n	8006dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0208 	mvn.w	r2, #8
 8006da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2204      	movs	r2, #4
 8006da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f89d 	bl	8006ef6 <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f88f 	bl	8006ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f8a0 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d020      	beq.n	8006e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01b      	beq.n	8006e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0210 	mvn.w	r2, #16
 8006dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2208      	movs	r2, #8
 8006df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f877 	bl	8006ef6 <HAL_TIM_IC_CaptureCallback>
 8006e08:	e005      	b.n	8006e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f869 	bl	8006ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f87a 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00c      	beq.n	8006e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f06f 0201 	mvn.w	r2, #1
 8006e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fc ff0c 	bl	8003c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00c      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f919 	bl	80070a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f911 	bl	80070b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00c      	beq.n	8006eb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f834 	bl	8006f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00c      	beq.n	8006eda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f06f 0220 	mvn.w	r2, #32
 8006ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8d9 	bl	800708c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eda:	bf00      	nop
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a46      	ldr	r2, [pc, #280]	@ (8007060 <TIM_Base_SetConfig+0x12c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f52:	d00f      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a43      	ldr	r2, [pc, #268]	@ (8007064 <TIM_Base_SetConfig+0x130>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00b      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a42      	ldr	r2, [pc, #264]	@ (8007068 <TIM_Base_SetConfig+0x134>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d007      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a41      	ldr	r2, [pc, #260]	@ (800706c <TIM_Base_SetConfig+0x138>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a40      	ldr	r2, [pc, #256]	@ (8007070 <TIM_Base_SetConfig+0x13c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d108      	bne.n	8006f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a35      	ldr	r2, [pc, #212]	@ (8007060 <TIM_Base_SetConfig+0x12c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02b      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f94:	d027      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a32      	ldr	r2, [pc, #200]	@ (8007064 <TIM_Base_SetConfig+0x130>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d023      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a31      	ldr	r2, [pc, #196]	@ (8007068 <TIM_Base_SetConfig+0x134>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01f      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a30      	ldr	r2, [pc, #192]	@ (800706c <TIM_Base_SetConfig+0x138>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01b      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8007070 <TIM_Base_SetConfig+0x13c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d017      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007074 <TIM_Base_SetConfig+0x140>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007078 <TIM_Base_SetConfig+0x144>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00f      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800707c <TIM_Base_SetConfig+0x148>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00b      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8007080 <TIM_Base_SetConfig+0x14c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8007084 <TIM_Base_SetConfig+0x150>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d003      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	@ (8007088 <TIM_Base_SetConfig+0x154>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d108      	bne.n	8006ff8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a10      	ldr	r2, [pc, #64]	@ (8007060 <TIM_Base_SetConfig+0x12c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_Base_SetConfig+0xf8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a12      	ldr	r2, [pc, #72]	@ (8007070 <TIM_Base_SetConfig+0x13c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d103      	bne.n	8007034 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b01      	cmp	r3, #1
 8007044:	d105      	bne.n	8007052 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f023 0201 	bic.w	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	611a      	str	r2, [r3, #16]
  }
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40010000 	.word	0x40010000
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40010400 	.word	0x40010400
 8007074:	40014000 	.word	0x40014000
 8007078:	40014400 	.word	0x40014400
 800707c:	40014800 	.word	0x40014800
 8007080:	40001800 	.word	0x40001800
 8007084:	40001c00 	.word	0x40001c00
 8007088:	40002000 	.word	0x40002000

0800708c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e040      	b.n	800715c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fc ff2c 	bl	8003f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2224      	movs	r2, #36	@ 0x24
 80070f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fe6c 	bl	8007dec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fc05 	bl	8007924 <UART_SetConfig>
 800711a:	4603      	mov	r3, r0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e01b      	b.n	800715c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 feeb 	bl	8007f30 <UART_CheckIdleState>
 800715a:	4603      	mov	r3, r0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	@ 0x28
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007178:	2b20      	cmp	r3, #32
 800717a:	d177      	bne.n	800726c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_UART_Transmit+0x24>
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e070      	b.n	800726e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2221      	movs	r2, #33	@ 0x21
 8007198:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800719a:	f7fd fd1f 	bl	8004bdc <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	88fa      	ldrh	r2, [r7, #6]
 80071a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b8:	d108      	bne.n	80071cc <HAL_UART_Transmit+0x68>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d104      	bne.n	80071cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	e003      	b.n	80071d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071d4:	e02f      	b.n	8007236 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2200      	movs	r2, #0
 80071de:	2180      	movs	r1, #128	@ 0x80
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 ff4d 	bl	8008080 <UART_WaitOnFlagUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e03b      	b.n	800726e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800720a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	3302      	adds	r3, #2
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	e007      	b.n	8007224 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	3301      	adds	r3, #1
 8007222:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1c9      	bne.n	80071d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	2140      	movs	r1, #64	@ 0x40
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 ff17 	bl	8008080 <UART_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e005      	b.n	800726e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	e000      	b.n	800726e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800726c:	2302      	movs	r3, #2
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	3720      	adds	r7, #32
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b08a      	sub	sp, #40	@ 0x28
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	4613      	mov	r3, r2
 8007282:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800728a:	2b20      	cmp	r3, #32
 800728c:	d132      	bne.n	80072f4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_UART_Receive_IT+0x24>
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e02b      	b.n	80072f6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d018      	beq.n	80072e4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	613b      	str	r3, [r7, #16]
   return(result);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	623b      	str	r3, [r7, #32]
 80072d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	69f9      	ldr	r1, [r7, #28]
 80072d6:	6a3a      	ldr	r2, [r7, #32]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	461a      	mov	r2, r3
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 ff36 	bl	800815c <UART_Start_Receive_IT>
 80072f0:	4603      	mov	r3, r0
 80072f2:	e000      	b.n	80072f6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
  }
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3728      	adds	r7, #40	@ 0x28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b0ba      	sub	sp, #232	@ 0xe8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007326:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800732a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800732e:	4013      	ands	r3, r2
 8007330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d115      	bne.n	8007368 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00f      	beq.n	8007368 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d009      	beq.n	8007368 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 82ac 	beq.w	80078b6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
      }
      return;
 8007366:	e2a6      	b.n	80078b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8117 	beq.w	80075a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d106      	bne.n	800738c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800737e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007382:	4b85      	ldr	r3, [pc, #532]	@ (8007598 <HAL_UART_IRQHandler+0x298>)
 8007384:	4013      	ands	r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 810a 	beq.w	80075a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800738c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d011      	beq.n	80073bc <HAL_UART_IRQHandler+0xbc>
 8007398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800739c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2201      	movs	r2, #1
 80073aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b2:	f043 0201 	orr.w	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d011      	beq.n	80073ec <HAL_UART_IRQHandler+0xec>
 80073c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2202      	movs	r2, #2
 80073da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073e2:	f043 0204 	orr.w	r2, r3, #4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d011      	beq.n	800741c <HAL_UART_IRQHandler+0x11c>
 80073f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2204      	movs	r2, #4
 800740a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007412:	f043 0202 	orr.w	r2, r3, #2
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800741c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b00      	cmp	r3, #0
 8007426:	d017      	beq.n	8007458 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d105      	bne.n	8007440 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007438:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2208      	movs	r2, #8
 8007446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800744e:	f043 0208 	orr.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007460:	2b00      	cmp	r3, #0
 8007462:	d012      	beq.n	800748a <HAL_UART_IRQHandler+0x18a>
 8007464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007468:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00c      	beq.n	800748a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007480:	f043 0220 	orr.w	r2, r3, #32
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8212 	beq.w	80078ba <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00d      	beq.n	80074be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d2:	2b40      	cmp	r3, #64	@ 0x40
 80074d4:	d005      	beq.n	80074e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04f      	beq.n	8007582 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 ff00 	bl	80082e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f2:	2b40      	cmp	r3, #64	@ 0x40
 80074f4:	d141      	bne.n	800757a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3308      	adds	r3, #8
 80074fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800750c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007522:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800752e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800753a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1d9      	bne.n	80074f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007546:	2b00      	cmp	r3, #0
 8007548:	d013      	beq.n	8007572 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754e:	4a13      	ldr	r2, [pc, #76]	@ (800759c <HAL_UART_IRQHandler+0x29c>)
 8007550:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007556:	4618      	mov	r0, r3
 8007558:	f7fd fc9e 	bl	8004e98 <HAL_DMA_Abort_IT>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d017      	beq.n	8007592 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007570:	e00f      	b.n	8007592 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9b6 	bl	80078e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007578:	e00b      	b.n	8007592 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9b2 	bl	80078e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	e007      	b.n	8007592 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f9ae 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007590:	e193      	b.n	80078ba <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007592:	bf00      	nop
    return;
 8007594:	e191      	b.n	80078ba <HAL_UART_IRQHandler+0x5ba>
 8007596:	bf00      	nop
 8007598:	04000120 	.word	0x04000120
 800759c:	080083b1 	.word	0x080083b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	f040 814c 	bne.w	8007842 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ae:	f003 0310 	and.w	r3, r3, #16
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 8145 	beq.w	8007842 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 813e 	beq.w	8007842 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2210      	movs	r2, #16
 80075cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d8:	2b40      	cmp	r3, #64	@ 0x40
 80075da:	f040 80b6 	bne.w	800774a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8165 	beq.w	80078be <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075fe:	429a      	cmp	r2, r3
 8007600:	f080 815d 	bcs.w	80078be <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800760a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007618:	f000 8086 	beq.w	8007728 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800764a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007652:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800765e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1da      	bne.n	800761c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3308      	adds	r3, #8
 8007686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800768a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800768e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007692:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800769c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e1      	bne.n	8007666 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e3      	bne.n	80076a2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f8:	f023 0310 	bic.w	r3, r3, #16
 80076fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800770a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800770c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007710:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e4      	bne.n	80076e8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007722:	4618      	mov	r0, r3
 8007724:	f7fd fb48 	bl	8004db8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800773a:	b29b      	uxth	r3, r3
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	b29b      	uxth	r3, r3
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f8d8 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007748:	e0b9      	b.n	80078be <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007756:	b29b      	uxth	r3, r3
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 80ab 	beq.w	80078c2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800776c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 80a6 	beq.w	80078c2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007798:	647b      	str	r3, [r7, #68]	@ 0x44
 800779a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800779e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e4      	bne.n	8007776 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	623b      	str	r3, [r7, #32]
   return(result);
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80077d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e3      	bne.n	80077ac <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	60fb      	str	r3, [r7, #12]
   return(result);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0310 	bic.w	r3, r3, #16
 800780c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	69b9      	ldr	r1, [r7, #24]
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	617b      	str	r3, [r7, #20]
   return(result);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e4      	bne.n	80077f8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f85c 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007840:	e03f      	b.n	80078c2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00e      	beq.n	800786c <HAL_UART_IRQHandler+0x56c>
 800784e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d008      	beq.n	800786c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007862:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f853 	bl	8007910 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800786a:	e02d      	b.n	80078c8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800786c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800787c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01c      	beq.n	80078c6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
    }
    return;
 8007894:	e017      	b.n	80078c6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d012      	beq.n	80078c8 <HAL_UART_IRQHandler+0x5c8>
 80078a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00c      	beq.n	80078c8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fd94 	bl	80083dc <UART_EndTransmit_IT>
    return;
 80078b4:	e008      	b.n	80078c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80078b6:	bf00      	nop
 80078b8:	e006      	b.n	80078c8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80078ba:	bf00      	nop
 80078bc:	e004      	b.n	80078c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80078be:	bf00      	nop
 80078c0:	e002      	b.n	80078c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80078c6:	bf00      	nop
  }

}
 80078c8:	37e8      	adds	r7, #232	@ 0xe8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop

080078d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4ba6      	ldr	r3, [pc, #664]	@ (8007be8 <UART_SetConfig+0x2c4>)
 8007950:	4013      	ands	r3, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	6979      	ldr	r1, [r7, #20]
 8007958:	430b      	orrs	r3, r1
 800795a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	430a      	orrs	r2, r1
 8007994:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a94      	ldr	r2, [pc, #592]	@ (8007bec <UART_SetConfig+0x2c8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d120      	bne.n	80079e2 <UART_SetConfig+0xbe>
 80079a0:	4b93      	ldr	r3, [pc, #588]	@ (8007bf0 <UART_SetConfig+0x2cc>)
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d816      	bhi.n	80079dc <UART_SetConfig+0xb8>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <UART_SetConfig+0x90>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079c5 	.word	0x080079c5
 80079b8:	080079d1 	.word	0x080079d1
 80079bc:	080079cb 	.word	0x080079cb
 80079c0:	080079d7 	.word	0x080079d7
 80079c4:	2301      	movs	r3, #1
 80079c6:	77fb      	strb	r3, [r7, #31]
 80079c8:	e150      	b.n	8007c6c <UART_SetConfig+0x348>
 80079ca:	2302      	movs	r3, #2
 80079cc:	77fb      	strb	r3, [r7, #31]
 80079ce:	e14d      	b.n	8007c6c <UART_SetConfig+0x348>
 80079d0:	2304      	movs	r3, #4
 80079d2:	77fb      	strb	r3, [r7, #31]
 80079d4:	e14a      	b.n	8007c6c <UART_SetConfig+0x348>
 80079d6:	2308      	movs	r3, #8
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e147      	b.n	8007c6c <UART_SetConfig+0x348>
 80079dc:	2310      	movs	r3, #16
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e144      	b.n	8007c6c <UART_SetConfig+0x348>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a83      	ldr	r2, [pc, #524]	@ (8007bf4 <UART_SetConfig+0x2d0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d132      	bne.n	8007a52 <UART_SetConfig+0x12e>
 80079ec:	4b80      	ldr	r3, [pc, #512]	@ (8007bf0 <UART_SetConfig+0x2cc>)
 80079ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f2:	f003 030c 	and.w	r3, r3, #12
 80079f6:	2b0c      	cmp	r3, #12
 80079f8:	d828      	bhi.n	8007a4c <UART_SetConfig+0x128>
 80079fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <UART_SetConfig+0xdc>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a35 	.word	0x08007a35
 8007a04:	08007a4d 	.word	0x08007a4d
 8007a08:	08007a4d 	.word	0x08007a4d
 8007a0c:	08007a4d 	.word	0x08007a4d
 8007a10:	08007a41 	.word	0x08007a41
 8007a14:	08007a4d 	.word	0x08007a4d
 8007a18:	08007a4d 	.word	0x08007a4d
 8007a1c:	08007a4d 	.word	0x08007a4d
 8007a20:	08007a3b 	.word	0x08007a3b
 8007a24:	08007a4d 	.word	0x08007a4d
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a4d 	.word	0x08007a4d
 8007a30:	08007a47 	.word	0x08007a47
 8007a34:	2300      	movs	r3, #0
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e118      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	77fb      	strb	r3, [r7, #31]
 8007a3e:	e115      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a40:	2304      	movs	r3, #4
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e112      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a46:	2308      	movs	r3, #8
 8007a48:	77fb      	strb	r3, [r7, #31]
 8007a4a:	e10f      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	77fb      	strb	r3, [r7, #31]
 8007a50:	e10c      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a68      	ldr	r2, [pc, #416]	@ (8007bf8 <UART_SetConfig+0x2d4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d120      	bne.n	8007a9e <UART_SetConfig+0x17a>
 8007a5c:	4b64      	ldr	r3, [pc, #400]	@ (8007bf0 <UART_SetConfig+0x2cc>)
 8007a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a66:	2b30      	cmp	r3, #48	@ 0x30
 8007a68:	d013      	beq.n	8007a92 <UART_SetConfig+0x16e>
 8007a6a:	2b30      	cmp	r3, #48	@ 0x30
 8007a6c:	d814      	bhi.n	8007a98 <UART_SetConfig+0x174>
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	d009      	beq.n	8007a86 <UART_SetConfig+0x162>
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d810      	bhi.n	8007a98 <UART_SetConfig+0x174>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <UART_SetConfig+0x15c>
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d006      	beq.n	8007a8c <UART_SetConfig+0x168>
 8007a7e:	e00b      	b.n	8007a98 <UART_SetConfig+0x174>
 8007a80:	2300      	movs	r3, #0
 8007a82:	77fb      	strb	r3, [r7, #31]
 8007a84:	e0f2      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a86:	2302      	movs	r3, #2
 8007a88:	77fb      	strb	r3, [r7, #31]
 8007a8a:	e0ef      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	77fb      	strb	r3, [r7, #31]
 8007a90:	e0ec      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a92:	2308      	movs	r3, #8
 8007a94:	77fb      	strb	r3, [r7, #31]
 8007a96:	e0e9      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	77fb      	strb	r3, [r7, #31]
 8007a9c:	e0e6      	b.n	8007c6c <UART_SetConfig+0x348>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a56      	ldr	r2, [pc, #344]	@ (8007bfc <UART_SetConfig+0x2d8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d120      	bne.n	8007aea <UART_SetConfig+0x1c6>
 8007aa8:	4b51      	ldr	r3, [pc, #324]	@ (8007bf0 <UART_SetConfig+0x2cc>)
 8007aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab4:	d013      	beq.n	8007ade <UART_SetConfig+0x1ba>
 8007ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab8:	d814      	bhi.n	8007ae4 <UART_SetConfig+0x1c0>
 8007aba:	2b80      	cmp	r3, #128	@ 0x80
 8007abc:	d009      	beq.n	8007ad2 <UART_SetConfig+0x1ae>
 8007abe:	2b80      	cmp	r3, #128	@ 0x80
 8007ac0:	d810      	bhi.n	8007ae4 <UART_SetConfig+0x1c0>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <UART_SetConfig+0x1a8>
 8007ac6:	2b40      	cmp	r3, #64	@ 0x40
 8007ac8:	d006      	beq.n	8007ad8 <UART_SetConfig+0x1b4>
 8007aca:	e00b      	b.n	8007ae4 <UART_SetConfig+0x1c0>
 8007acc:	2300      	movs	r3, #0
 8007ace:	77fb      	strb	r3, [r7, #31]
 8007ad0:	e0cc      	b.n	8007c6c <UART_SetConfig+0x348>
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	77fb      	strb	r3, [r7, #31]
 8007ad6:	e0c9      	b.n	8007c6c <UART_SetConfig+0x348>
 8007ad8:	2304      	movs	r3, #4
 8007ada:	77fb      	strb	r3, [r7, #31]
 8007adc:	e0c6      	b.n	8007c6c <UART_SetConfig+0x348>
 8007ade:	2308      	movs	r3, #8
 8007ae0:	77fb      	strb	r3, [r7, #31]
 8007ae2:	e0c3      	b.n	8007c6c <UART_SetConfig+0x348>
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	77fb      	strb	r3, [r7, #31]
 8007ae8:	e0c0      	b.n	8007c6c <UART_SetConfig+0x348>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a44      	ldr	r2, [pc, #272]	@ (8007c00 <UART_SetConfig+0x2dc>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d125      	bne.n	8007b40 <UART_SetConfig+0x21c>
 8007af4:	4b3e      	ldr	r3, [pc, #248]	@ (8007bf0 <UART_SetConfig+0x2cc>)
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b02:	d017      	beq.n	8007b34 <UART_SetConfig+0x210>
 8007b04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b08:	d817      	bhi.n	8007b3a <UART_SetConfig+0x216>
 8007b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b0e:	d00b      	beq.n	8007b28 <UART_SetConfig+0x204>
 8007b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b14:	d811      	bhi.n	8007b3a <UART_SetConfig+0x216>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <UART_SetConfig+0x1fe>
 8007b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b1e:	d006      	beq.n	8007b2e <UART_SetConfig+0x20a>
 8007b20:	e00b      	b.n	8007b3a <UART_SetConfig+0x216>
 8007b22:	2300      	movs	r3, #0
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e0a1      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	77fb      	strb	r3, [r7, #31]
 8007b2c:	e09e      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b2e:	2304      	movs	r3, #4
 8007b30:	77fb      	strb	r3, [r7, #31]
 8007b32:	e09b      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b34:	2308      	movs	r3, #8
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	e098      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b3a:	2310      	movs	r3, #16
 8007b3c:	77fb      	strb	r3, [r7, #31]
 8007b3e:	e095      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a2f      	ldr	r2, [pc, #188]	@ (8007c04 <UART_SetConfig+0x2e0>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d125      	bne.n	8007b96 <UART_SetConfig+0x272>
 8007b4a:	4b29      	ldr	r3, [pc, #164]	@ (8007bf0 <UART_SetConfig+0x2cc>)
 8007b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b58:	d017      	beq.n	8007b8a <UART_SetConfig+0x266>
 8007b5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b5e:	d817      	bhi.n	8007b90 <UART_SetConfig+0x26c>
 8007b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b64:	d00b      	beq.n	8007b7e <UART_SetConfig+0x25a>
 8007b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b6a:	d811      	bhi.n	8007b90 <UART_SetConfig+0x26c>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <UART_SetConfig+0x254>
 8007b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b74:	d006      	beq.n	8007b84 <UART_SetConfig+0x260>
 8007b76:	e00b      	b.n	8007b90 <UART_SetConfig+0x26c>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	77fb      	strb	r3, [r7, #31]
 8007b7c:	e076      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	77fb      	strb	r3, [r7, #31]
 8007b82:	e073      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b84:	2304      	movs	r3, #4
 8007b86:	77fb      	strb	r3, [r7, #31]
 8007b88:	e070      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	77fb      	strb	r3, [r7, #31]
 8007b8e:	e06d      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b90:	2310      	movs	r3, #16
 8007b92:	77fb      	strb	r3, [r7, #31]
 8007b94:	e06a      	b.n	8007c6c <UART_SetConfig+0x348>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8007c08 <UART_SetConfig+0x2e4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d138      	bne.n	8007c12 <UART_SetConfig+0x2ee>
 8007ba0:	4b13      	ldr	r3, [pc, #76]	@ (8007bf0 <UART_SetConfig+0x2cc>)
 8007ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007baa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bae:	d017      	beq.n	8007be0 <UART_SetConfig+0x2bc>
 8007bb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bb4:	d82a      	bhi.n	8007c0c <UART_SetConfig+0x2e8>
 8007bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bba:	d00b      	beq.n	8007bd4 <UART_SetConfig+0x2b0>
 8007bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bc0:	d824      	bhi.n	8007c0c <UART_SetConfig+0x2e8>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <UART_SetConfig+0x2aa>
 8007bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bca:	d006      	beq.n	8007bda <UART_SetConfig+0x2b6>
 8007bcc:	e01e      	b.n	8007c0c <UART_SetConfig+0x2e8>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	77fb      	strb	r3, [r7, #31]
 8007bd2:	e04b      	b.n	8007c6c <UART_SetConfig+0x348>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	77fb      	strb	r3, [r7, #31]
 8007bd8:	e048      	b.n	8007c6c <UART_SetConfig+0x348>
 8007bda:	2304      	movs	r3, #4
 8007bdc:	77fb      	strb	r3, [r7, #31]
 8007bde:	e045      	b.n	8007c6c <UART_SetConfig+0x348>
 8007be0:	2308      	movs	r3, #8
 8007be2:	77fb      	strb	r3, [r7, #31]
 8007be4:	e042      	b.n	8007c6c <UART_SetConfig+0x348>
 8007be6:	bf00      	nop
 8007be8:	efff69f3 	.word	0xefff69f3
 8007bec:	40011000 	.word	0x40011000
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	40004400 	.word	0x40004400
 8007bf8:	40004800 	.word	0x40004800
 8007bfc:	40004c00 	.word	0x40004c00
 8007c00:	40005000 	.word	0x40005000
 8007c04:	40011400 	.word	0x40011400
 8007c08:	40007800 	.word	0x40007800
 8007c0c:	2310      	movs	r3, #16
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	e02c      	b.n	8007c6c <UART_SetConfig+0x348>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a72      	ldr	r2, [pc, #456]	@ (8007de0 <UART_SetConfig+0x4bc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d125      	bne.n	8007c68 <UART_SetConfig+0x344>
 8007c1c:	4b71      	ldr	r3, [pc, #452]	@ (8007de4 <UART_SetConfig+0x4c0>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007c26:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007c2a:	d017      	beq.n	8007c5c <UART_SetConfig+0x338>
 8007c2c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007c30:	d817      	bhi.n	8007c62 <UART_SetConfig+0x33e>
 8007c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c36:	d00b      	beq.n	8007c50 <UART_SetConfig+0x32c>
 8007c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c3c:	d811      	bhi.n	8007c62 <UART_SetConfig+0x33e>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <UART_SetConfig+0x326>
 8007c42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c46:	d006      	beq.n	8007c56 <UART_SetConfig+0x332>
 8007c48:	e00b      	b.n	8007c62 <UART_SetConfig+0x33e>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	77fb      	strb	r3, [r7, #31]
 8007c4e:	e00d      	b.n	8007c6c <UART_SetConfig+0x348>
 8007c50:	2302      	movs	r3, #2
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e00a      	b.n	8007c6c <UART_SetConfig+0x348>
 8007c56:	2304      	movs	r3, #4
 8007c58:	77fb      	strb	r3, [r7, #31]
 8007c5a:	e007      	b.n	8007c6c <UART_SetConfig+0x348>
 8007c5c:	2308      	movs	r3, #8
 8007c5e:	77fb      	strb	r3, [r7, #31]
 8007c60:	e004      	b.n	8007c6c <UART_SetConfig+0x348>
 8007c62:	2310      	movs	r3, #16
 8007c64:	77fb      	strb	r3, [r7, #31]
 8007c66:	e001      	b.n	8007c6c <UART_SetConfig+0x348>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c74:	d15b      	bne.n	8007d2e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007c76:	7ffb      	ldrb	r3, [r7, #31]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d828      	bhi.n	8007cce <UART_SetConfig+0x3aa>
 8007c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <UART_SetConfig+0x360>)
 8007c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c82:	bf00      	nop
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007cb1 	.word	0x08007cb1
 8007c8c:	08007cb9 	.word	0x08007cb9
 8007c90:	08007ccf 	.word	0x08007ccf
 8007c94:	08007cbf 	.word	0x08007cbf
 8007c98:	08007ccf 	.word	0x08007ccf
 8007c9c:	08007ccf 	.word	0x08007ccf
 8007ca0:	08007ccf 	.word	0x08007ccf
 8007ca4:	08007cc7 	.word	0x08007cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca8:	f7fd ffaa 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8007cac:	61b8      	str	r0, [r7, #24]
        break;
 8007cae:	e013      	b.n	8007cd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cb0:	f7fd ffba 	bl	8005c28 <HAL_RCC_GetPCLK2Freq>
 8007cb4:	61b8      	str	r0, [r7, #24]
        break;
 8007cb6:	e00f      	b.n	8007cd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8007de8 <UART_SetConfig+0x4c4>)
 8007cba:	61bb      	str	r3, [r7, #24]
        break;
 8007cbc:	e00c      	b.n	8007cd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cbe:	f7fd fe8f 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 8007cc2:	61b8      	str	r0, [r7, #24]
        break;
 8007cc4:	e008      	b.n	8007cd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cca:	61bb      	str	r3, [r7, #24]
        break;
 8007ccc:	e004      	b.n	8007cd8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	77bb      	strb	r3, [r7, #30]
        break;
 8007cd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d074      	beq.n	8007dc8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	005a      	lsls	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	085b      	lsrs	r3, r3, #1
 8007ce8:	441a      	add	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b0f      	cmp	r3, #15
 8007cf8:	d916      	bls.n	8007d28 <UART_SetConfig+0x404>
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d00:	d212      	bcs.n	8007d28 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f023 030f 	bic.w	r3, r3, #15
 8007d0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	f003 0307 	and.w	r3, r3, #7
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	89fb      	ldrh	r3, [r7, #14]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	89fa      	ldrh	r2, [r7, #14]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	e04f      	b.n	8007dc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	77bb      	strb	r3, [r7, #30]
 8007d2c:	e04c      	b.n	8007dc8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d2e:	7ffb      	ldrb	r3, [r7, #31]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d828      	bhi.n	8007d86 <UART_SetConfig+0x462>
 8007d34:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <UART_SetConfig+0x418>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d69 	.word	0x08007d69
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	08007d87 	.word	0x08007d87
 8007d4c:	08007d77 	.word	0x08007d77
 8007d50:	08007d87 	.word	0x08007d87
 8007d54:	08007d87 	.word	0x08007d87
 8007d58:	08007d87 	.word	0x08007d87
 8007d5c:	08007d7f 	.word	0x08007d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d60:	f7fd ff4e 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8007d64:	61b8      	str	r0, [r7, #24]
        break;
 8007d66:	e013      	b.n	8007d90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d68:	f7fd ff5e 	bl	8005c28 <HAL_RCC_GetPCLK2Freq>
 8007d6c:	61b8      	str	r0, [r7, #24]
        break;
 8007d6e:	e00f      	b.n	8007d90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d70:	4b1d      	ldr	r3, [pc, #116]	@ (8007de8 <UART_SetConfig+0x4c4>)
 8007d72:	61bb      	str	r3, [r7, #24]
        break;
 8007d74:	e00c      	b.n	8007d90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d76:	f7fd fe33 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 8007d7a:	61b8      	str	r0, [r7, #24]
        break;
 8007d7c:	e008      	b.n	8007d90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d82:	61bb      	str	r3, [r7, #24]
        break;
 8007d84:	e004      	b.n	8007d90 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	77bb      	strb	r3, [r7, #30]
        break;
 8007d8e:	bf00      	nop
    }

    if (pclk != 0U)
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d018      	beq.n	8007dc8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	085a      	lsrs	r2, r3, #1
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	441a      	add	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b0f      	cmp	r3, #15
 8007dae:	d909      	bls.n	8007dc4 <UART_SetConfig+0x4a0>
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db6:	d205      	bcs.n	8007dc4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60da      	str	r2, [r3, #12]
 8007dc2:	e001      	b.n	8007dc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007dd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3720      	adds	r7, #32
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40007c00 	.word	0x40007c00
 8007de4:	40023800 	.word	0x40023800
 8007de8:	00f42400 	.word	0x00f42400

08007dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d01a      	beq.n	8007f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eea:	d10a      	bne.n	8007f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	605a      	str	r2, [r3, #4]
  }
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b098      	sub	sp, #96	@ 0x60
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f40:	f7fc fe4c 	bl	8004bdc <HAL_GetTick>
 8007f44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0308 	and.w	r3, r3, #8
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d12e      	bne.n	8007fb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f88c 	bl	8008080 <UART_WaitOnFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d021      	beq.n	8007fb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f82:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e6      	bne.n	8007f6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e062      	b.n	8008078 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d149      	bne.n	8008054 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f856 	bl	8008080 <UART_WaitOnFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d03c      	beq.n	8008054 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	623b      	str	r3, [r7, #32]
   return(result);
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e6      	bne.n	8007fda <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3308      	adds	r3, #8
 8008012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	60fb      	str	r3, [r7, #12]
   return(result);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0301 	bic.w	r3, r3, #1
 8008022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3308      	adds	r3, #8
 800802a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800802c:	61fa      	str	r2, [r7, #28]
 800802e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	69b9      	ldr	r1, [r7, #24]
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	617b      	str	r3, [r7, #20]
   return(result);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e5      	bne.n	800800c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e011      	b.n	8008078 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3758      	adds	r7, #88	@ 0x58
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	603b      	str	r3, [r7, #0]
 800808c:	4613      	mov	r3, r2
 800808e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008090:	e04f      	b.n	8008132 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d04b      	beq.n	8008132 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800809a:	f7fc fd9f 	bl	8004bdc <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d302      	bcc.n	80080b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e04e      	b.n	8008152 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d037      	beq.n	8008132 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b80      	cmp	r3, #128	@ 0x80
 80080c6:	d034      	beq.n	8008132 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b40      	cmp	r3, #64	@ 0x40
 80080cc:	d031      	beq.n	8008132 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d110      	bne.n	80080fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2208      	movs	r2, #8
 80080e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f8ff 	bl	80082e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2208      	movs	r2, #8
 80080ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e029      	b.n	8008152 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800810c:	d111      	bne.n	8008132 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 f8e5 	bl	80082e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e00f      	b.n	8008152 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4013      	ands	r3, r2
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	429a      	cmp	r2, r3
 8008140:	bf0c      	ite	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	2300      	movne	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	461a      	mov	r2, r3
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	429a      	cmp	r2, r3
 800814e:	d0a0      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800815c:	b480      	push	{r7}
 800815e:	b097      	sub	sp, #92	@ 0x5c
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	88fa      	ldrh	r2, [r7, #6]
 800817c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800818e:	d10e      	bne.n	80081ae <UART_Start_Receive_IT+0x52>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d105      	bne.n	80081a4 <UART_Start_Receive_IT+0x48>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800819e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80081a2:	e02d      	b.n	8008200 <UART_Start_Receive_IT+0xa4>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	22ff      	movs	r2, #255	@ 0xff
 80081a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80081ac:	e028      	b.n	8008200 <UART_Start_Receive_IT+0xa4>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10d      	bne.n	80081d2 <UART_Start_Receive_IT+0x76>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d104      	bne.n	80081c8 <UART_Start_Receive_IT+0x6c>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	22ff      	movs	r2, #255	@ 0xff
 80081c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80081c6:	e01b      	b.n	8008200 <UART_Start_Receive_IT+0xa4>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	227f      	movs	r2, #127	@ 0x7f
 80081cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80081d0:	e016      	b.n	8008200 <UART_Start_Receive_IT+0xa4>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081da:	d10d      	bne.n	80081f8 <UART_Start_Receive_IT+0x9c>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <UART_Start_Receive_IT+0x92>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	227f      	movs	r2, #127	@ 0x7f
 80081e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80081ec:	e008      	b.n	8008200 <UART_Start_Receive_IT+0xa4>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	223f      	movs	r2, #63	@ 0x3f
 80081f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80081f6:	e003      	b.n	8008200 <UART_Start_Receive_IT+0xa4>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2222      	movs	r2, #34	@ 0x22
 800820c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3308      	adds	r3, #8
 8008216:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800821a:	e853 3f00 	ldrex	r3, [r3]
 800821e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	f043 0301 	orr.w	r3, r3, #1
 8008226:	657b      	str	r3, [r7, #84]	@ 0x54
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3308      	adds	r3, #8
 800822e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008230:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008232:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800823e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e5      	bne.n	8008210 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800824c:	d107      	bne.n	800825e <UART_Start_Receive_IT+0x102>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4a21      	ldr	r2, [pc, #132]	@ (80082e0 <UART_Start_Receive_IT+0x184>)
 800825a:	669a      	str	r2, [r3, #104]	@ 0x68
 800825c:	e002      	b.n	8008264 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4a20      	ldr	r2, [pc, #128]	@ (80082e4 <UART_Start_Receive_IT+0x188>)
 8008262:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d019      	beq.n	80082a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800828a:	637b      	str	r3, [r7, #52]	@ 0x34
 800828c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e6      	bne.n	800826c <UART_Start_Receive_IT+0x110>
 800829e:	e018      	b.n	80082d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	613b      	str	r3, [r7, #16]
   return(result);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f043 0320 	orr.w	r3, r3, #32
 80082b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082be:	623b      	str	r3, [r7, #32]
 80082c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	69f9      	ldr	r1, [r7, #28]
 80082c4:	6a3a      	ldr	r2, [r7, #32]
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e6      	bne.n	80082a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	375c      	adds	r7, #92	@ 0x5c
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	080085d9 	.word	0x080085d9
 80082e4:	08008431 	.word	0x08008431

080082e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b095      	sub	sp, #84	@ 0x54
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800830e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008310:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e6      	bne.n	80082f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	61fb      	str	r3, [r7, #28]
   return(result);
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008344:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800835a:	2b01      	cmp	r3, #1
 800835c:	d118      	bne.n	8008390 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	e853 3f00 	ldrex	r3, [r3]
 800836a:	60bb      	str	r3, [r7, #8]
   return(result);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f023 0310 	bic.w	r3, r3, #16
 8008372:	647b      	str	r3, [r7, #68]	@ 0x44
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	6979      	ldr	r1, [r7, #20]
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	e841 2300 	strex	r3, r2, [r1]
 8008388:	613b      	str	r3, [r7, #16]
   return(result);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e6      	bne.n	800835e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2220      	movs	r2, #32
 8008394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80083a4:	bf00      	nop
 80083a6:	3754      	adds	r7, #84	@ 0x54
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f7ff fa88 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6979      	ldr	r1, [r7, #20]
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	613b      	str	r3, [r7, #16]
   return(result);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e6      	bne.n	80083e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff fa54 	bl	80078d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008428:	bf00      	nop
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b09c      	sub	sp, #112	@ 0x70
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800843e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008448:	2b22      	cmp	r3, #34	@ 0x22
 800844a:	f040 80b9 	bne.w	80085c0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008458:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800845c:	b2d9      	uxtb	r1, r3
 800845e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008462:	b2da      	uxtb	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008468:	400a      	ands	r2, r1
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	f040 809c 	bne.w	80085d0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e6      	bne.n	8008498 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084dc:	f023 0301 	bic.w	r3, r3, #1
 80084e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80084ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80084ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d018      	beq.n	8008552 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	623b      	str	r3, [r7, #32]
   return(result);
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008534:	663b      	str	r3, [r7, #96]	@ 0x60
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800853e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008540:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008546:	e841 2300 	strex	r3, r2, [r1]
 800854a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800854c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1e6      	bne.n	8008520 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008556:	2b01      	cmp	r3, #1
 8008558:	d12e      	bne.n	80085b8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	60fb      	str	r3, [r7, #12]
   return(result);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f023 0310 	bic.w	r3, r3, #16
 8008574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	69b9      	ldr	r1, [r7, #24]
 8008584:	69fa      	ldr	r2, [r7, #28]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	617b      	str	r3, [r7, #20]
   return(result);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b10      	cmp	r3, #16
 800859e:	d103      	bne.n	80085a8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2210      	movs	r2, #16
 80085a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff f9a1 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085b6:	e00b      	b.n	80085d0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7fb fb03 	bl	8003bc4 <HAL_UART_RxCpltCallback>
}
 80085be:	e007      	b.n	80085d0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0208 	orr.w	r2, r2, #8
 80085ce:	619a      	str	r2, [r3, #24]
}
 80085d0:	bf00      	nop
 80085d2:	3770      	adds	r7, #112	@ 0x70
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b09c      	sub	sp, #112	@ 0x70
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f0:	2b22      	cmp	r3, #34	@ 0x22
 80085f2:	f040 80b9 	bne.w	8008768 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008604:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008606:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800860a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800860e:	4013      	ands	r3, r2
 8008610:	b29a      	uxth	r2, r3
 8008612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008614:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861a:	1c9a      	adds	r2, r3, #2
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008626:	b29b      	uxth	r3, r3
 8008628:	3b01      	subs	r3, #1
 800862a:	b29a      	uxth	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 809c 	bne.w	8008778 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800864e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008654:	667b      	str	r3, [r7, #100]	@ 0x64
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800865e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008660:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008664:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800866c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e6      	bne.n	8008640 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	f023 0301 	bic.w	r3, r3, #1
 8008688:	663b      	str	r3, [r7, #96]	@ 0x60
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008692:	643a      	str	r2, [r7, #64]	@ 0x40
 8008694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e5      	bne.n	8008672 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d018      	beq.n	80086fa <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e6      	bne.n	80086c8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d12e      	bne.n	8008760 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	60bb      	str	r3, [r7, #8]
   return(result);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f023 0310 	bic.w	r3, r3, #16
 800871c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008726:	61bb      	str	r3, [r7, #24]
 8008728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6979      	ldr	r1, [r7, #20]
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	613b      	str	r3, [r7, #16]
   return(result);
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b10      	cmp	r3, #16
 8008746:	d103      	bne.n	8008750 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2210      	movs	r2, #16
 800874e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff f8cd 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800875e:	e00b      	b.n	8008778 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7fb fa2f 	bl	8003bc4 <HAL_UART_RxCpltCallback>
}
 8008766:	e007      	b.n	8008778 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0208 	orr.w	r2, r2, #8
 8008776:	619a      	str	r2, [r3, #24]
}
 8008778:	bf00      	nop
 800877a:	3770      	adds	r7, #112	@ 0x70
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <std>:
 8008780:	2300      	movs	r3, #0
 8008782:	b510      	push	{r4, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	e9c0 3300 	strd	r3, r3, [r0]
 800878a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800878e:	6083      	str	r3, [r0, #8]
 8008790:	8181      	strh	r1, [r0, #12]
 8008792:	6643      	str	r3, [r0, #100]	@ 0x64
 8008794:	81c2      	strh	r2, [r0, #14]
 8008796:	6183      	str	r3, [r0, #24]
 8008798:	4619      	mov	r1, r3
 800879a:	2208      	movs	r2, #8
 800879c:	305c      	adds	r0, #92	@ 0x5c
 800879e:	f000 f926 	bl	80089ee <memset>
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <std+0x58>)
 80087a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <std+0x5c>)
 80087a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087aa:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <std+0x60>)
 80087ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087ae:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <std+0x64>)
 80087b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <std+0x68>)
 80087b4:	6224      	str	r4, [r4, #32]
 80087b6:	429c      	cmp	r4, r3
 80087b8:	d006      	beq.n	80087c8 <std+0x48>
 80087ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087be:	4294      	cmp	r4, r2
 80087c0:	d002      	beq.n	80087c8 <std+0x48>
 80087c2:	33d0      	adds	r3, #208	@ 0xd0
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d105      	bne.n	80087d4 <std+0x54>
 80087c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d0:	f000 b986 	b.w	8008ae0 <__retarget_lock_init_recursive>
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	bf00      	nop
 80087d8:	08008969 	.word	0x08008969
 80087dc:	0800898b 	.word	0x0800898b
 80087e0:	080089c3 	.word	0x080089c3
 80087e4:	080089e7 	.word	0x080089e7
 80087e8:	2000bbd8 	.word	0x2000bbd8

080087ec <stdio_exit_handler>:
 80087ec:	4a02      	ldr	r2, [pc, #8]	@ (80087f8 <stdio_exit_handler+0xc>)
 80087ee:	4903      	ldr	r1, [pc, #12]	@ (80087fc <stdio_exit_handler+0x10>)
 80087f0:	4803      	ldr	r0, [pc, #12]	@ (8008800 <stdio_exit_handler+0x14>)
 80087f2:	f000 b869 	b.w	80088c8 <_fwalk_sglue>
 80087f6:	bf00      	nop
 80087f8:	2000002c 	.word	0x2000002c
 80087fc:	0800964d 	.word	0x0800964d
 8008800:	2000003c 	.word	0x2000003c

08008804 <cleanup_stdio>:
 8008804:	6841      	ldr	r1, [r0, #4]
 8008806:	4b0c      	ldr	r3, [pc, #48]	@ (8008838 <cleanup_stdio+0x34>)
 8008808:	4299      	cmp	r1, r3
 800880a:	b510      	push	{r4, lr}
 800880c:	4604      	mov	r4, r0
 800880e:	d001      	beq.n	8008814 <cleanup_stdio+0x10>
 8008810:	f000 ff1c 	bl	800964c <_fflush_r>
 8008814:	68a1      	ldr	r1, [r4, #8]
 8008816:	4b09      	ldr	r3, [pc, #36]	@ (800883c <cleanup_stdio+0x38>)
 8008818:	4299      	cmp	r1, r3
 800881a:	d002      	beq.n	8008822 <cleanup_stdio+0x1e>
 800881c:	4620      	mov	r0, r4
 800881e:	f000 ff15 	bl	800964c <_fflush_r>
 8008822:	68e1      	ldr	r1, [r4, #12]
 8008824:	4b06      	ldr	r3, [pc, #24]	@ (8008840 <cleanup_stdio+0x3c>)
 8008826:	4299      	cmp	r1, r3
 8008828:	d004      	beq.n	8008834 <cleanup_stdio+0x30>
 800882a:	4620      	mov	r0, r4
 800882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008830:	f000 bf0c 	b.w	800964c <_fflush_r>
 8008834:	bd10      	pop	{r4, pc}
 8008836:	bf00      	nop
 8008838:	2000bbd8 	.word	0x2000bbd8
 800883c:	2000bc40 	.word	0x2000bc40
 8008840:	2000bca8 	.word	0x2000bca8

08008844 <global_stdio_init.part.0>:
 8008844:	b510      	push	{r4, lr}
 8008846:	4b0b      	ldr	r3, [pc, #44]	@ (8008874 <global_stdio_init.part.0+0x30>)
 8008848:	4c0b      	ldr	r4, [pc, #44]	@ (8008878 <global_stdio_init.part.0+0x34>)
 800884a:	4a0c      	ldr	r2, [pc, #48]	@ (800887c <global_stdio_init.part.0+0x38>)
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	4620      	mov	r0, r4
 8008850:	2200      	movs	r2, #0
 8008852:	2104      	movs	r1, #4
 8008854:	f7ff ff94 	bl	8008780 <std>
 8008858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800885c:	2201      	movs	r2, #1
 800885e:	2109      	movs	r1, #9
 8008860:	f7ff ff8e 	bl	8008780 <std>
 8008864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008868:	2202      	movs	r2, #2
 800886a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886e:	2112      	movs	r1, #18
 8008870:	f7ff bf86 	b.w	8008780 <std>
 8008874:	2000bd10 	.word	0x2000bd10
 8008878:	2000bbd8 	.word	0x2000bbd8
 800887c:	080087ed 	.word	0x080087ed

08008880 <__sfp_lock_acquire>:
 8008880:	4801      	ldr	r0, [pc, #4]	@ (8008888 <__sfp_lock_acquire+0x8>)
 8008882:	f000 b92e 	b.w	8008ae2 <__retarget_lock_acquire_recursive>
 8008886:	bf00      	nop
 8008888:	2000bd19 	.word	0x2000bd19

0800888c <__sfp_lock_release>:
 800888c:	4801      	ldr	r0, [pc, #4]	@ (8008894 <__sfp_lock_release+0x8>)
 800888e:	f000 b929 	b.w	8008ae4 <__retarget_lock_release_recursive>
 8008892:	bf00      	nop
 8008894:	2000bd19 	.word	0x2000bd19

08008898 <__sinit>:
 8008898:	b510      	push	{r4, lr}
 800889a:	4604      	mov	r4, r0
 800889c:	f7ff fff0 	bl	8008880 <__sfp_lock_acquire>
 80088a0:	6a23      	ldr	r3, [r4, #32]
 80088a2:	b11b      	cbz	r3, 80088ac <__sinit+0x14>
 80088a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a8:	f7ff bff0 	b.w	800888c <__sfp_lock_release>
 80088ac:	4b04      	ldr	r3, [pc, #16]	@ (80088c0 <__sinit+0x28>)
 80088ae:	6223      	str	r3, [r4, #32]
 80088b0:	4b04      	ldr	r3, [pc, #16]	@ (80088c4 <__sinit+0x2c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1f5      	bne.n	80088a4 <__sinit+0xc>
 80088b8:	f7ff ffc4 	bl	8008844 <global_stdio_init.part.0>
 80088bc:	e7f2      	b.n	80088a4 <__sinit+0xc>
 80088be:	bf00      	nop
 80088c0:	08008805 	.word	0x08008805
 80088c4:	2000bd10 	.word	0x2000bd10

080088c8 <_fwalk_sglue>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4607      	mov	r7, r0
 80088ce:	4688      	mov	r8, r1
 80088d0:	4614      	mov	r4, r2
 80088d2:	2600      	movs	r6, #0
 80088d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d8:	f1b9 0901 	subs.w	r9, r9, #1
 80088dc:	d505      	bpl.n	80088ea <_fwalk_sglue+0x22>
 80088de:	6824      	ldr	r4, [r4, #0]
 80088e0:	2c00      	cmp	r4, #0
 80088e2:	d1f7      	bne.n	80088d4 <_fwalk_sglue+0xc>
 80088e4:	4630      	mov	r0, r6
 80088e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d907      	bls.n	8008900 <_fwalk_sglue+0x38>
 80088f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f4:	3301      	adds	r3, #1
 80088f6:	d003      	beq.n	8008900 <_fwalk_sglue+0x38>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4638      	mov	r0, r7
 80088fc:	47c0      	blx	r8
 80088fe:	4306      	orrs	r6, r0
 8008900:	3568      	adds	r5, #104	@ 0x68
 8008902:	e7e9      	b.n	80088d8 <_fwalk_sglue+0x10>

08008904 <iprintf>:
 8008904:	b40f      	push	{r0, r1, r2, r3}
 8008906:	b507      	push	{r0, r1, r2, lr}
 8008908:	4906      	ldr	r1, [pc, #24]	@ (8008924 <iprintf+0x20>)
 800890a:	ab04      	add	r3, sp, #16
 800890c:	6808      	ldr	r0, [r1, #0]
 800890e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008912:	6881      	ldr	r1, [r0, #8]
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	f000 fb6f 	bl	8008ff8 <_vfiprintf_r>
 800891a:	b003      	add	sp, #12
 800891c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008920:	b004      	add	sp, #16
 8008922:	4770      	bx	lr
 8008924:	20000038 	.word	0x20000038

08008928 <siprintf>:
 8008928:	b40e      	push	{r1, r2, r3}
 800892a:	b500      	push	{lr}
 800892c:	b09c      	sub	sp, #112	@ 0x70
 800892e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008930:	9002      	str	r0, [sp, #8]
 8008932:	9006      	str	r0, [sp, #24]
 8008934:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008938:	4809      	ldr	r0, [pc, #36]	@ (8008960 <siprintf+0x38>)
 800893a:	9107      	str	r1, [sp, #28]
 800893c:	9104      	str	r1, [sp, #16]
 800893e:	4909      	ldr	r1, [pc, #36]	@ (8008964 <siprintf+0x3c>)
 8008940:	f853 2b04 	ldr.w	r2, [r3], #4
 8008944:	9105      	str	r1, [sp, #20]
 8008946:	6800      	ldr	r0, [r0, #0]
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	a902      	add	r1, sp, #8
 800894c:	f000 fa2e 	bl	8008dac <_svfiprintf_r>
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	b01c      	add	sp, #112	@ 0x70
 8008958:	f85d eb04 	ldr.w	lr, [sp], #4
 800895c:	b003      	add	sp, #12
 800895e:	4770      	bx	lr
 8008960:	20000038 	.word	0x20000038
 8008964:	ffff0208 	.word	0xffff0208

08008968 <__sread>:
 8008968:	b510      	push	{r4, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	f000 f868 	bl	8008a44 <_read_r>
 8008974:	2800      	cmp	r0, #0
 8008976:	bfab      	itete	ge
 8008978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800897a:	89a3      	ldrhlt	r3, [r4, #12]
 800897c:	181b      	addge	r3, r3, r0
 800897e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008982:	bfac      	ite	ge
 8008984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008986:	81a3      	strhlt	r3, [r4, #12]
 8008988:	bd10      	pop	{r4, pc}

0800898a <__swrite>:
 800898a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898e:	461f      	mov	r7, r3
 8008990:	898b      	ldrh	r3, [r1, #12]
 8008992:	05db      	lsls	r3, r3, #23
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	4616      	mov	r6, r2
 800899a:	d505      	bpl.n	80089a8 <__swrite+0x1e>
 800899c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a0:	2302      	movs	r3, #2
 80089a2:	2200      	movs	r2, #0
 80089a4:	f000 f83c 	bl	8008a20 <_lseek_r>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	4632      	mov	r2, r6
 80089b6:	463b      	mov	r3, r7
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089be:	f000 b853 	b.w	8008a68 <_write_r>

080089c2 <__sseek>:
 80089c2:	b510      	push	{r4, lr}
 80089c4:	460c      	mov	r4, r1
 80089c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ca:	f000 f829 	bl	8008a20 <_lseek_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	bf15      	itete	ne
 80089d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089de:	81a3      	strheq	r3, [r4, #12]
 80089e0:	bf18      	it	ne
 80089e2:	81a3      	strhne	r3, [r4, #12]
 80089e4:	bd10      	pop	{r4, pc}

080089e6 <__sclose>:
 80089e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ea:	f000 b809 	b.w	8008a00 <_close_r>

080089ee <memset>:
 80089ee:	4402      	add	r2, r0
 80089f0:	4603      	mov	r3, r0
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d100      	bne.n	80089f8 <memset+0xa>
 80089f6:	4770      	bx	lr
 80089f8:	f803 1b01 	strb.w	r1, [r3], #1
 80089fc:	e7f9      	b.n	80089f2 <memset+0x4>
	...

08008a00 <_close_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d06      	ldr	r5, [pc, #24]	@ (8008a1c <_close_r+0x1c>)
 8008a04:	2300      	movs	r3, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	f7fb fc0d 	bl	800422a <_close>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_close_r+0x1a>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_close_r+0x1a>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	2000bd14 	.word	0x2000bd14

08008a20 <_lseek_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d07      	ldr	r5, [pc, #28]	@ (8008a40 <_lseek_r+0x20>)
 8008a24:	4604      	mov	r4, r0
 8008a26:	4608      	mov	r0, r1
 8008a28:	4611      	mov	r1, r2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	602a      	str	r2, [r5, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f7fb fc22 	bl	8004278 <_lseek>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_lseek_r+0x1e>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_lseek_r+0x1e>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	2000bd14 	.word	0x2000bd14

08008a44 <_read_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4d07      	ldr	r5, [pc, #28]	@ (8008a64 <_read_r+0x20>)
 8008a48:	4604      	mov	r4, r0
 8008a4a:	4608      	mov	r0, r1
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	602a      	str	r2, [r5, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f7fb fbb0 	bl	80041b8 <_read>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_read_r+0x1e>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_read_r+0x1e>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	2000bd14 	.word	0x2000bd14

08008a68 <_write_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d07      	ldr	r5, [pc, #28]	@ (8008a88 <_write_r+0x20>)
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	4608      	mov	r0, r1
 8008a70:	4611      	mov	r1, r2
 8008a72:	2200      	movs	r2, #0
 8008a74:	602a      	str	r2, [r5, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	f7fb fbbb 	bl	80041f2 <_write>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_write_r+0x1e>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_write_r+0x1e>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	2000bd14 	.word	0x2000bd14

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	@ (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000038 	.word	0x20000038

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1b64      	subs	r4, r4, r5
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8008adc <__libc_init_array+0x44>)
 8008aac:	f000 ff6e 	bl	800998c <_init>
 8008ab0:	1b64      	subs	r4, r4, r5
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac0:	4798      	blx	r3
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aca:	4798      	blx	r3
 8008acc:	3601      	adds	r6, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	0800a048 	.word	0x0800a048
 8008ad4:	0800a048 	.word	0x0800a048
 8008ad8:	0800a048 	.word	0x0800a048
 8008adc:	0800a04c 	.word	0x0800a04c

08008ae0 <__retarget_lock_init_recursive>:
 8008ae0:	4770      	bx	lr

08008ae2 <__retarget_lock_acquire_recursive>:
 8008ae2:	4770      	bx	lr

08008ae4 <__retarget_lock_release_recursive>:
 8008ae4:	4770      	bx	lr

08008ae6 <memcpy>:
 8008ae6:	440a      	add	r2, r1
 8008ae8:	4291      	cmp	r1, r2
 8008aea:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aee:	d100      	bne.n	8008af2 <memcpy+0xc>
 8008af0:	4770      	bx	lr
 8008af2:	b510      	push	{r4, lr}
 8008af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008afc:	4291      	cmp	r1, r2
 8008afe:	d1f9      	bne.n	8008af4 <memcpy+0xe>
 8008b00:	bd10      	pop	{r4, pc}
	...

08008b04 <_free_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4605      	mov	r5, r0
 8008b08:	2900      	cmp	r1, #0
 8008b0a:	d041      	beq.n	8008b90 <_free_r+0x8c>
 8008b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b10:	1f0c      	subs	r4, r1, #4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	bfb8      	it	lt
 8008b16:	18e4      	addlt	r4, r4, r3
 8008b18:	f000 f8e0 	bl	8008cdc <__malloc_lock>
 8008b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b94 <_free_r+0x90>)
 8008b1e:	6813      	ldr	r3, [r2, #0]
 8008b20:	b933      	cbnz	r3, 8008b30 <_free_r+0x2c>
 8008b22:	6063      	str	r3, [r4, #4]
 8008b24:	6014      	str	r4, [r2, #0]
 8008b26:	4628      	mov	r0, r5
 8008b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b2c:	f000 b8dc 	b.w	8008ce8 <__malloc_unlock>
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	d908      	bls.n	8008b46 <_free_r+0x42>
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	1821      	adds	r1, r4, r0
 8008b38:	428b      	cmp	r3, r1
 8008b3a:	bf01      	itttt	eq
 8008b3c:	6819      	ldreq	r1, [r3, #0]
 8008b3e:	685b      	ldreq	r3, [r3, #4]
 8008b40:	1809      	addeq	r1, r1, r0
 8008b42:	6021      	streq	r1, [r4, #0]
 8008b44:	e7ed      	b.n	8008b22 <_free_r+0x1e>
 8008b46:	461a      	mov	r2, r3
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	b10b      	cbz	r3, 8008b50 <_free_r+0x4c>
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	d9fa      	bls.n	8008b46 <_free_r+0x42>
 8008b50:	6811      	ldr	r1, [r2, #0]
 8008b52:	1850      	adds	r0, r2, r1
 8008b54:	42a0      	cmp	r0, r4
 8008b56:	d10b      	bne.n	8008b70 <_free_r+0x6c>
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	4401      	add	r1, r0
 8008b5c:	1850      	adds	r0, r2, r1
 8008b5e:	4283      	cmp	r3, r0
 8008b60:	6011      	str	r1, [r2, #0]
 8008b62:	d1e0      	bne.n	8008b26 <_free_r+0x22>
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	6053      	str	r3, [r2, #4]
 8008b6a:	4408      	add	r0, r1
 8008b6c:	6010      	str	r0, [r2, #0]
 8008b6e:	e7da      	b.n	8008b26 <_free_r+0x22>
 8008b70:	d902      	bls.n	8008b78 <_free_r+0x74>
 8008b72:	230c      	movs	r3, #12
 8008b74:	602b      	str	r3, [r5, #0]
 8008b76:	e7d6      	b.n	8008b26 <_free_r+0x22>
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	1821      	adds	r1, r4, r0
 8008b7c:	428b      	cmp	r3, r1
 8008b7e:	bf04      	itt	eq
 8008b80:	6819      	ldreq	r1, [r3, #0]
 8008b82:	685b      	ldreq	r3, [r3, #4]
 8008b84:	6063      	str	r3, [r4, #4]
 8008b86:	bf04      	itt	eq
 8008b88:	1809      	addeq	r1, r1, r0
 8008b8a:	6021      	streq	r1, [r4, #0]
 8008b8c:	6054      	str	r4, [r2, #4]
 8008b8e:	e7ca      	b.n	8008b26 <_free_r+0x22>
 8008b90:	bd38      	pop	{r3, r4, r5, pc}
 8008b92:	bf00      	nop
 8008b94:	2000bd20 	.word	0x2000bd20

08008b98 <sbrk_aligned>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	4e0f      	ldr	r6, [pc, #60]	@ (8008bd8 <sbrk_aligned+0x40>)
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	6831      	ldr	r1, [r6, #0]
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	b911      	cbnz	r1, 8008baa <sbrk_aligned+0x12>
 8008ba4:	f000 fe28 	bl	80097f8 <_sbrk_r>
 8008ba8:	6030      	str	r0, [r6, #0]
 8008baa:	4621      	mov	r1, r4
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 fe23 	bl	80097f8 <_sbrk_r>
 8008bb2:	1c43      	adds	r3, r0, #1
 8008bb4:	d103      	bne.n	8008bbe <sbrk_aligned+0x26>
 8008bb6:	f04f 34ff 	mov.w	r4, #4294967295
 8008bba:	4620      	mov	r0, r4
 8008bbc:	bd70      	pop	{r4, r5, r6, pc}
 8008bbe:	1cc4      	adds	r4, r0, #3
 8008bc0:	f024 0403 	bic.w	r4, r4, #3
 8008bc4:	42a0      	cmp	r0, r4
 8008bc6:	d0f8      	beq.n	8008bba <sbrk_aligned+0x22>
 8008bc8:	1a21      	subs	r1, r4, r0
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f000 fe14 	bl	80097f8 <_sbrk_r>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d1f2      	bne.n	8008bba <sbrk_aligned+0x22>
 8008bd4:	e7ef      	b.n	8008bb6 <sbrk_aligned+0x1e>
 8008bd6:	bf00      	nop
 8008bd8:	2000bd1c 	.word	0x2000bd1c

08008bdc <_malloc_r>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	1ccd      	adds	r5, r1, #3
 8008be2:	f025 0503 	bic.w	r5, r5, #3
 8008be6:	3508      	adds	r5, #8
 8008be8:	2d0c      	cmp	r5, #12
 8008bea:	bf38      	it	cc
 8008bec:	250c      	movcc	r5, #12
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	db01      	blt.n	8008bf8 <_malloc_r+0x1c>
 8008bf4:	42a9      	cmp	r1, r5
 8008bf6:	d904      	bls.n	8008c02 <_malloc_r+0x26>
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	6033      	str	r3, [r6, #0]
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cd8 <_malloc_r+0xfc>
 8008c06:	f000 f869 	bl	8008cdc <__malloc_lock>
 8008c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c0e:	461c      	mov	r4, r3
 8008c10:	bb44      	cbnz	r4, 8008c64 <_malloc_r+0x88>
 8008c12:	4629      	mov	r1, r5
 8008c14:	4630      	mov	r0, r6
 8008c16:	f7ff ffbf 	bl	8008b98 <sbrk_aligned>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	d158      	bne.n	8008cd2 <_malloc_r+0xf6>
 8008c20:	f8d8 4000 	ldr.w	r4, [r8]
 8008c24:	4627      	mov	r7, r4
 8008c26:	2f00      	cmp	r7, #0
 8008c28:	d143      	bne.n	8008cb2 <_malloc_r+0xd6>
 8008c2a:	2c00      	cmp	r4, #0
 8008c2c:	d04b      	beq.n	8008cc6 <_malloc_r+0xea>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	4639      	mov	r1, r7
 8008c32:	4630      	mov	r0, r6
 8008c34:	eb04 0903 	add.w	r9, r4, r3
 8008c38:	f000 fdde 	bl	80097f8 <_sbrk_r>
 8008c3c:	4581      	cmp	r9, r0
 8008c3e:	d142      	bne.n	8008cc6 <_malloc_r+0xea>
 8008c40:	6821      	ldr	r1, [r4, #0]
 8008c42:	1a6d      	subs	r5, r5, r1
 8008c44:	4629      	mov	r1, r5
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff ffa6 	bl	8008b98 <sbrk_aligned>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d03a      	beq.n	8008cc6 <_malloc_r+0xea>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	442b      	add	r3, r5
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	f8d8 3000 	ldr.w	r3, [r8]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	bb62      	cbnz	r2, 8008cb8 <_malloc_r+0xdc>
 8008c5e:	f8c8 7000 	str.w	r7, [r8]
 8008c62:	e00f      	b.n	8008c84 <_malloc_r+0xa8>
 8008c64:	6822      	ldr	r2, [r4, #0]
 8008c66:	1b52      	subs	r2, r2, r5
 8008c68:	d420      	bmi.n	8008cac <_malloc_r+0xd0>
 8008c6a:	2a0b      	cmp	r2, #11
 8008c6c:	d917      	bls.n	8008c9e <_malloc_r+0xc2>
 8008c6e:	1961      	adds	r1, r4, r5
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	6025      	str	r5, [r4, #0]
 8008c74:	bf18      	it	ne
 8008c76:	6059      	strne	r1, [r3, #4]
 8008c78:	6863      	ldr	r3, [r4, #4]
 8008c7a:	bf08      	it	eq
 8008c7c:	f8c8 1000 	streq.w	r1, [r8]
 8008c80:	5162      	str	r2, [r4, r5]
 8008c82:	604b      	str	r3, [r1, #4]
 8008c84:	4630      	mov	r0, r6
 8008c86:	f000 f82f 	bl	8008ce8 <__malloc_unlock>
 8008c8a:	f104 000b 	add.w	r0, r4, #11
 8008c8e:	1d23      	adds	r3, r4, #4
 8008c90:	f020 0007 	bic.w	r0, r0, #7
 8008c94:	1ac2      	subs	r2, r0, r3
 8008c96:	bf1c      	itt	ne
 8008c98:	1a1b      	subne	r3, r3, r0
 8008c9a:	50a3      	strne	r3, [r4, r2]
 8008c9c:	e7af      	b.n	8008bfe <_malloc_r+0x22>
 8008c9e:	6862      	ldr	r2, [r4, #4]
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	bf0c      	ite	eq
 8008ca4:	f8c8 2000 	streq.w	r2, [r8]
 8008ca8:	605a      	strne	r2, [r3, #4]
 8008caa:	e7eb      	b.n	8008c84 <_malloc_r+0xa8>
 8008cac:	4623      	mov	r3, r4
 8008cae:	6864      	ldr	r4, [r4, #4]
 8008cb0:	e7ae      	b.n	8008c10 <_malloc_r+0x34>
 8008cb2:	463c      	mov	r4, r7
 8008cb4:	687f      	ldr	r7, [r7, #4]
 8008cb6:	e7b6      	b.n	8008c26 <_malloc_r+0x4a>
 8008cb8:	461a      	mov	r2, r3
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	d1fb      	bne.n	8008cb8 <_malloc_r+0xdc>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6053      	str	r3, [r2, #4]
 8008cc4:	e7de      	b.n	8008c84 <_malloc_r+0xa8>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	6033      	str	r3, [r6, #0]
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f000 f80c 	bl	8008ce8 <__malloc_unlock>
 8008cd0:	e794      	b.n	8008bfc <_malloc_r+0x20>
 8008cd2:	6005      	str	r5, [r0, #0]
 8008cd4:	e7d6      	b.n	8008c84 <_malloc_r+0xa8>
 8008cd6:	bf00      	nop
 8008cd8:	2000bd20 	.word	0x2000bd20

08008cdc <__malloc_lock>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	@ (8008ce4 <__malloc_lock+0x8>)
 8008cde:	f7ff bf00 	b.w	8008ae2 <__retarget_lock_acquire_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	2000bd18 	.word	0x2000bd18

08008ce8 <__malloc_unlock>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	@ (8008cf0 <__malloc_unlock+0x8>)
 8008cea:	f7ff befb 	b.w	8008ae4 <__retarget_lock_release_recursive>
 8008cee:	bf00      	nop
 8008cf0:	2000bd18 	.word	0x2000bd18

08008cf4 <__ssputs_r>:
 8008cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	688e      	ldr	r6, [r1, #8]
 8008cfa:	461f      	mov	r7, r3
 8008cfc:	42be      	cmp	r6, r7
 8008cfe:	680b      	ldr	r3, [r1, #0]
 8008d00:	4682      	mov	sl, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	4690      	mov	r8, r2
 8008d06:	d82d      	bhi.n	8008d64 <__ssputs_r+0x70>
 8008d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d10:	d026      	beq.n	8008d60 <__ssputs_r+0x6c>
 8008d12:	6965      	ldr	r5, [r4, #20]
 8008d14:	6909      	ldr	r1, [r1, #16]
 8008d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d1a:	eba3 0901 	sub.w	r9, r3, r1
 8008d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d22:	1c7b      	adds	r3, r7, #1
 8008d24:	444b      	add	r3, r9
 8008d26:	106d      	asrs	r5, r5, #1
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	bf38      	it	cc
 8008d2c:	461d      	movcc	r5, r3
 8008d2e:	0553      	lsls	r3, r2, #21
 8008d30:	d527      	bpl.n	8008d82 <__ssputs_r+0x8e>
 8008d32:	4629      	mov	r1, r5
 8008d34:	f7ff ff52 	bl	8008bdc <_malloc_r>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	b360      	cbz	r0, 8008d96 <__ssputs_r+0xa2>
 8008d3c:	6921      	ldr	r1, [r4, #16]
 8008d3e:	464a      	mov	r2, r9
 8008d40:	f7ff fed1 	bl	8008ae6 <memcpy>
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	6126      	str	r6, [r4, #16]
 8008d52:	6165      	str	r5, [r4, #20]
 8008d54:	444e      	add	r6, r9
 8008d56:	eba5 0509 	sub.w	r5, r5, r9
 8008d5a:	6026      	str	r6, [r4, #0]
 8008d5c:	60a5      	str	r5, [r4, #8]
 8008d5e:	463e      	mov	r6, r7
 8008d60:	42be      	cmp	r6, r7
 8008d62:	d900      	bls.n	8008d66 <__ssputs_r+0x72>
 8008d64:	463e      	mov	r6, r7
 8008d66:	6820      	ldr	r0, [r4, #0]
 8008d68:	4632      	mov	r2, r6
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	f000 fd2a 	bl	80097c4 <memmove>
 8008d70:	68a3      	ldr	r3, [r4, #8]
 8008d72:	1b9b      	subs	r3, r3, r6
 8008d74:	60a3      	str	r3, [r4, #8]
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	4433      	add	r3, r6
 8008d7a:	6023      	str	r3, [r4, #0]
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d82:	462a      	mov	r2, r5
 8008d84:	f000 fd48 	bl	8009818 <_realloc_r>
 8008d88:	4606      	mov	r6, r0
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d1e0      	bne.n	8008d50 <__ssputs_r+0x5c>
 8008d8e:	6921      	ldr	r1, [r4, #16]
 8008d90:	4650      	mov	r0, sl
 8008d92:	f7ff feb7 	bl	8008b04 <_free_r>
 8008d96:	230c      	movs	r3, #12
 8008d98:	f8ca 3000 	str.w	r3, [sl]
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	e7e9      	b.n	8008d7e <__ssputs_r+0x8a>
	...

08008dac <_svfiprintf_r>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	4698      	mov	r8, r3
 8008db2:	898b      	ldrh	r3, [r1, #12]
 8008db4:	061b      	lsls	r3, r3, #24
 8008db6:	b09d      	sub	sp, #116	@ 0x74
 8008db8:	4607      	mov	r7, r0
 8008dba:	460d      	mov	r5, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	d510      	bpl.n	8008de2 <_svfiprintf_r+0x36>
 8008dc0:	690b      	ldr	r3, [r1, #16]
 8008dc2:	b973      	cbnz	r3, 8008de2 <_svfiprintf_r+0x36>
 8008dc4:	2140      	movs	r1, #64	@ 0x40
 8008dc6:	f7ff ff09 	bl	8008bdc <_malloc_r>
 8008dca:	6028      	str	r0, [r5, #0]
 8008dcc:	6128      	str	r0, [r5, #16]
 8008dce:	b930      	cbnz	r0, 8008dde <_svfiprintf_r+0x32>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	b01d      	add	sp, #116	@ 0x74
 8008dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dde:	2340      	movs	r3, #64	@ 0x40
 8008de0:	616b      	str	r3, [r5, #20]
 8008de2:	2300      	movs	r3, #0
 8008de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008de6:	2320      	movs	r3, #32
 8008de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008df0:	2330      	movs	r3, #48	@ 0x30
 8008df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f90 <_svfiprintf_r+0x1e4>
 8008df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dfa:	f04f 0901 	mov.w	r9, #1
 8008dfe:	4623      	mov	r3, r4
 8008e00:	469a      	mov	sl, r3
 8008e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e06:	b10a      	cbz	r2, 8008e0c <_svfiprintf_r+0x60>
 8008e08:	2a25      	cmp	r2, #37	@ 0x25
 8008e0a:	d1f9      	bne.n	8008e00 <_svfiprintf_r+0x54>
 8008e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e10:	d00b      	beq.n	8008e2a <_svfiprintf_r+0x7e>
 8008e12:	465b      	mov	r3, fp
 8008e14:	4622      	mov	r2, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	4638      	mov	r0, r7
 8008e1a:	f7ff ff6b 	bl	8008cf4 <__ssputs_r>
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f000 80a7 	beq.w	8008f72 <_svfiprintf_r+0x1c6>
 8008e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e26:	445a      	add	r2, fp
 8008e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 809f 	beq.w	8008f72 <_svfiprintf_r+0x1c6>
 8008e34:	2300      	movs	r3, #0
 8008e36:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e3e:	f10a 0a01 	add.w	sl, sl, #1
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	9307      	str	r3, [sp, #28]
 8008e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e4c:	4654      	mov	r4, sl
 8008e4e:	2205      	movs	r2, #5
 8008e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e54:	484e      	ldr	r0, [pc, #312]	@ (8008f90 <_svfiprintf_r+0x1e4>)
 8008e56:	f7f7 fa0b 	bl	8000270 <memchr>
 8008e5a:	9a04      	ldr	r2, [sp, #16]
 8008e5c:	b9d8      	cbnz	r0, 8008e96 <_svfiprintf_r+0xea>
 8008e5e:	06d0      	lsls	r0, r2, #27
 8008e60:	bf44      	itt	mi
 8008e62:	2320      	movmi	r3, #32
 8008e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e68:	0711      	lsls	r1, r2, #28
 8008e6a:	bf44      	itt	mi
 8008e6c:	232b      	movmi	r3, #43	@ 0x2b
 8008e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e72:	f89a 3000 	ldrb.w	r3, [sl]
 8008e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e78:	d015      	beq.n	8008ea6 <_svfiprintf_r+0xfa>
 8008e7a:	9a07      	ldr	r2, [sp, #28]
 8008e7c:	4654      	mov	r4, sl
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f04f 0c0a 	mov.w	ip, #10
 8008e84:	4621      	mov	r1, r4
 8008e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e8a:	3b30      	subs	r3, #48	@ 0x30
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d94b      	bls.n	8008f28 <_svfiprintf_r+0x17c>
 8008e90:	b1b0      	cbz	r0, 8008ec0 <_svfiprintf_r+0x114>
 8008e92:	9207      	str	r2, [sp, #28]
 8008e94:	e014      	b.n	8008ec0 <_svfiprintf_r+0x114>
 8008e96:	eba0 0308 	sub.w	r3, r0, r8
 8008e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	46a2      	mov	sl, r4
 8008ea4:	e7d2      	b.n	8008e4c <_svfiprintf_r+0xa0>
 8008ea6:	9b03      	ldr	r3, [sp, #12]
 8008ea8:	1d19      	adds	r1, r3, #4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	9103      	str	r1, [sp, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bfbb      	ittet	lt
 8008eb2:	425b      	neglt	r3, r3
 8008eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8008eb8:	9307      	strge	r3, [sp, #28]
 8008eba:	9307      	strlt	r3, [sp, #28]
 8008ebc:	bfb8      	it	lt
 8008ebe:	9204      	strlt	r2, [sp, #16]
 8008ec0:	7823      	ldrb	r3, [r4, #0]
 8008ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ec4:	d10a      	bne.n	8008edc <_svfiprintf_r+0x130>
 8008ec6:	7863      	ldrb	r3, [r4, #1]
 8008ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eca:	d132      	bne.n	8008f32 <_svfiprintf_r+0x186>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	1d1a      	adds	r2, r3, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	9203      	str	r2, [sp, #12]
 8008ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ed8:	3402      	adds	r4, #2
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008fa0 <_svfiprintf_r+0x1f4>
 8008ee0:	7821      	ldrb	r1, [r4, #0]
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	f7f7 f9c3 	bl	8000270 <memchr>
 8008eea:	b138      	cbz	r0, 8008efc <_svfiprintf_r+0x150>
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	eba0 000a 	sub.w	r0, r0, sl
 8008ef2:	2240      	movs	r2, #64	@ 0x40
 8008ef4:	4082      	lsls	r2, r0
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	3401      	adds	r4, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f00:	4824      	ldr	r0, [pc, #144]	@ (8008f94 <_svfiprintf_r+0x1e8>)
 8008f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f06:	2206      	movs	r2, #6
 8008f08:	f7f7 f9b2 	bl	8000270 <memchr>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d036      	beq.n	8008f7e <_svfiprintf_r+0x1d2>
 8008f10:	4b21      	ldr	r3, [pc, #132]	@ (8008f98 <_svfiprintf_r+0x1ec>)
 8008f12:	bb1b      	cbnz	r3, 8008f5c <_svfiprintf_r+0x1b0>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	3307      	adds	r3, #7
 8008f18:	f023 0307 	bic.w	r3, r3, #7
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	9303      	str	r3, [sp, #12]
 8008f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f22:	4433      	add	r3, r6
 8008f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f26:	e76a      	b.n	8008dfe <_svfiprintf_r+0x52>
 8008f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	2001      	movs	r0, #1
 8008f30:	e7a8      	b.n	8008e84 <_svfiprintf_r+0xd8>
 8008f32:	2300      	movs	r3, #0
 8008f34:	3401      	adds	r4, #1
 8008f36:	9305      	str	r3, [sp, #20]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	f04f 0c0a 	mov.w	ip, #10
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f44:	3a30      	subs	r2, #48	@ 0x30
 8008f46:	2a09      	cmp	r2, #9
 8008f48:	d903      	bls.n	8008f52 <_svfiprintf_r+0x1a6>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0c6      	beq.n	8008edc <_svfiprintf_r+0x130>
 8008f4e:	9105      	str	r1, [sp, #20]
 8008f50:	e7c4      	b.n	8008edc <_svfiprintf_r+0x130>
 8008f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f56:	4604      	mov	r4, r0
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e7f0      	b.n	8008f3e <_svfiprintf_r+0x192>
 8008f5c:	ab03      	add	r3, sp, #12
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	462a      	mov	r2, r5
 8008f62:	4b0e      	ldr	r3, [pc, #56]	@ (8008f9c <_svfiprintf_r+0x1f0>)
 8008f64:	a904      	add	r1, sp, #16
 8008f66:	4638      	mov	r0, r7
 8008f68:	f3af 8000 	nop.w
 8008f6c:	1c42      	adds	r2, r0, #1
 8008f6e:	4606      	mov	r6, r0
 8008f70:	d1d6      	bne.n	8008f20 <_svfiprintf_r+0x174>
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	065b      	lsls	r3, r3, #25
 8008f76:	f53f af2d 	bmi.w	8008dd4 <_svfiprintf_r+0x28>
 8008f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f7c:	e72c      	b.n	8008dd8 <_svfiprintf_r+0x2c>
 8008f7e:	ab03      	add	r3, sp, #12
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	462a      	mov	r2, r5
 8008f84:	4b05      	ldr	r3, [pc, #20]	@ (8008f9c <_svfiprintf_r+0x1f0>)
 8008f86:	a904      	add	r1, sp, #16
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f000 f9bb 	bl	8009304 <_printf_i>
 8008f8e:	e7ed      	b.n	8008f6c <_svfiprintf_r+0x1c0>
 8008f90:	0800a00c 	.word	0x0800a00c
 8008f94:	0800a016 	.word	0x0800a016
 8008f98:	00000000 	.word	0x00000000
 8008f9c:	08008cf5 	.word	0x08008cf5
 8008fa0:	0800a012 	.word	0x0800a012

08008fa4 <__sfputc_r>:
 8008fa4:	6893      	ldr	r3, [r2, #8]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	b410      	push	{r4}
 8008fac:	6093      	str	r3, [r2, #8]
 8008fae:	da08      	bge.n	8008fc2 <__sfputc_r+0x1e>
 8008fb0:	6994      	ldr	r4, [r2, #24]
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	db01      	blt.n	8008fba <__sfputc_r+0x16>
 8008fb6:	290a      	cmp	r1, #10
 8008fb8:	d103      	bne.n	8008fc2 <__sfputc_r+0x1e>
 8008fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fbe:	f000 bb6d 	b.w	800969c <__swbuf_r>
 8008fc2:	6813      	ldr	r3, [r2, #0]
 8008fc4:	1c58      	adds	r0, r3, #1
 8008fc6:	6010      	str	r0, [r2, #0]
 8008fc8:	7019      	strb	r1, [r3, #0]
 8008fca:	4608      	mov	r0, r1
 8008fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <__sfputs_r>:
 8008fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	460f      	mov	r7, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	18d5      	adds	r5, r2, r3
 8008fdc:	42ac      	cmp	r4, r5
 8008fde:	d101      	bne.n	8008fe4 <__sfputs_r+0x12>
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e007      	b.n	8008ff4 <__sfputs_r+0x22>
 8008fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe8:	463a      	mov	r2, r7
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7ff ffda 	bl	8008fa4 <__sfputc_r>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d1f3      	bne.n	8008fdc <__sfputs_r+0xa>
 8008ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ff8 <_vfiprintf_r>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	b09d      	sub	sp, #116	@ 0x74
 8009000:	4614      	mov	r4, r2
 8009002:	4698      	mov	r8, r3
 8009004:	4606      	mov	r6, r0
 8009006:	b118      	cbz	r0, 8009010 <_vfiprintf_r+0x18>
 8009008:	6a03      	ldr	r3, [r0, #32]
 800900a:	b90b      	cbnz	r3, 8009010 <_vfiprintf_r+0x18>
 800900c:	f7ff fc44 	bl	8008898 <__sinit>
 8009010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009012:	07d9      	lsls	r1, r3, #31
 8009014:	d405      	bmi.n	8009022 <_vfiprintf_r+0x2a>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	059a      	lsls	r2, r3, #22
 800901a:	d402      	bmi.n	8009022 <_vfiprintf_r+0x2a>
 800901c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800901e:	f7ff fd60 	bl	8008ae2 <__retarget_lock_acquire_recursive>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	071b      	lsls	r3, r3, #28
 8009026:	d501      	bpl.n	800902c <_vfiprintf_r+0x34>
 8009028:	692b      	ldr	r3, [r5, #16]
 800902a:	b99b      	cbnz	r3, 8009054 <_vfiprintf_r+0x5c>
 800902c:	4629      	mov	r1, r5
 800902e:	4630      	mov	r0, r6
 8009030:	f000 fb72 	bl	8009718 <__swsetup_r>
 8009034:	b170      	cbz	r0, 8009054 <_vfiprintf_r+0x5c>
 8009036:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009038:	07dc      	lsls	r4, r3, #31
 800903a:	d504      	bpl.n	8009046 <_vfiprintf_r+0x4e>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	b01d      	add	sp, #116	@ 0x74
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	0598      	lsls	r0, r3, #22
 800904a:	d4f7      	bmi.n	800903c <_vfiprintf_r+0x44>
 800904c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800904e:	f7ff fd49 	bl	8008ae4 <__retarget_lock_release_recursive>
 8009052:	e7f3      	b.n	800903c <_vfiprintf_r+0x44>
 8009054:	2300      	movs	r3, #0
 8009056:	9309      	str	r3, [sp, #36]	@ 0x24
 8009058:	2320      	movs	r3, #32
 800905a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800905e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009062:	2330      	movs	r3, #48	@ 0x30
 8009064:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009214 <_vfiprintf_r+0x21c>
 8009068:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800906c:	f04f 0901 	mov.w	r9, #1
 8009070:	4623      	mov	r3, r4
 8009072:	469a      	mov	sl, r3
 8009074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009078:	b10a      	cbz	r2, 800907e <_vfiprintf_r+0x86>
 800907a:	2a25      	cmp	r2, #37	@ 0x25
 800907c:	d1f9      	bne.n	8009072 <_vfiprintf_r+0x7a>
 800907e:	ebba 0b04 	subs.w	fp, sl, r4
 8009082:	d00b      	beq.n	800909c <_vfiprintf_r+0xa4>
 8009084:	465b      	mov	r3, fp
 8009086:	4622      	mov	r2, r4
 8009088:	4629      	mov	r1, r5
 800908a:	4630      	mov	r0, r6
 800908c:	f7ff ffa1 	bl	8008fd2 <__sfputs_r>
 8009090:	3001      	adds	r0, #1
 8009092:	f000 80a7 	beq.w	80091e4 <_vfiprintf_r+0x1ec>
 8009096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009098:	445a      	add	r2, fp
 800909a:	9209      	str	r2, [sp, #36]	@ 0x24
 800909c:	f89a 3000 	ldrb.w	r3, [sl]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 809f 	beq.w	80091e4 <_vfiprintf_r+0x1ec>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b0:	f10a 0a01 	add.w	sl, sl, #1
 80090b4:	9304      	str	r3, [sp, #16]
 80090b6:	9307      	str	r3, [sp, #28]
 80090b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80090be:	4654      	mov	r4, sl
 80090c0:	2205      	movs	r2, #5
 80090c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c6:	4853      	ldr	r0, [pc, #332]	@ (8009214 <_vfiprintf_r+0x21c>)
 80090c8:	f7f7 f8d2 	bl	8000270 <memchr>
 80090cc:	9a04      	ldr	r2, [sp, #16]
 80090ce:	b9d8      	cbnz	r0, 8009108 <_vfiprintf_r+0x110>
 80090d0:	06d1      	lsls	r1, r2, #27
 80090d2:	bf44      	itt	mi
 80090d4:	2320      	movmi	r3, #32
 80090d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090da:	0713      	lsls	r3, r2, #28
 80090dc:	bf44      	itt	mi
 80090de:	232b      	movmi	r3, #43	@ 0x2b
 80090e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e4:	f89a 3000 	ldrb.w	r3, [sl]
 80090e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ea:	d015      	beq.n	8009118 <_vfiprintf_r+0x120>
 80090ec:	9a07      	ldr	r2, [sp, #28]
 80090ee:	4654      	mov	r4, sl
 80090f0:	2000      	movs	r0, #0
 80090f2:	f04f 0c0a 	mov.w	ip, #10
 80090f6:	4621      	mov	r1, r4
 80090f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090fc:	3b30      	subs	r3, #48	@ 0x30
 80090fe:	2b09      	cmp	r3, #9
 8009100:	d94b      	bls.n	800919a <_vfiprintf_r+0x1a2>
 8009102:	b1b0      	cbz	r0, 8009132 <_vfiprintf_r+0x13a>
 8009104:	9207      	str	r2, [sp, #28]
 8009106:	e014      	b.n	8009132 <_vfiprintf_r+0x13a>
 8009108:	eba0 0308 	sub.w	r3, r0, r8
 800910c:	fa09 f303 	lsl.w	r3, r9, r3
 8009110:	4313      	orrs	r3, r2
 8009112:	9304      	str	r3, [sp, #16]
 8009114:	46a2      	mov	sl, r4
 8009116:	e7d2      	b.n	80090be <_vfiprintf_r+0xc6>
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	1d19      	adds	r1, r3, #4
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	9103      	str	r1, [sp, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfbb      	ittet	lt
 8009124:	425b      	neglt	r3, r3
 8009126:	f042 0202 	orrlt.w	r2, r2, #2
 800912a:	9307      	strge	r3, [sp, #28]
 800912c:	9307      	strlt	r3, [sp, #28]
 800912e:	bfb8      	it	lt
 8009130:	9204      	strlt	r2, [sp, #16]
 8009132:	7823      	ldrb	r3, [r4, #0]
 8009134:	2b2e      	cmp	r3, #46	@ 0x2e
 8009136:	d10a      	bne.n	800914e <_vfiprintf_r+0x156>
 8009138:	7863      	ldrb	r3, [r4, #1]
 800913a:	2b2a      	cmp	r3, #42	@ 0x2a
 800913c:	d132      	bne.n	80091a4 <_vfiprintf_r+0x1ac>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	1d1a      	adds	r2, r3, #4
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	9203      	str	r2, [sp, #12]
 8009146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800914a:	3402      	adds	r4, #2
 800914c:	9305      	str	r3, [sp, #20]
 800914e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009224 <_vfiprintf_r+0x22c>
 8009152:	7821      	ldrb	r1, [r4, #0]
 8009154:	2203      	movs	r2, #3
 8009156:	4650      	mov	r0, sl
 8009158:	f7f7 f88a 	bl	8000270 <memchr>
 800915c:	b138      	cbz	r0, 800916e <_vfiprintf_r+0x176>
 800915e:	9b04      	ldr	r3, [sp, #16]
 8009160:	eba0 000a 	sub.w	r0, r0, sl
 8009164:	2240      	movs	r2, #64	@ 0x40
 8009166:	4082      	lsls	r2, r0
 8009168:	4313      	orrs	r3, r2
 800916a:	3401      	adds	r4, #1
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009172:	4829      	ldr	r0, [pc, #164]	@ (8009218 <_vfiprintf_r+0x220>)
 8009174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009178:	2206      	movs	r2, #6
 800917a:	f7f7 f879 	bl	8000270 <memchr>
 800917e:	2800      	cmp	r0, #0
 8009180:	d03f      	beq.n	8009202 <_vfiprintf_r+0x20a>
 8009182:	4b26      	ldr	r3, [pc, #152]	@ (800921c <_vfiprintf_r+0x224>)
 8009184:	bb1b      	cbnz	r3, 80091ce <_vfiprintf_r+0x1d6>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	3307      	adds	r3, #7
 800918a:	f023 0307 	bic.w	r3, r3, #7
 800918e:	3308      	adds	r3, #8
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009194:	443b      	add	r3, r7
 8009196:	9309      	str	r3, [sp, #36]	@ 0x24
 8009198:	e76a      	b.n	8009070 <_vfiprintf_r+0x78>
 800919a:	fb0c 3202 	mla	r2, ip, r2, r3
 800919e:	460c      	mov	r4, r1
 80091a0:	2001      	movs	r0, #1
 80091a2:	e7a8      	b.n	80090f6 <_vfiprintf_r+0xfe>
 80091a4:	2300      	movs	r3, #0
 80091a6:	3401      	adds	r4, #1
 80091a8:	9305      	str	r3, [sp, #20]
 80091aa:	4619      	mov	r1, r3
 80091ac:	f04f 0c0a 	mov.w	ip, #10
 80091b0:	4620      	mov	r0, r4
 80091b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b6:	3a30      	subs	r2, #48	@ 0x30
 80091b8:	2a09      	cmp	r2, #9
 80091ba:	d903      	bls.n	80091c4 <_vfiprintf_r+0x1cc>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0c6      	beq.n	800914e <_vfiprintf_r+0x156>
 80091c0:	9105      	str	r1, [sp, #20]
 80091c2:	e7c4      	b.n	800914e <_vfiprintf_r+0x156>
 80091c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091c8:	4604      	mov	r4, r0
 80091ca:	2301      	movs	r3, #1
 80091cc:	e7f0      	b.n	80091b0 <_vfiprintf_r+0x1b8>
 80091ce:	ab03      	add	r3, sp, #12
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	462a      	mov	r2, r5
 80091d4:	4b12      	ldr	r3, [pc, #72]	@ (8009220 <_vfiprintf_r+0x228>)
 80091d6:	a904      	add	r1, sp, #16
 80091d8:	4630      	mov	r0, r6
 80091da:	f3af 8000 	nop.w
 80091de:	4607      	mov	r7, r0
 80091e0:	1c78      	adds	r0, r7, #1
 80091e2:	d1d6      	bne.n	8009192 <_vfiprintf_r+0x19a>
 80091e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091e6:	07d9      	lsls	r1, r3, #31
 80091e8:	d405      	bmi.n	80091f6 <_vfiprintf_r+0x1fe>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	059a      	lsls	r2, r3, #22
 80091ee:	d402      	bmi.n	80091f6 <_vfiprintf_r+0x1fe>
 80091f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091f2:	f7ff fc77 	bl	8008ae4 <__retarget_lock_release_recursive>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	065b      	lsls	r3, r3, #25
 80091fa:	f53f af1f 	bmi.w	800903c <_vfiprintf_r+0x44>
 80091fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009200:	e71e      	b.n	8009040 <_vfiprintf_r+0x48>
 8009202:	ab03      	add	r3, sp, #12
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	462a      	mov	r2, r5
 8009208:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <_vfiprintf_r+0x228>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	4630      	mov	r0, r6
 800920e:	f000 f879 	bl	8009304 <_printf_i>
 8009212:	e7e4      	b.n	80091de <_vfiprintf_r+0x1e6>
 8009214:	0800a00c 	.word	0x0800a00c
 8009218:	0800a016 	.word	0x0800a016
 800921c:	00000000 	.word	0x00000000
 8009220:	08008fd3 	.word	0x08008fd3
 8009224:	0800a012 	.word	0x0800a012

08009228 <_printf_common>:
 8009228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800922c:	4616      	mov	r6, r2
 800922e:	4698      	mov	r8, r3
 8009230:	688a      	ldr	r2, [r1, #8]
 8009232:	690b      	ldr	r3, [r1, #16]
 8009234:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009238:	4293      	cmp	r3, r2
 800923a:	bfb8      	it	lt
 800923c:	4613      	movlt	r3, r2
 800923e:	6033      	str	r3, [r6, #0]
 8009240:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009244:	4607      	mov	r7, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b10a      	cbz	r2, 800924e <_printf_common+0x26>
 800924a:	3301      	adds	r3, #1
 800924c:	6033      	str	r3, [r6, #0]
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	0699      	lsls	r1, r3, #26
 8009252:	bf42      	ittt	mi
 8009254:	6833      	ldrmi	r3, [r6, #0]
 8009256:	3302      	addmi	r3, #2
 8009258:	6033      	strmi	r3, [r6, #0]
 800925a:	6825      	ldr	r5, [r4, #0]
 800925c:	f015 0506 	ands.w	r5, r5, #6
 8009260:	d106      	bne.n	8009270 <_printf_common+0x48>
 8009262:	f104 0a19 	add.w	sl, r4, #25
 8009266:	68e3      	ldr	r3, [r4, #12]
 8009268:	6832      	ldr	r2, [r6, #0]
 800926a:	1a9b      	subs	r3, r3, r2
 800926c:	42ab      	cmp	r3, r5
 800926e:	dc26      	bgt.n	80092be <_printf_common+0x96>
 8009270:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	3b00      	subs	r3, #0
 8009278:	bf18      	it	ne
 800927a:	2301      	movne	r3, #1
 800927c:	0692      	lsls	r2, r2, #26
 800927e:	d42b      	bmi.n	80092d8 <_printf_common+0xb0>
 8009280:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009284:	4641      	mov	r1, r8
 8009286:	4638      	mov	r0, r7
 8009288:	47c8      	blx	r9
 800928a:	3001      	adds	r0, #1
 800928c:	d01e      	beq.n	80092cc <_printf_common+0xa4>
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	f003 0306 	and.w	r3, r3, #6
 8009296:	2b04      	cmp	r3, #4
 8009298:	bf02      	ittt	eq
 800929a:	68e5      	ldreq	r5, [r4, #12]
 800929c:	6833      	ldreq	r3, [r6, #0]
 800929e:	1aed      	subeq	r5, r5, r3
 80092a0:	68a3      	ldr	r3, [r4, #8]
 80092a2:	bf0c      	ite	eq
 80092a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092a8:	2500      	movne	r5, #0
 80092aa:	4293      	cmp	r3, r2
 80092ac:	bfc4      	itt	gt
 80092ae:	1a9b      	subgt	r3, r3, r2
 80092b0:	18ed      	addgt	r5, r5, r3
 80092b2:	2600      	movs	r6, #0
 80092b4:	341a      	adds	r4, #26
 80092b6:	42b5      	cmp	r5, r6
 80092b8:	d11a      	bne.n	80092f0 <_printf_common+0xc8>
 80092ba:	2000      	movs	r0, #0
 80092bc:	e008      	b.n	80092d0 <_printf_common+0xa8>
 80092be:	2301      	movs	r3, #1
 80092c0:	4652      	mov	r2, sl
 80092c2:	4641      	mov	r1, r8
 80092c4:	4638      	mov	r0, r7
 80092c6:	47c8      	blx	r9
 80092c8:	3001      	adds	r0, #1
 80092ca:	d103      	bne.n	80092d4 <_printf_common+0xac>
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295
 80092d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d4:	3501      	adds	r5, #1
 80092d6:	e7c6      	b.n	8009266 <_printf_common+0x3e>
 80092d8:	18e1      	adds	r1, r4, r3
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	2030      	movs	r0, #48	@ 0x30
 80092de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092e2:	4422      	add	r2, r4
 80092e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092ec:	3302      	adds	r3, #2
 80092ee:	e7c7      	b.n	8009280 <_printf_common+0x58>
 80092f0:	2301      	movs	r3, #1
 80092f2:	4622      	mov	r2, r4
 80092f4:	4641      	mov	r1, r8
 80092f6:	4638      	mov	r0, r7
 80092f8:	47c8      	blx	r9
 80092fa:	3001      	adds	r0, #1
 80092fc:	d0e6      	beq.n	80092cc <_printf_common+0xa4>
 80092fe:	3601      	adds	r6, #1
 8009300:	e7d9      	b.n	80092b6 <_printf_common+0x8e>
	...

08009304 <_printf_i>:
 8009304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	7e0f      	ldrb	r7, [r1, #24]
 800930a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800930c:	2f78      	cmp	r7, #120	@ 0x78
 800930e:	4691      	mov	r9, r2
 8009310:	4680      	mov	r8, r0
 8009312:	460c      	mov	r4, r1
 8009314:	469a      	mov	sl, r3
 8009316:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800931a:	d807      	bhi.n	800932c <_printf_i+0x28>
 800931c:	2f62      	cmp	r7, #98	@ 0x62
 800931e:	d80a      	bhi.n	8009336 <_printf_i+0x32>
 8009320:	2f00      	cmp	r7, #0
 8009322:	f000 80d2 	beq.w	80094ca <_printf_i+0x1c6>
 8009326:	2f58      	cmp	r7, #88	@ 0x58
 8009328:	f000 80b9 	beq.w	800949e <_printf_i+0x19a>
 800932c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009330:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009334:	e03a      	b.n	80093ac <_printf_i+0xa8>
 8009336:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800933a:	2b15      	cmp	r3, #21
 800933c:	d8f6      	bhi.n	800932c <_printf_i+0x28>
 800933e:	a101      	add	r1, pc, #4	@ (adr r1, 8009344 <_printf_i+0x40>)
 8009340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009344:	0800939d 	.word	0x0800939d
 8009348:	080093b1 	.word	0x080093b1
 800934c:	0800932d 	.word	0x0800932d
 8009350:	0800932d 	.word	0x0800932d
 8009354:	0800932d 	.word	0x0800932d
 8009358:	0800932d 	.word	0x0800932d
 800935c:	080093b1 	.word	0x080093b1
 8009360:	0800932d 	.word	0x0800932d
 8009364:	0800932d 	.word	0x0800932d
 8009368:	0800932d 	.word	0x0800932d
 800936c:	0800932d 	.word	0x0800932d
 8009370:	080094b1 	.word	0x080094b1
 8009374:	080093db 	.word	0x080093db
 8009378:	0800946b 	.word	0x0800946b
 800937c:	0800932d 	.word	0x0800932d
 8009380:	0800932d 	.word	0x0800932d
 8009384:	080094d3 	.word	0x080094d3
 8009388:	0800932d 	.word	0x0800932d
 800938c:	080093db 	.word	0x080093db
 8009390:	0800932d 	.word	0x0800932d
 8009394:	0800932d 	.word	0x0800932d
 8009398:	08009473 	.word	0x08009473
 800939c:	6833      	ldr	r3, [r6, #0]
 800939e:	1d1a      	adds	r2, r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6032      	str	r2, [r6, #0]
 80093a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093ac:	2301      	movs	r3, #1
 80093ae:	e09d      	b.n	80094ec <_printf_i+0x1e8>
 80093b0:	6833      	ldr	r3, [r6, #0]
 80093b2:	6820      	ldr	r0, [r4, #0]
 80093b4:	1d19      	adds	r1, r3, #4
 80093b6:	6031      	str	r1, [r6, #0]
 80093b8:	0606      	lsls	r6, r0, #24
 80093ba:	d501      	bpl.n	80093c0 <_printf_i+0xbc>
 80093bc:	681d      	ldr	r5, [r3, #0]
 80093be:	e003      	b.n	80093c8 <_printf_i+0xc4>
 80093c0:	0645      	lsls	r5, r0, #25
 80093c2:	d5fb      	bpl.n	80093bc <_printf_i+0xb8>
 80093c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093c8:	2d00      	cmp	r5, #0
 80093ca:	da03      	bge.n	80093d4 <_printf_i+0xd0>
 80093cc:	232d      	movs	r3, #45	@ 0x2d
 80093ce:	426d      	negs	r5, r5
 80093d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093d4:	4859      	ldr	r0, [pc, #356]	@ (800953c <_printf_i+0x238>)
 80093d6:	230a      	movs	r3, #10
 80093d8:	e011      	b.n	80093fe <_printf_i+0xfa>
 80093da:	6821      	ldr	r1, [r4, #0]
 80093dc:	6833      	ldr	r3, [r6, #0]
 80093de:	0608      	lsls	r0, r1, #24
 80093e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80093e4:	d402      	bmi.n	80093ec <_printf_i+0xe8>
 80093e6:	0649      	lsls	r1, r1, #25
 80093e8:	bf48      	it	mi
 80093ea:	b2ad      	uxthmi	r5, r5
 80093ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80093ee:	4853      	ldr	r0, [pc, #332]	@ (800953c <_printf_i+0x238>)
 80093f0:	6033      	str	r3, [r6, #0]
 80093f2:	bf14      	ite	ne
 80093f4:	230a      	movne	r3, #10
 80093f6:	2308      	moveq	r3, #8
 80093f8:	2100      	movs	r1, #0
 80093fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093fe:	6866      	ldr	r6, [r4, #4]
 8009400:	60a6      	str	r6, [r4, #8]
 8009402:	2e00      	cmp	r6, #0
 8009404:	bfa2      	ittt	ge
 8009406:	6821      	ldrge	r1, [r4, #0]
 8009408:	f021 0104 	bicge.w	r1, r1, #4
 800940c:	6021      	strge	r1, [r4, #0]
 800940e:	b90d      	cbnz	r5, 8009414 <_printf_i+0x110>
 8009410:	2e00      	cmp	r6, #0
 8009412:	d04b      	beq.n	80094ac <_printf_i+0x1a8>
 8009414:	4616      	mov	r6, r2
 8009416:	fbb5 f1f3 	udiv	r1, r5, r3
 800941a:	fb03 5711 	mls	r7, r3, r1, r5
 800941e:	5dc7      	ldrb	r7, [r0, r7]
 8009420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009424:	462f      	mov	r7, r5
 8009426:	42bb      	cmp	r3, r7
 8009428:	460d      	mov	r5, r1
 800942a:	d9f4      	bls.n	8009416 <_printf_i+0x112>
 800942c:	2b08      	cmp	r3, #8
 800942e:	d10b      	bne.n	8009448 <_printf_i+0x144>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	07df      	lsls	r7, r3, #31
 8009434:	d508      	bpl.n	8009448 <_printf_i+0x144>
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	6861      	ldr	r1, [r4, #4]
 800943a:	4299      	cmp	r1, r3
 800943c:	bfde      	ittt	le
 800943e:	2330      	movle	r3, #48	@ 0x30
 8009440:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009444:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009448:	1b92      	subs	r2, r2, r6
 800944a:	6122      	str	r2, [r4, #16]
 800944c:	f8cd a000 	str.w	sl, [sp]
 8009450:	464b      	mov	r3, r9
 8009452:	aa03      	add	r2, sp, #12
 8009454:	4621      	mov	r1, r4
 8009456:	4640      	mov	r0, r8
 8009458:	f7ff fee6 	bl	8009228 <_printf_common>
 800945c:	3001      	adds	r0, #1
 800945e:	d14a      	bne.n	80094f6 <_printf_i+0x1f2>
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	b004      	add	sp, #16
 8009466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	f043 0320 	orr.w	r3, r3, #32
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	4833      	ldr	r0, [pc, #204]	@ (8009540 <_printf_i+0x23c>)
 8009474:	2778      	movs	r7, #120	@ 0x78
 8009476:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	6831      	ldr	r1, [r6, #0]
 800947e:	061f      	lsls	r7, r3, #24
 8009480:	f851 5b04 	ldr.w	r5, [r1], #4
 8009484:	d402      	bmi.n	800948c <_printf_i+0x188>
 8009486:	065f      	lsls	r7, r3, #25
 8009488:	bf48      	it	mi
 800948a:	b2ad      	uxthmi	r5, r5
 800948c:	6031      	str	r1, [r6, #0]
 800948e:	07d9      	lsls	r1, r3, #31
 8009490:	bf44      	itt	mi
 8009492:	f043 0320 	orrmi.w	r3, r3, #32
 8009496:	6023      	strmi	r3, [r4, #0]
 8009498:	b11d      	cbz	r5, 80094a2 <_printf_i+0x19e>
 800949a:	2310      	movs	r3, #16
 800949c:	e7ac      	b.n	80093f8 <_printf_i+0xf4>
 800949e:	4827      	ldr	r0, [pc, #156]	@ (800953c <_printf_i+0x238>)
 80094a0:	e7e9      	b.n	8009476 <_printf_i+0x172>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	f023 0320 	bic.w	r3, r3, #32
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	e7f6      	b.n	800949a <_printf_i+0x196>
 80094ac:	4616      	mov	r6, r2
 80094ae:	e7bd      	b.n	800942c <_printf_i+0x128>
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	6825      	ldr	r5, [r4, #0]
 80094b4:	6961      	ldr	r1, [r4, #20]
 80094b6:	1d18      	adds	r0, r3, #4
 80094b8:	6030      	str	r0, [r6, #0]
 80094ba:	062e      	lsls	r6, r5, #24
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	d501      	bpl.n	80094c4 <_printf_i+0x1c0>
 80094c0:	6019      	str	r1, [r3, #0]
 80094c2:	e002      	b.n	80094ca <_printf_i+0x1c6>
 80094c4:	0668      	lsls	r0, r5, #25
 80094c6:	d5fb      	bpl.n	80094c0 <_printf_i+0x1bc>
 80094c8:	8019      	strh	r1, [r3, #0]
 80094ca:	2300      	movs	r3, #0
 80094cc:	6123      	str	r3, [r4, #16]
 80094ce:	4616      	mov	r6, r2
 80094d0:	e7bc      	b.n	800944c <_printf_i+0x148>
 80094d2:	6833      	ldr	r3, [r6, #0]
 80094d4:	1d1a      	adds	r2, r3, #4
 80094d6:	6032      	str	r2, [r6, #0]
 80094d8:	681e      	ldr	r6, [r3, #0]
 80094da:	6862      	ldr	r2, [r4, #4]
 80094dc:	2100      	movs	r1, #0
 80094de:	4630      	mov	r0, r6
 80094e0:	f7f6 fec6 	bl	8000270 <memchr>
 80094e4:	b108      	cbz	r0, 80094ea <_printf_i+0x1e6>
 80094e6:	1b80      	subs	r0, r0, r6
 80094e8:	6060      	str	r0, [r4, #4]
 80094ea:	6863      	ldr	r3, [r4, #4]
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	2300      	movs	r3, #0
 80094f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094f4:	e7aa      	b.n	800944c <_printf_i+0x148>
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	4632      	mov	r2, r6
 80094fa:	4649      	mov	r1, r9
 80094fc:	4640      	mov	r0, r8
 80094fe:	47d0      	blx	sl
 8009500:	3001      	adds	r0, #1
 8009502:	d0ad      	beq.n	8009460 <_printf_i+0x15c>
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	079b      	lsls	r3, r3, #30
 8009508:	d413      	bmi.n	8009532 <_printf_i+0x22e>
 800950a:	68e0      	ldr	r0, [r4, #12]
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	4298      	cmp	r0, r3
 8009510:	bfb8      	it	lt
 8009512:	4618      	movlt	r0, r3
 8009514:	e7a6      	b.n	8009464 <_printf_i+0x160>
 8009516:	2301      	movs	r3, #1
 8009518:	4632      	mov	r2, r6
 800951a:	4649      	mov	r1, r9
 800951c:	4640      	mov	r0, r8
 800951e:	47d0      	blx	sl
 8009520:	3001      	adds	r0, #1
 8009522:	d09d      	beq.n	8009460 <_printf_i+0x15c>
 8009524:	3501      	adds	r5, #1
 8009526:	68e3      	ldr	r3, [r4, #12]
 8009528:	9903      	ldr	r1, [sp, #12]
 800952a:	1a5b      	subs	r3, r3, r1
 800952c:	42ab      	cmp	r3, r5
 800952e:	dcf2      	bgt.n	8009516 <_printf_i+0x212>
 8009530:	e7eb      	b.n	800950a <_printf_i+0x206>
 8009532:	2500      	movs	r5, #0
 8009534:	f104 0619 	add.w	r6, r4, #25
 8009538:	e7f5      	b.n	8009526 <_printf_i+0x222>
 800953a:	bf00      	nop
 800953c:	0800a01d 	.word	0x0800a01d
 8009540:	0800a02e 	.word	0x0800a02e

08009544 <__sflush_r>:
 8009544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954c:	0716      	lsls	r6, r2, #28
 800954e:	4605      	mov	r5, r0
 8009550:	460c      	mov	r4, r1
 8009552:	d454      	bmi.n	80095fe <__sflush_r+0xba>
 8009554:	684b      	ldr	r3, [r1, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dc02      	bgt.n	8009560 <__sflush_r+0x1c>
 800955a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	dd48      	ble.n	80095f2 <__sflush_r+0xae>
 8009560:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009562:	2e00      	cmp	r6, #0
 8009564:	d045      	beq.n	80095f2 <__sflush_r+0xae>
 8009566:	2300      	movs	r3, #0
 8009568:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800956c:	682f      	ldr	r7, [r5, #0]
 800956e:	6a21      	ldr	r1, [r4, #32]
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	d030      	beq.n	80095d6 <__sflush_r+0x92>
 8009574:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	0759      	lsls	r1, r3, #29
 800957a:	d505      	bpl.n	8009588 <__sflush_r+0x44>
 800957c:	6863      	ldr	r3, [r4, #4]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009582:	b10b      	cbz	r3, 8009588 <__sflush_r+0x44>
 8009584:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009586:	1ad2      	subs	r2, r2, r3
 8009588:	2300      	movs	r3, #0
 800958a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800958c:	6a21      	ldr	r1, [r4, #32]
 800958e:	4628      	mov	r0, r5
 8009590:	47b0      	blx	r6
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	d106      	bne.n	80095a6 <__sflush_r+0x62>
 8009598:	6829      	ldr	r1, [r5, #0]
 800959a:	291d      	cmp	r1, #29
 800959c:	d82b      	bhi.n	80095f6 <__sflush_r+0xb2>
 800959e:	4a2a      	ldr	r2, [pc, #168]	@ (8009648 <__sflush_r+0x104>)
 80095a0:	410a      	asrs	r2, r1
 80095a2:	07d6      	lsls	r6, r2, #31
 80095a4:	d427      	bmi.n	80095f6 <__sflush_r+0xb2>
 80095a6:	2200      	movs	r2, #0
 80095a8:	6062      	str	r2, [r4, #4]
 80095aa:	04d9      	lsls	r1, r3, #19
 80095ac:	6922      	ldr	r2, [r4, #16]
 80095ae:	6022      	str	r2, [r4, #0]
 80095b0:	d504      	bpl.n	80095bc <__sflush_r+0x78>
 80095b2:	1c42      	adds	r2, r0, #1
 80095b4:	d101      	bne.n	80095ba <__sflush_r+0x76>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	b903      	cbnz	r3, 80095bc <__sflush_r+0x78>
 80095ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80095bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095be:	602f      	str	r7, [r5, #0]
 80095c0:	b1b9      	cbz	r1, 80095f2 <__sflush_r+0xae>
 80095c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095c6:	4299      	cmp	r1, r3
 80095c8:	d002      	beq.n	80095d0 <__sflush_r+0x8c>
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7ff fa9a 	bl	8008b04 <_free_r>
 80095d0:	2300      	movs	r3, #0
 80095d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80095d4:	e00d      	b.n	80095f2 <__sflush_r+0xae>
 80095d6:	2301      	movs	r3, #1
 80095d8:	4628      	mov	r0, r5
 80095da:	47b0      	blx	r6
 80095dc:	4602      	mov	r2, r0
 80095de:	1c50      	adds	r0, r2, #1
 80095e0:	d1c9      	bne.n	8009576 <__sflush_r+0x32>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0c6      	beq.n	8009576 <__sflush_r+0x32>
 80095e8:	2b1d      	cmp	r3, #29
 80095ea:	d001      	beq.n	80095f0 <__sflush_r+0xac>
 80095ec:	2b16      	cmp	r3, #22
 80095ee:	d11e      	bne.n	800962e <__sflush_r+0xea>
 80095f0:	602f      	str	r7, [r5, #0]
 80095f2:	2000      	movs	r0, #0
 80095f4:	e022      	b.n	800963c <__sflush_r+0xf8>
 80095f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095fa:	b21b      	sxth	r3, r3
 80095fc:	e01b      	b.n	8009636 <__sflush_r+0xf2>
 80095fe:	690f      	ldr	r7, [r1, #16]
 8009600:	2f00      	cmp	r7, #0
 8009602:	d0f6      	beq.n	80095f2 <__sflush_r+0xae>
 8009604:	0793      	lsls	r3, r2, #30
 8009606:	680e      	ldr	r6, [r1, #0]
 8009608:	bf08      	it	eq
 800960a:	694b      	ldreq	r3, [r1, #20]
 800960c:	600f      	str	r7, [r1, #0]
 800960e:	bf18      	it	ne
 8009610:	2300      	movne	r3, #0
 8009612:	eba6 0807 	sub.w	r8, r6, r7
 8009616:	608b      	str	r3, [r1, #8]
 8009618:	f1b8 0f00 	cmp.w	r8, #0
 800961c:	dde9      	ble.n	80095f2 <__sflush_r+0xae>
 800961e:	6a21      	ldr	r1, [r4, #32]
 8009620:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009622:	4643      	mov	r3, r8
 8009624:	463a      	mov	r2, r7
 8009626:	4628      	mov	r0, r5
 8009628:	47b0      	blx	r6
 800962a:	2800      	cmp	r0, #0
 800962c:	dc08      	bgt.n	8009640 <__sflush_r+0xfc>
 800962e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	4407      	add	r7, r0
 8009642:	eba8 0800 	sub.w	r8, r8, r0
 8009646:	e7e7      	b.n	8009618 <__sflush_r+0xd4>
 8009648:	dfbffffe 	.word	0xdfbffffe

0800964c <_fflush_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	690b      	ldr	r3, [r1, #16]
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b913      	cbnz	r3, 800965c <_fflush_r+0x10>
 8009656:	2500      	movs	r5, #0
 8009658:	4628      	mov	r0, r5
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	b118      	cbz	r0, 8009666 <_fflush_r+0x1a>
 800965e:	6a03      	ldr	r3, [r0, #32]
 8009660:	b90b      	cbnz	r3, 8009666 <_fflush_r+0x1a>
 8009662:	f7ff f919 	bl	8008898 <__sinit>
 8009666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0f3      	beq.n	8009656 <_fflush_r+0xa>
 800966e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009670:	07d0      	lsls	r0, r2, #31
 8009672:	d404      	bmi.n	800967e <_fflush_r+0x32>
 8009674:	0599      	lsls	r1, r3, #22
 8009676:	d402      	bmi.n	800967e <_fflush_r+0x32>
 8009678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800967a:	f7ff fa32 	bl	8008ae2 <__retarget_lock_acquire_recursive>
 800967e:	4628      	mov	r0, r5
 8009680:	4621      	mov	r1, r4
 8009682:	f7ff ff5f 	bl	8009544 <__sflush_r>
 8009686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009688:	07da      	lsls	r2, r3, #31
 800968a:	4605      	mov	r5, r0
 800968c:	d4e4      	bmi.n	8009658 <_fflush_r+0xc>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	059b      	lsls	r3, r3, #22
 8009692:	d4e1      	bmi.n	8009658 <_fflush_r+0xc>
 8009694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009696:	f7ff fa25 	bl	8008ae4 <__retarget_lock_release_recursive>
 800969a:	e7dd      	b.n	8009658 <_fflush_r+0xc>

0800969c <__swbuf_r>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	460e      	mov	r6, r1
 80096a0:	4614      	mov	r4, r2
 80096a2:	4605      	mov	r5, r0
 80096a4:	b118      	cbz	r0, 80096ae <__swbuf_r+0x12>
 80096a6:	6a03      	ldr	r3, [r0, #32]
 80096a8:	b90b      	cbnz	r3, 80096ae <__swbuf_r+0x12>
 80096aa:	f7ff f8f5 	bl	8008898 <__sinit>
 80096ae:	69a3      	ldr	r3, [r4, #24]
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	071a      	lsls	r2, r3, #28
 80096b6:	d501      	bpl.n	80096bc <__swbuf_r+0x20>
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	b943      	cbnz	r3, 80096ce <__swbuf_r+0x32>
 80096bc:	4621      	mov	r1, r4
 80096be:	4628      	mov	r0, r5
 80096c0:	f000 f82a 	bl	8009718 <__swsetup_r>
 80096c4:	b118      	cbz	r0, 80096ce <__swbuf_r+0x32>
 80096c6:	f04f 37ff 	mov.w	r7, #4294967295
 80096ca:	4638      	mov	r0, r7
 80096cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	6922      	ldr	r2, [r4, #16]
 80096d2:	1a98      	subs	r0, r3, r2
 80096d4:	6963      	ldr	r3, [r4, #20]
 80096d6:	b2f6      	uxtb	r6, r6
 80096d8:	4283      	cmp	r3, r0
 80096da:	4637      	mov	r7, r6
 80096dc:	dc05      	bgt.n	80096ea <__swbuf_r+0x4e>
 80096de:	4621      	mov	r1, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	f7ff ffb3 	bl	800964c <_fflush_r>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d1ed      	bne.n	80096c6 <__swbuf_r+0x2a>
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	60a3      	str	r3, [r4, #8]
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	1c5a      	adds	r2, r3, #1
 80096f4:	6022      	str	r2, [r4, #0]
 80096f6:	701e      	strb	r6, [r3, #0]
 80096f8:	6962      	ldr	r2, [r4, #20]
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d004      	beq.n	800970a <__swbuf_r+0x6e>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	07db      	lsls	r3, r3, #31
 8009704:	d5e1      	bpl.n	80096ca <__swbuf_r+0x2e>
 8009706:	2e0a      	cmp	r6, #10
 8009708:	d1df      	bne.n	80096ca <__swbuf_r+0x2e>
 800970a:	4621      	mov	r1, r4
 800970c:	4628      	mov	r0, r5
 800970e:	f7ff ff9d 	bl	800964c <_fflush_r>
 8009712:	2800      	cmp	r0, #0
 8009714:	d0d9      	beq.n	80096ca <__swbuf_r+0x2e>
 8009716:	e7d6      	b.n	80096c6 <__swbuf_r+0x2a>

08009718 <__swsetup_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4b29      	ldr	r3, [pc, #164]	@ (80097c0 <__swsetup_r+0xa8>)
 800971c:	4605      	mov	r5, r0
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	460c      	mov	r4, r1
 8009722:	b118      	cbz	r0, 800972c <__swsetup_r+0x14>
 8009724:	6a03      	ldr	r3, [r0, #32]
 8009726:	b90b      	cbnz	r3, 800972c <__swsetup_r+0x14>
 8009728:	f7ff f8b6 	bl	8008898 <__sinit>
 800972c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009730:	0719      	lsls	r1, r3, #28
 8009732:	d422      	bmi.n	800977a <__swsetup_r+0x62>
 8009734:	06da      	lsls	r2, r3, #27
 8009736:	d407      	bmi.n	8009748 <__swsetup_r+0x30>
 8009738:	2209      	movs	r2, #9
 800973a:	602a      	str	r2, [r5, #0]
 800973c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009740:	81a3      	strh	r3, [r4, #12]
 8009742:	f04f 30ff 	mov.w	r0, #4294967295
 8009746:	e033      	b.n	80097b0 <__swsetup_r+0x98>
 8009748:	0758      	lsls	r0, r3, #29
 800974a:	d512      	bpl.n	8009772 <__swsetup_r+0x5a>
 800974c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800974e:	b141      	cbz	r1, 8009762 <__swsetup_r+0x4a>
 8009750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009754:	4299      	cmp	r1, r3
 8009756:	d002      	beq.n	800975e <__swsetup_r+0x46>
 8009758:	4628      	mov	r0, r5
 800975a:	f7ff f9d3 	bl	8008b04 <_free_r>
 800975e:	2300      	movs	r3, #0
 8009760:	6363      	str	r3, [r4, #52]	@ 0x34
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	2300      	movs	r3, #0
 800976c:	6063      	str	r3, [r4, #4]
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	f043 0308 	orr.w	r3, r3, #8
 8009778:	81a3      	strh	r3, [r4, #12]
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	b94b      	cbnz	r3, 8009792 <__swsetup_r+0x7a>
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009788:	d003      	beq.n	8009792 <__swsetup_r+0x7a>
 800978a:	4621      	mov	r1, r4
 800978c:	4628      	mov	r0, r5
 800978e:	f000 f897 	bl	80098c0 <__smakebuf_r>
 8009792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009796:	f013 0201 	ands.w	r2, r3, #1
 800979a:	d00a      	beq.n	80097b2 <__swsetup_r+0x9a>
 800979c:	2200      	movs	r2, #0
 800979e:	60a2      	str	r2, [r4, #8]
 80097a0:	6962      	ldr	r2, [r4, #20]
 80097a2:	4252      	negs	r2, r2
 80097a4:	61a2      	str	r2, [r4, #24]
 80097a6:	6922      	ldr	r2, [r4, #16]
 80097a8:	b942      	cbnz	r2, 80097bc <__swsetup_r+0xa4>
 80097aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097ae:	d1c5      	bne.n	800973c <__swsetup_r+0x24>
 80097b0:	bd38      	pop	{r3, r4, r5, pc}
 80097b2:	0799      	lsls	r1, r3, #30
 80097b4:	bf58      	it	pl
 80097b6:	6962      	ldrpl	r2, [r4, #20]
 80097b8:	60a2      	str	r2, [r4, #8]
 80097ba:	e7f4      	b.n	80097a6 <__swsetup_r+0x8e>
 80097bc:	2000      	movs	r0, #0
 80097be:	e7f7      	b.n	80097b0 <__swsetup_r+0x98>
 80097c0:	20000038 	.word	0x20000038

080097c4 <memmove>:
 80097c4:	4288      	cmp	r0, r1
 80097c6:	b510      	push	{r4, lr}
 80097c8:	eb01 0402 	add.w	r4, r1, r2
 80097cc:	d902      	bls.n	80097d4 <memmove+0x10>
 80097ce:	4284      	cmp	r4, r0
 80097d0:	4623      	mov	r3, r4
 80097d2:	d807      	bhi.n	80097e4 <memmove+0x20>
 80097d4:	1e43      	subs	r3, r0, #1
 80097d6:	42a1      	cmp	r1, r4
 80097d8:	d008      	beq.n	80097ec <memmove+0x28>
 80097da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097e2:	e7f8      	b.n	80097d6 <memmove+0x12>
 80097e4:	4402      	add	r2, r0
 80097e6:	4601      	mov	r1, r0
 80097e8:	428a      	cmp	r2, r1
 80097ea:	d100      	bne.n	80097ee <memmove+0x2a>
 80097ec:	bd10      	pop	{r4, pc}
 80097ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097f6:	e7f7      	b.n	80097e8 <memmove+0x24>

080097f8 <_sbrk_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d06      	ldr	r5, [pc, #24]	@ (8009814 <_sbrk_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7fa fd46 	bl	8004294 <_sbrk>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_sbrk_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_sbrk_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	2000bd14 	.word	0x2000bd14

08009818 <_realloc_r>:
 8009818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	4680      	mov	r8, r0
 800981e:	4615      	mov	r5, r2
 8009820:	460c      	mov	r4, r1
 8009822:	b921      	cbnz	r1, 800982e <_realloc_r+0x16>
 8009824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009828:	4611      	mov	r1, r2
 800982a:	f7ff b9d7 	b.w	8008bdc <_malloc_r>
 800982e:	b92a      	cbnz	r2, 800983c <_realloc_r+0x24>
 8009830:	f7ff f968 	bl	8008b04 <_free_r>
 8009834:	2400      	movs	r4, #0
 8009836:	4620      	mov	r0, r4
 8009838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800983c:	f000 f89e 	bl	800997c <_malloc_usable_size_r>
 8009840:	4285      	cmp	r5, r0
 8009842:	4606      	mov	r6, r0
 8009844:	d802      	bhi.n	800984c <_realloc_r+0x34>
 8009846:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800984a:	d8f4      	bhi.n	8009836 <_realloc_r+0x1e>
 800984c:	4629      	mov	r1, r5
 800984e:	4640      	mov	r0, r8
 8009850:	f7ff f9c4 	bl	8008bdc <_malloc_r>
 8009854:	4607      	mov	r7, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	d0ec      	beq.n	8009834 <_realloc_r+0x1c>
 800985a:	42b5      	cmp	r5, r6
 800985c:	462a      	mov	r2, r5
 800985e:	4621      	mov	r1, r4
 8009860:	bf28      	it	cs
 8009862:	4632      	movcs	r2, r6
 8009864:	f7ff f93f 	bl	8008ae6 <memcpy>
 8009868:	4621      	mov	r1, r4
 800986a:	4640      	mov	r0, r8
 800986c:	f7ff f94a 	bl	8008b04 <_free_r>
 8009870:	463c      	mov	r4, r7
 8009872:	e7e0      	b.n	8009836 <_realloc_r+0x1e>

08009874 <__swhatbuf_r>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	460c      	mov	r4, r1
 8009878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987c:	2900      	cmp	r1, #0
 800987e:	b096      	sub	sp, #88	@ 0x58
 8009880:	4615      	mov	r5, r2
 8009882:	461e      	mov	r6, r3
 8009884:	da0d      	bge.n	80098a2 <__swhatbuf_r+0x2e>
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800988c:	f04f 0100 	mov.w	r1, #0
 8009890:	bf14      	ite	ne
 8009892:	2340      	movne	r3, #64	@ 0x40
 8009894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009898:	2000      	movs	r0, #0
 800989a:	6031      	str	r1, [r6, #0]
 800989c:	602b      	str	r3, [r5, #0]
 800989e:	b016      	add	sp, #88	@ 0x58
 80098a0:	bd70      	pop	{r4, r5, r6, pc}
 80098a2:	466a      	mov	r2, sp
 80098a4:	f000 f848 	bl	8009938 <_fstat_r>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	dbec      	blt.n	8009886 <__swhatbuf_r+0x12>
 80098ac:	9901      	ldr	r1, [sp, #4]
 80098ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098b6:	4259      	negs	r1, r3
 80098b8:	4159      	adcs	r1, r3
 80098ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098be:	e7eb      	b.n	8009898 <__swhatbuf_r+0x24>

080098c0 <__smakebuf_r>:
 80098c0:	898b      	ldrh	r3, [r1, #12]
 80098c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098c4:	079d      	lsls	r5, r3, #30
 80098c6:	4606      	mov	r6, r0
 80098c8:	460c      	mov	r4, r1
 80098ca:	d507      	bpl.n	80098dc <__smakebuf_r+0x1c>
 80098cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	6123      	str	r3, [r4, #16]
 80098d4:	2301      	movs	r3, #1
 80098d6:	6163      	str	r3, [r4, #20]
 80098d8:	b003      	add	sp, #12
 80098da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098dc:	ab01      	add	r3, sp, #4
 80098de:	466a      	mov	r2, sp
 80098e0:	f7ff ffc8 	bl	8009874 <__swhatbuf_r>
 80098e4:	9f00      	ldr	r7, [sp, #0]
 80098e6:	4605      	mov	r5, r0
 80098e8:	4639      	mov	r1, r7
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7ff f976 	bl	8008bdc <_malloc_r>
 80098f0:	b948      	cbnz	r0, 8009906 <__smakebuf_r+0x46>
 80098f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f6:	059a      	lsls	r2, r3, #22
 80098f8:	d4ee      	bmi.n	80098d8 <__smakebuf_r+0x18>
 80098fa:	f023 0303 	bic.w	r3, r3, #3
 80098fe:	f043 0302 	orr.w	r3, r3, #2
 8009902:	81a3      	strh	r3, [r4, #12]
 8009904:	e7e2      	b.n	80098cc <__smakebuf_r+0xc>
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	6020      	str	r0, [r4, #0]
 800990a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	9b01      	ldr	r3, [sp, #4]
 8009912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009916:	b15b      	cbz	r3, 8009930 <__smakebuf_r+0x70>
 8009918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800991c:	4630      	mov	r0, r6
 800991e:	f000 f81d 	bl	800995c <_isatty_r>
 8009922:	b128      	cbz	r0, 8009930 <__smakebuf_r+0x70>
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	f023 0303 	bic.w	r3, r3, #3
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	431d      	orrs	r5, r3
 8009934:	81a5      	strh	r5, [r4, #12]
 8009936:	e7cf      	b.n	80098d8 <__smakebuf_r+0x18>

08009938 <_fstat_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4d07      	ldr	r5, [pc, #28]	@ (8009958 <_fstat_r+0x20>)
 800993c:	2300      	movs	r3, #0
 800993e:	4604      	mov	r4, r0
 8009940:	4608      	mov	r0, r1
 8009942:	4611      	mov	r1, r2
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	f7fa fc7c 	bl	8004242 <_fstat>
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	d102      	bne.n	8009954 <_fstat_r+0x1c>
 800994e:	682b      	ldr	r3, [r5, #0]
 8009950:	b103      	cbz	r3, 8009954 <_fstat_r+0x1c>
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	bd38      	pop	{r3, r4, r5, pc}
 8009956:	bf00      	nop
 8009958:	2000bd14 	.word	0x2000bd14

0800995c <_isatty_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d06      	ldr	r5, [pc, #24]	@ (8009978 <_isatty_r+0x1c>)
 8009960:	2300      	movs	r3, #0
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	602b      	str	r3, [r5, #0]
 8009968:	f7fa fc7b 	bl	8004262 <_isatty>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_isatty_r+0x1a>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_isatty_r+0x1a>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	2000bd14 	.word	0x2000bd14

0800997c <_malloc_usable_size_r>:
 800997c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009980:	1f18      	subs	r0, r3, #4
 8009982:	2b00      	cmp	r3, #0
 8009984:	bfbc      	itt	lt
 8009986:	580b      	ldrlt	r3, [r1, r0]
 8009988:	18c0      	addlt	r0, r0, r3
 800998a:	4770      	bx	lr

0800998c <_init>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr

08009998 <_fini>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	bf00      	nop
 800999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999e:	bc08      	pop	{r3}
 80099a0:	469e      	mov	lr, r3
 80099a2:	4770      	bx	lr
