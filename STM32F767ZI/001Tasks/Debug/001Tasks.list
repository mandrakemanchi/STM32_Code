
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a58  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08007c58  08007c58  00008c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007efc  08007efc  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007efc  08007efc  00008efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f04  08007f04  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f04  08007f04  00008f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f08  08007f08  00008f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007f0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d1e0  2000006c  08007f78  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d24c  08007f78  0000924c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014937  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b2  00000000  00000000  0001d9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00020a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7d  00000000  00000000  00021eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af75  00000000  00000000  00022e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d1d  00000000  00000000  0004dda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001054d1  00000000  00000000  00066abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016bf90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  0016bfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  00171924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007c40 	.word	0x08007c40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	08007c40 	.word	0x08007c40

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000bb24 	.word	0x2000bb24
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fb44 	bl	8000d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f85b 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8c3 	bl	8000808 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // Enable the CYCCNT counter
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000682:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <main+0x98>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	4a20      	ldr	r2, [pc, #128]	@ (8000708 <main+0x98>)
 8000688:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800068c:	60d3      	str	r3, [r2, #12]
  DWT->LAR = 0xC5ACCE55;
 800068e:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <main+0x9c>)
 8000690:	4a1f      	ldr	r2, [pc, #124]	@ (8000710 <main+0xa0>)
 8000692:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  DWT->CYCCNT = 0;
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <main+0x9c>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <main+0x9c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1a      	ldr	r2, [pc, #104]	@ (800070c <main+0x9c>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80006a8:	481a      	ldr	r0, [pc, #104]	@ (8000714 <main+0xa4>)
 80006aa:	f006 fd17 	bl	80070dc <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 80006ae:	f004 f951 	bl	8004954 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80006b2:	f005 fe4f 	bl	8006354 <SEGGER_SYSVIEW_Start>
  status=  xTaskCreate(task1_Handler, "Task1", 200, "Hello world from Task-1", 2,&task1_handle);
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2302      	movs	r3, #2
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <main+0xa8>)
 80006c2:	22c8      	movs	r2, #200	@ 0xc8
 80006c4:	4915      	ldr	r1, [pc, #84]	@ (800071c <main+0xac>)
 80006c6:	4816      	ldr	r0, [pc, #88]	@ (8000720 <main+0xb0>)
 80006c8:	f002 fb46 	bl	8002d58 <xTaskCreate>
 80006cc:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d003      	beq.n	80006dc <main+0x6c>
 80006d4:	4913      	ldr	r1, [pc, #76]	@ (8000724 <main+0xb4>)
 80006d6:	206a      	movs	r0, #106	@ 0x6a
 80006d8:	f000 f9ac 	bl	8000a34 <vAssertCalled>
  status=  xTaskCreate(task2_Handler, "Task2", 200, "Hello world from Task-2", 2,&task2_handle);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2302      	movs	r3, #2
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <main+0xb8>)
 80006e6:	22c8      	movs	r2, #200	@ 0xc8
 80006e8:	4910      	ldr	r1, [pc, #64]	@ (800072c <main+0xbc>)
 80006ea:	4811      	ldr	r0, [pc, #68]	@ (8000730 <main+0xc0>)
 80006ec:	f002 fb34 	bl	8002d58 <xTaskCreate>
 80006f0:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d003      	beq.n	8000700 <main+0x90>
 80006f8:	490a      	ldr	r1, [pc, #40]	@ (8000724 <main+0xb4>)
 80006fa:	206c      	movs	r0, #108	@ 0x6c
 80006fc:	f000 f99a 	bl	8000a34 <vAssertCalled>
  vTaskStartScheduler();
 8000700:	f002 fc7c 	bl	8002ffc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x94>
 8000708:	e000edf0 	.word	0xe000edf0
 800070c:	e0001000 	.word	0xe0001000
 8000710:	c5acce55 	.word	0xc5acce55
 8000714:	0007a120 	.word	0x0007a120
 8000718:	08007c58 	.word	0x08007c58
 800071c:	08007c70 	.word	0x08007c70
 8000720:	08000a5d 	.word	0x08000a5d
 8000724:	08007c78 	.word	0x08007c78
 8000728:	08007c8c 	.word	0x08007c8c
 800072c:	08007ca4 	.word	0x08007ca4
 8000730:	08000a99 	.word	0x08000a99

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	@ 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f006 fdf4 	bl	8007330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000778:	4a22      	ldr	r2, [pc, #136]	@ (8000804 <SystemClock_Config+0xd0>)
 800077a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a4:	23a8      	movs	r3, #168	@ 0xa8
 80007a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ac:	2307      	movs	r3, #7
 80007ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fd77 	bl	80012ac <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c4:	f000 f998 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2105      	movs	r1, #5
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f80e 	bl	8001808 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007f2:	f000 f981 	bl	8000af8 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	@ 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a7e      	ldr	r2, [pc, #504]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b7c      	ldr	r3, [pc, #496]	@ (8000a1c <MX_GPIO_Init+0x214>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b79      	ldr	r3, [pc, #484]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a78      	ldr	r2, [pc, #480]	@ (8000a1c <MX_GPIO_Init+0x214>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b76      	ldr	r3, [pc, #472]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b73      	ldr	r3, [pc, #460]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a72      	ldr	r2, [pc, #456]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b70      	ldr	r3, [pc, #448]	@ (8000a1c <MX_GPIO_Init+0x214>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b6d      	ldr	r3, [pc, #436]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a6c      	ldr	r2, [pc, #432]	@ (8000a1c <MX_GPIO_Init+0x214>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b6a      	ldr	r3, [pc, #424]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b67      	ldr	r3, [pc, #412]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a66      	ldr	r2, [pc, #408]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b64      	ldr	r3, [pc, #400]	@ (8000a1c <MX_GPIO_Init+0x214>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000896:	4b61      	ldr	r3, [pc, #388]	@ (8000a1c <MX_GPIO_Init+0x214>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a60      	ldr	r2, [pc, #384]	@ (8000a1c <MX_GPIO_Init+0x214>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_GPIO_Init+0x214>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008b4:	485a      	ldr	r0, [pc, #360]	@ (8000a20 <MX_GPIO_Init+0x218>)
 80008b6:	f000 fcdf 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2140      	movs	r1, #64	@ 0x40
 80008be:	4859      	ldr	r0, [pc, #356]	@ (8000a24 <MX_GPIO_Init+0x21c>)
 80008c0:	f000 fcda 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4853      	ldr	r0, [pc, #332]	@ (8000a28 <MX_GPIO_Init+0x220>)
 80008dc:	f000 fb20 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008e0:	2332      	movs	r3, #50	@ 0x32
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f0:	230b      	movs	r3, #11
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	484b      	ldr	r0, [pc, #300]	@ (8000a28 <MX_GPIO_Init+0x220>)
 80008fc:	f000 fb10 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000900:	2386      	movs	r3, #134	@ 0x86
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000910:	230b      	movs	r3, #11
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4844      	ldr	r0, [pc, #272]	@ (8000a2c <MX_GPIO_Init+0x224>)
 800091c:	f000 fb00 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000920:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4839      	ldr	r0, [pc, #228]	@ (8000a20 <MX_GPIO_Init+0x218>)
 800093a:	f000 faf1 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800093e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000950:	230b      	movs	r3, #11
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4831      	ldr	r0, [pc, #196]	@ (8000a20 <MX_GPIO_Init+0x218>)
 800095c:	f000 fae0 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000960:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000972:	2307      	movs	r3, #7
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	482c      	ldr	r0, [pc, #176]	@ (8000a30 <MX_GPIO_Init+0x228>)
 800097e:	f000 facf 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000982:	2340      	movs	r3, #64	@ 0x40
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4822      	ldr	r0, [pc, #136]	@ (8000a24 <MX_GPIO_Init+0x21c>)
 800099a:	f000 fac1 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099e:	2380      	movs	r3, #128	@ 0x80
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0x21c>)
 80009b2:	f000 fab5 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009b6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c8:	230a      	movs	r3, #10
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4816      	ldr	r0, [pc, #88]	@ (8000a2c <MX_GPIO_Init+0x224>)
 80009d4:	f000 faa4 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	480f      	ldr	r0, [pc, #60]	@ (8000a2c <MX_GPIO_Init+0x224>)
 80009ee:	f000 fa97 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009f2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a04:	230b      	movs	r3, #11
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_GPIO_Init+0x21c>)
 8000a10:	f000 fa86 	bl	8000f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	@ 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled( unsigned long ulLine, const char * const pcFileName )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
//static portBASE_TYPE xPrinted = pdFALSE;
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]

    /* Parameters are not used. */
    ( void ) ulLine;
    ( void ) pcFileName;

    taskENTER_CRITICAL();
 8000a42:	f003 fc81 	bl	8004348 <vPortEnterCritical>
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 1 )
 8000a46:	bf00      	nop
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d0fc      	beq.n	8000a48 <vAssertCalled+0x14>
        {
        }
    }
    taskEXIT_CRITICAL();
 8000a4e:	f003 fca5 	bl	800439c <vPortExitCritical>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <task1_Handler>:
static void task1_Handler(void* parameters) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 char message[30];
	while(1){
		snprintf(message,30,"%s\n",(char*)parameters);
 8000a64:	f107 0008 	add.w	r0, r7, #8
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <task1_Handler+0x34>)
 8000a6c:	211e      	movs	r1, #30
 8000a6e:	f006 fc1b 	bl	80072a8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(message);
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4618      	mov	r0, r3
 8000a78:	f006 f9e8 	bl	8006e4c <SEGGER_SYSVIEW_PrintfTarget>
		//printf("%s\n",(char*)parameters);
		taskYIELD();
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <task1_Handler+0x38>)
 8000a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	f3bf 8f4f 	dsb	sy
 8000a88:	f3bf 8f6f 	isb	sy
		snprintf(message,30,"%s\n",(char*)parameters);
 8000a8c:	bf00      	nop
 8000a8e:	e7e9      	b.n	8000a64 <task1_Handler+0x8>
 8000a90:	08007cac 	.word	0x08007cac
 8000a94:	e000ed04 	.word	0xe000ed04

08000a98 <task2_Handler>:
	}
}
static void task2_Handler(void* parameters) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	char message[30];
	while(1){
			snprintf(message,30,"%s\n",(char*)parameters);
 8000aa0:	f107 0008 	add.w	r0, r7, #8
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <task2_Handler+0x34>)
 8000aa8:	211e      	movs	r1, #30
 8000aaa:	f006 fbfd 	bl	80072a8 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(message);
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f006 f9ca 	bl	8006e4c <SEGGER_SYSVIEW_PrintfTarget>
			//printf("%s \n",(char*)parameters);
			taskYIELD();
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <task2_Handler+0x38>)
 8000aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	f3bf 8f4f 	dsb	sy
 8000ac4:	f3bf 8f6f 	isb	sy
			snprintf(message,30,"%s\n",(char*)parameters);
 8000ac8:	bf00      	nop
 8000aca:	e7e9      	b.n	8000aa0 <task2_Handler+0x8>
 8000acc:	08007cac 	.word	0x08007cac
 8000ad0:	e000ed04 	.word	0xe000ed04

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 f919 	bl	8000d1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <Error_Handler+0x8>

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b3a:	f003 fb8f 	bl	800425c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	@ 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b5c:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <HAL_InitTick+0xe0>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <HAL_InitTick+0xe0>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b68:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <HAL_InitTick+0xe0>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f852 	bl	8001c28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8e:	f001 f837 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 8000b92:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b96:	f001 f833 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <HAL_InitTick+0xe4>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	0c9b      	lsrs	r3, r3, #18
 8000baa:	3b01      	subs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000bb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd4:	4817      	ldr	r0, [pc, #92]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000bd6:	f001 f859 	bl	8001c8c <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11b      	bne.n	8000c20 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be8:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000bea:	f001 f8b1 	bl	8001d50 <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bfc:	2036      	movs	r0, #54	@ 0x36
 8000bfe:	f000 f981 	bl	8000f04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d808      	bhi.n	8000c1a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2036      	movs	r0, #54	@ 0x36
 8000c0e:	f000 f95d 	bl	8000ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_InitTick+0xf0>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e002      	b.n	8000c20 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3738      	adds	r7, #56	@ 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000088 	.word	0x20000088
 8000c38:	40001000 	.word	0x40001000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <TIM6_DAC_IRQHandler+0x10>)
 8000c7e:	f001 f8df 	bl	8001e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000088 	.word	0x20000088

08000c8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb4:	f7ff ffea 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f006 fb2f 	bl	8007340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fcc5 	bl	8000670 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cf4:	08007f0c 	.word	0x08007f0c
  ldr r2, =_sbss
 8000cf8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cfc:	2000d24c 	.word	0x2000d24c

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>

08000d02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d06:	2003      	movs	r0, #3
 8000d08:	f000 f8d5 	bl	8000eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0c:	200f      	movs	r0, #15
 8000d0e:	f7ff ff1d 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d12:	f7ff fef7 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200000d4 	.word	0x200000d4

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000d4 	.word	0x200000d4

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	05fa0000 	.word	0x05fa0000

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	@ (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	@ (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff4c 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ede:	f7ff ff61 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000ee2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f7ff ffb1 	bl	8000e50 <NVIC_EncodePriority>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff80 	bl	8000dfc <__NVIC_SetPriority>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff54 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	e175      	b.n	800122c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8164 	bne.w	8001226 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_GPIO_Init+0x56>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d017      	beq.n	8001014 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80be 	beq.w	8001226 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b66      	ldr	r3, [pc, #408]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a65      	ldr	r2, [pc, #404]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b63      	ldr	r3, [pc, #396]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010c2:	4a61      	ldr	r2, [pc, #388]	@ (8001248 <HAL_GPIO_Init+0x328>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a58      	ldr	r2, [pc, #352]	@ (800124c <HAL_GPIO_Init+0x32c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d037      	beq.n	800115e <HAL_GPIO_Init+0x23e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a57      	ldr	r2, [pc, #348]	@ (8001250 <HAL_GPIO_Init+0x330>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d031      	beq.n	800115a <HAL_GPIO_Init+0x23a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a56      	ldr	r2, [pc, #344]	@ (8001254 <HAL_GPIO_Init+0x334>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x236>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a55      	ldr	r2, [pc, #340]	@ (8001258 <HAL_GPIO_Init+0x338>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x232>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a54      	ldr	r2, [pc, #336]	@ (800125c <HAL_GPIO_Init+0x33c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x22e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a53      	ldr	r2, [pc, #332]	@ (8001260 <HAL_GPIO_Init+0x340>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x22a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a52      	ldr	r2, [pc, #328]	@ (8001264 <HAL_GPIO_Init+0x344>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x226>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a51      	ldr	r2, [pc, #324]	@ (8001268 <HAL_GPIO_Init+0x348>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x222>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a50      	ldr	r2, [pc, #320]	@ (800126c <HAL_GPIO_Init+0x34c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x21e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4f      	ldr	r2, [pc, #316]	@ (8001270 <HAL_GPIO_Init+0x350>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x21a>
 8001136:	2309      	movs	r3, #9
 8001138:	e012      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800113a:	230a      	movs	r3, #10
 800113c:	e010      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800113e:	2308      	movs	r3, #8
 8001140:	e00e      	b.n	8001160 <HAL_GPIO_Init+0x240>
 8001142:	2307      	movs	r3, #7
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x240>
 8001146:	2306      	movs	r3, #6
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x240>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x240>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	@ (8001248 <HAL_GPIO_Init+0x328>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b3d      	ldr	r3, [pc, #244]	@ (8001274 <HAL_GPIO_Init+0x354>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a34      	ldr	r2, [pc, #208]	@ (8001274 <HAL_GPIO_Init+0x354>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <HAL_GPIO_Init+0x354>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a29      	ldr	r2, [pc, #164]	@ (8001274 <HAL_GPIO_Init+0x354>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <HAL_GPIO_Init+0x354>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001274 <HAL_GPIO_Init+0x354>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <HAL_GPIO_Init+0x354>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a14      	ldr	r2, [pc, #80]	@ (8001274 <HAL_GPIO_Init+0x354>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f ae86 	bls.w	8000f40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40021c00 	.word	0x40021c00
 800126c:	40022000 	.word	0x40022000
 8001270:	40022400 	.word	0x40022400
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001294:	e003      	b.n	800129e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e29b      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8087 	beq.w	80013de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d0:	4b96      	ldr	r3, [pc, #600]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d00c      	beq.n	80012f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012dc:	4b93      	ldr	r3, [pc, #588]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d112      	bne.n	800130e <HAL_RCC_OscConfig+0x62>
 80012e8:	4b90      	ldr	r3, [pc, #576]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012f4:	d10b      	bne.n	800130e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	4b8d      	ldr	r3, [pc, #564]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06c      	beq.n	80013dc <HAL_RCC_OscConfig+0x130>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d168      	bne.n	80013dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e275      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x7a>
 8001318:	4b84      	ldr	r3, [pc, #528]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a83      	ldr	r2, [pc, #524]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800131e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e02e      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x9c>
 800132e:	4b7f      	ldr	r3, [pc, #508]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a7e      	ldr	r2, [pc, #504]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b7c      	ldr	r3, [pc, #496]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7b      	ldr	r2, [pc, #492]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0xc0>
 8001352:	4b76      	ldr	r3, [pc, #472]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a75      	ldr	r2, [pc, #468]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b73      	ldr	r3, [pc, #460]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a72      	ldr	r2, [pc, #456]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 800136c:	4b6f      	ldr	r3, [pc, #444]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a6e      	ldr	r2, [pc, #440]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b6c      	ldr	r3, [pc, #432]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6b      	ldr	r2, [pc, #428]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fcda 	bl	8000d44 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fcd6 	bl	8000d44 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e229      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	4b61      	ldr	r3, [pc, #388]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fcc6 	bl	8000d44 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fcc2 	bl	8000d44 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	@ 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e215      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b57      	ldr	r3, [pc, #348]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x110>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d069      	beq.n	80014be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ea:	4b50      	ldr	r3, [pc, #320]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b4d      	ldr	r3, [pc, #308]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x190>
 8001402:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x17a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e1e9      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b41      	ldr	r3, [pc, #260]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	493d      	ldr	r1, [pc, #244]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e040      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d023      	beq.n	800148c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b39      	ldr	r3, [pc, #228]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a38      	ldr	r2, [pc, #224]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc78 	bl	8000d44 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fc74 	bl	8000d44 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1c7      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b30      	ldr	r3, [pc, #192]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4929      	ldr	r1, [pc, #164]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
 800148a:	e018      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a26      	ldr	r2, [pc, #152]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fc54 	bl	8000d44 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc50 	bl	8000d44 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1a3      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d038      	beq.n	800153c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d019      	beq.n	8001506 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80014d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d6:	4a15      	ldr	r2, [pc, #84]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014de:	f7ff fc31 	bl	8000d44 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc2d 	bl	8000d44 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e180      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x23a>
 8001504:	e01a      	b.n	800153c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001512:	f7ff fc17 	bl	8000d44 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fc13 	bl	8000d44 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d903      	bls.n	8001530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e166      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
 800152c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	4b92      	ldr	r3, [pc, #584]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ee      	bne.n	800151a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a4 	beq.w	8001692 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154a:	4b8c      	ldr	r3, [pc, #560]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10d      	bne.n	8001572 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b89      	ldr	r3, [pc, #548]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a88      	ldr	r2, [pc, #544]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b86      	ldr	r3, [pc, #536]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156e:	2301      	movs	r3, #1
 8001570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001572:	4b83      	ldr	r3, [pc, #524]	@ (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157a:	2b00      	cmp	r3, #0
 800157c:	d118      	bne.n	80015b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800157e:	4b80      	ldr	r3, [pc, #512]	@ (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7f      	ldr	r2, [pc, #508]	@ (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158a:	f7ff fbdb 	bl	8000d44 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001592:	f7ff fbd7 	bl	8000d44 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b64      	cmp	r3, #100	@ 0x64
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e12a      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a4:	4b76      	ldr	r3, [pc, #472]	@ (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x31a>
 80015b8:	4b70      	ldr	r3, [pc, #448]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015bc:	4a6f      	ldr	r2, [pc, #444]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c4:	e02d      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x33c>
 80015ce:	4b6b      	ldr	r3, [pc, #428]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d2:	4a6a      	ldr	r2, [pc, #424]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015da:	4b68      	ldr	r3, [pc, #416]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015de:	4a67      	ldr	r2, [pc, #412]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e6:	e01c      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b05      	cmp	r3, #5
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x35e>
 80015f0:	4b62      	ldr	r3, [pc, #392]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f4:	4a61      	ldr	r2, [pc, #388]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80015fc:	4b5f      	ldr	r3, [pc, #380]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001600:	4a5e      	ldr	r2, [pc, #376]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	@ 0x70
 8001608:	e00b      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
 800160a:	4b5c      	ldr	r3, [pc, #368]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	4a5b      	ldr	r2, [pc, #364]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	6713      	str	r3, [r2, #112]	@ 0x70
 8001616:	4b59      	ldr	r3, [pc, #356]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161a:	4a58      	ldr	r2, [pc, #352]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800161c:	f023 0304 	bic.w	r3, r3, #4
 8001620:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d015      	beq.n	8001656 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff fb8b 	bl	8000d44 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fb87 	bl	8000d44 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e0d8      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001648:	4b4c      	ldr	r3, [pc, #304]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ee      	beq.n	8001632 <HAL_RCC_OscConfig+0x386>
 8001654:	e014      	b.n	8001680 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff fb75 	bl	8000d44 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff fb71 	bl	8000d44 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0c2      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001674:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ee      	bne.n	800165e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001686:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a3c      	ldr	r2, [pc, #240]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80ae 	beq.w	80017f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169c:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d06d      	beq.n	8001784 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d14b      	bne.n	8001748 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b0:	4b32      	ldr	r3, [pc, #200]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a31      	ldr	r2, [pc, #196]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb42 	bl	8000d44 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fb3e 	bl	8000d44 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e091      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b29      	ldr	r3, [pc, #164]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170c:	071b      	lsls	r3, r3, #28
 800170e:	491b      	ldr	r1, [pc, #108]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a18      	ldr	r2, [pc, #96]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800171e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fb10 	bl	8000d44 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fb0c 	bl	8000d44 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e05f      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x47c>
 8001746:	e057      	b.n	80017f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 800174e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff faf6 	bl	8000d44 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff faf2 	bl	8000d44 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e045      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x4b0>
 800177a:	e03d      	b.n	80017f8 <HAL_RCC_OscConfig+0x54c>
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <HAL_RCC_OscConfig+0x558>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d030      	beq.n	80017f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d129      	bne.n	80017f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d122      	bne.n	80017f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017bc:	4293      	cmp	r3, r2
 80017be:	d119      	bne.n	80017f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	3b01      	subs	r3, #1
 80017ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d10f      	bne.n	80017f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0d0      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b6a      	ldr	r3, [pc, #424]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d910      	bls.n	8001850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b67      	ldr	r3, [pc, #412]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 020f 	bic.w	r2, r3, #15
 8001836:	4965      	ldr	r1, [pc, #404]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b63      	ldr	r3, [pc, #396]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001868:	4b59      	ldr	r3, [pc, #356]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a58      	ldr	r2, [pc, #352]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 800186e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001880:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a52      	ldr	r2, [pc, #328]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800188a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b50      	ldr	r3, [pc, #320]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	494d      	ldr	r1, [pc, #308]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d040      	beq.n	800192c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b47      	ldr	r3, [pc, #284]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d115      	bne.n	80018ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b41      	ldr	r3, [pc, #260]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e073      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	4b3d      	ldr	r3, [pc, #244]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06b      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b39      	ldr	r3, [pc, #228]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4936      	ldr	r1, [pc, #216]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018fc:	f7ff fa22 	bl	8000d44 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff fa1e 	bl	8000d44 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e053      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d210      	bcs.n	800195c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 020f 	bic.w	r2, r3, #15
 8001942:	4922      	ldr	r1, [pc, #136]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e032      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4916      	ldr	r1, [pc, #88]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490e      	ldr	r1, [pc, #56]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800199a:	f000 f821 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	490a      	ldr	r1, [pc, #40]	@ (80019d4 <HAL_RCC_ClockConfig+0x1cc>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <HAL_RCC_ClockConfig+0x1d0>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_RCC_ClockConfig+0x1d4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f8c6 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08007e74 	.word	0x08007e74
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e4:	b094      	sub	sp, #80	@ 0x50
 80019e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80019ec:	2300      	movs	r3, #0
 80019ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019f0:	2300      	movs	r3, #0
 80019f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f8:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d00d      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x40>
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	f200 80e1 	bhi.w	8001bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x34>
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d003      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a12:	e0db      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b73      	ldr	r3, [pc, #460]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a18:	e0db      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a1a:	4b72      	ldr	r3, [pc, #456]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a1e:	e0d8      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a20:	4b6f      	ldr	r3, [pc, #444]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d063      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a36:	4b6a      	ldr	r3, [pc, #424]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	099b      	lsrs	r3, r3, #6
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a52:	4622      	mov	r2, r4
 8001a54:	462b      	mov	r3, r5
 8001a56:	f04f 0000 	mov.w	r0, #0
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	0159      	lsls	r1, r3, #5
 8001a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a64:	0150      	lsls	r0, r2, #5
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	1a51      	subs	r1, r2, r1
 8001a6e:	6139      	str	r1, [r7, #16]
 8001a70:	4629      	mov	r1, r5
 8001a72:	eb63 0301 	sbc.w	r3, r3, r1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a84:	4659      	mov	r1, fp
 8001a86:	018b      	lsls	r3, r1, #6
 8001a88:	4651      	mov	r1, sl
 8001a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8e:	4651      	mov	r1, sl
 8001a90:	018a      	lsls	r2, r1, #6
 8001a92:	4651      	mov	r1, sl
 8001a94:	ebb2 0801 	subs.w	r8, r2, r1
 8001a98:	4659      	mov	r1, fp
 8001a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ab2:	4690      	mov	r8, r2
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	eb18 0303 	adds.w	r3, r8, r3
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	462b      	mov	r3, r5
 8001ac0:	eb49 0303 	adc.w	r3, r9, r3
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	028b      	lsls	r3, r1, #10
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001adc:	4621      	mov	r1, r4
 8001ade:	028a      	lsls	r2, r1, #10
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001af0:	f7fe fc46 	bl	8000380 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001afc:	e058      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b38      	ldr	r3, [pc, #224]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	2200      	movs	r2, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	4611      	mov	r1, r2
 8001b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b18:	4642      	mov	r2, r8
 8001b1a:	464b      	mov	r3, r9
 8001b1c:	f04f 0000 	mov.w	r0, #0
 8001b20:	f04f 0100 	mov.w	r1, #0
 8001b24:	0159      	lsls	r1, r3, #5
 8001b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b2a:	0150      	lsls	r0, r2, #5
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4641      	mov	r1, r8
 8001b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b36:	4649      	mov	r1, r9
 8001b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b50:	ebb2 040a 	subs.w	r4, r2, sl
 8001b54:	eb63 050b 	sbc.w	r5, r3, fp
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	00eb      	lsls	r3, r5, #3
 8001b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b66:	00e2      	lsls	r2, r4, #3
 8001b68:	4614      	mov	r4, r2
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	4643      	mov	r3, r8
 8001b6e:	18e3      	adds	r3, r4, r3
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	464b      	mov	r3, r9
 8001b74:	eb45 0303 	adc.w	r3, r5, r3
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b86:	4629      	mov	r1, r5
 8001b88:	028b      	lsls	r3, r1, #10
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b90:	4621      	mov	r1, r4
 8001b92:	028a      	lsls	r2, r1, #10
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	61fa      	str	r2, [r7, #28]
 8001ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba4:	f7fe fbec 	bl	8000380 <__aeabi_uldivmod>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4613      	mov	r3, r2
 8001bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bca:	e002      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3750      	adds	r7, #80	@ 0x50
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	00f42400 	.word	0x00f42400

08001be8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000

08001c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c04:	f7ff fff0 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0a9b      	lsrs	r3, r3, #10
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4903      	ldr	r1, [pc, #12]	@ (8001c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08007e84 	.word	0x08007e84

08001c28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	220f      	movs	r2, #15
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c6a:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <HAL_RCC_GetClockConfig+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e049      	b.n	8001d32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f841 	bl	8001d3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f000 f9e8 	bl	80020a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d001      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e054      	b.n	8001e12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d022      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x80>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d92:	d01d      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x80>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a22      	ldr	r2, [pc, #136]	@ (8001e24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d018      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x80>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x80>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x80>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e30 <HAL_TIM_Base_Start_IT+0xe0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x80>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e34 <HAL_TIM_Base_Start_IT+0xe4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x80>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1b      	ldr	r2, [pc, #108]	@ (8001e38 <HAL_TIM_Base_Start_IT+0xe8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d115      	bne.n	8001dfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_TIM_Base_Start_IT+0xec>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d015      	beq.n	8001e0e <HAL_TIM_Base_Start_IT+0xbe>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de8:	d011      	beq.n	8001e0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	e008      	b.n	8001e0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e000      	b.n	8001e10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	40000c00 	.word	0x40000c00
 8001e30:	40010400 	.word	0x40010400
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40001800 	.word	0x40001800
 8001e3c:	00010007 	.word	0x00010007

08001e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d020      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0202 	mvn.w	r2, #2
 8001e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8e9 	bl	8002062 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8db 	bl	800204e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8ec 	bl	8002076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d020      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0204 	mvn.w	r2, #4
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8c3 	bl	8002062 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8b5 	bl	800204e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8c6 	bl	8002076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0208 	mvn.w	r2, #8
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2204      	movs	r2, #4
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f89d 	bl	8002062 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f88f 	bl	800204e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8a0 	bl	8002076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0210 	mvn.w	r2, #16
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f877 	bl	8002062 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f869 	bl	800204e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f87a 	bl	8002076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0201 	mvn.w	r2, #1
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fd94 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d104      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f919 	bl	800220c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00c      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f911 	bl	8002220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00c      	beq.n	8002022 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800201a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f834 	bl	800208a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00c      	beq.n	8002046 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f06f 0220 	mvn.w	r2, #32
 800203e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f8d9 	bl	80021f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a46      	ldr	r2, [pc, #280]	@ (80021cc <TIM_Base_SetConfig+0x12c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020be:	d00f      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a43      	ldr	r2, [pc, #268]	@ (80021d0 <TIM_Base_SetConfig+0x130>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00b      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a42      	ldr	r2, [pc, #264]	@ (80021d4 <TIM_Base_SetConfig+0x134>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a41      	ldr	r2, [pc, #260]	@ (80021d8 <TIM_Base_SetConfig+0x138>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a40      	ldr	r2, [pc, #256]	@ (80021dc <TIM_Base_SetConfig+0x13c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d108      	bne.n	80020f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a35      	ldr	r2, [pc, #212]	@ (80021cc <TIM_Base_SetConfig+0x12c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002100:	d027      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a32      	ldr	r2, [pc, #200]	@ (80021d0 <TIM_Base_SetConfig+0x130>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d023      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a31      	ldr	r2, [pc, #196]	@ (80021d4 <TIM_Base_SetConfig+0x134>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a30      	ldr	r2, [pc, #192]	@ (80021d8 <TIM_Base_SetConfig+0x138>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2f      	ldr	r2, [pc, #188]	@ (80021dc <TIM_Base_SetConfig+0x13c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d017      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2e      	ldr	r2, [pc, #184]	@ (80021e0 <TIM_Base_SetConfig+0x140>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2d      	ldr	r2, [pc, #180]	@ (80021e4 <TIM_Base_SetConfig+0x144>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00f      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2c      	ldr	r2, [pc, #176]	@ (80021e8 <TIM_Base_SetConfig+0x148>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2b      	ldr	r2, [pc, #172]	@ (80021ec <TIM_Base_SetConfig+0x14c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2a      	ldr	r2, [pc, #168]	@ (80021f0 <TIM_Base_SetConfig+0x150>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a29      	ldr	r2, [pc, #164]	@ (80021f4 <TIM_Base_SetConfig+0x154>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d108      	bne.n	8002164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a10      	ldr	r2, [pc, #64]	@ (80021cc <TIM_Base_SetConfig+0x12c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0xf8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <TIM_Base_SetConfig+0x13c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d103      	bne.n	80021a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f023 0201 	bic.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]
  }
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40010400 	.word	0x40010400
 80021e0:	40014000 	.word	0x40014000
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40014800 	.word	0x40014800
 80021ec:	40001800 	.word	0x40001800
 80021f0:	40001c00 	.word	0x40001c00
 80021f4:	40002000 	.word	0x40002000

080021f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 0208 	add.w	r2, r3, #8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0208 	add.w	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f103 0208 	add.w	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d103      	bne.n	80022f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e00c      	b.n	8002310 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3308      	adds	r3, #8
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e002      	b.n	8002304 <vListInsert+0x2e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d2f6      	bcs.n	80022fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6852      	ldr	r2, [r2, #4]
 8002368:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d103      	bne.n	800237c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d104      	bne.n	80023ba <xQueueGenericReset+0x1e>
 80023b0:	4925      	ldr	r1, [pc, #148]	@ (8002448 <xQueueGenericReset+0xac>)
 80023b2:	f240 100d 	movw	r0, #269	@ 0x10d
 80023b6:	f7fe fb3d 	bl	8000a34 <vAssertCalled>

    taskENTER_CRITICAL();
 80023ba:	f001 ffc5 	bl	8004348 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c6:	68f9      	ldr	r1, [r7, #12]
 80023c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	441a      	add	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ea:	3b01      	subs	r3, #1
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	441a      	add	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	22ff      	movs	r2, #255	@ 0xff
 80023fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	22ff      	movs	r2, #255	@ 0xff
 8002406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <xQueueGenericReset+0x88>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00f      	beq.n	8002438 <xQueueGenericReset+0x9c>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3310      	adds	r3, #16
 800241c:	4618      	mov	r0, r3
 800241e:	f001 f84f 	bl	80034c0 <xTaskRemoveFromEventList>
 8002422:	e009      	b.n	8002438 <xQueueGenericReset+0x9c>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3310      	adds	r3, #16
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff03 	bl	8002234 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3324      	adds	r3, #36	@ 0x24
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fefe 	bl	8002234 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002438:	f001 ffb0 	bl	800439c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	08007cb0 	.word	0x08007cb0

0800244c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d104      	bne.n	800246a <xQueueGenericCreate+0x1e>
 8002460:	4921      	ldr	r1, [pc, #132]	@ (80024e8 <xQueueGenericCreate+0x9c>)
 8002462:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 8002466:	f7fe fae5 	bl	8000a34 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <xQueueGenericCreate+0x3c>
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	429a      	cmp	r2, r3
 8002486:	d101      	bne.n	800248c <xQueueGenericCreate+0x40>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <xQueueGenericCreate+0x42>
 800248c:	2300      	movs	r3, #0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <xQueueGenericCreate+0x50>
 8002492:	4915      	ldr	r1, [pc, #84]	@ (80024e8 <xQueueGenericCreate+0x9c>)
 8002494:	f44f 70c7 	mov.w	r0, #398	@ 0x18e
 8002498:	f7fe facc 	bl	8000a34 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80024a2:	d904      	bls.n	80024ae <xQueueGenericCreate+0x62>
 80024a4:	4910      	ldr	r1, [pc, #64]	@ (80024e8 <xQueueGenericCreate+0x9c>)
 80024a6:	f240 1091 	movw	r0, #401	@ 0x191
 80024aa:	f7fe fac3 	bl	8000a34 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3350      	adds	r3, #80	@ 0x50
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 f85e 	bl	8004574 <pvPortMalloc>
 80024b8:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3350      	adds	r3, #80	@ 0x50
 80024c8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f808 	bl	80024ec <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024dc:	69bb      	ldr	r3, [r7, #24]
    }
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	08007cb0 	.word	0x08007cb0

080024ec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d103      	bne.n	8002508 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e002      	b.n	800250e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800251a:	2101      	movs	r1, #1
 800251c:	69b8      	ldr	r0, [r7, #24]
 800251e:	f7ff ff3d 	bl	800239c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	2073      	movs	r0, #115	@ 0x73
 8002532:	f003 fe07 	bl	8006144 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	@ 0x30
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <xQueueGenericSend+0x26>
 800255c:	4972      	ldr	r1, [pc, #456]	@ (8002728 <xQueueGenericSend+0x1e8>)
 800255e:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8002562:	f7fe fa67 	bl	8000a34 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <xQueueGenericSend+0x34>
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <xQueueGenericSend+0x38>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <xQueueGenericSend+0x3a>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <xQueueGenericSend+0x48>
 800257e:	496a      	ldr	r1, [pc, #424]	@ (8002728 <xQueueGenericSend+0x1e8>)
 8002580:	f240 300d 	movw	r0, #781	@ 0x30d
 8002584:	f7fe fa56 	bl	8000a34 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d103      	bne.n	8002596 <xQueueGenericSend+0x56>
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <xQueueGenericSend+0x5a>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <xQueueGenericSend+0x5c>
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <xQueueGenericSend+0x6a>
 80025a0:	4961      	ldr	r1, [pc, #388]	@ (8002728 <xQueueGenericSend+0x1e8>)
 80025a2:	f240 300e 	movw	r0, #782	@ 0x30e
 80025a6:	f7fe fa45 	bl	8000a34 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025aa:	f001 f915 	bl	80037d8 <xTaskGetSchedulerState>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <xQueueGenericSend+0x7a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <xQueueGenericSend+0x7e>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <xQueueGenericSend+0x80>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <xQueueGenericSend+0x8e>
 80025c4:	4958      	ldr	r1, [pc, #352]	@ (8002728 <xQueueGenericSend+0x1e8>)
 80025c6:	f240 3011 	movw	r0, #785	@ 0x311
 80025ca:	f7fe fa33 	bl	8000a34 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025ce:	f001 febb 	bl	8004348 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <xQueueGenericSend+0xa4>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d11f      	bne.n	8002624 <xQueueGenericSend+0xe4>
            {
                traceQUEUE_SEND( pxQueue );
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 fb3a 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	460b      	mov	r3, r1
 80025f6:	4601      	mov	r1, r0
 80025f8:	205a      	movs	r0, #90	@ 0x5a
 80025fa:	f003 fe19 	bl	8006230 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6a38      	ldr	r0, [r7, #32]
 8002604:	f000 fa32 	bl	8002a6c <prvCopyDataToQueue>
 8002608:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <xQueueGenericSend+0xdc>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	3324      	adds	r3, #36	@ 0x24
 8002616:	4618      	mov	r0, r3
 8002618:	f000 ff52 	bl	80034c0 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800261c:	f001 febe 	bl	800439c <vPortExitCritical>
                return pdPASS;
 8002620:	2301      	movs	r3, #1
 8002622:	e07d      	b.n	8002720 <xQueueGenericSend+0x1e0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d110      	bne.n	800264c <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800262a:	f001 feb7 	bl	800439c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	4618      	mov	r0, r3
 8002632:	f004 fb15 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	460b      	mov	r3, r1
 8002640:	4601      	mov	r1, r0
 8002642:	205a      	movs	r0, #90	@ 0x5a
 8002644:	f003 fdf4 	bl	8006230 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002648:	2300      	movs	r3, #0
 800264a:	e069      	b.n	8002720 <xQueueGenericSend+0x1e0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4618      	mov	r0, r3
 8002658:	f000 ff94 	bl	8003584 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800265c:	2301      	movs	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002660:	f001 fe9c 	bl	800439c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002664:	f000 fd28 	bl	80030b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002668:	f001 fe6e 	bl	8004348 <vPortEnterCritical>
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002672:	b25b      	sxtb	r3, r3
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d103      	bne.n	8002682 <xQueueGenericSend+0x142>
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002688:	b25b      	sxtb	r3, r3
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d103      	bne.n	8002698 <xQueueGenericSend+0x158>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002698:	f001 fe80 	bl	800439c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800269c:	1d3a      	adds	r2, r7, #4
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 ff83 	bl	80035b0 <xTaskCheckForTimeOut>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d124      	bne.n	80026fa <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026b0:	6a38      	ldr	r0, [r7, #32]
 80026b2:	f000 fad3 	bl	8002c5c <prvIsQueueFull>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d018      	beq.n	80026ee <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	3310      	adds	r3, #16
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 feb1 	bl	800342c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026ca:	6a38      	ldr	r0, [r7, #32]
 80026cc:	f000 fa5e 	bl	8002b8c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026d0:	f000 fd00 	bl	80030d4 <xTaskResumeAll>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f47f af79 	bne.w	80025ce <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 80026dc:	4b13      	ldr	r3, [pc, #76]	@ (800272c <xQueueGenericSend+0x1ec>)
 80026de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	e76f      	b.n	80025ce <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026ee:	6a38      	ldr	r0, [r7, #32]
 80026f0:	f000 fa4c 	bl	8002b8c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026f4:	f000 fcee 	bl	80030d4 <xTaskResumeAll>
 80026f8:	e769      	b.n	80025ce <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026fa:	6a38      	ldr	r0, [r7, #32]
 80026fc:	f000 fa46 	bl	8002b8c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002700:	f000 fce8 	bl	80030d4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 faaa 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	460b      	mov	r3, r1
 8002716:	4601      	mov	r1, r0
 8002718:	205a      	movs	r0, #90	@ 0x5a
 800271a:	f003 fd89 	bl	8006230 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800271e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002720:	4618      	mov	r0, r3
 8002722:	3728      	adds	r7, #40	@ 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	08007cb0 	.word	0x08007cb0
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	@ 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8002742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <xQueueGenericSendFromISR+0x22>
 8002748:	494c      	ldr	r1, [pc, #304]	@ (800287c <xQueueGenericSendFromISR+0x14c>)
 800274a:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 800274e:	f7fe f971 	bl	8000a34 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d103      	bne.n	8002760 <xQueueGenericSendFromISR+0x30>
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <xQueueGenericSendFromISR+0x34>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <xQueueGenericSendFromISR+0x36>
 8002764:	2300      	movs	r3, #0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <xQueueGenericSendFromISR+0x44>
 800276a:	4944      	ldr	r1, [pc, #272]	@ (800287c <xQueueGenericSendFromISR+0x14c>)
 800276c:	f240 30e1 	movw	r0, #993	@ 0x3e1
 8002770:	f7fe f960 	bl	8000a34 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d103      	bne.n	8002782 <xQueueGenericSendFromISR+0x52>
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <xQueueGenericSendFromISR+0x56>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueGenericSendFromISR+0x58>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d104      	bne.n	8002796 <xQueueGenericSendFromISR+0x66>
 800278c:	493b      	ldr	r1, [pc, #236]	@ (800287c <xQueueGenericSendFromISR+0x14c>)
 800278e:	f240 30e2 	movw	r0, #994	@ 0x3e2
 8002792:	f7fe f94f 	bl	8000a34 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002796:	f001 feb9 	bl	800450c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800279a:	f3ef 8211 	mrs	r2, BASEPRI
 800279e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	61ba      	str	r2, [r7, #24]
 80027b0:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027b2:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <xQueueGenericSendFromISR+0x98>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d142      	bne.n	800284e <xQueueGenericSendFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	61fb      	str	r3, [r7, #28]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027da:	4618      	mov	r0, r3
 80027dc:	f004 fa40 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 80027e0:	4601      	mov	r1, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	461a      	mov	r2, r3
 80027e6:	2060      	movs	r0, #96	@ 0x60
 80027e8:	f003 fc52 	bl	8006090 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027f2:	f000 f93b 	bl	8002a6c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027f6:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d112      	bne.n	8002826 <xQueueGenericSendFromISR+0xf6>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01f      	beq.n	8002848 <xQueueGenericSendFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	3324      	adds	r3, #36	@ 0x24
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fe57 	bl	80034c0 <xTaskRemoveFromEventList>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d017      	beq.n	8002848 <xQueueGenericSendFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d014      	beq.n	8002848 <xQueueGenericSendFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e010      	b.n	8002848 <xQueueGenericSendFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002826:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800282a:	2b7f      	cmp	r3, #127	@ 0x7f
 800282c:	d104      	bne.n	8002838 <xQueueGenericSendFromISR+0x108>
 800282e:	4913      	ldr	r1, [pc, #76]	@ (800287c <xQueueGenericSendFromISR+0x14c>)
 8002830:	f240 406b 	movw	r0, #1131	@ 0x46b
 8002834:	f7fe f8fe 	bl	8000a34 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800283c:	3301      	adds	r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	b25a      	sxtb	r2, r3
 8002842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002848:	2301      	movs	r3, #1
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 800284c:	e00b      	b.n	8002866 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fa05 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 8002856:	4601      	mov	r1, r0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	2060      	movs	r0, #96	@ 0x60
 800285e:	f003 fc17 	bl	8006090 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002862:	2300      	movs	r3, #0
 8002864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002870:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002874:	4618      	mov	r0, r3
 8002876:	3730      	adds	r7, #48	@ 0x30
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	08007cb0 	.word	0x08007cb0

08002880 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08d      	sub	sp, #52	@ 0x34
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <xQueueReceive+0x24>
 800289a:	4972      	ldr	r1, [pc, #456]	@ (8002a64 <xQueueReceive+0x1e4>)
 800289c:	f240 502f 	movw	r0, #1327	@ 0x52f
 80028a0:	f7fe f8c8 	bl	8000a34 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <xQueueReceive+0x32>
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <xQueueReceive+0x36>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <xQueueReceive+0x38>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <xQueueReceive+0x46>
 80028bc:	4969      	ldr	r1, [pc, #420]	@ (8002a64 <xQueueReceive+0x1e4>)
 80028be:	f240 5033 	movw	r0, #1331	@ 0x533
 80028c2:	f7fe f8b7 	bl	8000a34 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028c6:	f000 ff87 	bl	80037d8 <xTaskGetSchedulerState>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <xQueueReceive+0x56>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <xQueueReceive+0x5a>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <xQueueReceive+0x5c>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d104      	bne.n	80028ea <xQueueReceive+0x6a>
 80028e0:	4960      	ldr	r1, [pc, #384]	@ (8002a64 <xQueueReceive+0x1e4>)
 80028e2:	f44f 60a7 	mov.w	r0, #1336	@ 0x538
 80028e6:	f7fe f8a5 	bl	8000a34 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028ea:	f001 fd2d 	bl	8004348 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d024      	beq.n	8002944 <xQueueReceive+0xc4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	6a38      	ldr	r0, [r7, #32]
 80028fe:	f000 f91f 	bl	8002b40 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	4618      	mov	r0, r3
 8002906:	f004 f9ab 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 800290a:	4604      	mov	r4, r0
 800290c:	2000      	movs	r0, #0
 800290e:	f004 f9a7 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 8002912:	4602      	mov	r2, r0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2101      	movs	r1, #1
 8002918:	9100      	str	r1, [sp, #0]
 800291a:	4621      	mov	r1, r4
 800291c:	205c      	movs	r0, #92	@ 0x5c
 800291e:	f003 fc87 	bl	8006230 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d004      	beq.n	800293c <xQueueReceive+0xbc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	3310      	adds	r3, #16
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fdc2 	bl	80034c0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800293c:	f001 fd2e 	bl	800439c <vPortExitCritical>
                return pdPASS;
 8002940:	2301      	movs	r3, #1
 8002942:	e08a      	b.n	8002a5a <xQueueReceive+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d113      	bne.n	8002972 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800294a:	f001 fd27 	bl	800439c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	4618      	mov	r0, r3
 8002952:	f004 f985 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 8002956:	4604      	mov	r4, r0
 8002958:	2000      	movs	r0, #0
 800295a:	f004 f981 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 800295e:	4602      	mov	r2, r0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2101      	movs	r1, #1
 8002964:	9100      	str	r1, [sp, #0]
 8002966:	4621      	mov	r1, r4
 8002968:	205c      	movs	r0, #92	@ 0x5c
 800296a:	f003 fc61 	bl	8006230 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800296e:	2300      	movs	r3, #0
 8002970:	e073      	b.n	8002a5a <xQueueReceive+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d106      	bne.n	8002986 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fe01 	bl	8003584 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002982:	2301      	movs	r3, #1
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002986:	f001 fd09 	bl	800439c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800298a:	f000 fb95 	bl	80030b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800298e:	f001 fcdb 	bl	8004348 <vPortEnterCritical>
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002998:	b25b      	sxtb	r3, r3
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299e:	d103      	bne.n	80029a8 <xQueueReceive+0x128>
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029ae:	b25b      	sxtb	r3, r3
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d103      	bne.n	80029be <xQueueReceive+0x13e>
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029be:	f001 fced 	bl	800439c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029c2:	1d3a      	adds	r2, r7, #4
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fdf0 	bl	80035b0 <xTaskCheckForTimeOut>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d124      	bne.n	8002a20 <xQueueReceive+0x1a0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029d6:	6a38      	ldr	r0, [r7, #32]
 80029d8:	f000 f92a 	bl	8002c30 <prvIsQueueEmpty>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d018      	beq.n	8002a14 <xQueueReceive+0x194>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	3324      	adds	r3, #36	@ 0x24
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fd1e 	bl	800342c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029f0:	6a38      	ldr	r0, [r7, #32]
 80029f2:	f000 f8cb 	bl	8002b8c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029f6:	f000 fb6d 	bl	80030d4 <xTaskResumeAll>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f47f af74 	bne.w	80028ea <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8002a02:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <xQueueReceive+0x1e8>)
 8002a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	e76a      	b.n	80028ea <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a14:	6a38      	ldr	r0, [r7, #32]
 8002a16:	f000 f8b9 	bl	8002b8c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a1a:	f000 fb5b 	bl	80030d4 <xTaskResumeAll>
 8002a1e:	e764      	b.n	80028ea <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a20:	6a38      	ldr	r0, [r7, #32]
 8002a22:	f000 f8b3 	bl	8002b8c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a26:	f000 fb55 	bl	80030d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a2a:	6a38      	ldr	r0, [r7, #32]
 8002a2c:	f000 f900 	bl	8002c30 <prvIsQueueEmpty>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f43f af59 	beq.w	80028ea <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 f910 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 8002a40:	4604      	mov	r4, r0
 8002a42:	2000      	movs	r0, #0
 8002a44:	f004 f90c 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	9100      	str	r1, [sp, #0]
 8002a50:	4621      	mov	r1, r4
 8002a52:	205c      	movs	r0, #92	@ 0x5c
 8002a54:	f003 fbec 	bl	8006230 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a58:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	372c      	adds	r7, #44	@ 0x2c
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08007cb0 	.word	0x08007cb0
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10d      	bne.n	8002aa6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d14d      	bne.n	8002b2e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 febc 	bl	8003814 <xTaskPriorityDisinherit>
 8002a9c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e043      	b.n	8002b2e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d119      	bne.n	8002ae0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6858      	ldr	r0, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	f004 fc68 	bl	800738c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	441a      	add	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d32b      	bcc.n	8002b2e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e026      	b.n	8002b2e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68d8      	ldr	r0, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	f004 fc4e 	bl	800738c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	425b      	negs	r3, r3
 8002afa:	441a      	add	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d207      	bcs.n	8002b1c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	425b      	negs	r3, r3
 8002b16:	441a      	add	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d105      	bne.n	8002b2e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002b36:	697b      	ldr	r3, [r7, #20]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d018      	beq.n	8002b84 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	441a      	add	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d303      	bcc.n	8002b74 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68d9      	ldr	r1, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	f004 fc04 	bl	800738c <memcpy>
    }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b94:	f001 fbd8 	bl	8004348 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b9e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ba0:	e011      	b.n	8002bc6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3324      	adds	r3, #36	@ 0x24
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fc86 	bl	80034c0 <xTaskRemoveFromEventList>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002bba:	f000 fd55 	bl	8003668 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	dce9      	bgt.n	8002ba2 <prvUnlockQueue+0x16>
 8002bce:	e000      	b.n	8002bd2 <prvUnlockQueue+0x46>
                        break;
 8002bd0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	22ff      	movs	r2, #255	@ 0xff
 8002bd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002bda:	f001 fbdf 	bl	800439c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002bde:	f001 fbb3 	bl	8004348 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002be8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bea:	e011      	b.n	8002c10 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d012      	beq.n	8002c1a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3310      	adds	r3, #16
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fc61 	bl	80034c0 <xTaskRemoveFromEventList>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c04:	f000 fd30 	bl	8003668 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c08:	7bbb      	ldrb	r3, [r7, #14]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	dce9      	bgt.n	8002bec <prvUnlockQueue+0x60>
 8002c18:	e000      	b.n	8002c1c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c1a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	22ff      	movs	r2, #255	@ 0xff
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002c24:	f001 fbba 	bl	800439c <vPortExitCritical>
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c38:	f001 fb86 	bl	8004348 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e001      	b.n	8002c4e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c4e:	f001 fba5 	bl	800439c <vPortExitCritical>

    return xReturn;
 8002c52:	68fb      	ldr	r3, [r7, #12]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c64:	f001 fb70 	bl	8004348 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d102      	bne.n	8002c7a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e001      	b.n	8002c7e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c7e:	f001 fb8d 	bl	800439c <vPortExitCritical>

    return xReturn;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e01e      	b.n	8002cda <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c9c:	4a13      	ldr	r2, [pc, #76]	@ (8002cec <vQueueAddToRegistry+0x60>)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d115      	bne.n	8002cd4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ca8:	4910      	ldr	r1, [pc, #64]	@ (8002cec <vQueueAddToRegistry+0x60>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002cec <vQueueAddToRegistry+0x60>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 ffcd 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2071      	movs	r0, #113	@ 0x71
 8002cce:	f003 f9df 	bl	8006090 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002cd2:	e006      	b.n	8002ce2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b07      	cmp	r3, #7
 8002cde:	d9dd      	bls.n	8002c9c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200000d8 	.word	0x200000d8

08002cf0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d00:	f001 fb22 	bl	8004348 <vPortEnterCritical>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d103      	bne.n	8002d1a <vQueueWaitForMessageRestricted+0x2a>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d103      	bne.n	8002d30 <vQueueWaitForMessageRestricted+0x40>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d30:	f001 fb34 	bl	800439c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	3324      	adds	r3, #36	@ 0x24
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fb91 	bl	800346c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff1e 	bl	8002b8c <prvUnlockQueue>
    }
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08c      	sub	sp, #48	@ 0x30
 8002d5c:	af04      	add	r7, sp, #16
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fc01 	bl	8004574 <pvPortMalloc>
 8002d72:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00e      	beq.n	8002d98 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d7a:	2058      	movs	r0, #88	@ 0x58
 8002d7c:	f001 fbfa 	bl	8004574 <pvPortMalloc>
 8002d80:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d8e:	e005      	b.n	8002d9c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d90:	6978      	ldr	r0, [r7, #20]
 8002d92:	f001 fcbd 	bl	8004710 <vPortFree>
 8002d96:	e001      	b.n	8002d9c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d013      	beq.n	8002dca <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	2300      	movs	r3, #0
 8002da6:	9303      	str	r3, [sp, #12]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	9302      	str	r3, [sp, #8]
 8002dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f80f 	bl	8002ddc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002dbe:	69f8      	ldr	r0, [r7, #28]
 8002dc0:	f000 f89e 	bl	8002f00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e002      	b.n	8002dd0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
    }
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	461a      	mov	r2, r3
 8002df4:	21a5      	movs	r1, #165	@ 0xa5
 8002df6:	f004 fa9b 	bl	8007330 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002e04:	440b      	add	r3, r1
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f023 0307 	bic.w	r3, r3, #7
 8002e12:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <prvInitialiseNewTask+0x4c>
 8002e1e:	4937      	ldr	r1, [pc, #220]	@ (8002efc <prvInitialiseNewTask+0x120>)
 8002e20:	f240 3069 	movw	r0, #873	@ 0x369
 8002e24:	f7fd fe06 	bl	8000a34 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01f      	beq.n	8002e6e <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e012      	b.n	8002e5a <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4413      	add	r3, r2
 8002e3a:	7819      	ldrb	r1, [r3, #0]
 8002e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	4413      	add	r3, r2
 8002e42:	3334      	adds	r3, #52	@ 0x34
 8002e44:	460a      	mov	r2, r1
 8002e46:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3301      	adds	r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	d9e9      	bls.n	8002e34 <prvInitialiseNewTask+0x58>
 8002e60:	e000      	b.n	8002e64 <prvInitialiseNewTask+0x88>
            {
                break;
 8002e62:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e6c:	e003      	b.n	8002e76 <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d901      	bls.n	8002e80 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	2200      	movs	r2, #0
 8002e90:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e94:	3304      	adds	r3, #4
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f9ec 	bl	8002274 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9e:	3318      	adds	r3, #24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f9e7 	bl	8002274 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eaa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f1c3 0205 	rsb	r2, r3, #5
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eba:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	3350      	adds	r3, #80	@ 0x50
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f004 fa33 	bl	8007330 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	3354      	adds	r3, #84	@ 0x54
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fa2c 	bl	8007330 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	6938      	ldr	r0, [r7, #16]
 8002ede:	f001 f89d 	bl	800401c <pxPortInitialiseStack>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ef2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	08007cd0 	.word	0x08007cd0

08002f00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f08:	f001 fa1e 	bl	8004348 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f0c:	4b35      	ldr	r3, [pc, #212]	@ (8002fe4 <prvAddNewTaskToReadyList+0xe4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3301      	adds	r3, #1
 8002f12:	4a34      	ldr	r2, [pc, #208]	@ (8002fe4 <prvAddNewTaskToReadyList+0xe4>)
 8002f14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f16:	4b34      	ldr	r3, [pc, #208]	@ (8002fe8 <prvAddNewTaskToReadyList+0xe8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f1e:	4a32      	ldr	r2, [pc, #200]	@ (8002fe8 <prvAddNewTaskToReadyList+0xe8>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f24:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe4 <prvAddNewTaskToReadyList+0xe4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d110      	bne.n	8002f4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f2c:	f000 fbba 	bl	80036a4 <prvInitialiseTaskLists>
 8002f30:	e00d      	b.n	8002f4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f32:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <prvAddNewTaskToReadyList+0xec>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe8 <prvAddNewTaskToReadyList+0xe8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d802      	bhi.n	8002f4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f48:	4a27      	ldr	r2, [pc, #156]	@ (8002fe8 <prvAddNewTaskToReadyList+0xe8>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <prvAddNewTaskToReadyList+0xf0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3301      	adds	r3, #1
 8002f54:	4a26      	ldr	r2, [pc, #152]	@ (8002ff0 <prvAddNewTaskToReadyList+0xf0>)
 8002f56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f58:	4b25      	ldr	r3, [pc, #148]	@ (8002ff0 <prvAddNewTaskToReadyList+0xf0>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <prvAddNewTaskToReadyList+0x94>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 fd53 	bl	8006a14 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	461d      	mov	r5, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461c      	mov	r4, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	1ae3      	subs	r3, r4, r3
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	462b      	mov	r3, r5
 8002f90:	f001 fd82 	bl	8004a98 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fdc0 	bl	8006b1c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <prvAddNewTaskToReadyList+0xf4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	4a12      	ldr	r2, [pc, #72]	@ (8002ff4 <prvAddNewTaskToReadyList+0xf4>)
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff8 <prvAddNewTaskToReadyList+0xf8>)
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7ff f962 	bl	800228e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fca:	f001 f9e7 	bl	800439c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <prvAddNewTaskToReadyList+0xec>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fd6:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <prvAddNewTaskToReadyList+0xe8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200001f0 	.word	0x200001f0
 8002fe8:	20000118 	.word	0x20000118
 8002fec:	200001fc 	.word	0x200001fc
 8002ff0:	2000020c 	.word	0x2000020c
 8002ff4:	200001f8 	.word	0x200001f8
 8002ff8:	2000011c 	.word	0x2000011c

08002ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003002:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <vTaskStartScheduler+0x98>)
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2300      	movs	r3, #0
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2282      	movs	r2, #130	@ 0x82
 800300e:	4922      	ldr	r1, [pc, #136]	@ (8003098 <vTaskStartScheduler+0x9c>)
 8003010:	4822      	ldr	r0, [pc, #136]	@ (800309c <vTaskStartScheduler+0xa0>)
 8003012:	f7ff fea1 	bl	8002d58 <xTaskCreate>
 8003016:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800301e:	f000 fce7 	bl	80039f0 <xTimerCreateTimerTask>
 8003022:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d124      	bne.n	8003074 <vTaskStartScheduler+0x78>
        __asm volatile
 800302a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	603b      	str	r3, [r7, #0]
    }
 800303c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800303e:	4b18      	ldr	r3, [pc, #96]	@ (80030a0 <vTaskStartScheduler+0xa4>)
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003046:	4b17      	ldr	r3, [pc, #92]	@ (80030a4 <vTaskStartScheduler+0xa8>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800304c:	4b16      	ldr	r3, [pc, #88]	@ (80030a8 <vTaskStartScheduler+0xac>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003052:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <vTaskStartScheduler+0xb0>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <vTaskStartScheduler+0x98>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d102      	bne.n	8003064 <vTaskStartScheduler+0x68>
 800305e:	f003 fcbd 	bl	80069dc <SEGGER_SYSVIEW_OnIdle>
 8003062:	e004      	b.n	800306e <vTaskStartScheduler+0x72>
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <vTaskStartScheduler+0xb0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fd15 	bl	8006a98 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800306e:	f001 f859 	bl	8004124 <xPortStartScheduler>
 8003072:	e008      	b.n	8003086 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d104      	bne.n	8003086 <vTaskStartScheduler+0x8a>
 800307c:	490c      	ldr	r1, [pc, #48]	@ (80030b0 <vTaskStartScheduler+0xb4>)
 800307e:	f640 0041 	movw	r0, #2113	@ 0x841
 8003082:	f7fd fcd7 	bl	8000a34 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003086:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <vTaskStartScheduler+0xb8>)
 8003088:	681b      	ldr	r3, [r3, #0]
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000214 	.word	0x20000214
 8003098:	08007cf0 	.word	0x08007cf0
 800309c:	08003681 	.word	0x08003681
 80030a0:	20000210 	.word	0x20000210
 80030a4:	200001fc 	.word	0x200001fc
 80030a8:	200001f4 	.word	0x200001f4
 80030ac:	20000118 	.word	0x20000118
 80030b0:	08007cd0 	.word	0x08007cd0
 80030b4:	2000000c 	.word	0x2000000c

080030b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <vTaskSuspendAll+0x18>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	4a03      	ldr	r2, [pc, #12]	@ (80030d0 <vTaskSuspendAll+0x18>)
 80030c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000218 	.word	0x20000218

080030d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030e2:	4b3a      	ldr	r3, [pc, #232]	@ (80031cc <xTaskResumeAll+0xf8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <xTaskResumeAll+0x20>
 80030ea:	4939      	ldr	r1, [pc, #228]	@ (80031d0 <xTaskResumeAll+0xfc>)
 80030ec:	f640 00b4 	movw	r0, #2228	@ 0x8b4
 80030f0:	f7fd fca0 	bl	8000a34 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030f4:	f001 f928 	bl	8004348 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030f8:	4b34      	ldr	r3, [pc, #208]	@ (80031cc <xTaskResumeAll+0xf8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	4a33      	ldr	r2, [pc, #204]	@ (80031cc <xTaskResumeAll+0xf8>)
 8003100:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003102:	4b32      	ldr	r3, [pc, #200]	@ (80031cc <xTaskResumeAll+0xf8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d159      	bne.n	80031be <xTaskResumeAll+0xea>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800310a:	4b32      	ldr	r3, [pc, #200]	@ (80031d4 <xTaskResumeAll+0x100>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d055      	beq.n	80031be <xTaskResumeAll+0xea>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003112:	e032      	b.n	800317a <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003114:	4b30      	ldr	r3, [pc, #192]	@ (80031d8 <xTaskResumeAll+0x104>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3318      	adds	r3, #24
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff f911 	bl	8002348 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3304      	adds	r3, #4
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff f90c 	bl	8002348 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fcf2 	bl	8006b1c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <xTaskResumeAll+0x108>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	4a25      	ldr	r2, [pc, #148]	@ (80031dc <xTaskResumeAll+0x108>)
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4a22      	ldr	r2, [pc, #136]	@ (80031e0 <xTaskResumeAll+0x10c>)
 8003158:	441a      	add	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3304      	adds	r3, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7ff f894 	bl	800228e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <xTaskResumeAll+0x110>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 8003174:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <xTaskResumeAll+0x114>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800317a:	4b17      	ldr	r3, [pc, #92]	@ (80031d8 <xTaskResumeAll+0x104>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1c8      	bne.n	8003114 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003188:	f000 fb0a 	bl	80037a0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800318c:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <xTaskResumeAll+0x118>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d010      	beq.n	80031ba <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003198:	f000 f84c 	bl	8003234 <xTaskIncrementTick>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 80031a2:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <xTaskResumeAll+0x114>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f1      	bne.n	8003198 <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 80031b4:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <xTaskResumeAll+0x118>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031ba:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <xTaskResumeAll+0x114>)
 80031bc:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031be:	f001 f8ed 	bl	800439c <vPortExitCritical>

    return xAlreadyYielded;
 80031c2:	687b      	ldr	r3, [r7, #4]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000218 	.word	0x20000218
 80031d0:	08007cd0 	.word	0x08007cd0
 80031d4:	200001f0 	.word	0x200001f0
 80031d8:	200001b0 	.word	0x200001b0
 80031dc:	200001f8 	.word	0x200001f8
 80031e0:	2000011c 	.word	0x2000011c
 80031e4:	20000118 	.word	0x20000118
 80031e8:	20000204 	.word	0x20000204
 80031ec:	20000200 	.word	0x20000200

080031f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031f6:	4b05      	ldr	r3, [pc, #20]	@ (800320c <xTaskGetTickCount+0x1c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031fc:	687b      	ldr	r3, [r7, #4]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	200001f4 	.word	0x200001f4

08003210 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003216:	f001 f979 	bl	800450c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800321e:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <xTaskGetTickCountFromISR+0x20>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003224:	683b      	ldr	r3, [r7, #0]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200001f4 	.word	0x200001f4

08003234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800323e:	4b3e      	ldr	r3, [pc, #248]	@ (8003338 <xTaskIncrementTick+0x104>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d16d      	bne.n	8003322 <xTaskIncrementTick+0xee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003246:	4b3d      	ldr	r3, [pc, #244]	@ (800333c <xTaskIncrementTick+0x108>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800324e:	4a3b      	ldr	r2, [pc, #236]	@ (800333c <xTaskIncrementTick+0x108>)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d11a      	bne.n	8003290 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800325a:	4b39      	ldr	r3, [pc, #228]	@ (8003340 <xTaskIncrementTick+0x10c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <xTaskIncrementTick+0x3a>
 8003264:	4937      	ldr	r1, [pc, #220]	@ (8003344 <xTaskIncrementTick+0x110>)
 8003266:	f640 20c7 	movw	r0, #2759	@ 0xac7
 800326a:	f7fd fbe3 	bl	8000a34 <vAssertCalled>
 800326e:	4b34      	ldr	r3, [pc, #208]	@ (8003340 <xTaskIncrementTick+0x10c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	4b34      	ldr	r3, [pc, #208]	@ (8003348 <xTaskIncrementTick+0x114>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a31      	ldr	r2, [pc, #196]	@ (8003340 <xTaskIncrementTick+0x10c>)
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <xTaskIncrementTick+0x114>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b32      	ldr	r3, [pc, #200]	@ (800334c <xTaskIncrementTick+0x118>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	4a30      	ldr	r2, [pc, #192]	@ (800334c <xTaskIncrementTick+0x118>)
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	f000 fa88 	bl	80037a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003290:	4b2f      	ldr	r3, [pc, #188]	@ (8003350 <xTaskIncrementTick+0x11c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	429a      	cmp	r2, r3
 8003298:	d348      	bcc.n	800332c <xTaskIncrementTick+0xf8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800329a:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <xTaskIncrementTick+0x10c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003350 <xTaskIncrementTick+0x11c>)
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	601a      	str	r2, [r3, #0]
                    break;
 80032ac:	e03e      	b.n	800332c <xTaskIncrementTick+0xf8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ae:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <xTaskIncrementTick+0x10c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d203      	bcs.n	80032ce <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032c6:	4a22      	ldr	r2, [pc, #136]	@ (8003350 <xTaskIncrementTick+0x11c>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032cc:	e02e      	b.n	800332c <xTaskIncrementTick+0xf8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f838 	bl	8002348 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <xTaskIncrementTick+0xb6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3318      	adds	r3, #24
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f82f 	bl	8002348 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fc15 	bl	8006b1c <SEGGER_SYSVIEW_OnTaskStartReady>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	2201      	movs	r2, #1
 80032f8:	409a      	lsls	r2, r3
 80032fa:	4b16      	ldr	r3, [pc, #88]	@ (8003354 <xTaskIncrementTick+0x120>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	4a14      	ldr	r2, [pc, #80]	@ (8003354 <xTaskIncrementTick+0x120>)
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <xTaskIncrementTick+0x124>)
 8003312:	441a      	add	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3304      	adds	r3, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f7fe ffb7 	bl	800228e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003320:	e7bb      	b.n	800329a <xTaskIncrementTick+0x66>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <xTaskIncrementTick+0x128>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3301      	adds	r3, #1
 8003328:	4a0c      	ldr	r2, [pc, #48]	@ (800335c <xTaskIncrementTick+0x128>)
 800332a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800332c:	697b      	ldr	r3, [r7, #20]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000218 	.word	0x20000218
 800333c:	200001f4 	.word	0x200001f4
 8003340:	200001a8 	.word	0x200001a8
 8003344:	08007cd0 	.word	0x08007cd0
 8003348:	200001ac 	.word	0x200001ac
 800334c:	20000208 	.word	0x20000208
 8003350:	20000210 	.word	0x20000210
 8003354:	200001f8 	.word	0x200001f8
 8003358:	2000011c 	.word	0x2000011c
 800335c:	20000200 	.word	0x20000200

08003360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003366:	4b2a      	ldr	r3, [pc, #168]	@ (8003410 <vTaskSwitchContext+0xb0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800336e:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <vTaskSwitchContext+0xb4>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003374:	e047      	b.n	8003406 <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 8003376:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <vTaskSwitchContext+0xb4>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800337c:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <vTaskSwitchContext+0xb8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f1c3 031f 	rsb	r3, r3, #31
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4922      	ldr	r1, [pc, #136]	@ (800341c <vTaskSwitchContext+0xbc>)
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <vTaskSwitchContext+0x50>
 80033a6:	491e      	ldr	r1, [pc, #120]	@ (8003420 <vTaskSwitchContext+0xc0>)
 80033a8:	f640 4002 	movw	r0, #3074	@ 0xc02
 80033ac:	f7fd fb42 	bl	8000a34 <vAssertCalled>
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4a18      	ldr	r2, [pc, #96]	@ (800341c <vTaskSwitchContext+0xbc>)
 80033bc:	4413      	add	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	3308      	adds	r3, #8
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d104      	bne.n	80033e0 <vTaskSwitchContext+0x80>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003424 <vTaskSwitchContext+0xc4>)
 80033e8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80033ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <vTaskSwitchContext+0xc4>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <vTaskSwitchContext+0xc8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d102      	bne.n	80033fc <vTaskSwitchContext+0x9c>
 80033f6:	f003 faf1 	bl	80069dc <SEGGER_SYSVIEW_OnIdle>
}
 80033fa:	e004      	b.n	8003406 <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <vTaskSwitchContext+0xc4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f003 fb49 	bl	8006a98 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000218 	.word	0x20000218
 8003414:	20000204 	.word	0x20000204
 8003418:	200001f8 	.word	0x200001f8
 800341c:	2000011c 	.word	0x2000011c
 8003420:	08007cd0 	.word	0x08007cd0
 8003424:	20000118 	.word	0x20000118
 8003428:	20000214 	.word	0x20000214

0800342c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <vTaskPlaceOnEventList+0x1a>
 800343c:	4909      	ldr	r1, [pc, #36]	@ (8003464 <vTaskPlaceOnEventList+0x38>)
 800343e:	f640 401c 	movw	r0, #3100	@ 0xc1c
 8003442:	f7fd faf7 	bl	8000a34 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <vTaskPlaceOnEventList+0x3c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3318      	adds	r3, #24
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe ff41 	bl	80022d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003454:	2101      	movs	r1, #1
 8003456:	6838      	ldr	r0, [r7, #0]
 8003458:	f000 fa52 	bl	8003900 <prvAddCurrentTaskToDelayedList>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	08007cd0 	.word	0x08007cd0
 8003468:	20000118 	.word	0x20000118

0800346c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d104      	bne.n	8003488 <vTaskPlaceOnEventListRestricted+0x1c>
 800347e:	490e      	ldr	r1, [pc, #56]	@ (80034b8 <vTaskPlaceOnEventListRestricted+0x4c>)
 8003480:	f640 404b 	movw	r0, #3147	@ 0xc4b
 8003484:	f7fd fad6 	bl	8000a34 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003488:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <vTaskPlaceOnEventListRestricted+0x50>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3318      	adds	r3, #24
 800348e:	4619      	mov	r1, r3
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7fe fefc 	bl	800228e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295
 80034a0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80034a2:	2024      	movs	r0, #36	@ 0x24
 80034a4:	f002 fd9a 	bl	8005fdc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	68b8      	ldr	r0, [r7, #8]
 80034ac:	f000 fa28 	bl	8003900 <prvAddCurrentTaskToDelayedList>
    }
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	08007cd0 	.word	0x08007cd0
 80034bc:	20000118 	.word	0x20000118

080034c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <xTaskRemoveFromEventList+0x20>
 80034d6:	4924      	ldr	r1, [pc, #144]	@ (8003568 <xTaskRemoveFromEventList+0xa8>)
 80034d8:	f640 407b 	movw	r0, #3195	@ 0xc7b
 80034dc:	f7fd faaa 	bl	8000a34 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	3318      	adds	r3, #24
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe ff2f 	bl	8002348 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ea:	4b20      	ldr	r3, [pc, #128]	@ (800356c <xTaskRemoveFromEventList+0xac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d120      	bne.n	8003534 <xTaskRemoveFromEventList+0x74>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe ff26 	bl	8002348 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fb0c 	bl	8006b1c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	2201      	movs	r2, #1
 800350a:	409a      	lsls	r2, r3
 800350c:	4b18      	ldr	r3, [pc, #96]	@ (8003570 <xTaskRemoveFromEventList+0xb0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <xTaskRemoveFromEventList+0xb0>)
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <xTaskRemoveFromEventList+0xb4>)
 8003524:	441a      	add	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3304      	adds	r3, #4
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7fe feae 	bl	800228e <vListInsertEnd>
 8003532:	e005      	b.n	8003540 <xTaskRemoveFromEventList+0x80>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3318      	adds	r3, #24
 8003538:	4619      	mov	r1, r3
 800353a:	480f      	ldr	r0, [pc, #60]	@ (8003578 <xTaskRemoveFromEventList+0xb8>)
 800353c:	f7fe fea7 	bl	800228e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003544:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <xTaskRemoveFromEventList+0xbc>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354a:	429a      	cmp	r2, r3
 800354c:	d905      	bls.n	800355a <xTaskRemoveFromEventList+0x9a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003552:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <xTaskRemoveFromEventList+0xc0>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e001      	b.n	800355e <xTaskRemoveFromEventList+0x9e>
    }
    else
    {
        xReturn = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08007cd0 	.word	0x08007cd0
 800356c:	20000218 	.word	0x20000218
 8003570:	200001f8 	.word	0x200001f8
 8003574:	2000011c 	.word	0x2000011c
 8003578:	200001b0 	.word	0x200001b0
 800357c:	20000118 	.word	0x20000118
 8003580:	20000204 	.word	0x20000204

08003584 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800358c:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <vTaskInternalSetTimeOutState+0x24>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003594:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <vTaskInternalSetTimeOutState+0x28>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	605a      	str	r2, [r3, #4]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	20000208 	.word	0x20000208
 80035ac:	200001f4 	.word	0x200001f4

080035b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <xTaskCheckForTimeOut+0x1a>
 80035c0:	4926      	ldr	r1, [pc, #152]	@ (800365c <xTaskCheckForTimeOut+0xac>)
 80035c2:	f640 40f6 	movw	r0, #3318	@ 0xcf6
 80035c6:	f7fd fa35 	bl	8000a34 <vAssertCalled>
    configASSERT( pxTicksToWait );
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <xTaskCheckForTimeOut+0x2a>
 80035d0:	4922      	ldr	r1, [pc, #136]	@ (800365c <xTaskCheckForTimeOut+0xac>)
 80035d2:	f640 40f7 	movw	r0, #3319	@ 0xcf7
 80035d6:	f7fd fa2d 	bl	8000a34 <vAssertCalled>

    taskENTER_CRITICAL();
 80035da:	f000 feb5 	bl	8004348 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035de:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <xTaskCheckForTimeOut+0xb0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d102      	bne.n	80035fe <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e026      	b.n	800364c <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <xTaskCheckForTimeOut+0xb4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d00a      	beq.n	8003620 <xTaskCheckForTimeOut+0x70>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	429a      	cmp	r2, r3
 8003612:	d305      	bcc.n	8003620 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e015      	b.n	800364c <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20b      	bcs.n	8003642 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad2      	subs	r2, r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ffa4 	bl	8003584 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	e004      	b.n	800364c <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800364c:	f000 fea6 	bl	800439c <vPortExitCritical>

    return xReturn;
 8003650:	697b      	ldr	r3, [r7, #20]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	08007cd0 	.word	0x08007cd0
 8003660:	200001f4 	.word	0x200001f4
 8003664:	20000208 	.word	0x20000208

08003668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <vTaskMissedYield+0x14>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	20000204 	.word	0x20000204

08003680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003688:	f000 f84c 	bl	8003724 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <prvIdleTask+0x20>)
 800368e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800369c:	bf00      	nop
 800369e:	e7f3      	b.n	8003688 <prvIdleTask+0x8>
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	e00c      	b.n	80036ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <prvInitialiseTaskLists+0x60>)
 80036bc:	4413      	add	r3, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fdb8 	bl	8002234 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3301      	adds	r3, #1
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d9ef      	bls.n	80036b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036d0:	480d      	ldr	r0, [pc, #52]	@ (8003708 <prvInitialiseTaskLists+0x64>)
 80036d2:	f7fe fdaf 	bl	8002234 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036d6:	480d      	ldr	r0, [pc, #52]	@ (800370c <prvInitialiseTaskLists+0x68>)
 80036d8:	f7fe fdac 	bl	8002234 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036dc:	480c      	ldr	r0, [pc, #48]	@ (8003710 <prvInitialiseTaskLists+0x6c>)
 80036de:	f7fe fda9 	bl	8002234 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036e2:	480c      	ldr	r0, [pc, #48]	@ (8003714 <prvInitialiseTaskLists+0x70>)
 80036e4:	f7fe fda6 	bl	8002234 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036e8:	480b      	ldr	r0, [pc, #44]	@ (8003718 <prvInitialiseTaskLists+0x74>)
 80036ea:	f7fe fda3 	bl	8002234 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036ee:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <prvInitialiseTaskLists+0x78>)
 80036f0:	4a05      	ldr	r2, [pc, #20]	@ (8003708 <prvInitialiseTaskLists+0x64>)
 80036f2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <prvInitialiseTaskLists+0x7c>)
 80036f6:	4a05      	ldr	r2, [pc, #20]	@ (800370c <prvInitialiseTaskLists+0x68>)
 80036f8:	601a      	str	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2000011c 	.word	0x2000011c
 8003708:	20000180 	.word	0x20000180
 800370c:	20000194 	.word	0x20000194
 8003710:	200001b0 	.word	0x200001b0
 8003714:	200001c4 	.word	0x200001c4
 8003718:	200001dc 	.word	0x200001dc
 800371c:	200001a8 	.word	0x200001a8
 8003720:	200001ac 	.word	0x200001ac

08003724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800372a:	e019      	b.n	8003760 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800372c:	f000 fe0c 	bl	8004348 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003730:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <prvCheckTasksWaitingTermination+0x50>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fe03 	bl	8002348 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003742:	4b0d      	ldr	r3, [pc, #52]	@ (8003778 <prvCheckTasksWaitingTermination+0x54>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3b01      	subs	r3, #1
 8003748:	4a0b      	ldr	r2, [pc, #44]	@ (8003778 <prvCheckTasksWaitingTermination+0x54>)
 800374a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800374c:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <prvCheckTasksWaitingTermination+0x58>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <prvCheckTasksWaitingTermination+0x58>)
 8003754:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003756:	f000 fe21 	bl	800439c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f810 	bl	8003780 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <prvCheckTasksWaitingTermination+0x58>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e1      	bne.n	800372c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200001c4 	.word	0x200001c4
 8003778:	200001f0 	.word	0x200001f0
 800377c:	200001d8 	.word	0x200001d8

08003780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	4618      	mov	r0, r3
 800378e:	f000 ffbf 	bl	8004710 <vPortFree>
                vPortFree( pxTCB );
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 ffbc 	bl	8004710 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a4:	4b0a      	ldr	r3, [pc, #40]	@ (80037d0 <prvResetNextTaskUnblockTime+0x30>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <prvResetNextTaskUnblockTime+0x34>)
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037b6:	e005      	b.n	80037c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <prvResetNextTaskUnblockTime+0x30>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a04      	ldr	r2, [pc, #16]	@ (80037d4 <prvResetNextTaskUnblockTime+0x34>)
 80037c2:	6013      	str	r3, [r2, #0]
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200001a8 	.word	0x200001a8
 80037d4:	20000210 	.word	0x20000210

080037d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <xTaskGetSchedulerState+0x34>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037e6:	2301      	movs	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	e008      	b.n	80037fe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ec:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <xTaskGetSchedulerState+0x38>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037f4:	2302      	movs	r3, #2
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	e001      	b.n	80037fe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037fe:	687b      	ldr	r3, [r7, #4]
    }
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	200001fc 	.word	0x200001fc
 8003810:	20000218 	.word	0x20000218

08003814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d05c      	beq.n	80038e4 <xTaskPriorityDisinherit+0xd0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800382a:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <xTaskPriorityDisinherit+0xdc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	d004      	beq.n	800383e <xTaskPriorityDisinherit+0x2a>
 8003834:	492f      	ldr	r1, [pc, #188]	@ (80038f4 <xTaskPriorityDisinherit+0xe0>)
 8003836:	f241 0056 	movw	r0, #4182	@ 0x1056
 800383a:	f7fd f8fb 	bl	8000a34 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <xTaskPriorityDisinherit+0x3c>
 8003846:	492b      	ldr	r1, [pc, #172]	@ (80038f4 <xTaskPriorityDisinherit+0xe0>)
 8003848:	f241 0057 	movw	r0, #4183	@ 0x1057
 800384c:	f7fd f8f2 	bl	8000a34 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	429a      	cmp	r2, r3
 8003864:	d03e      	beq.n	80038e4 <xTaskPriorityDisinherit+0xd0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d13a      	bne.n	80038e4 <xTaskPriorityDisinherit+0xd0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	3304      	adds	r3, #4
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fd68 	bl	8002348 <uxListRemove>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	2201      	movs	r2, #1
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43da      	mvns	r2, r3
 800388a:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <xTaskPriorityDisinherit+0xe4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4013      	ands	r3, r2
 8003890:	4a19      	ldr	r2, [pc, #100]	@ (80038f8 <xTaskPriorityDisinherit+0xe4>)
 8003892:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4619      	mov	r1, r3
 8003898:	204a      	movs	r0, #74	@ 0x4a
 800389a:	f002 fbbd 	bl	8006018 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038aa:	f1c3 0205 	rsb	r2, r3, #5
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	2201      	movs	r2, #1
 80038b8:	409a      	lsls	r2, r3
 80038ba:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <xTaskPriorityDisinherit+0xe4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	4a0d      	ldr	r2, [pc, #52]	@ (80038f8 <xTaskPriorityDisinherit+0xe4>)
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <xTaskPriorityDisinherit+0xe8>)
 80038d2:	441a      	add	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f7fe fcd7 	bl	800228e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038e4:	68fb      	ldr	r3, [r7, #12]
    }
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000118 	.word	0x20000118
 80038f4:	08007cd0 	.word	0x08007cd0
 80038f8:	200001f8 	.word	0x200001f8
 80038fc:	2000011c 	.word	0x2000011c

08003900 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800390a:	4b32      	ldr	r3, [pc, #200]	@ (80039d4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003910:	4b31      	ldr	r3, [pc, #196]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3304      	adds	r3, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fd16 	bl	8002348 <uxListRemove>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003922:	4b2d      	ldr	r3, [pc, #180]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	2201      	movs	r2, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	4b2a      	ldr	r3, [pc, #168]	@ (80039dc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4013      	ands	r3, r2
 8003936:	4a29      	ldr	r2, [pc, #164]	@ (80039dc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003938:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d110      	bne.n	8003964 <prvAddCurrentTaskToDelayedList+0x64>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003948:	4b23      	ldr	r3, [pc, #140]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	211b      	movs	r1, #27
 800394e:	4618      	mov	r0, r3
 8003950:	f003 f926 	bl	8006ba0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003954:	4b20      	ldr	r3, [pc, #128]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3304      	adds	r3, #4
 800395a:	4619      	mov	r1, r3
 800395c:	4820      	ldr	r0, [pc, #128]	@ (80039e0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800395e:	f7fe fc96 	bl	800228e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003962:	e032      	b.n	80039ca <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800396c:	4b1a      	ldr	r3, [pc, #104]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	429a      	cmp	r2, r3
 800397a:	d20f      	bcs.n	800399c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2104      	movs	r1, #4
 8003982:	4618      	mov	r0, r3
 8003984:	f003 f90c 	bl	8006ba0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003988:	4b16      	ldr	r3, [pc, #88]	@ (80039e4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe fc9e 	bl	80022d6 <vListInsert>
}
 800399a:	e016      	b.n	80039ca <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800399c:	4b0e      	ldr	r3, [pc, #56]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2104      	movs	r1, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f003 f8fc 	bl	8006ba0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a8:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fe fc8e 	bl	80022d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80039ba:	4b0c      	ldr	r3, [pc, #48]	@ (80039ec <prvAddCurrentTaskToDelayedList+0xec>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d202      	bcs.n	80039ca <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80039c4:	4a09      	ldr	r2, [pc, #36]	@ (80039ec <prvAddCurrentTaskToDelayedList+0xec>)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6013      	str	r3, [r2, #0]
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200001f4 	.word	0x200001f4
 80039d8:	20000118 	.word	0x20000118
 80039dc:	200001f8 	.word	0x200001f8
 80039e0:	200001dc 	.word	0x200001dc
 80039e4:	200001ac 	.word	0x200001ac
 80039e8:	200001a8 	.word	0x200001a8
 80039ec:	20000210 	.word	0x20000210

080039f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039fa:	f000 fad9 	bl	8003fb0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003a38 <xTimerCreateTimerTask+0x48>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a06:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <xTimerCreateTimerTask+0x4c>)
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a14:	490a      	ldr	r1, [pc, #40]	@ (8003a40 <xTimerCreateTimerTask+0x50>)
 8003a16:	480b      	ldr	r0, [pc, #44]	@ (8003a44 <xTimerCreateTimerTask+0x54>)
 8003a18:	f7ff f99e 	bl	8002d58 <xTaskCreate>
 8003a1c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <xTimerCreateTimerTask+0x3e>
 8003a24:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <xTimerCreateTimerTask+0x58>)
 8003a26:	f240 100d 	movw	r0, #269	@ 0x10d
 8003a2a:	f7fd f803 	bl	8000a34 <vAssertCalled>
        return xReturn;
 8003a2e:	687b      	ldr	r3, [r7, #4]
    }
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	2000024c 	.word	0x2000024c
 8003a3c:	20000250 	.word	0x20000250
 8003a40:	08007d08 	.word	0x08007d08
 8003a44:	08003b75 	.word	0x08003b75
 8003a48:	08007d10 	.word	0x08007d10

08003a4c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	@ 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <xTimerGenericCommand+0x22>
 8003a64:	491c      	ldr	r1, [pc, #112]	@ (8003ad8 <xTimerGenericCommand+0x8c>)
 8003a66:	f44f 70c1 	mov.w	r0, #386	@ 0x182
 8003a6a:	f7fc ffe3 	bl	8000a34 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <xTimerGenericCommand+0x90>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02a      	beq.n	8003acc <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	dc18      	bgt.n	8003aba <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a88:	f7ff fea6 	bl	80037d8 <xTaskGetSchedulerState>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d109      	bne.n	8003aa6 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <xTimerGenericCommand+0x90>)
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	f107 0114 	add.w	r1, r7, #20
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a9e:	f7fe fd4f 	bl	8002540 <xQueueGenericSend>
 8003aa2:	6278      	str	r0, [r7, #36]	@ 0x24
 8003aa4:	e012      	b.n	8003acc <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <xTimerGenericCommand+0x90>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f107 0114 	add.w	r1, r7, #20
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f7fe fd45 	bl	8002540 <xQueueGenericSend>
 8003ab6:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ab8:	e008      	b.n	8003acc <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003aba:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <xTimerGenericCommand+0x90>)
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f107 0114 	add.w	r1, r7, #20
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	f7fe fe33 	bl	8002730 <xQueueGenericSendFromISR>
 8003aca:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3728      	adds	r7, #40	@ 0x28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	08007d10 	.word	0x08007d10
 8003adc:	2000024c 	.word	0x2000024c

08003ae0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aea:	4b20      	ldr	r3, [pc, #128]	@ (8003b6c <prvProcessExpiredTimer+0x8c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fc25 	bl	8002348 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01d      	beq.n	8003b48 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	18d1      	adds	r1, r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f8d1 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01a      	beq.n	8003b5a <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b24:	2300      	movs	r3, #0
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff ff8c 	bl	8003a4c <xTimerGenericCommand>
 8003b34:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10e      	bne.n	8003b5a <prvProcessExpiredTimer+0x7a>
 8003b3c:	490c      	ldr	r1, [pc, #48]	@ (8003b70 <prvProcessExpiredTimer+0x90>)
 8003b3e:	f44f 7005 	mov.w	r0, #532	@ 0x214
 8003b42:	f7fc ff77 	bl	8000a34 <vAssertCalled>
 8003b46:	e008      	b.n	8003b5a <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	4798      	blx	r3
    }
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000244 	.word	0x20000244
 8003b70:	08007d10 	.word	0x08007d10

08003b74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b7c:	f107 0308 	add.w	r3, r7, #8
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f859 	bl	8003c38 <prvGetNextExpireTime>
 8003b86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f805 	bl	8003b9c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b92:	f000 f8d7 	bl	8003d44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b96:	bf00      	nop
 8003b98:	e7f0      	b.n	8003b7c <prvTimerTask+0x8>
	...

08003b9c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ba6:	f7ff fa87 	bl	80030b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f866 	bl	8003c80 <prvSampleTimeNow>
 8003bb4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d130      	bne.n	8003c1e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <prvProcessTimerOrBlockTask+0x3c>
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d806      	bhi.n	8003bd8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bca:	f7ff fa83 	bl	80030d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff85 	bl	8003ae0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bd6:	e024      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bde:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <prvProcessTimerOrBlockTask+0x90>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <prvProcessTimerOrBlockTask+0x50>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <prvProcessTimerOrBlockTask+0x52>
 8003bec:	2300      	movs	r3, #0
 8003bee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <prvProcessTimerOrBlockTask+0x94>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7ff f877 	bl	8002cf0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c02:	f7ff fa67 	bl	80030d4 <xTaskResumeAll>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <prvProcessTimerOrBlockTask+0x98>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	f3bf 8f6f 	isb	sy
    }
 8003c1c:	e001      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c1e:	f7ff fa59 	bl	80030d4 <xTaskResumeAll>
    }
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000248 	.word	0x20000248
 8003c30:	2000024c 	.word	0x2000024c
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c40:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <prvGetNextExpireTime+0x44>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <prvGetNextExpireTime+0x16>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	e000      	b.n	8003c50 <prvGetNextExpireTime+0x18>
 8003c4e:	2200      	movs	r2, #0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c5c:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <prvGetNextExpireTime+0x44>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e001      	b.n	8003c6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000244 	.word	0x20000244

08003c80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c88:	f7ff fab2 	bl	80031f0 <xTaskGetTickCount>
 8003c8c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <prvSampleTimeNow+0x3c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d205      	bcs.n	8003ca4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c98:	f000 f92a 	bl	8003ef0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003caa:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <prvSampleTimeNow+0x3c>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    }
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000254 	.word	0x20000254

08003cc0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d812      	bhi.n	8003d0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e01b      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <prvInsertTimerInActiveList+0x7c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe fae6 	bl	80022d6 <vListInsert>
 8003d0a:	e012      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d206      	bcs.n	8003d22 <prvInsertTimerInActiveList+0x62>
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d302      	bcc.n	8003d22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e007      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d22:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <prvInsertTimerInActiveList+0x80>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fad2 	bl	80022d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d32:	697b      	ldr	r3, [r7, #20]
    }
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000248 	.word	0x20000248
 8003d40:	20000244 	.word	0x20000244

08003d44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08c      	sub	sp, #48	@ 0x30
 8003d48:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d4a:	e0bb      	b.n	8003ec4 <prvProcessReceivedCommands+0x180>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da13      	bge.n	8003d7a <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	3304      	adds	r3, #4
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <prvProcessReceivedCommands+0x26>
 8003d60:	4961      	ldr	r1, [pc, #388]	@ (8003ee8 <prvProcessReceivedCommands+0x1a4>)
 8003d62:	f240 20fa 	movw	r0, #762	@ 0x2fa
 8003d66:	f7fc fe65 	bl	8000a34 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d70:	6850      	ldr	r0, [r2, #4]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	6892      	ldr	r2, [r2, #8]
 8003d76:	4611      	mov	r1, r2
 8003d78:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f2c0 80a1 	blt.w	8003ec4 <prvProcessReceivedCommands+0x180>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fad8 	bl	8002348 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ff70 	bl	8003c80 <prvSampleTimeNow>
 8003da0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b09      	cmp	r3, #9
 8003da6:	f200 808a 	bhi.w	8003ebe <prvProcessReceivedCommands+0x17a>
 8003daa:	a201      	add	r2, pc, #4	@ (adr r2, 8003db0 <prvProcessReceivedCommands+0x6c>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003dd9 	.word	0x08003dd9
 8003db8:	08003dd9 	.word	0x08003dd9
 8003dbc:	08003e43 	.word	0x08003e43
 8003dc0:	08003e57 	.word	0x08003e57
 8003dc4:	08003e95 	.word	0x08003e95
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003dd9 	.word	0x08003dd9
 8003dd0:	08003e43 	.word	0x08003e43
 8003dd4:	08003e57 	.word	0x08003e57
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	18d1      	adds	r1, r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	6a38      	ldr	r0, [r7, #32]
 8003df8:	f7ff ff62 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d05f      	beq.n	8003ec2 <prvProcessReceivedCommands+0x17e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	6a38      	ldr	r0, [r7, #32]
 8003e08:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d054      	beq.n	8003ec2 <prvProcessReceivedCommands+0x17e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	441a      	add	r2, r3
 8003e20:	2300      	movs	r3, #0
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2300      	movs	r3, #0
 8003e26:	2100      	movs	r1, #0
 8003e28:	6a38      	ldr	r0, [r7, #32]
 8003e2a:	f7ff fe0f 	bl	8003a4c <xTimerGenericCommand>
 8003e2e:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d145      	bne.n	8003ec2 <prvProcessReceivedCommands+0x17e>
 8003e36:	492c      	ldr	r1, [pc, #176]	@ (8003ee8 <prvProcessReceivedCommands+0x1a4>)
 8003e38:	f240 3036 	movw	r0, #822	@ 0x336
 8003e3c:	f7fc fdfa 	bl	8000a34 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e40:	e03f      	b.n	8003ec2 <prvProcessReceivedCommands+0x17e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003e54:	e036      	b.n	8003ec4 <prvProcessReceivedCommands+0x180>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d104      	bne.n	8003e80 <prvProcessReceivedCommands+0x13c>
 8003e76:	491c      	ldr	r1, [pc, #112]	@ (8003ee8 <prvProcessReceivedCommands+0x1a4>)
 8003e78:	f240 304f 	movw	r0, #847	@ 0x34f
 8003e7c:	f7fc fdda 	bl	8000a34 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	699a      	ldr	r2, [r3, #24]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	18d1      	adds	r1, r2, r3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	6a38      	ldr	r0, [r7, #32]
 8003e8e:	f7ff ff17 	bl	8003cc0 <prvInsertTimerInActiveList>
                        break;
 8003e92:	e017      	b.n	8003ec4 <prvProcessReceivedCommands+0x180>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8003ea2:	6a38      	ldr	r0, [r7, #32]
 8003ea4:	f000 fc34 	bl	8004710 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ea8:	e00c      	b.n	8003ec4 <prvProcessReceivedCommands+0x180>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003ebc:	e002      	b.n	8003ec4 <prvProcessReceivedCommands+0x180>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <prvProcessReceivedCommands+0x180>
                        break;
 8003ec2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ec4:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <prvProcessReceivedCommands+0x1a8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f107 0108 	add.w	r1, r7, #8
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fcd6 	bl	8002880 <xQueueReceive>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f47f af38 	bne.w	8003d4c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	3728      	adds	r7, #40	@ 0x28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	08007d10 	.word	0x08007d10
 8003eec:	2000024c 	.word	0x2000024c

08003ef0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ef6:	e042      	b.n	8003f7e <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa4 <prvSwitchTimerLists+0xb4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f02:	4b28      	ldr	r3, [pc, #160]	@ (8003fa4 <prvSwitchTimerLists+0xb4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fa19 	bl	8002348 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d028      	beq.n	8003f7e <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90e      	bls.n	8003f5c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f4a:	4b16      	ldr	r3, [pc, #88]	@ (8003fa4 <prvSwitchTimerLists+0xb4>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7fe f9be 	bl	80022d6 <vListInsert>
 8003f5a:	e010      	b.n	8003f7e <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	2100      	movs	r1, #0
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fd70 	bl	8003a4c <xTimerGenericCommand>
 8003f6c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <prvSwitchTimerLists+0x8e>
 8003f74:	490c      	ldr	r1, [pc, #48]	@ (8003fa8 <prvSwitchTimerLists+0xb8>)
 8003f76:	f240 30a9 	movw	r0, #937	@ 0x3a9
 8003f7a:	f7fc fd5b 	bl	8000a34 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <prvSwitchTimerLists+0xb4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1b7      	bne.n	8003ef8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <prvSwitchTimerLists+0xb4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f8e:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <prvSwitchTimerLists+0xbc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a04      	ldr	r2, [pc, #16]	@ (8003fa4 <prvSwitchTimerLists+0xb4>)
 8003f94:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f96:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <prvSwitchTimerLists+0xbc>)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	6013      	str	r3, [r2, #0]
    }
 8003f9c:	bf00      	nop
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000244 	.word	0x20000244
 8003fa8:	08007d10 	.word	0x08007d10
 8003fac:	20000248 	.word	0x20000248

08003fb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003fb4:	f000 f9c8 	bl	8004348 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003fb8:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <prvCheckForValidListAndQueue+0x54>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11d      	bne.n	8003ffc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003fc0:	4811      	ldr	r0, [pc, #68]	@ (8004008 <prvCheckForValidListAndQueue+0x58>)
 8003fc2:	f7fe f937 	bl	8002234 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fc6:	4811      	ldr	r0, [pc, #68]	@ (800400c <prvCheckForValidListAndQueue+0x5c>)
 8003fc8:	f7fe f934 	bl	8002234 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fcc:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <prvCheckForValidListAndQueue+0x60>)
 8003fce:	4a0e      	ldr	r2, [pc, #56]	@ (8004008 <prvCheckForValidListAndQueue+0x58>)
 8003fd0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <prvCheckForValidListAndQueue+0x64>)
 8003fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800400c <prvCheckForValidListAndQueue+0x5c>)
 8003fd6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2110      	movs	r1, #16
 8003fdc:	2005      	movs	r0, #5
 8003fde:	f7fe fa35 	bl	800244c <xQueueGenericCreate>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a07      	ldr	r2, [pc, #28]	@ (8004004 <prvCheckForValidListAndQueue+0x54>)
 8003fe6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003fe8:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <prvCheckForValidListAndQueue+0x54>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ff0:	4b04      	ldr	r3, [pc, #16]	@ (8004004 <prvCheckForValidListAndQueue+0x54>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4908      	ldr	r1, [pc, #32]	@ (8004018 <prvCheckForValidListAndQueue+0x68>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fe48 	bl	8002c8c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ffc:	f000 f9ce 	bl	800439c <vPortExitCritical>
    }
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}
 8004004:	2000024c 	.word	0x2000024c
 8004008:	2000021c 	.word	0x2000021c
 800400c:	20000230 	.word	0x20000230
 8004010:	20000244 	.word	0x20000244
 8004014:	20000248 	.word	0x20000248
 8004018:	08007d34 	.word	0x08007d34

0800401c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3b04      	subs	r3, #4
 800402c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004034:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b04      	subs	r3, #4
 800403a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3b04      	subs	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800404c:	4a0c      	ldr	r2, [pc, #48]	@ (8004080 <pxPortInitialiseStack+0x64>)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3b14      	subs	r3, #20
 8004056:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b04      	subs	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f06f 0202 	mvn.w	r2, #2
 800406a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3b20      	subs	r3, #32
 8004070:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	08004085 	.word	0x08004085

08004084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800408e:	4b0e      	ldr	r3, [pc, #56]	@ (80040c8 <prvTaskExitError+0x44>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d003      	beq.n	80040a0 <prvTaskExitError+0x1c>
 8004098:	490c      	ldr	r1, [pc, #48]	@ (80040cc <prvTaskExitError+0x48>)
 800409a:	20e6      	movs	r0, #230	@ 0xe6
 800409c:	f7fc fcca 	bl	8000a34 <vAssertCalled>
        __asm volatile
 80040a0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	607b      	str	r3, [r7, #4]
    }
 80040b2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040b4:	bf00      	nop
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0fc      	beq.n	80040b6 <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000010 	.word	0x20000010
 80040cc:	08007d3c 	.word	0x08007d3c

080040d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040d0:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <pxCurrentTCBConst2>)
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	6808      	ldr	r0, [r1, #0]
 80040d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040da:	f380 8809 	msr	PSP, r0
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f380 8811 	msr	BASEPRI, r0
 80040ea:	4770      	bx	lr
 80040ec:	f3af 8000 	nop.w

080040f0 <pxCurrentTCBConst2>:
 80040f0:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop

080040f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040f8:	4808      	ldr	r0, [pc, #32]	@ (800411c <prvPortStartFirstTask+0x24>)
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	6800      	ldr	r0, [r0, #0]
 80040fe:	f380 8808 	msr	MSP, r0
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8814 	msr	CONTROL, r0
 800410a:	b662      	cpsie	i
 800410c:	b661      	cpsie	f
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	df00      	svc	0
 8004118:	bf00      	nop
 800411a:	0000      	.short	0x0000
 800411c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop

08004124 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800412a:	4b42      	ldr	r3, [pc, #264]	@ (8004234 <xPortStartScheduler+0x110>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a42      	ldr	r2, [pc, #264]	@ (8004238 <xPortStartScheduler+0x114>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d104      	bne.n	800413e <xPortStartScheduler+0x1a>
 8004134:	4941      	ldr	r1, [pc, #260]	@ (800423c <xPortStartScheduler+0x118>)
 8004136:	f240 102d 	movw	r0, #301	@ 0x12d
 800413a:	f7fc fc7b 	bl	8000a34 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800413e:	4b3d      	ldr	r3, [pc, #244]	@ (8004234 <xPortStartScheduler+0x110>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3f      	ldr	r2, [pc, #252]	@ (8004240 <xPortStartScheduler+0x11c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d104      	bne.n	8004152 <xPortStartScheduler+0x2e>
 8004148:	493c      	ldr	r1, [pc, #240]	@ (800423c <xPortStartScheduler+0x118>)
 800414a:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 800414e:	f7fc fc71 	bl	8000a34 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004152:	4b3c      	ldr	r3, [pc, #240]	@ (8004244 <xPortStartScheduler+0x120>)
 8004154:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	22ff      	movs	r2, #255	@ 0xff
 8004162:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b34      	ldr	r3, [pc, #208]	@ (8004248 <xPortStartScheduler+0x124>)
 8004178:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800417a:	4b34      	ldr	r3, [pc, #208]	@ (800424c <xPortStartScheduler+0x128>)
 800417c:	2207      	movs	r2, #7
 800417e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004180:	e009      	b.n	8004196 <xPortStartScheduler+0x72>
            {
                ulMaxPRIGROUPValue--;
 8004182:	4b32      	ldr	r3, [pc, #200]	@ (800424c <xPortStartScheduler+0x128>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3b01      	subs	r3, #1
 8004188:	4a30      	ldr	r2, [pc, #192]	@ (800424c <xPortStartScheduler+0x128>)
 800418a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419e:	2b80      	cmp	r3, #128	@ 0x80
 80041a0:	d0ef      	beq.n	8004182 <xPortStartScheduler+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80041a2:	4b2a      	ldr	r3, [pc, #168]	@ (800424c <xPortStartScheduler+0x128>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f1c3 0307 	rsb	r3, r3, #7
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d004      	beq.n	80041b8 <xPortStartScheduler+0x94>
 80041ae:	4923      	ldr	r1, [pc, #140]	@ (800423c <xPortStartScheduler+0x118>)
 80041b0:	f240 1057 	movw	r0, #343	@ 0x157
 80041b4:	f7fc fc3e 	bl	8000a34 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041b8:	4b24      	ldr	r3, [pc, #144]	@ (800424c <xPortStartScheduler+0x128>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1c3 0307 	rsb	r3, r3, #7
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d004      	beq.n	80041ce <xPortStartScheduler+0xaa>
 80041c4:	491d      	ldr	r1, [pc, #116]	@ (800423c <xPortStartScheduler+0x118>)
 80041c6:	f44f 70b0 	mov.w	r0, #352	@ 0x160
 80041ca:	f7fc fc33 	bl	8000a34 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041ce:	4b1f      	ldr	r3, [pc, #124]	@ (800424c <xPortStartScheduler+0x128>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <xPortStartScheduler+0x128>)
 80041d6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041d8:	4b1c      	ldr	r3, [pc, #112]	@ (800424c <xPortStartScheduler+0x128>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041e0:	4a1a      	ldr	r2, [pc, #104]	@ (800424c <xPortStartScheduler+0x128>)
 80041e2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041ec:	4b18      	ldr	r3, [pc, #96]	@ (8004250 <xPortStartScheduler+0x12c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a17      	ldr	r2, [pc, #92]	@ (8004250 <xPortStartScheduler+0x12c>)
 80041f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041f6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041f8:	4b15      	ldr	r3, [pc, #84]	@ (8004250 <xPortStartScheduler+0x12c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a14      	ldr	r2, [pc, #80]	@ (8004250 <xPortStartScheduler+0x12c>)
 80041fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004202:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004204:	f000 f952 	bl	80044ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004208:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <xPortStartScheduler+0x130>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800420e:	f000 f971 	bl	80044f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004212:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <xPortStartScheduler+0x134>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a10      	ldr	r2, [pc, #64]	@ (8004258 <xPortStartScheduler+0x134>)
 8004218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800421c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800421e:	f7ff ff6b 	bl	80040f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004222:	f7ff f89d 	bl	8003360 <vTaskSwitchContext>
    prvTaskExitError();
 8004226:	f7ff ff2d 	bl	8004084 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	e000ed00 	.word	0xe000ed00
 8004238:	410fc271 	.word	0x410fc271
 800423c:	08007d3c 	.word	0x08007d3c
 8004240:	410fc270 	.word	0x410fc270
 8004244:	e000e400 	.word	0xe000e400
 8004248:	20000258 	.word	0x20000258
 800424c:	2000025c 	.word	0x2000025c
 8004250:	e000ed20 	.word	0xe000ed20
 8004254:	20000010 	.word	0x20000010
 8004258:	e000ef34 	.word	0xe000ef34

0800425c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004262:	4b32      	ldr	r3, [pc, #200]	@ (800432c <vInitPrioGroupValue+0xd0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a32      	ldr	r2, [pc, #200]	@ (8004330 <vInitPrioGroupValue+0xd4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d104      	bne.n	8004276 <vInitPrioGroupValue+0x1a>
 800426c:	4931      	ldr	r1, [pc, #196]	@ (8004334 <vInitPrioGroupValue+0xd8>)
 800426e:	f240 109b 	movw	r0, #411	@ 0x19b
 8004272:	f7fc fbdf 	bl	8000a34 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004276:	4b2d      	ldr	r3, [pc, #180]	@ (800432c <vInitPrioGroupValue+0xd0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2f      	ldr	r2, [pc, #188]	@ (8004338 <vInitPrioGroupValue+0xdc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d104      	bne.n	800428a <vInitPrioGroupValue+0x2e>
 8004280:	492c      	ldr	r1, [pc, #176]	@ (8004334 <vInitPrioGroupValue+0xd8>)
 8004282:	f44f 70ce 	mov.w	r0, #412	@ 0x19c
 8004286:	f7fc fbd5 	bl	8000a34 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800428a:	4b2c      	ldr	r3, [pc, #176]	@ (800433c <vInitPrioGroupValue+0xe0>)
 800428c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	22ff      	movs	r2, #255	@ 0xff
 800429a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b24      	ldr	r3, [pc, #144]	@ (8004340 <vInitPrioGroupValue+0xe4>)
 80042b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042b8:	e009      	b.n	80042ce <vInitPrioGroupValue+0x72>
            {
                ulMaxPRIGROUPValue--;
 80042ba:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3b01      	subs	r3, #1
 80042c0:	4a20      	ldr	r2, [pc, #128]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 80042c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d6:	2b80      	cmp	r3, #128	@ 0x80
 80042d8:	d0ef      	beq.n	80042ba <vInitPrioGroupValue+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80042da:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1c3 0307 	rsb	r3, r3, #7
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d004      	beq.n	80042f0 <vInitPrioGroupValue+0x94>
 80042e6:	4913      	ldr	r1, [pc, #76]	@ (8004334 <vInitPrioGroupValue+0xd8>)
 80042e8:	f240 10c5 	movw	r0, #453	@ 0x1c5
 80042ec:	f7fc fba2 	bl	8000a34 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042f0:	4b14      	ldr	r3, [pc, #80]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1c3 0307 	rsb	r3, r3, #7
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d004      	beq.n	8004306 <vInitPrioGroupValue+0xaa>
 80042fc:	490d      	ldr	r1, [pc, #52]	@ (8004334 <vInitPrioGroupValue+0xd8>)
 80042fe:	f44f 70e7 	mov.w	r0, #462	@ 0x1ce
 8004302:	f7fc fb97 	bl	8000a34 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004306:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	4a0d      	ldr	r2, [pc, #52]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 800430e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004318:	4a0a      	ldr	r2, [pc, #40]	@ (8004344 <vInitPrioGroupValue+0xe8>)
 800431a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	e000ed00 	.word	0xe000ed00
 8004330:	410fc271 	.word	0x410fc271
 8004334:	08007d3c 	.word	0x08007d3c
 8004338:	410fc270 	.word	0x410fc270
 800433c:	e000e400 	.word	0xe000e400
 8004340:	20000258 	.word	0x20000258
 8004344:	2000025c 	.word	0x2000025c

08004348 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
        __asm volatile
 800434e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	607b      	str	r3, [r7, #4]
    }
 8004360:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004362:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <vPortEnterCritical+0x48>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3301      	adds	r3, #1
 8004368:	4a09      	ldr	r2, [pc, #36]	@ (8004390 <vPortEnterCritical+0x48>)
 800436a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800436c:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <vPortEnterCritical+0x48>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d109      	bne.n	8004388 <vPortEnterCritical+0x40>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004374:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <vPortEnterCritical+0x4c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <vPortEnterCritical+0x40>
 800437e:	4906      	ldr	r1, [pc, #24]	@ (8004398 <vPortEnterCritical+0x50>)
 8004380:	f44f 70f9 	mov.w	r0, #498	@ 0x1f2
 8004384:	f7fc fb56 	bl	8000a34 <vAssertCalled>
    }
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000010 	.word	0x20000010
 8004394:	e000ed04 	.word	0xe000ed04
 8004398:	08007d3c 	.word	0x08007d3c

0800439c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043a2:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <vPortExitCritical+0x40>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <vPortExitCritical+0x18>
 80043aa:	490d      	ldr	r1, [pc, #52]	@ (80043e0 <vPortExitCritical+0x44>)
 80043ac:	f240 10f9 	movw	r0, #505	@ 0x1f9
 80043b0:	f7fc fb40 	bl	8000a34 <vAssertCalled>
    uxCriticalNesting--;
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <vPortExitCritical+0x40>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	4a08      	ldr	r2, [pc, #32]	@ (80043dc <vPortExitCritical+0x40>)
 80043bc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043be:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <vPortExitCritical+0x40>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <vPortExitCritical+0x36>
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
        __asm volatile
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f383 8811 	msr	BASEPRI, r3
    }
 80043d0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000010 	.word	0x20000010
 80043e0:	08007d3c 	.word	0x08007d3c
	...

080043f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043f0:	f3ef 8009 	mrs	r0, PSP
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <pxCurrentTCBConst>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f01e 0f10 	tst.w	lr, #16
 8004400:	bf08      	it	eq
 8004402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440a:	6010      	str	r0, [r2, #0]
 800440c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004410:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004414:	f380 8811 	msr	BASEPRI, r0
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f7fe ff9e 	bl	8003360 <vTaskSwitchContext>
 8004424:	f04f 0000 	mov.w	r0, #0
 8004428:	f380 8811 	msr	BASEPRI, r0
 800442c:	bc09      	pop	{r0, r3}
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	6808      	ldr	r0, [r1, #0]
 8004432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004436:	f01e 0f10 	tst.w	lr, #16
 800443a:	bf08      	it	eq
 800443c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004440:	f380 8809 	msr	PSP, r0
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst>:
 8004450:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
        __asm volatile
 800445e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	607b      	str	r3, [r7, #4]
    }
 8004470:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004472:	f002 fa39 	bl	80068e8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004476:	f7fe fedd 	bl	8003234 <xTaskIncrementTick>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004480:	f002 fa90 	bl	80069a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004484:	4b08      	ldr	r3, [pc, #32]	@ (80044a8 <SysTick_Handler+0x50>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e001      	b.n	8004492 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800448e:	f002 fa6d 	bl	800696c <SEGGER_SYSVIEW_RecordExitISR>
 8004492:	2300      	movs	r3, #0
 8004494:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f383 8811 	msr	BASEPRI, r3
    }
 800449c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <vPortSetupTimerInterrupt+0x38>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	@ (80044e8 <vPortSetupTimerInterrupt+0x3c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <vPortSetupTimerInterrupt+0x40>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <vPortSetupTimerInterrupt+0x44>)
 80044ca:	3b01      	subs	r3, #1
 80044cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ce:	4b04      	ldr	r3, [pc, #16]	@ (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000e010 	.word	0xe000e010
 80044e4:	e000e018 	.word	0xe000e018
 80044e8:	20000000 	.word	0x20000000
 80044ec:	10624dd3 	.word	0x10624dd3
 80044f0:	e000e014 	.word	0xe000e014

080044f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004504 <vPortEnableVFP+0x10>
 80044f8:	6801      	ldr	r1, [r0, #0]
 80044fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80044fe:	6001      	str	r1, [r0, #0]
 8004500:	4770      	bx	lr
 8004502:	0000      	.short	0x0000
 8004504:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop

0800450c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004512:	f3ef 8305 	mrs	r3, IPSR
 8004516:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b0f      	cmp	r3, #15
 800451c:	d90e      	bls.n	800453c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800451e:	4a10      	ldr	r2, [pc, #64]	@ (8004560 <vPortValidateInterruptPriority+0x54>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004528:	4b0e      	ldr	r3, [pc, #56]	@ (8004564 <vPortValidateInterruptPriority+0x58>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	429a      	cmp	r2, r3
 8004530:	d204      	bcs.n	800453c <vPortValidateInterruptPriority+0x30>
 8004532:	490d      	ldr	r1, [pc, #52]	@ (8004568 <vPortValidateInterruptPriority+0x5c>)
 8004534:	f44f 7054 	mov.w	r0, #848	@ 0x350
 8004538:	f7fc fa7c 	bl	8000a34 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800453c:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <vPortValidateInterruptPriority+0x60>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004544:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <vPortValidateInterruptPriority+0x64>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d904      	bls.n	8004556 <vPortValidateInterruptPriority+0x4a>
 800454c:	4906      	ldr	r1, [pc, #24]	@ (8004568 <vPortValidateInterruptPriority+0x5c>)
 800454e:	f44f 7058 	mov.w	r0, #864	@ 0x360
 8004552:	f7fc fa6f 	bl	8000a34 <vAssertCalled>
    }
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	e000e3f0 	.word	0xe000e3f0
 8004564:	20000258 	.word	0x20000258
 8004568:	08007d3c 	.word	0x08007d3c
 800456c:	e000ed0c 	.word	0xe000ed0c
 8004570:	2000025c 	.word	0x2000025c

08004574 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8004580:	f7fe fd9a 	bl	80030b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004584:	4b5b      	ldr	r3, [pc, #364]	@ (80046f4 <pvPortMalloc+0x180>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800458c:	f000 f918 	bl	80047c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004590:	4b59      	ldr	r3, [pc, #356]	@ (80046f8 <pvPortMalloc+0x184>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	f040 809a 	bne.w	80046d2 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d027      	beq.n	80045f4 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045a4:	2208      	movs	r2, #8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d221      	bcs.n	80045f4 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 80045b0:	2208      	movs	r2, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01b      	beq.n	80045fa <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f023 0307 	bic.w	r3, r3, #7
 80045c8:	3308      	adds	r3, #8
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d20e      	bcs.n	80045ee <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f023 0307 	bic.w	r3, r3, #7
 80045d6:	3308      	adds	r3, #8
 80045d8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <pvPortMalloc+0x86>
 80045e4:	4945      	ldr	r1, [pc, #276]	@ (80046fc <pvPortMalloc+0x188>)
 80045e6:	209a      	movs	r0, #154	@ 0x9a
 80045e8:	f7fc fa24 	bl	8000a34 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045ec:	e005      	b.n	80045fa <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045f2:	e002      	b.n	80045fa <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	e000      	b.n	80045fc <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045fa:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d067      	beq.n	80046d2 <pvPortMalloc+0x15e>
 8004602:	4b3f      	ldr	r3, [pc, #252]	@ (8004700 <pvPortMalloc+0x18c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d862      	bhi.n	80046d2 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800460c:	4b3d      	ldr	r3, [pc, #244]	@ (8004704 <pvPortMalloc+0x190>)
 800460e:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8004610:	4b3c      	ldr	r3, [pc, #240]	@ (8004704 <pvPortMalloc+0x190>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004616:	e004      	b.n	8004622 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d903      	bls.n	8004634 <pvPortMalloc+0xc0>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f1      	bne.n	8004618 <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004634:	4b2f      	ldr	r3, [pc, #188]	@ (80046f4 <pvPortMalloc+0x180>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	429a      	cmp	r2, r3
 800463c:	d049      	beq.n	80046d2 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2208      	movs	r2, #8
 8004644:	4413      	add	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad2      	subs	r2, r2, r3
 8004658:	2308      	movs	r3, #8
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	429a      	cmp	r2, r3
 800465e:	d918      	bls.n	8004692 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <pvPortMalloc+0x106>
 8004672:	4922      	ldr	r1, [pc, #136]	@ (80046fc <pvPortMalloc+0x188>)
 8004674:	20cd      	movs	r0, #205	@ 0xcd
 8004676:	f7fc f9dd 	bl	8000a34 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	1ad2      	subs	r2, r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800468c:	68b8      	ldr	r0, [r7, #8]
 800468e:	f000 f8f9 	bl	8004884 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004692:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <pvPortMalloc+0x18c>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	4a18      	ldr	r2, [pc, #96]	@ (8004700 <pvPortMalloc+0x18c>)
 800469e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046a0:	4b17      	ldr	r3, [pc, #92]	@ (8004700 <pvPortMalloc+0x18c>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <pvPortMalloc+0x194>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d203      	bcs.n	80046b4 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046ac:	4b14      	ldr	r3, [pc, #80]	@ (8004700 <pvPortMalloc+0x18c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a15      	ldr	r2, [pc, #84]	@ (8004708 <pvPortMalloc+0x194>)
 80046b2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <pvPortMalloc+0x184>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	431a      	orrs	r2, r3
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046c8:	4b10      	ldr	r3, [pc, #64]	@ (800470c <pvPortMalloc+0x198>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a0f      	ldr	r2, [pc, #60]	@ (800470c <pvPortMalloc+0x198>)
 80046d0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046d2:	f7fe fcff 	bl	80030d4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <pvPortMalloc+0x176>
 80046e0:	4906      	ldr	r1, [pc, #24]	@ (80046fc <pvPortMalloc+0x188>)
 80046e2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80046e6:	f7fc f9a5 	bl	8000a34 <vAssertCalled>
    return pvReturn;
 80046ea:	68fb      	ldr	r3, [r7, #12]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2000ba68 	.word	0x2000ba68
 80046f8:	2000ba7c 	.word	0x2000ba7c
 80046fc:	08007d74 	.word	0x08007d74
 8004700:	2000ba6c 	.word	0x2000ba6c
 8004704:	2000ba60 	.word	0x2000ba60
 8004708:	2000ba70 	.word	0x2000ba70
 800470c:	2000ba74 	.word	0x2000ba74

08004710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d041      	beq.n	80047a6 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004722:	2308      	movs	r3, #8
 8004724:	425b      	negs	r3, r3
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <vPortFree+0xa0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <vPortFree+0x38>
 800473e:	491d      	ldr	r1, [pc, #116]	@ (80047b4 <vPortFree+0xa4>)
 8004740:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8004744:	f7fc f976 	bl	8000a34 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <vPortFree+0x4a>
 8004750:	4918      	ldr	r1, [pc, #96]	@ (80047b4 <vPortFree+0xa4>)
 8004752:	f240 1023 	movw	r0, #291	@ 0x123
 8004756:	f7fc f96d 	bl	8000a34 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <vPortFree+0xa0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01e      	beq.n	80047a6 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d11a      	bne.n	80047a6 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <vPortFree+0xa0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	43db      	mvns	r3, r3
 800477a:	401a      	ands	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004780:	f7fe fc9a 	bl	80030b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <vPortFree+0xa8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4413      	add	r3, r2
 800478e:	4a0a      	ldr	r2, [pc, #40]	@ (80047b8 <vPortFree+0xa8>)
 8004790:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004792:	68b8      	ldr	r0, [r7, #8]
 8004794:	f000 f876 	bl	8004884 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004798:	4b08      	ldr	r3, [pc, #32]	@ (80047bc <vPortFree+0xac>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	4a07      	ldr	r2, [pc, #28]	@ (80047bc <vPortFree+0xac>)
 80047a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80047a2:	f7fe fc97 	bl	80030d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	2000ba7c 	.word	0x2000ba7c
 80047b4:	08007d74 	.word	0x08007d74
 80047b8:	2000ba6c 	.word	0x2000ba6c
 80047bc:	2000ba78 	.word	0x2000ba78

080047c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047c6:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80047ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80047cc:	4b27      	ldr	r3, [pc, #156]	@ (800486c <prvHeapInit+0xac>)
 80047ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00c      	beq.n	80047f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3307      	adds	r3, #7
 80047de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	4a1f      	ldr	r2, [pc, #124]	@ (800486c <prvHeapInit+0xac>)
 80047f0:	4413      	add	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <prvHeapInit+0xb0>)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80047fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004870 <prvHeapInit+0xb0>)
 8004800:	2200      	movs	r2, #0
 8004802:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4413      	add	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800480c:	2208      	movs	r2, #8
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0307 	bic.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a15      	ldr	r2, [pc, #84]	@ (8004874 <prvHeapInit+0xb4>)
 8004820:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004822:	4b14      	ldr	r3, [pc, #80]	@ (8004874 <prvHeapInit+0xb4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800482a:	4b12      	ldr	r3, [pc, #72]	@ (8004874 <prvHeapInit+0xb4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	1ad2      	subs	r2, r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004840:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <prvHeapInit+0xb4>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <prvHeapInit+0xb8>)
 800484e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4a09      	ldr	r2, [pc, #36]	@ (800487c <prvHeapInit+0xbc>)
 8004856:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004858:	4b09      	ldr	r3, [pc, #36]	@ (8004880 <prvHeapInit+0xc0>)
 800485a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800485e:	601a      	str	r2, [r3, #0]
}
 8004860:	bf00      	nop
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	20000260 	.word	0x20000260
 8004870:	2000ba60 	.word	0x2000ba60
 8004874:	2000ba68 	.word	0x2000ba68
 8004878:	2000ba70 	.word	0x2000ba70
 800487c:	2000ba6c 	.word	0x2000ba6c
 8004880:	2000ba7c 	.word	0x2000ba7c

08004884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800488c:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <prvInsertBlockIntoFreeList+0xac>)
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e002      	b.n	8004898 <prvInsertBlockIntoFreeList+0x14>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d8f7      	bhi.n	8004892 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4413      	add	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d108      	bne.n	80048c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	441a      	add	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d118      	bne.n	800490c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <prvInsertBlockIntoFreeList+0xb0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d00d      	beq.n	8004902 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	441a      	add	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e008      	b.n	8004914 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004902:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <prvInsertBlockIntoFreeList+0xb0>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e003      	b.n	8004914 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d002      	beq.n	8004922 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	2000ba60 	.word	0x2000ba60
 8004934:	2000ba68 	.word	0x2000ba68

08004938 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800493c:	4803      	ldr	r0, [pc, #12]	@ (800494c <_cbSendSystemDesc+0x14>)
 800493e:	f001 ff7d 	bl	800683c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004942:	4803      	ldr	r0, [pc, #12]	@ (8004950 <_cbSendSystemDesc+0x18>)
 8004944:	f001 ff7a 	bl	800683c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	08007da8 	.word	0x08007da8
 8004950:	08007df0 	.word	0x08007df0

08004954 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <SEGGER_SYSVIEW_Conf+0x20>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <SEGGER_SYSVIEW_Conf+0x20>)
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <SEGGER_SYSVIEW_Conf+0x24>)
 8004962:	4a06      	ldr	r2, [pc, #24]	@ (800497c <SEGGER_SYSVIEW_Conf+0x28>)
 8004964:	f001 fae6 	bl	8005f34 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004968:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800496c:	f001 fb26 	bl	8005fbc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004970:	bf00      	nop
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000000 	.word	0x20000000
 8004978:	08004939 	.word	0x08004939
 800497c:	08007e8c 	.word	0x08007e8c

08004980 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004982:	b085      	sub	sp, #20
 8004984:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	e033      	b.n	80049f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800498c:	491e      	ldr	r1, [pc, #120]	@ (8004a08 <_cbSendTaskList+0x88>)
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	491a      	ldr	r1, [pc, #104]	@ (8004a08 <_cbSendTaskList+0x88>)
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	3304      	adds	r3, #4
 80049ac:	6819      	ldr	r1, [r3, #0]
 80049ae:	4c16      	ldr	r4, [pc, #88]	@ (8004a08 <_cbSendTaskList+0x88>)
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4423      	add	r3, r4
 80049bc:	3308      	adds	r3, #8
 80049be:	681c      	ldr	r4, [r3, #0]
 80049c0:	4d11      	ldr	r5, [pc, #68]	@ (8004a08 <_cbSendTaskList+0x88>)
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	442b      	add	r3, r5
 80049ce:	330c      	adds	r3, #12
 80049d0:	681d      	ldr	r5, [r3, #0]
 80049d2:	4e0d      	ldr	r6, [pc, #52]	@ (8004a08 <_cbSendTaskList+0x88>)
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4433      	add	r3, r6
 80049e0:	3310      	adds	r3, #16
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	462b      	mov	r3, r5
 80049e8:	4622      	mov	r2, r4
 80049ea:	f000 f8bd 	bl	8004b68 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3301      	adds	r3, #1
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <_cbSendTaskList+0x8c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3c6      	bcc.n	800498c <_cbSendTaskList+0xc>
  }
}
 80049fe:	bf00      	nop
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a08:	2000ba80 	.word	0x2000ba80
 8004a0c:	2000bb20 	.word	0x2000bb20

08004a10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004a18:	f7fe fbfa 	bl	8003210 <xTaskGetTickCountFromISR>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2200      	movs	r2, #0
 8004a20:	469a      	mov	sl, r3
 8004a22:	4693      	mov	fp, r2
 8004a24:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	f04f 0a00 	mov.w	sl, #0
 8004a34:	f04f 0b00 	mov.w	fp, #0
 8004a38:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004a3c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004a40:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004a44:	4652      	mov	r2, sl
 8004a46:	465b      	mov	r3, fp
 8004a48:	1a14      	subs	r4, r2, r0
 8004a4a:	eb63 0501 	sbc.w	r5, r3, r1
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	00ab      	lsls	r3, r5, #2
 8004a58:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004a5c:	00a2      	lsls	r2, r4, #2
 8004a5e:	4614      	mov	r4, r2
 8004a60:	461d      	mov	r5, r3
 8004a62:	eb14 0800 	adds.w	r8, r4, r0
 8004a66:	eb45 0901 	adc.w	r9, r5, r1
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a7e:	4690      	mov	r8, r2
 8004a80:	4699      	mov	r9, r3
 8004a82:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004a86:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004a98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004aa6:	2205      	movs	r2, #5
 8004aa8:	492b      	ldr	r1, [pc, #172]	@ (8004b58 <SYSVIEW_AddTask+0xc0>)
 8004aaa:	68b8      	ldr	r0, [r7, #8]
 8004aac:	f002 fc30 	bl	8007310 <memcmp>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04b      	beq.n	8004b4e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ab6:	4b29      	ldr	r3, [pc, #164]	@ (8004b5c <SYSVIEW_AddTask+0xc4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b07      	cmp	r3, #7
 8004abc:	d903      	bls.n	8004ac6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004abe:	4828      	ldr	r0, [pc, #160]	@ (8004b60 <SYSVIEW_AddTask+0xc8>)
 8004ac0:	f002 f9d8 	bl	8006e74 <SEGGER_SYSVIEW_Warn>
    return;
 8004ac4:	e044      	b.n	8004b50 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <SYSVIEW_AddTask+0xc4>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4926      	ldr	r1, [pc, #152]	@ (8004b64 <SYSVIEW_AddTask+0xcc>)
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ada:	4b20      	ldr	r3, [pc, #128]	@ (8004b5c <SYSVIEW_AddTask+0xc4>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4921      	ldr	r1, [pc, #132]	@ (8004b64 <SYSVIEW_AddTask+0xcc>)
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3304      	adds	r3, #4
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004af0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b5c <SYSVIEW_AddTask+0xc4>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	491b      	ldr	r1, [pc, #108]	@ (8004b64 <SYSVIEW_AddTask+0xcc>)
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	3308      	adds	r3, #8
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b06:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <SYSVIEW_AddTask+0xc4>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4916      	ldr	r1, [pc, #88]	@ (8004b64 <SYSVIEW_AddTask+0xcc>)
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	330c      	adds	r3, #12
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <SYSVIEW_AddTask+0xc4>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4910      	ldr	r1, [pc, #64]	@ (8004b64 <SYSVIEW_AddTask+0xcc>)
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3310      	adds	r3, #16
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <SYSVIEW_AddTask+0xc4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3301      	adds	r3, #1
 8004b38:	4a08      	ldr	r2, [pc, #32]	@ (8004b5c <SYSVIEW_AddTask+0xc4>)
 8004b3a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f80e 	bl	8004b68 <SYSVIEW_SendTaskInfo>
 8004b4c:	e000      	b.n	8004b50 <SYSVIEW_AddTask+0xb8>
    return;
 8004b4e:	bf00      	nop

}
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	08007e00 	.word	0x08007e00
 8004b5c:	2000bb20 	.word	0x2000bb20
 8004b60:	08007e08 	.word	0x08007e08
 8004b64:	2000ba80 	.word	0x2000ba80

08004b68 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004b76:	f107 0310 	add.w	r3, r7, #16
 8004b7a:	2218      	movs	r2, #24
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f002 fbd6 	bl	8007330 <memset>
  TaskInfo.TaskID     = TaskID;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004b98:	f107 0310 	add.w	r3, r7, #16
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fd55 	bl	800664c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ba2:	bf00      	nop
 8004ba4:	3728      	adds	r7, #40	@ 0x28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004bb2:	4b26      	ldr	r3, [pc, #152]	@ (8004c4c <_DoInit+0xa0>)
 8004bb4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004bb6:	22a8      	movs	r2, #168	@ 0xa8
 8004bb8:	2100      	movs	r1, #0
 8004bba:	6838      	ldr	r0, [r7, #0]
 8004bbc:	f002 fbb8 	bl	8007330 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4a20      	ldr	r2, [pc, #128]	@ (8004c50 <_DoInit+0xa4>)
 8004bd0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c54 <_DoInit+0xa8>)
 8004bd6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bde:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2200      	movs	r2, #0
 8004bea:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	4a16      	ldr	r2, [pc, #88]	@ (8004c50 <_DoInit+0xa4>)
 8004bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <_DoInit+0xac>)
 8004bfc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2210      	movs	r2, #16
 8004c02:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004c16:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	e00c      	b.n	8004c3a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1c3 030f 	rsb	r3, r3, #15
 8004c26:	4a0d      	ldr	r2, [pc, #52]	@ (8004c5c <_DoInit+0xb0>)
 8004c28:	5cd1      	ldrb	r1, [r2, r3]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	460a      	mov	r2, r1
 8004c32:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3301      	adds	r3, #1
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b0f      	cmp	r3, #15
 8004c3e:	d9ef      	bls.n	8004c20 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004c40:	f3bf 8f5f 	dmb	sy
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	2000bb24 	.word	0x2000bb24
 8004c50:	08007e58 	.word	0x08007e58
 8004c54:	2000bbcc 	.word	0x2000bbcc
 8004c58:	2000bfcc 	.word	0x2000bfcc
 8004c5c:	08007e94 	.word	0x08007e94

08004c60 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	@ 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d905      	bls.n	8004c90 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8e:	e007      	b.n	8004ca0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	1acb      	subs	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004caa:	4293      	cmp	r3, r2
 8004cac:	bf28      	it	cs
 8004cae:	4613      	movcs	r3, r2
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bf28      	it	cs
 8004cba:	4613      	movcs	r3, r2
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	6978      	ldr	r0, [r7, #20]
 8004cce:	f002 fb5d 	bl	800738c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004cd2:	6a3a      	ldr	r2, [r7, #32]
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	4413      	add	r3, r2
 8004cd8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	4413      	add	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	4413      	add	r3, r2
 8004cf0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d101      	bne.n	8004d00 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d00:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1b2      	bne.n	8004c76 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004d10:	6a3b      	ldr	r3, [r7, #32]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3728      	adds	r7, #40	@ 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d911      	bls.n	8004d62 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	6938      	ldr	r0, [r7, #16]
 8004d4e:	f002 fb1d 	bl	800738c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d52:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	441a      	add	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004d60:	e01f      	b.n	8004da2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	6938      	ldr	r0, [r7, #16]
 8004d76:	f002 fb09 	bl	800738c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4619      	mov	r1, r3
 8004d92:	6938      	ldr	r0, [r7, #16]
 8004d94:	f002 fafa 	bl	800738c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d98:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	60da      	str	r2, [r3, #12]
}
 8004da2:	bf00      	nop
 8004da4:	3720      	adds	r7, #32
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004daa:	b480      	push	{r7}
 8004dac:	b087      	sub	sp, #28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d808      	bhi.n	8004dd8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad2      	subs	r2, r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e004      	b.n	8004de2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004de2:	697b      	ldr	r3, [r7, #20]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08c      	sub	sp, #48	@ 0x30
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b53      	cmp	r3, #83	@ 0x53
 8004e08:	d001      	beq.n	8004e0e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004e0a:	f7ff fecf 	bl	8004bac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	4a37      	ldr	r2, [pc, #220]	@ (8004ef8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e30:	2300      	movs	r3, #0
 8004e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d92b      	bls.n	8004e94 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	bf28      	it	cs
 8004e4e:	4613      	movcs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e58:	4413      	add	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	6939      	ldr	r1, [r7, #16]
 8004e60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e62:	f002 fa93 	bl	800738c <memcpy>
    NumBytesRead += NumBytesRem;
 8004e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4413      	add	r3, r2
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d101      	bne.n	8004e94 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004e90:	2300      	movs	r3, #0
 8004e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	bf28      	it	cs
 8004ea4:	4613      	movcs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d019      	beq.n	8004ee2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb4:	4413      	add	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	6939      	ldr	r1, [r7, #16]
 8004ebc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ebe:	f002 fa65 	bl	800738c <memcpy>
    NumBytesRead += NumBytesRem;
 8004ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004eda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4413      	add	r3, r2
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3730      	adds	r7, #48	@ 0x30
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	2000bb24 	.word	0x2000bb24

08004efc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	@ 0x30
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f08:	4b3e      	ldr	r3, [pc, #248]	@ (8005004 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b53      	cmp	r3, #83	@ 0x53
 8004f14:	d001      	beq.n	8004f1a <SEGGER_RTT_ReadNoLock+0x1e>
 8004f16:	f7ff fe49 	bl	8004bac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	3360      	adds	r3, #96	@ 0x60
 8004f26:	4a37      	ldr	r2, [pc, #220]	@ (8005004 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f28:	4413      	add	r3, r2
 8004f2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d92b      	bls.n	8004fa0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4293      	cmp	r3, r2
 8004f58:	bf28      	it	cs
 8004f5a:	4613      	movcs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	4413      	add	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	6939      	ldr	r1, [r7, #16]
 8004f6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f6e:	f002 fa0d 	bl	800738c <memcpy>
    NumBytesRead += NumBytesRem;
 8004f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d101      	bne.n	8004fa0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4293      	cmp	r3, r2
 8004fae:	bf28      	it	cs
 8004fb0:	4613      	movcs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d019      	beq.n	8004fee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	4413      	add	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	6939      	ldr	r1, [r7, #16]
 8004fc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fca:	f002 f9df 	bl	800738c <memcpy>
    NumBytesRead += NumBytesRem;
 8004fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4413      	add	r3, r2
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ff8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3730      	adds	r7, #48	@ 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	2000bb24 	.word	0x2000bb24

08005008 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	3360      	adds	r3, #96	@ 0x60
 8005024:	4a1f      	ldr	r2, [pc, #124]	@ (80050a4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005026:	4413      	add	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d029      	beq.n	8005086 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005032:	2b02      	cmp	r3, #2
 8005034:	d82e      	bhi.n	8005094 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800503a:	2b01      	cmp	r3, #1
 800503c:	d013      	beq.n	8005066 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800503e:	e029      	b.n	8005094 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005040:	6978      	ldr	r0, [r7, #20]
 8005042:	f7ff feb2 	bl	8004daa <_GetAvailWriteSpace>
 8005046:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	d202      	bcs.n	8005056 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005054:	e021      	b.n	800509a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	69b9      	ldr	r1, [r7, #24]
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f7ff fe5b 	bl	8004d1a <_WriteNoCheck>
    break;
 8005064:	e019      	b.n	800509a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005066:	6978      	ldr	r0, [r7, #20]
 8005068:	f7ff fe9f 	bl	8004daa <_GetAvailWriteSpace>
 800506c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4293      	cmp	r3, r2
 8005074:	bf28      	it	cs
 8005076:	4613      	movcs	r3, r2
 8005078:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f7ff fe4b 	bl	8004d1a <_WriteNoCheck>
    break;
 8005084:	e009      	b.n	800509a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	6978      	ldr	r0, [r7, #20]
 800508c:	f7ff fde8 	bl	8004c60 <_WriteBlocking>
 8005090:	61f8      	str	r0, [r7, #28]
    break;
 8005092:	e002      	b.n	800509a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
    break;
 8005098:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800509a:	69fb      	ldr	r3, [r7, #28]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	2000bb24 	.word	0x2000bb24

080050a8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80050b4:	4b0e      	ldr	r3, [pc, #56]	@ (80050f0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b53      	cmp	r3, #83	@ 0x53
 80050c0:	d001      	beq.n	80050c6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80050c2:	f7ff fd73 	bl	8004bac <_DoInit>
  SEGGER_RTT_LOCK();
 80050c6:	f3ef 8311 	mrs	r3, BASEPRI
 80050ca:	f04f 0120 	mov.w	r1, #32
 80050ce:	f381 8811 	msr	BASEPRI, r1
 80050d2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff ff95 	bl	8005008 <SEGGER_RTT_WriteDownBufferNoLock>
 80050de:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80050e6:	697b      	ldr	r3, [r7, #20]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2000bb24 	.word	0x2000bb24

080050f4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005102:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b53      	cmp	r3, #83	@ 0x53
 800510e:	d001      	beq.n	8005114 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005110:	f7ff fd4c 	bl	8004bac <_DoInit>
  SEGGER_RTT_LOCK();
 8005114:	f3ef 8311 	mrs	r3, BASEPRI
 8005118:	f04f 0120 	mov.w	r1, #32
 800511c:	f381 8811 	msr	BASEPRI, r1
 8005120:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005122:	4b35      	ldr	r3, [pc, #212]	@ (80051f8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005124:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800512a:	6939      	ldr	r1, [r7, #16]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	4613      	mov	r3, r2
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	4413      	add	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	440b      	add	r3, r1
 800513a:	3304      	adds	r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3301      	adds	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	429a      	cmp	r2, r3
 8005150:	dbeb      	blt.n	800512a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005152:	e000      	b.n	8005156 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005154:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	429a      	cmp	r2, r3
 800515e:	da3f      	bge.n	80051e0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005174:	6939      	ldr	r1, [r7, #16]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	440b      	add	r3, r1
 8005184:	3304      	adds	r3, #4
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800518a:	6939      	ldr	r1, [r7, #16]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	3320      	adds	r3, #32
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	3328      	adds	r3, #40	@ 0x28
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051b2:	6939      	ldr	r1, [r7, #16]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	440b      	add	r3, r1
 80051c0:	3324      	adds	r3, #36	@ 0x24
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051c6:	6939      	ldr	r1, [r7, #16]
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	332c      	adds	r3, #44	@ 0x2c
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051da:	f3bf 8f5f 	dmb	sy
 80051de:	e002      	b.n	80051e6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295
 80051e4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051ec:	69fb      	ldr	r3, [r7, #28]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	2000bb24 	.word	0x2000bb24

080051fc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	@ 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800520a:	4b21      	ldr	r3, [pc, #132]	@ (8005290 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b53      	cmp	r3, #83	@ 0x53
 8005216:	d001      	beq.n	800521c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005218:	f7ff fcc8 	bl	8004bac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800521c:	4b1c      	ldr	r3, [pc, #112]	@ (8005290 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800521e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d82c      	bhi.n	8005280 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005226:	f3ef 8311 	mrs	r3, BASEPRI
 800522a:	f04f 0120 	mov.w	r1, #32
 800522e:	f381 8811 	msr	BASEPRI, r1
 8005232:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4613      	mov	r3, r2
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	3360      	adds	r3, #96	@ 0x60
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00e      	beq.n	800526a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005270:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
 800527e:	e002      	b.n	8005286 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	@ 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	2000bb24 	.word	0x2000bb24

08005294 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	60fa      	str	r2, [r7, #12]
 80052aa:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b80      	cmp	r3, #128	@ 0x80
 80052b0:	d90a      	bls.n	80052c8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80052b2:	2380      	movs	r3, #128	@ 0x80
 80052b4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80052b6:	e007      	b.n	80052c8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	1c53      	adds	r3, r2, #1
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1c59      	adds	r1, r3, #1
 80052c2:	60f9      	str	r1, [r7, #12]
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1e5a      	subs	r2, r3, #1
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <_EncodeStr+0x46>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1ee      	bne.n	80052b8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3307      	adds	r3, #7
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005312:	4b34      	ldr	r3, [pc, #208]	@ (80053e4 <_HandleIncomingPacket+0xd8>)
 8005314:	7e1b      	ldrb	r3, [r3, #24]
 8005316:	4618      	mov	r0, r3
 8005318:	1cfb      	adds	r3, r7, #3
 800531a:	2201      	movs	r2, #1
 800531c:	4619      	mov	r1, r3
 800531e:	f7ff fded 	bl	8004efc <SEGGER_RTT_ReadNoLock>
 8005322:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d057      	beq.n	80053da <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	2b80      	cmp	r3, #128	@ 0x80
 800532e:	d031      	beq.n	8005394 <_HandleIncomingPacket+0x88>
 8005330:	2b80      	cmp	r3, #128	@ 0x80
 8005332:	dc40      	bgt.n	80053b6 <_HandleIncomingPacket+0xaa>
 8005334:	2b07      	cmp	r3, #7
 8005336:	dc15      	bgt.n	8005364 <_HandleIncomingPacket+0x58>
 8005338:	2b00      	cmp	r3, #0
 800533a:	dd3c      	ble.n	80053b6 <_HandleIncomingPacket+0xaa>
 800533c:	3b01      	subs	r3, #1
 800533e:	2b06      	cmp	r3, #6
 8005340:	d839      	bhi.n	80053b6 <_HandleIncomingPacket+0xaa>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <_HandleIncomingPacket+0x3c>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800536b 	.word	0x0800536b
 800534c:	08005371 	.word	0x08005371
 8005350:	08005377 	.word	0x08005377
 8005354:	0800537d 	.word	0x0800537d
 8005358:	08005383 	.word	0x08005383
 800535c:	08005389 	.word	0x08005389
 8005360:	0800538f 	.word	0x0800538f
 8005364:	2b7f      	cmp	r3, #127	@ 0x7f
 8005366:	d033      	beq.n	80053d0 <_HandleIncomingPacket+0xc4>
 8005368:	e025      	b.n	80053b6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800536a:	f000 fff3 	bl	8006354 <SEGGER_SYSVIEW_Start>
      break;
 800536e:	e034      	b.n	80053da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005370:	f001 f8ac 	bl	80064cc <SEGGER_SYSVIEW_Stop>
      break;
 8005374:	e031      	b.n	80053da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005376:	f001 fa85 	bl	8006884 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800537a:	e02e      	b.n	80053da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800537c:	f001 fa4a 	bl	8006814 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005380:	e02b      	b.n	80053da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005382:	f001 f8c9 	bl	8006518 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005386:	e028      	b.n	80053da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005388:	f001 fd22 	bl	8006dd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800538c:	e025      	b.n	80053da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800538e:	f001 fd01 	bl	8006d94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005392:	e022      	b.n	80053da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005394:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <_HandleIncomingPacket+0xd8>)
 8005396:	7e1b      	ldrb	r3, [r3, #24]
 8005398:	4618      	mov	r0, r3
 800539a:	1cfb      	adds	r3, r7, #3
 800539c:	2201      	movs	r2, #1
 800539e:	4619      	mov	r1, r3
 80053a0:	f7ff fdac 	bl	8004efc <SEGGER_RTT_ReadNoLock>
 80053a4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 fc66 	bl	8006c80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053b4:	e00e      	b.n	80053d4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	da0c      	bge.n	80053d8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053be:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <_HandleIncomingPacket+0xd8>)
 80053c0:	7e1b      	ldrb	r3, [r3, #24]
 80053c2:	4618      	mov	r0, r3
 80053c4:	1cfb      	adds	r3, r7, #3
 80053c6:	2201      	movs	r2, #1
 80053c8:	4619      	mov	r1, r3
 80053ca:	f7ff fd97 	bl	8004efc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053ce:	e003      	b.n	80053d8 <_HandleIncomingPacket+0xcc>
      break;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <_HandleIncomingPacket+0xce>
      break;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <_HandleIncomingPacket+0xce>
      break;
 80053d8:	bf00      	nop
    }
  }
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	2000cfe4 	.word	0x2000cfe4

080053e8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	@ 0x30
 80053ec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053ee:	2301      	movs	r3, #1
 80053f0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053fc:	4b32      	ldr	r3, [pc, #200]	@ (80054c8 <_TrySendOverflowPacket+0xe0>)
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005402:	e00b      	b.n	800541c <_TrySendOverflowPacket+0x34>
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	b2da      	uxtb	r2, r3
 8005408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800540e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	09db      	lsrs	r3, r3, #7
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005420:	d8f0      	bhi.n	8005404 <_TrySendOverflowPacket+0x1c>
 8005422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005430:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005432:	4b26      	ldr	r3, [pc, #152]	@ (80054cc <_TrySendOverflowPacket+0xe4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005438:	4b23      	ldr	r3, [pc, #140]	@ (80054c8 <_TrySendOverflowPacket+0xe0>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	e00b      	b.n	8005464 <_TrySendOverflowPacket+0x7c>
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	b2da      	uxtb	r2, r3
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	1c59      	adds	r1, r3, #1
 8005454:	6279      	str	r1, [r7, #36]	@ 0x24
 8005456:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	09db      	lsrs	r3, r3, #7
 8005462:	623b      	str	r3, [r7, #32]
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	2b7f      	cmp	r3, #127	@ 0x7f
 8005468:	d8f0      	bhi.n	800544c <_TrySendOverflowPacket+0x64>
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800547a:	4b13      	ldr	r3, [pc, #76]	@ (80054c8 <_TrySendOverflowPacket+0xe0>)
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	4618      	mov	r0, r3
 8005480:	1d3b      	adds	r3, r7, #4
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	461a      	mov	r2, r3
 8005488:	1d3b      	adds	r3, r7, #4
 800548a:	4619      	mov	r1, r3
 800548c:	f7fa fed8 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005490:	4603      	mov	r3, r0
 8005492:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005494:	f001 fe80 	bl	8007198 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800549e:	4a0a      	ldr	r2, [pc, #40]	@ (80054c8 <_TrySendOverflowPacket+0xe0>)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054a4:	4b08      	ldr	r3, [pc, #32]	@ (80054c8 <_TrySendOverflowPacket+0xe0>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <_TrySendOverflowPacket+0xe0>)
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	e004      	b.n	80054bc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054b2:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <_TrySendOverflowPacket+0xe0>)
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	3301      	adds	r3, #1
 80054b8:	4a03      	ldr	r2, [pc, #12]	@ (80054c8 <_TrySendOverflowPacket+0xe0>)
 80054ba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054bc:	693b      	ldr	r3, [r7, #16]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3730      	adds	r7, #48	@ 0x30
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000cfe4 	.word	0x2000cfe4
 80054cc:	e0001004 	.word	0xe0001004

080054d0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	@ 0x28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054dc:	4b96      	ldr	r3, [pc, #600]	@ (8005738 <_SendPacket+0x268>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d010      	beq.n	8005506 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054e4:	4b94      	ldr	r3, [pc, #592]	@ (8005738 <_SendPacket+0x268>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8130 	beq.w	800574e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054ee:	4b92      	ldr	r3, [pc, #584]	@ (8005738 <_SendPacket+0x268>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d109      	bne.n	800550a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80054f6:	f7ff ff77 	bl	80053e8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005738 <_SendPacket+0x268>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	f040 8127 	bne.w	8005752 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005504:	e001      	b.n	800550a <_SendPacket+0x3a>
    goto Send;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <_SendPacket+0x3c>
Send:
 800550a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b1f      	cmp	r3, #31
 8005510:	d809      	bhi.n	8005526 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005512:	4b89      	ldr	r3, [pc, #548]	@ (8005738 <_SendPacket+0x268>)
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	f040 8118 	bne.w	8005756 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b17      	cmp	r3, #23
 800552a:	d807      	bhi.n	800553c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3b01      	subs	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e0c4      	b.n	80056c6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b7f      	cmp	r3, #127	@ 0x7f
 8005548:	d912      	bls.n	8005570 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	09da      	lsrs	r2, r3, #7
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3b01      	subs	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	3a01      	subs	r2, #1
 8005562:	60fa      	str	r2, [r7, #12]
 8005564:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	e006      	b.n	800557e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3b01      	subs	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b7e      	cmp	r3, #126	@ 0x7e
 8005582:	d807      	bhi.n	8005594 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3b01      	subs	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	b2da      	uxtb	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	e098      	b.n	80056c6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559a:	d212      	bcs.n	80055c2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	09da      	lsrs	r2, r3, #7
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	3a01      	subs	r2, #1
 80055b4:	60fa      	str	r2, [r7, #12]
 80055b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e081      	b.n	80056c6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055c8:	d21d      	bcs.n	8005606 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	0b9a      	lsrs	r2, r3, #14
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	09db      	lsrs	r3, r3, #7
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	3a01      	subs	r2, #1
 80055e4:	60fa      	str	r2, [r7, #12]
 80055e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	3a01      	subs	r2, #1
 80055f8:	60fa      	str	r2, [r7, #12]
 80055fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e05f      	b.n	80056c6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800560c:	d228      	bcs.n	8005660 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0d5a      	lsrs	r2, r3, #21
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3b01      	subs	r3, #1
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0b9b      	lsrs	r3, r3, #14
 8005622:	b2db      	uxtb	r3, r3
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	3a01      	subs	r2, #1
 8005628:	60fa      	str	r2, [r7, #12]
 800562a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	09db      	lsrs	r3, r3, #7
 8005638:	b2db      	uxtb	r3, r3
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	3a01      	subs	r2, #1
 800563e:	60fa      	str	r2, [r7, #12]
 8005640:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	3a01      	subs	r2, #1
 8005652:	60fa      	str	r2, [r7, #12]
 8005654:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e032      	b.n	80056c6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0f1a      	lsrs	r2, r3, #28
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3b01      	subs	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	0d5b      	lsrs	r3, r3, #21
 8005674:	b2db      	uxtb	r3, r3
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	3a01      	subs	r2, #1
 800567a:	60fa      	str	r2, [r7, #12]
 800567c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	0b9b      	lsrs	r3, r3, #14
 800568a:	b2db      	uxtb	r3, r3
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	3a01      	subs	r2, #1
 8005690:	60fa      	str	r2, [r7, #12]
 8005692:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	09db      	lsrs	r3, r3, #7
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	3a01      	subs	r2, #1
 80056a6:	60fa      	str	r2, [r7, #12]
 80056a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	3a01      	subs	r2, #1
 80056ba:	60fa      	str	r2, [r7, #12]
 80056bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056c6:	4b1d      	ldr	r3, [pc, #116]	@ (800573c <_SendPacket+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005738 <_SendPacket+0x268>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	e00b      	b.n	80056f8 <_SendPacket+0x228>
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	1c59      	adds	r1, r3, #1
 80056e8:	6279      	str	r1, [r7, #36]	@ 0x24
 80056ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	09db      	lsrs	r3, r3, #7
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80056fc:	d8f0      	bhi.n	80056e0 <_SendPacket+0x210>
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	627a      	str	r2, [r7, #36]	@ 0x24
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800570e:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <_SendPacket+0x268>)
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	4618      	mov	r0, r3
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	461a      	mov	r2, r3
 800571c:	68f9      	ldr	r1, [r7, #12]
 800571e:	f7fa fd8f 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005722:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005724:	f001 fd38 	bl	8007198 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800572e:	4a02      	ldr	r2, [pc, #8]	@ (8005738 <_SendPacket+0x268>)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	60d3      	str	r3, [r2, #12]
 8005734:	e010      	b.n	8005758 <_SendPacket+0x288>
 8005736:	bf00      	nop
 8005738:	2000cfe4 	.word	0x2000cfe4
 800573c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005740:	4b19      	ldr	r3, [pc, #100]	@ (80057a8 <_SendPacket+0x2d8>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <_SendPacket+0x2d8>)
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	e004      	b.n	8005758 <_SendPacket+0x288>
    goto SendDone;
 800574e:	bf00      	nop
 8005750:	e002      	b.n	8005758 <_SendPacket+0x288>
      goto SendDone;
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <_SendPacket+0x288>
      goto SendDone;
 8005756:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005758:	4b13      	ldr	r3, [pc, #76]	@ (80057a8 <_SendPacket+0x2d8>)
 800575a:	7e1b      	ldrb	r3, [r3, #24]
 800575c:	4619      	mov	r1, r3
 800575e:	4a13      	ldr	r2, [pc, #76]	@ (80057ac <_SendPacket+0x2dc>)
 8005760:	460b      	mov	r3, r1
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	440b      	add	r3, r1
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	336c      	adds	r3, #108	@ 0x6c
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b0e      	ldr	r3, [pc, #56]	@ (80057a8 <_SendPacket+0x2d8>)
 8005770:	7e1b      	ldrb	r3, [r3, #24]
 8005772:	4618      	mov	r0, r3
 8005774:	490d      	ldr	r1, [pc, #52]	@ (80057ac <_SendPacket+0x2dc>)
 8005776:	4603      	mov	r3, r0
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4403      	add	r3, r0
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	3370      	adds	r3, #112	@ 0x70
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d00b      	beq.n	80057a0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005788:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <_SendPacket+0x2d8>)
 800578a:	789b      	ldrb	r3, [r3, #2]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d107      	bne.n	80057a0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <_SendPacket+0x2d8>)
 8005792:	2201      	movs	r2, #1
 8005794:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005796:	f7ff fdb9 	bl	800530c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800579a:	4b03      	ldr	r3, [pc, #12]	@ (80057a8 <_SendPacket+0x2d8>)
 800579c:	2200      	movs	r2, #0
 800579e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057a0:	bf00      	nop
 80057a2:	3728      	adds	r7, #40	@ 0x28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	2000cfe4 	.word	0x2000cfe4
 80057ac:	2000bb24 	.word	0x2000bb24

080057b0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	@ 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	3301      	adds	r3, #1
 80057c6:	2b80      	cmp	r3, #128	@ 0x80
 80057c8:	d80a      	bhi.n	80057e0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	1c59      	adds	r1, r3, #1
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6051      	str	r1, [r2, #4]
 80057d4:	78fa      	ldrb	r2, [r7, #3]
 80057d6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b80      	cmp	r3, #128	@ 0x80
 80057e6:	d15a      	bne.n	800589e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	627b      	str	r3, [r7, #36]	@ 0x24
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	e00b      	b.n	8005822 <_StoreChar+0x72>
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	1c59      	adds	r1, r3, #1
 8005812:	6279      	str	r1, [r7, #36]	@ 0x24
 8005814:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	09db      	lsrs	r3, r3, #7
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b7f      	cmp	r3, #127	@ 0x7f
 8005826:	d8f0      	bhi.n	800580a <_StoreChar+0x5a>
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	627a      	str	r2, [r7, #36]	@ 0x24
 800582e:	6a3a      	ldr	r2, [r7, #32]
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
 8005840:	e00b      	b.n	800585a <_StoreChar+0xaa>
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	1c59      	adds	r1, r3, #1
 800584a:	61f9      	str	r1, [r7, #28]
 800584c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	09db      	lsrs	r3, r3, #7
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b7f      	cmp	r3, #127	@ 0x7f
 800585e:	d8f0      	bhi.n	8005842 <_StoreChar+0x92>
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	61fa      	str	r2, [r7, #28]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	221a      	movs	r2, #26
 8005876:	6939      	ldr	r1, [r7, #16]
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff fe29 	bl	80054d0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fd36 	bl	80052f4 <_PreparePacket>
 8005888:	4602      	mov	r2, r0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	611a      	str	r2, [r3, #16]
  }
}
 800589e:	bf00      	nop
 80058a0:	3728      	adds	r7, #40	@ 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	@ 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80058ba:	2301      	movs	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80058be:	2301      	movs	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058c2:	e007      	b.n	80058d4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80058c4:	6a3a      	ldr	r2, [r7, #32]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	623b      	str	r3, [r7, #32]
    Width++;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	3301      	adds	r3, #1
 80058d2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d2f3      	bcs.n	80058c4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d901      	bls.n	80058e8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80058e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d000      	beq.n	80058f4 <_PrintUnsigned+0x4c>
 80058f2:	e01f      	b.n	8005934 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80058f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01c      	beq.n	8005934 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80058fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <_PrintUnsigned+0x68>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <_PrintUnsigned+0x68>
        c = '0';
 800590a:	2330      	movs	r3, #48	@ 0x30
 800590c:	76fb      	strb	r3, [r7, #27]
 800590e:	e001      	b.n	8005914 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005910:	2320      	movs	r3, #32
 8005912:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005914:	e007      	b.n	8005926 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	3b01      	subs	r3, #1
 800591a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800591c:	7efb      	ldrb	r3, [r7, #27]
 800591e:	4619      	mov	r1, r3
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7ff ff45 	bl	80057b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <_PrintUnsigned+0x8c>
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	429a      	cmp	r2, r3
 8005932:	d3f0      	bcc.n	8005916 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d903      	bls.n	8005942 <_PrintUnsigned+0x9a>
      NumDigits--;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	3b01      	subs	r3, #1
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	e009      	b.n	8005956 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d200      	bcs.n	8005956 <_PrintUnsigned+0xae>
        break;
 8005954:	e005      	b.n	8005962 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005960:	e7e8      	b.n	8005934 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800597a:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <_PrintUnsigned+0x128>)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff ff13 	bl	80057b0 <_StoreChar>
    Digit /= Base;
 800598a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d011      	beq.n	80059c8 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00e      	beq.n	80059c8 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059aa:	e006      	b.n	80059ba <_PrintUnsigned+0x112>
        FieldWidth--;
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	3b01      	subs	r3, #1
 80059b0:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80059b2:	2120      	movs	r1, #32
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fefb 	bl	80057b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <_PrintUnsigned+0x120>
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d3f1      	bcc.n	80059ac <_PrintUnsigned+0x104>
      }
    }
  }
}
 80059c8:	bf00      	nop
 80059ca:	3728      	adds	r7, #40	@ 0x28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	08007eb4 	.word	0x08007eb4

080059d4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfb8      	it	lt
 80059e8:	425b      	neglt	r3, r3
 80059ea:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80059ec:	2301      	movs	r3, #1
 80059ee:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059f0:	e007      	b.n	8005a02 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80059fa:	613b      	str	r3, [r7, #16]
    Width++;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	3301      	adds	r3, #1
 8005a00:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	daf3      	bge.n	80059f2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d901      	bls.n	8005a16 <_PrintInt+0x42>
    Width = NumDigits;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <_PrintInt+0x5e>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db04      	blt.n	8005a2c <_PrintInt+0x58>
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <_PrintInt+0x5e>
    FieldWidth--;
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <_PrintInt+0x6e>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d016      	beq.n	8005a70 <_PrintInt+0x9c>
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d111      	bne.n	8005a70 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00e      	beq.n	8005a70 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a52:	e006      	b.n	8005a62 <_PrintInt+0x8e>
        FieldWidth--;
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a5a:	2120      	movs	r1, #32
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7ff fea7 	bl	80057b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <_PrintInt+0x9c>
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3f1      	bcc.n	8005a54 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da07      	bge.n	8005a86 <_PrintInt+0xb2>
    v = -v;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	425b      	negs	r3, r3
 8005a7a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005a7c:	212d      	movs	r1, #45	@ 0x2d
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff fe96 	bl	80057b0 <_StoreChar>
 8005a84:	e008      	b.n	8005a98 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005a90:	212b      	movs	r1, #43	@ 0x2b
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff fe8c 	bl	80057b0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d019      	beq.n	8005ad6 <_PrintInt+0x102>
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d114      	bne.n	8005ad6 <_PrintInt+0x102>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d111      	bne.n	8005ad6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00e      	beq.n	8005ad6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab8:	e006      	b.n	8005ac8 <_PrintInt+0xf4>
        FieldWidth--;
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005ac0:	2130      	movs	r1, #48	@ 0x30
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fe74 	bl	80057b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <_PrintInt+0x102>
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d3f1      	bcc.n	8005aba <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff fedf 	bl	80058a8 <_PrintUnsigned>
}
 8005aea:	bf00      	nop
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b098      	sub	sp, #96	@ 0x60
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b00:	f3ef 8311 	mrs	r3, BASEPRI
 8005b04:	f04f 0120 	mov.w	r1, #32
 8005b08:	f381 8811 	msr	BASEPRI, r1
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b0e:	48b7      	ldr	r0, [pc, #732]	@ (8005dec <_VPrintTarget+0x2f8>)
 8005b10:	f7ff fbf0 	bl	80052f4 <_PreparePacket>
 8005b14:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b16:	4bb5      	ldr	r3, [pc, #724]	@ (8005dec <_VPrintTarget+0x2f8>)
 8005b18:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	3301      	adds	r3, #1
 8005b26:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 81a8 	beq.w	8005e94 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005b44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b48:	2b25      	cmp	r3, #37	@ 0x25
 8005b4a:	f040 8195 	bne.w	8005e78 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b62:	3b23      	subs	r3, #35	@ 0x23
 8005b64:	2b0d      	cmp	r3, #13
 8005b66:	d83f      	bhi.n	8005be8 <_VPrintTarget+0xf4>
 8005b68:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <_VPrintTarget+0x7c>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005bd9 	.word	0x08005bd9
 8005b74:	08005be9 	.word	0x08005be9
 8005b78:	08005be9 	.word	0x08005be9
 8005b7c:	08005be9 	.word	0x08005be9
 8005b80:	08005be9 	.word	0x08005be9
 8005b84:	08005be9 	.word	0x08005be9
 8005b88:	08005be9 	.word	0x08005be9
 8005b8c:	08005be9 	.word	0x08005be9
 8005b90:	08005bc9 	.word	0x08005bc9
 8005b94:	08005be9 	.word	0x08005be9
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005be9 	.word	0x08005be9
 8005ba0:	08005be9 	.word	0x08005be9
 8005ba4:	08005bb9 	.word	0x08005bb9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e01a      	b.n	8005bee <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bba:	f043 0302 	orr.w	r3, r3, #2
 8005bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e012      	b.n	8005bee <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bca:	f043 0304 	orr.w	r3, r3, #4
 8005bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e00a      	b.n	8005bee <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bda:	f043 0308 	orr.w	r3, r3, #8
 8005bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e002      	b.n	8005bee <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005be8:	2300      	movs	r3, #0
 8005bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bec:	bf00      	nop
        }
      } while (v);
 8005bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1b0      	bne.n	8005b56 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005c00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c04:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c06:	d912      	bls.n	8005c2e <_VPrintTarget+0x13a>
 8005c08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c0c:	2b39      	cmp	r3, #57	@ 0x39
 8005c0e:	d80e      	bhi.n	8005c2e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	461a      	mov	r2, r3
 8005c22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c26:	4413      	add	r3, r2
 8005c28:	3b30      	subs	r3, #48	@ 0x30
 8005c2a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005c2c:	e7e4      	b.n	8005bf8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005c3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c40:	d11d      	bne.n	8005c7e <_VPrintTarget+0x18a>
        sFormat++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3301      	adds	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005c50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c54:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c56:	d912      	bls.n	8005c7e <_VPrintTarget+0x18a>
 8005c58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c5c:	2b39      	cmp	r3, #57	@ 0x39
 8005c5e:	d80e      	bhi.n	8005c7e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	461a      	mov	r2, r3
 8005c72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c76:	4413      	add	r3, r2
 8005c78:	3b30      	subs	r3, #48	@ 0x30
 8005c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005c7c:	e7e4      	b.n	8005c48 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005c86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c8a:	2b6c      	cmp	r3, #108	@ 0x6c
 8005c8c:	d003      	beq.n	8005c96 <_VPrintTarget+0x1a2>
 8005c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c92:	2b68      	cmp	r3, #104	@ 0x68
 8005c94:	d107      	bne.n	8005ca6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005ca4:	e7ef      	b.n	8005c86 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005caa:	2b25      	cmp	r3, #37	@ 0x25
 8005cac:	f000 80d8 	beq.w	8005e60 <_VPrintTarget+0x36c>
 8005cb0:	2b25      	cmp	r3, #37	@ 0x25
 8005cb2:	f2c0 80dc 	blt.w	8005e6e <_VPrintTarget+0x37a>
 8005cb6:	2b78      	cmp	r3, #120	@ 0x78
 8005cb8:	f300 80d9 	bgt.w	8005e6e <_VPrintTarget+0x37a>
 8005cbc:	2b58      	cmp	r3, #88	@ 0x58
 8005cbe:	f2c0 80d6 	blt.w	8005e6e <_VPrintTarget+0x37a>
 8005cc2:	3b58      	subs	r3, #88	@ 0x58
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	f200 80d2 	bhi.w	8005e6e <_VPrintTarget+0x37a>
 8005cca:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <_VPrintTarget+0x1dc>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005dc7 	.word	0x08005dc7
 8005cd4:	08005e6f 	.word	0x08005e6f
 8005cd8:	08005e6f 	.word	0x08005e6f
 8005cdc:	08005e6f 	.word	0x08005e6f
 8005ce0:	08005e6f 	.word	0x08005e6f
 8005ce4:	08005e6f 	.word	0x08005e6f
 8005ce8:	08005e6f 	.word	0x08005e6f
 8005cec:	08005e6f 	.word	0x08005e6f
 8005cf0:	08005e6f 	.word	0x08005e6f
 8005cf4:	08005e6f 	.word	0x08005e6f
 8005cf8:	08005e6f 	.word	0x08005e6f
 8005cfc:	08005d55 	.word	0x08005d55
 8005d00:	08005d7b 	.word	0x08005d7b
 8005d04:	08005e6f 	.word	0x08005e6f
 8005d08:	08005e6f 	.word	0x08005e6f
 8005d0c:	08005e6f 	.word	0x08005e6f
 8005d10:	08005e6f 	.word	0x08005e6f
 8005d14:	08005e6f 	.word	0x08005e6f
 8005d18:	08005e6f 	.word	0x08005e6f
 8005d1c:	08005e6f 	.word	0x08005e6f
 8005d20:	08005e6f 	.word	0x08005e6f
 8005d24:	08005e6f 	.word	0x08005e6f
 8005d28:	08005e6f 	.word	0x08005e6f
 8005d2c:	08005e6f 	.word	0x08005e6f
 8005d30:	08005e3b 	.word	0x08005e3b
 8005d34:	08005e6f 	.word	0x08005e6f
 8005d38:	08005e6f 	.word	0x08005e6f
 8005d3c:	08005df1 	.word	0x08005df1
 8005d40:	08005e6f 	.word	0x08005e6f
 8005d44:	08005da1 	.word	0x08005da1
 8005d48:	08005e6f 	.word	0x08005e6f
 8005d4c:	08005e6f 	.word	0x08005e6f
 8005d50:	08005dc7 	.word	0x08005dc7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	1d19      	adds	r1, r3, #4
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005d68:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005d6c:	f107 0310 	add.w	r3, r7, #16
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fd1c 	bl	80057b0 <_StoreChar>
        break;
 8005d78:	e07a      	b.n	8005e70 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	1d19      	adds	r1, r3, #4
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6011      	str	r1, [r2, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d88:	f107 0010 	add.w	r0, r7, #16
 8005d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d96:	220a      	movs	r2, #10
 8005d98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d9a:	f7ff fe1b 	bl	80059d4 <_PrintInt>
        break;
 8005d9e:	e067      	b.n	8005e70 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	1d19      	adds	r1, r3, #4
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005dae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005db0:	f107 0010 	add.w	r0, r7, #16
 8005db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	f7ff fd72 	bl	80058a8 <_PrintUnsigned>
        break;
 8005dc4:	e054      	b.n	8005e70 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	1d19      	adds	r1, r3, #4
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6011      	str	r1, [r2, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005dd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005dd6:	f107 0010 	add.w	r0, r7, #16
 8005dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de4:	2210      	movs	r2, #16
 8005de6:	f7ff fd5f 	bl	80058a8 <_PrintUnsigned>
        break;
 8005dea:	e041      	b.n	8005e70 <_VPrintTarget+0x37c>
 8005dec:	2000d014 	.word	0x2000d014
      case 's':
        s = va_arg(*pParamList, const char*);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	1d19      	adds	r1, r3, #4
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6011      	str	r1, [r2, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <_VPrintTarget+0x314>
          s = "(null)";
 8005e04:	4b4a      	ldr	r3, [pc, #296]	@ (8005f30 <_VPrintTarget+0x43c>)
 8005e06:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e12:	3301      	adds	r3, #1
 8005e14:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005e16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005e1e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005e22:	f107 0310 	add.w	r3, r7, #16
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fcc1 	bl	80057b0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e32:	d9e9      	bls.n	8005e08 <_VPrintTarget+0x314>
        break;
 8005e34:	e01c      	b.n	8005e70 <_VPrintTarget+0x37c>
            break;
 8005e36:	bf00      	nop
        break;
 8005e38:	e01a      	b.n	8005e70 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	1d19      	adds	r1, r3, #4
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6011      	str	r1, [r2, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e4a:	f107 0010 	add.w	r0, r7, #16
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	2308      	movs	r3, #8
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2308      	movs	r3, #8
 8005e58:	2210      	movs	r2, #16
 8005e5a:	f7ff fd25 	bl	80058a8 <_PrintUnsigned>
        break;
 8005e5e:	e007      	b.n	8005e70 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e60:	f107 0310 	add.w	r3, r7, #16
 8005e64:	2125      	movs	r1, #37	@ 0x25
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fca2 	bl	80057b0 <_StoreChar>
        break;
 8005e6c:	e000      	b.n	8005e70 <_VPrintTarget+0x37c>
      default:
        break;
 8005e6e:	bf00      	nop
      }
      sFormat++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e007      	b.n	8005e88 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e78:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff fc94 	bl	80057b0 <_StoreChar>
    }
  } while (*sFormat);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f47f ae4d 	bne.w	8005b2c <_VPrintTarget+0x38>
 8005e92:	e000      	b.n	8005e96 <_VPrintTarget+0x3a2>
      break;
 8005e94:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d041      	beq.n	8005f20 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005e9c:	6a3a      	ldr	r2, [r7, #32]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005eac:	e00b      	b.n	8005ec6 <_VPrintTarget+0x3d2>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005eb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec2:	09db      	lsrs	r3, r3, #7
 8005ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eca:	d8f0      	bhi.n	8005eae <_VPrintTarget+0x3ba>
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ed2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eda:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ee4:	e00b      	b.n	8005efe <_VPrintTarget+0x40a>
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eec:	1c59      	adds	r1, r3, #1
 8005eee:	6379      	str	r1, [r7, #52]	@ 0x34
 8005ef0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	09db      	lsrs	r3, r3, #7
 8005efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f02:	d8f0      	bhi.n	8005ee6 <_VPrintTarget+0x3f2>
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	637a      	str	r2, [r7, #52]	@ 0x34
 8005f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f12:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	6979      	ldr	r1, [r7, #20]
 8005f18:	221a      	movs	r2, #26
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fad8 	bl	80054d0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f22:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f26:	bf00      	nop
 8005f28:	3758      	adds	r7, #88	@ 0x58
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	08007e64 	.word	0x08007e64

08005f34 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f42:	2300      	movs	r3, #0
 8005f44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f48:	4917      	ldr	r1, [pc, #92]	@ (8005fa8 <SEGGER_SYSVIEW_Init+0x74>)
 8005f4a:	4818      	ldr	r0, [pc, #96]	@ (8005fac <SEGGER_SYSVIEW_Init+0x78>)
 8005f4c:	f7ff f8d2 	bl	80050f4 <SEGGER_RTT_AllocUpBuffer>
 8005f50:	4603      	mov	r3, r0
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	4b16      	ldr	r3, [pc, #88]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f56:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f58:	4b15      	ldr	r3, [pc, #84]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f5a:	785a      	ldrb	r2, [r3, #1]
 8005f5c:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f5e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f60:	4b13      	ldr	r3, [pc, #76]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f62:	7e1b      	ldrb	r3, [r3, #24]
 8005f64:	4618      	mov	r0, r3
 8005f66:	2300      	movs	r3, #0
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	4a11      	ldr	r2, [pc, #68]	@ (8005fb4 <SEGGER_SYSVIEW_Init+0x80>)
 8005f6e:	490f      	ldr	r1, [pc, #60]	@ (8005fac <SEGGER_SYSVIEW_Init+0x78>)
 8005f70:	f7ff f944 	bl	80051fc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f74:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x84>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f80:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f82:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f88:	4a09      	ldr	r2, [pc, #36]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f8e:	4a08      	ldr	r2, [pc, #32]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f94:	4a06      	ldr	r2, [pc, #24]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f9a:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	2000bfdc 	.word	0x2000bfdc
 8005fac:	08007e6c 	.word	0x08007e6c
 8005fb0:	2000cfe4 	.word	0x2000cfe4
 8005fb4:	2000cfdc 	.word	0x2000cfdc
 8005fb8:	e0001004 	.word	0xe0001004

08005fbc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005fc4:	4a04      	ldr	r2, [pc, #16]	@ (8005fd8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6113      	str	r3, [r2, #16]
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	2000cfe4 	.word	0x2000cfe4

08005fdc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe8:	f04f 0120 	mov.w	r1, #32
 8005fec:	f381 8811 	msr	BASEPRI, r1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	4808      	ldr	r0, [pc, #32]	@ (8006014 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ff4:	f7ff f97e 	bl	80052f4 <_PreparePacket>
 8005ff8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	68b8      	ldr	r0, [r7, #8]
 8006000:	f7ff fa66 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f383 8811 	msr	BASEPRI, r3
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	2000d014 	.word	0x2000d014

08006018 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006022:	f3ef 8311 	mrs	r3, BASEPRI
 8006026:	f04f 0120 	mov.w	r1, #32
 800602a:	f381 8811 	msr	BASEPRI, r1
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	4816      	ldr	r0, [pc, #88]	@ (800608c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006032:	f7ff f95f 	bl	80052f4 <_PreparePacket>
 8006036:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	e00b      	b.n	800605e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	b2da      	uxtb	r2, r3
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	1c59      	adds	r1, r3, #1
 800604e:	61f9      	str	r1, [r7, #28]
 8006050:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	09db      	lsrs	r3, r3, #7
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b7f      	cmp	r3, #127	@ 0x7f
 8006062:	d8f0      	bhi.n	8006046 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	61fa      	str	r2, [r7, #28]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	6938      	ldr	r0, [r7, #16]
 800607a:	f7ff fa29 	bl	80054d0 <_SendPacket>
  RECORD_END();
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f383 8811 	msr	BASEPRI, r3
}
 8006084:	bf00      	nop
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	2000d014 	.word	0x2000d014

08006090 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b08c      	sub	sp, #48	@ 0x30
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800609c:	f3ef 8311 	mrs	r3, BASEPRI
 80060a0:	f04f 0120 	mov.w	r1, #32
 80060a4:	f381 8811 	msr	BASEPRI, r1
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	4825      	ldr	r0, [pc, #148]	@ (8006140 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80060ac:	f7ff f922 	bl	80052f4 <_PreparePacket>
 80060b0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060be:	e00b      	b.n	80060d8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c6:	1c59      	adds	r1, r3, #1
 80060c8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d4:	09db      	lsrs	r3, r3, #7
 80060d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	2b7f      	cmp	r3, #127	@ 0x7f
 80060dc:	d8f0      	bhi.n	80060c0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80060de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	623b      	str	r3, [r7, #32]
 80060f6:	e00b      	b.n	8006110 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	6279      	str	r1, [r7, #36]	@ 0x24
 8006102:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	09db      	lsrs	r3, r3, #7
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	2b7f      	cmp	r3, #127	@ 0x7f
 8006114:	d8f0      	bhi.n	80060f8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	627a      	str	r2, [r7, #36]	@ 0x24
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	6979      	ldr	r1, [r7, #20]
 800612a:	69b8      	ldr	r0, [r7, #24]
 800612c:	f7ff f9d0 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f383 8811 	msr	BASEPRI, r3
}
 8006136:	bf00      	nop
 8006138:	3730      	adds	r7, #48	@ 0x30
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	2000d014 	.word	0x2000d014

08006144 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b08e      	sub	sp, #56	@ 0x38
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006152:	f3ef 8311 	mrs	r3, BASEPRI
 8006156:	f04f 0120 	mov.w	r1, #32
 800615a:	f381 8811 	msr	BASEPRI, r1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	4832      	ldr	r0, [pc, #200]	@ (800622c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006162:	f7ff f8c7 	bl	80052f4 <_PreparePacket>
 8006166:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	633b      	str	r3, [r7, #48]	@ 0x30
 8006174:	e00b      	b.n	800618e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	b2da      	uxtb	r2, r3
 800617a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	6379      	str	r1, [r7, #52]	@ 0x34
 8006180:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	09db      	lsrs	r3, r3, #7
 800618c:	633b      	str	r3, [r7, #48]	@ 0x30
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	2b7f      	cmp	r3, #127	@ 0x7f
 8006192:	d8f0      	bhi.n	8006176 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	637a      	str	r2, [r7, #52]	@ 0x34
 800619a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ac:	e00b      	b.n	80061c6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b4:	1c59      	adds	r1, r3, #1
 80061b6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	09db      	lsrs	r3, r3, #7
 80061c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80061ca:	d8f0      	bhi.n	80061ae <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	623b      	str	r3, [r7, #32]
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	6279      	str	r1, [r7, #36]	@ 0x24
 80061f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2b7f      	cmp	r3, #127	@ 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	627a      	str	r2, [r7, #36]	@ 0x24
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	69b8      	ldr	r0, [r7, #24]
 800621a:	f7ff f959 	bl	80054d0 <_SendPacket>
  RECORD_END();
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f383 8811 	msr	BASEPRI, r3
}
 8006224:	bf00      	nop
 8006226:	3738      	adds	r7, #56	@ 0x38
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	2000d014 	.word	0x2000d014

08006230 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b090      	sub	sp, #64	@ 0x40
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800623e:	f3ef 8311 	mrs	r3, BASEPRI
 8006242:	f04f 0120 	mov.w	r1, #32
 8006246:	f381 8811 	msr	BASEPRI, r1
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	4840      	ldr	r0, [pc, #256]	@ (8006350 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800624e:	f7ff f851 	bl	80052f4 <_PreparePacket>
 8006252:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006260:	e00b      	b.n	800627a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	b2da      	uxtb	r2, r3
 8006266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800626c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800627a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627c:	2b7f      	cmp	r3, #127	@ 0x7f
 800627e:	d8f0      	bhi.n	8006262 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006286:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	637b      	str	r3, [r7, #52]	@ 0x34
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	633b      	str	r3, [r7, #48]	@ 0x30
 8006298:	e00b      	b.n	80062b2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a0:	1c59      	adds	r1, r3, #1
 80062a2:	6379      	str	r1, [r7, #52]	@ 0x34
 80062a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ae:	09db      	lsrs	r3, r3, #7
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062b6:	d8f0      	bhi.n	800629a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80062b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80062be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062d0:	e00b      	b.n	80062ea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80062dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	09db      	lsrs	r3, r3, #7
 80062e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ee:	d8f0      	bhi.n	80062d2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
 8006304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	e00b      	b.n	8006322 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	6279      	str	r1, [r7, #36]	@ 0x24
 8006314:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	623b      	str	r3, [r7, #32]
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	2b7f      	cmp	r3, #127	@ 0x7f
 8006326:	d8f0      	bhi.n	800630a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	627a      	str	r2, [r7, #36]	@ 0x24
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	6979      	ldr	r1, [r7, #20]
 800633c:	69b8      	ldr	r0, [r7, #24]
 800633e:	f7ff f8c7 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f383 8811 	msr	BASEPRI, r3
}
 8006348:	bf00      	nop
 800634a:	3740      	adds	r7, #64	@ 0x40
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	2000d014 	.word	0x2000d014

08006354 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006354:	b580      	push	{r7, lr}
 8006356:	b08c      	sub	sp, #48	@ 0x30
 8006358:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800635a:	4b59      	ldr	r3, [pc, #356]	@ (80064c0 <SEGGER_SYSVIEW_Start+0x16c>)
 800635c:	2201      	movs	r2, #1
 800635e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006360:	f3ef 8311 	mrs	r3, BASEPRI
 8006364:	f04f 0120 	mov.w	r1, #32
 8006368:	f381 8811 	msr	BASEPRI, r1
 800636c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800636e:	4b54      	ldr	r3, [pc, #336]	@ (80064c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	220a      	movs	r2, #10
 8006374:	4953      	ldr	r1, [pc, #332]	@ (80064c4 <SEGGER_SYSVIEW_Start+0x170>)
 8006376:	4618      	mov	r0, r3
 8006378:	f7f9 ff62 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006382:	f000 ff09 	bl	8007198 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006386:	200a      	movs	r0, #10
 8006388:	f7ff fe28 	bl	8005fdc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800638c:	f3ef 8311 	mrs	r3, BASEPRI
 8006390:	f04f 0120 	mov.w	r1, #32
 8006394:	f381 8811 	msr	BASEPRI, r1
 8006398:	60bb      	str	r3, [r7, #8]
 800639a:	484b      	ldr	r0, [pc, #300]	@ (80064c8 <SEGGER_SYSVIEW_Start+0x174>)
 800639c:	f7fe ffaa 	bl	80052f4 <_PreparePacket>
 80063a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063aa:	4b45      	ldr	r3, [pc, #276]	@ (80064c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063b0:	e00b      	b.n	80063ca <SEGGER_SYSVIEW_Start+0x76>
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b8:	1c59      	adds	r1, r3, #1
 80063ba:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80063bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	09db      	lsrs	r3, r3, #7
 80063c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ce:	d8f0      	bhi.n	80063b2 <SEGGER_SYSVIEW_Start+0x5e>
 80063d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e4:	4b36      	ldr	r3, [pc, #216]	@ (80064c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	e00b      	b.n	8006404 <SEGGER_SYSVIEW_Start+0xb0>
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80063f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	09db      	lsrs	r3, r3, #7
 8006402:	623b      	str	r3, [r7, #32]
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	2b7f      	cmp	r3, #127	@ 0x7f
 8006408:	d8f0      	bhi.n	80063ec <SEGGER_SYSVIEW_Start+0x98>
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006410:	6a3a      	ldr	r2, [r7, #32]
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	4b28      	ldr	r3, [pc, #160]	@ (80064c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_Start+0xea>
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	61f9      	str	r1, [r7, #28]
 8006430:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b7f      	cmp	r3, #127	@ 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_Start+0xd2>
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	61fa      	str	r2, [r7, #28]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	2300      	movs	r3, #0
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	e00b      	b.n	8006476 <SEGGER_SYSVIEW_Start+0x122>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	1c59      	adds	r1, r3, #1
 8006466:	6179      	str	r1, [r7, #20]
 8006468:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	09db      	lsrs	r3, r3, #7
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b7f      	cmp	r3, #127	@ 0x7f
 800647a:	d8f0      	bhi.n	800645e <SEGGER_SYSVIEW_Start+0x10a>
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	617a      	str	r2, [r7, #20]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800648c:	2218      	movs	r2, #24
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff f81d 	bl	80054d0 <_SendPacket>
      RECORD_END();
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800649c:	4b08      	ldr	r3, [pc, #32]	@ (80064c0 <SEGGER_SYSVIEW_Start+0x16c>)
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80064a4:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80064aa:	f000 f9eb 	bl	8006884 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80064ae:	f000 f9b1 	bl	8006814 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80064b2:	f000 fc8d 	bl	8006dd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80064b6:	bf00      	nop
 80064b8:	3730      	adds	r7, #48	@ 0x30
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	2000cfe4 	.word	0x2000cfe4
 80064c4:	08007ea8 	.word	0x08007ea8
 80064c8:	2000d014 	.word	0x2000d014

080064cc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064d2:	f3ef 8311 	mrs	r3, BASEPRI
 80064d6:	f04f 0120 	mov.w	r1, #32
 80064da:	f381 8811 	msr	BASEPRI, r1
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	480b      	ldr	r0, [pc, #44]	@ (8006510 <SEGGER_SYSVIEW_Stop+0x44>)
 80064e2:	f7fe ff07 	bl	80052f4 <_PreparePacket>
 80064e6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80064e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006514 <SEGGER_SYSVIEW_Stop+0x48>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064f0:	220b      	movs	r2, #11
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f7fe ffeb 	bl	80054d0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80064fa:	4b06      	ldr	r3, [pc, #24]	@ (8006514 <SEGGER_SYSVIEW_Stop+0x48>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f383 8811 	msr	BASEPRI, r3
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	2000d014 	.word	0x2000d014
 8006514:	2000cfe4 	.word	0x2000cfe4

08006518 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b08c      	sub	sp, #48	@ 0x30
 800651c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800651e:	f3ef 8311 	mrs	r3, BASEPRI
 8006522:	f04f 0120 	mov.w	r1, #32
 8006526:	f381 8811 	msr	BASEPRI, r1
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	4845      	ldr	r0, [pc, #276]	@ (8006644 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800652e:	f7fe fee1 	bl	80052f4 <_PreparePacket>
 8006532:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653c:	4b42      	ldr	r3, [pc, #264]	@ (8006648 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006542:	e00b      	b.n	800655c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	b2da      	uxtb	r2, r3
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800654e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	09db      	lsrs	r3, r3, #7
 800655a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800655c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006560:	d8f0      	bhi.n	8006544 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006570:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	627b      	str	r3, [r7, #36]	@ 0x24
 8006576:	4b34      	ldr	r3, [pc, #208]	@ (8006648 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	e00b      	b.n	8006596 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	1c59      	adds	r1, r3, #1
 8006586:	6279      	str	r1, [r7, #36]	@ 0x24
 8006588:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	09db      	lsrs	r3, r3, #7
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2b7f      	cmp	r3, #127	@ 0x7f
 800659a:	d8f0      	bhi.n	800657e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80065a2:	6a3a      	ldr	r2, [r7, #32]
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	4b25      	ldr	r3, [pc, #148]	@ (8006648 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	e00b      	b.n	80065d0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	1c59      	adds	r1, r3, #1
 80065c0:	61f9      	str	r1, [r7, #28]
 80065c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	09db      	lsrs	r3, r3, #7
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80065d4:	d8f0      	bhi.n	80065b8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	61fa      	str	r2, [r7, #28]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	e00b      	b.n	8006608 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1c59      	adds	r1, r3, #1
 80065f8:	6179      	str	r1, [r7, #20]
 80065fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	09db      	lsrs	r3, r3, #7
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b7f      	cmp	r3, #127	@ 0x7f
 800660c:	d8f0      	bhi.n	80065f0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	617a      	str	r2, [r7, #20]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800661e:	2218      	movs	r2, #24
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f7fe ff54 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800662e:	4b06      	ldr	r3, [pc, #24]	@ (8006648 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006636:	4b04      	ldr	r3, [pc, #16]	@ (8006648 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	4798      	blx	r3
  }
}
 800663c:	bf00      	nop
 800663e:	3730      	adds	r7, #48	@ 0x30
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	2000d014 	.word	0x2000d014
 8006648:	2000cfe4 	.word	0x2000cfe4

0800664c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b092      	sub	sp, #72	@ 0x48
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006654:	f3ef 8311 	mrs	r3, BASEPRI
 8006658:	f04f 0120 	mov.w	r1, #32
 800665c:	f381 8811 	msr	BASEPRI, r1
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	486a      	ldr	r0, [pc, #424]	@ (800680c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006664:	f7fe fe46 	bl	80052f4 <_PreparePacket>
 8006668:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	647b      	str	r3, [r7, #68]	@ 0x44
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4b66      	ldr	r3, [pc, #408]	@ (8006810 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	643b      	str	r3, [r7, #64]	@ 0x40
 800667e:	e00b      	b.n	8006698 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006682:	b2da      	uxtb	r2, r3
 8006684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	6479      	str	r1, [r7, #68]	@ 0x44
 800668a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006694:	09db      	lsrs	r3, r3, #7
 8006696:	643b      	str	r3, [r7, #64]	@ 0x40
 8006698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800669a:	2b7f      	cmp	r3, #127	@ 0x7f
 800669c:	d8f0      	bhi.n	8006680 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800669e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80066a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066b8:	e00b      	b.n	80066d2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c0:	1c59      	adds	r1, r3, #1
 80066c2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80066c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ce:	09db      	lsrs	r3, r3, #7
 80066d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80066d6:	d8f0      	bhi.n	80066ba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	4619      	mov	r1, r3
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7fe fdcf 	bl	8005294 <_EncodeStr>
 80066f6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80066f8:	2209      	movs	r2, #9
 80066fa:	68f9      	ldr	r1, [r7, #12]
 80066fc:	6938      	ldr	r0, [r7, #16]
 80066fe:	f7fe fee7 	bl	80054d0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4b40      	ldr	r3, [pc, #256]	@ (8006810 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	633b      	str	r3, [r7, #48]	@ 0x30
 8006716:	e00b      	b.n	8006730 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	b2da      	uxtb	r2, r3
 800671c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671e:	1c59      	adds	r1, r3, #1
 8006720:	6379      	str	r1, [r7, #52]	@ 0x34
 8006722:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	09db      	lsrs	r3, r3, #7
 800672e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	2b7f      	cmp	r3, #127	@ 0x7f
 8006734:	d8f0      	bhi.n	8006718 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	637a      	str	r2, [r7, #52]	@ 0x34
 800673c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006744:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006750:	e00b      	b.n	800676a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	1c59      	adds	r1, r3, #1
 800675a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800675c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	09db      	lsrs	r3, r3, #7
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	2b7f      	cmp	r3, #127	@ 0x7f
 800676e:	d8f0      	bhi.n	8006752 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	e00b      	b.n	80067a4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	6279      	str	r1, [r7, #36]	@ 0x24
 8006796:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	09db      	lsrs	r3, r3, #7
 80067a2:	623b      	str	r3, [r7, #32]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80067a8:	d8f0      	bhi.n	800678c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e00b      	b.n	80067de <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	61f9      	str	r1, [r7, #28]
 80067d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	09db      	lsrs	r3, r3, #7
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80067e2:	d8f0      	bhi.n	80067c6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	61fa      	str	r2, [r7, #28]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067f4:	2215      	movs	r2, #21
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	6938      	ldr	r0, [r7, #16]
 80067fa:	f7fe fe69 	bl	80054d0 <_SendPacket>
  RECORD_END();
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f383 8811 	msr	BASEPRI, r3
}
 8006804:	bf00      	nop
 8006806:	3748      	adds	r7, #72	@ 0x48
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	2000d014 	.word	0x2000d014
 8006810:	2000cfe4 	.word	0x2000cfe4

08006814 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006818:	4b07      	ldr	r3, [pc, #28]	@ (8006838 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800682a:	4b03      	ldr	r3, [pc, #12]	@ (8006838 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4798      	blx	r3
  }
}
 8006832:	bf00      	nop
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	2000cfe4 	.word	0x2000cfe4

0800683c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006844:	f3ef 8311 	mrs	r3, BASEPRI
 8006848:	f04f 0120 	mov.w	r1, #32
 800684c:	f381 8811 	msr	BASEPRI, r1
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	480b      	ldr	r0, [pc, #44]	@ (8006880 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006854:	f7fe fd4e 	bl	80052f4 <_PreparePacket>
 8006858:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800685a:	2280      	movs	r2, #128	@ 0x80
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	6938      	ldr	r0, [r7, #16]
 8006860:	f7fe fd18 	bl	8005294 <_EncodeStr>
 8006864:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006866:	220e      	movs	r2, #14
 8006868:	68f9      	ldr	r1, [r7, #12]
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f7fe fe30 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f383 8811 	msr	BASEPRI, r3
}
 8006876:	bf00      	nop
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	2000d014 	.word	0x2000d014

08006884 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800688a:	4b15      	ldr	r3, [pc, #84]	@ (80068e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01a      	beq.n	80068c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006892:	4b13      	ldr	r3, [pc, #76]	@ (80068e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d015      	beq.n	80068c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800689c:	4b10      	ldr	r3, [pc, #64]	@ (80068e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4798      	blx	r3
 80068a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80068aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	000a      	movs	r2, r1
 80068b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068ba:	4613      	mov	r3, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	4621      	mov	r1, r4
 80068c0:	200d      	movs	r0, #13
 80068c2:	f7ff fbe5 	bl	8006090 <SEGGER_SYSVIEW_RecordU32x2>
 80068c6:	e006      	b.n	80068d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068c8:	4b06      	ldr	r3, [pc, #24]	@ (80068e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4619      	mov	r1, r3
 80068ce:	200c      	movs	r0, #12
 80068d0:	f7ff fba2 	bl	8006018 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd90      	pop	{r4, r7, pc}
 80068de:	bf00      	nop
 80068e0:	2000cfe4 	.word	0x2000cfe4
 80068e4:	e0001004 	.word	0xe0001004

080068e8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068ee:	f3ef 8311 	mrs	r3, BASEPRI
 80068f2:	f04f 0120 	mov.w	r1, #32
 80068f6:	f381 8811 	msr	BASEPRI, r1
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	4819      	ldr	r0, [pc, #100]	@ (8006964 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80068fe:	f7fe fcf9 	bl	80052f4 <_PreparePacket>
 8006902:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006908:	4b17      	ldr	r3, [pc, #92]	@ (8006968 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006910:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	e00b      	b.n	8006934 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	b2da      	uxtb	r2, r3
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	1c59      	adds	r1, r3, #1
 8006924:	6179      	str	r1, [r7, #20]
 8006926:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	09db      	lsrs	r3, r3, #7
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b7f      	cmp	r3, #127	@ 0x7f
 8006938:	d8f0      	bhi.n	800691c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	617a      	str	r2, [r7, #20]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800694a:	2202      	movs	r2, #2
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	68b8      	ldr	r0, [r7, #8]
 8006950:	f7fe fdbe 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f383 8811 	msr	BASEPRI, r3
}
 800695a:	bf00      	nop
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	2000d014 	.word	0x2000d014
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006972:	f3ef 8311 	mrs	r3, BASEPRI
 8006976:	f04f 0120 	mov.w	r1, #32
 800697a:	f381 8811 	msr	BASEPRI, r1
 800697e:	607b      	str	r3, [r7, #4]
 8006980:	4807      	ldr	r0, [pc, #28]	@ (80069a0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006982:	f7fe fcb7 	bl	80052f4 <_PreparePacket>
 8006986:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006988:	2203      	movs	r2, #3
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6838      	ldr	r0, [r7, #0]
 800698e:	f7fe fd9f 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f383 8811 	msr	BASEPRI, r3
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	2000d014 	.word	0x2000d014

080069a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069aa:	f3ef 8311 	mrs	r3, BASEPRI
 80069ae:	f04f 0120 	mov.w	r1, #32
 80069b2:	f381 8811 	msr	BASEPRI, r1
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	4807      	ldr	r0, [pc, #28]	@ (80069d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069ba:	f7fe fc9b 	bl	80052f4 <_PreparePacket>
 80069be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069c0:	2212      	movs	r2, #18
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6838      	ldr	r0, [r7, #0]
 80069c6:	f7fe fd83 	bl	80054d0 <_SendPacket>
  RECORD_END();
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f383 8811 	msr	BASEPRI, r3
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	2000d014 	.word	0x2000d014

080069dc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069e2:	f3ef 8311 	mrs	r3, BASEPRI
 80069e6:	f04f 0120 	mov.w	r1, #32
 80069ea:	f381 8811 	msr	BASEPRI, r1
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	4807      	ldr	r0, [pc, #28]	@ (8006a10 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069f2:	f7fe fc7f 	bl	80052f4 <_PreparePacket>
 80069f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80069f8:	2211      	movs	r2, #17
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6838      	ldr	r0, [r7, #0]
 80069fe:	f7fe fd67 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f383 8811 	msr	BASEPRI, r3
}
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	2000d014 	.word	0x2000d014

08006a14 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a20:	f04f 0120 	mov.w	r1, #32
 8006a24:	f381 8811 	msr	BASEPRI, r1
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	4819      	ldr	r0, [pc, #100]	@ (8006a90 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a2c:	f7fe fc62 	bl	80052f4 <_PreparePacket>
 8006a30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a36:	4b17      	ldr	r3, [pc, #92]	@ (8006a94 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	e00b      	b.n	8006a62 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	1c59      	adds	r1, r3, #1
 8006a52:	61f9      	str	r1, [r7, #28]
 8006a54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	09db      	lsrs	r3, r3, #7
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a66:	d8f0      	bhi.n	8006a4a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	61fa      	str	r2, [r7, #28]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a78:	2208      	movs	r2, #8
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	6938      	ldr	r0, [r7, #16]
 8006a7e:	f7fe fd27 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f383 8811 	msr	BASEPRI, r3
}
 8006a88:	bf00      	nop
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	2000d014 	.word	0x2000d014
 8006a94:	2000cfe4 	.word	0x2000cfe4

08006a98 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa4:	f04f 0120 	mov.w	r1, #32
 8006aa8:	f381 8811 	msr	BASEPRI, r1
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	4819      	ldr	r0, [pc, #100]	@ (8006b14 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006ab0:	f7fe fc20 	bl	80052f4 <_PreparePacket>
 8006ab4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006aba:	4b17      	ldr	r3, [pc, #92]	@ (8006b18 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	e00b      	b.n	8006ae6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	1c59      	adds	r1, r3, #1
 8006ad6:	61f9      	str	r1, [r7, #28]
 8006ad8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	09db      	lsrs	r3, r3, #7
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aea:	d8f0      	bhi.n	8006ace <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	61fa      	str	r2, [r7, #28]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006afc:	2204      	movs	r2, #4
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	6938      	ldr	r0, [r7, #16]
 8006b02:	f7fe fce5 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f383 8811 	msr	BASEPRI, r3
}
 8006b0c:	bf00      	nop
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	2000d014 	.word	0x2000d014
 8006b18:	2000cfe4 	.word	0x2000cfe4

08006b1c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b24:	f3ef 8311 	mrs	r3, BASEPRI
 8006b28:	f04f 0120 	mov.w	r1, #32
 8006b2c:	f381 8811 	msr	BASEPRI, r1
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	4819      	ldr	r0, [pc, #100]	@ (8006b98 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b34:	f7fe fbde 	bl	80052f4 <_PreparePacket>
 8006b38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b3e:	4b17      	ldr	r3, [pc, #92]	@ (8006b9c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	e00b      	b.n	8006b6a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	1c59      	adds	r1, r3, #1
 8006b5a:	61f9      	str	r1, [r7, #28]
 8006b5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	09db      	lsrs	r3, r3, #7
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b6e:	d8f0      	bhi.n	8006b52 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	61fa      	str	r2, [r7, #28]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b80:	2206      	movs	r2, #6
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	6938      	ldr	r0, [r7, #16]
 8006b86:	f7fe fca3 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f383 8811 	msr	BASEPRI, r3
}
 8006b90:	bf00      	nop
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	2000d014 	.word	0x2000d014
 8006b9c:	2000cfe4 	.word	0x2000cfe4

08006ba0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	@ 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006baa:	f3ef 8311 	mrs	r3, BASEPRI
 8006bae:	f04f 0120 	mov.w	r1, #32
 8006bb2:	f381 8811 	msr	BASEPRI, r1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	4827      	ldr	r0, [pc, #156]	@ (8006c58 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006bba:	f7fe fb9b 	bl	80052f4 <_PreparePacket>
 8006bbe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bc4:	4b25      	ldr	r3, [pc, #148]	@ (8006c5c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	623b      	str	r3, [r7, #32]
 8006bd6:	e00b      	b.n	8006bf0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	1c59      	adds	r1, r3, #1
 8006be0:	6279      	str	r1, [r7, #36]	@ 0x24
 8006be2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	09db      	lsrs	r3, r3, #7
 8006bee:	623b      	str	r3, [r7, #32]
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bf4:	d8f0      	bhi.n	8006bd8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	e00b      	b.n	8006c28 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	1c59      	adds	r1, r3, #1
 8006c18:	61f9      	str	r1, [r7, #28]
 8006c1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	09db      	lsrs	r3, r3, #7
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c2c:	d8f0      	bhi.n	8006c10 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	61fa      	str	r2, [r7, #28]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006c3e:	2207      	movs	r2, #7
 8006c40:	68f9      	ldr	r1, [r7, #12]
 8006c42:	6938      	ldr	r0, [r7, #16]
 8006c44:	f7fe fc44 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f383 8811 	msr	BASEPRI, r3
}
 8006c4e:	bf00      	nop
 8006c50:	3728      	adds	r7, #40	@ 0x28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	2000d014 	.word	0x2000d014
 8006c5c:	2000cfe4 	.word	0x2000cfe4

08006c60 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c68:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	1ad3      	subs	r3, r2, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	2000cfe4 	.word	0x2000cfe4

08006c80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08c      	sub	sp, #48	@ 0x30
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c8a:	4b40      	ldr	r3, [pc, #256]	@ (8006d8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d077      	beq.n	8006d82 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006c92:	4b3e      	ldr	r3, [pc, #248]	@ (8006d8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c98:	2300      	movs	r3, #0
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9c:	e008      	b.n	8006cb0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	3301      	adds	r3, #1
 8006cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d3f2      	bcc.n	8006c9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006cb8:	e000      	b.n	8006cbc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006cba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d055      	beq.n	8006d6e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc6:	f04f 0120 	mov.w	r1, #32
 8006cca:	f381 8811 	msr	BASEPRI, r1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	482f      	ldr	r0, [pc, #188]	@ (8006d90 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006cd2:	f7fe fb0f 	bl	80052f4 <_PreparePacket>
 8006cd6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	623b      	str	r3, [r7, #32]
 8006ce4:	e00b      	b.n	8006cfe <SEGGER_SYSVIEW_SendModule+0x7e>
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	1c59      	adds	r1, r3, #1
 8006cee:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cf0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	09db      	lsrs	r3, r3, #7
 8006cfc:	623b      	str	r3, [r7, #32]
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d02:	d8f0      	bhi.n	8006ce6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d0a:	6a3a      	ldr	r2, [r7, #32]
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d12:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	e00b      	b.n	8006d38 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	1c59      	adds	r1, r3, #1
 8006d28:	61f9      	str	r1, [r7, #28]
 8006d2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	09db      	lsrs	r3, r3, #7
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d3c:	d8f0      	bhi.n	8006d20 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	61fa      	str	r2, [r7, #28]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2280      	movs	r2, #128	@ 0x80
 8006d54:	4619      	mov	r1, r3
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7fe fa9c 	bl	8005294 <_EncodeStr>
 8006d5c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d5e:	2216      	movs	r2, #22
 8006d60:	68f9      	ldr	r1, [r7, #12]
 8006d62:	6938      	ldr	r0, [r7, #16]
 8006d64:	f7fe fbb4 	bl	80054d0 <_SendPacket>
      RECORD_END();
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d006      	beq.n	8006d82 <SEGGER_SYSVIEW_SendModule+0x102>
 8006d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	4798      	blx	r3
    }
  }
}
 8006d82:	bf00      	nop
 8006d84:	3730      	adds	r7, #48	@ 0x30
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	2000d00c 	.word	0x2000d00c
 8006d90:	2000d014 	.word	0x2000d014

08006d94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00f      	beq.n	8006dc2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006da2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1f2      	bne.n	8006da8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	2000d00c 	.word	0x2000d00c

08006dd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dda:	f04f 0120 	mov.w	r1, #32
 8006dde:	f381 8811 	msr	BASEPRI, r1
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	4817      	ldr	r0, [pc, #92]	@ (8006e44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006de6:	f7fe fa85 	bl	80052f4 <_PreparePacket>
 8006dea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	4b14      	ldr	r3, [pc, #80]	@ (8006e48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	e00b      	b.n	8006e14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	1c59      	adds	r1, r3, #1
 8006e04:	6179      	str	r1, [r7, #20]
 8006e06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	09db      	lsrs	r3, r3, #7
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e18:	d8f0      	bhi.n	8006dfc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	617a      	str	r2, [r7, #20]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e2a:	221b      	movs	r2, #27
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	68b8      	ldr	r0, [r7, #8]
 8006e30:	f7fe fb4e 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f383 8811 	msr	BASEPRI, r3
}
 8006e3a:	bf00      	nop
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	2000d014 	.word	0x2000d014
 8006e48:	2000d010 	.word	0x2000d010

08006e4c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e4c:	b40f      	push	{r0, r1, r2, r3}
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006e5a:	1d3b      	adds	r3, r7, #4
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6938      	ldr	r0, [r7, #16]
 8006e62:	f7fe fe47 	bl	8005af4 <_VPrintTarget>
  va_end(ParamList);
}
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e70:	b004      	add	sp, #16
 8006e72:	4770      	bx	lr

08006e74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	@ 0x28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e80:	f04f 0120 	mov.w	r1, #32
 8006e84:	f381 8811 	msr	BASEPRI, r1
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	4827      	ldr	r0, [pc, #156]	@ (8006f28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e8c:	f7fe fa32 	bl	80052f4 <_PreparePacket>
 8006e90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e92:	2280      	movs	r2, #128	@ 0x80
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	6938      	ldr	r0, [r7, #16]
 8006e98:	f7fe f9fc 	bl	8005294 <_EncodeStr>
 8006e9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	e00b      	b.n	8006ec0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	6279      	str	r1, [r7, #36]	@ 0x24
 8006eb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	09db      	lsrs	r3, r3, #7
 8006ebe:	623b      	str	r3, [r7, #32]
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec4:	d8f0      	bhi.n	8006ea8 <SEGGER_SYSVIEW_Warn+0x34>
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ecc:	6a3a      	ldr	r2, [r7, #32]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	e00b      	b.n	8006ef8 <SEGGER_SYSVIEW_Warn+0x84>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	61f9      	str	r1, [r7, #28]
 8006eea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	09db      	lsrs	r3, r3, #7
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006efc:	d8f0      	bhi.n	8006ee0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	61fa      	str	r2, [r7, #28]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006f0e:	221a      	movs	r2, #26
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	6938      	ldr	r0, [r7, #16]
 8006f14:	f7fe fadc 	bl	80054d0 <_SendPacket>
  RECORD_END();
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
}
 8006f1e:	bf00      	nop
 8006f20:	3728      	adds	r7, #40	@ 0x28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	2000d014 	.word	0x2000d014

08006f2c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006f30:	4b13      	ldr	r3, [pc, #76]	@ (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f32:	7e1b      	ldrb	r3, [r3, #24]
 8006f34:	4619      	mov	r1, r3
 8006f36:	4a13      	ldr	r2, [pc, #76]	@ (8006f84 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f38:	460b      	mov	r3, r1
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	440b      	add	r3, r1
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4413      	add	r3, r2
 8006f42:	336c      	adds	r3, #108	@ 0x6c
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b0e      	ldr	r3, [pc, #56]	@ (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f48:	7e1b      	ldrb	r3, [r3, #24]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	490d      	ldr	r1, [pc, #52]	@ (8006f84 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f4e:	4603      	mov	r3, r0
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4403      	add	r3, r0
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	440b      	add	r3, r1
 8006f58:	3370      	adds	r3, #112	@ 0x70
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d00b      	beq.n	8006f78 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f62:	789b      	ldrb	r3, [r3, #2]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d107      	bne.n	8006f78 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f68:	4b05      	ldr	r3, [pc, #20]	@ (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f6e:	f7fe f9cd 	bl	800530c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f72:	4b03      	ldr	r3, [pc, #12]	@ (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f78:	4b01      	ldr	r3, [pc, #4]	@ (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	2000cfe4 	.word	0x2000cfe4
 8006f84:	2000bb24 	.word	0x2000bb24

08006f88 <__NVIC_EnableIRQ>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	db0b      	blt.n	8006fb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	f003 021f 	and.w	r2, r3, #31
 8006fa0:	4907      	ldr	r1, [pc, #28]	@ (8006fc0 <__NVIC_EnableIRQ+0x38>)
 8006fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	2001      	movs	r0, #1
 8006faa:	fa00 f202 	lsl.w	r2, r0, r2
 8006fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	e000e100 	.word	0xe000e100

08006fc4 <__NVIC_SetPriority>:
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	6039      	str	r1, [r7, #0]
 8006fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	db0a      	blt.n	8006fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	490c      	ldr	r1, [pc, #48]	@ (8007010 <__NVIC_SetPriority+0x4c>)
 8006fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe2:	0112      	lsls	r2, r2, #4
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006fec:	e00a      	b.n	8007004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	4908      	ldr	r1, [pc, #32]	@ (8007014 <__NVIC_SetPriority+0x50>)
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	3b04      	subs	r3, #4
 8006ffc:	0112      	lsls	r2, r2, #4
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	440b      	add	r3, r1
 8007002:	761a      	strb	r2, [r3, #24]
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	e000e100 	.word	0xe000e100
 8007014:	e000ed00 	.word	0xe000ed00

08007018 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800701e:	f7ff ff85 	bl	8006f2c <SEGGER_SYSVIEW_IsStarted>
 8007022:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800702a:	f7ff f993 	bl	8006354 <SEGGER_SYSVIEW_Start>
  }
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8007042:	4b0c      	ldr	r3, [pc, #48]	@ (8007074 <_cbOnUARTRx+0x3c>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d806      	bhi.n	8007058 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800704a:	4b0a      	ldr	r3, [pc, #40]	@ (8007074 <_cbOnUARTRx+0x3c>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	4b08      	ldr	r3, [pc, #32]	@ (8007074 <_cbOnUARTRx+0x3c>)
 8007054:	701a      	strb	r2, [r3, #0]
    goto Done;
 8007056:	e009      	b.n	800706c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8007058:	f7ff ffde 	bl	8007018 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <_cbOnUARTRx+0x3c>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	1dfb      	adds	r3, r7, #7
 8007064:	2201      	movs	r2, #1
 8007066:	4619      	mov	r1, r3
 8007068:	f7fe f81e 	bl	80050a8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800706c:	bf00      	nop
}
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000014 	.word	0x20000014

08007078 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8007080:	4b14      	ldr	r3, [pc, #80]	@ (80070d4 <_cbOnUARTTx+0x5c>)
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2b03      	cmp	r3, #3
 8007086:	d80f      	bhi.n	80070a8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8007088:	4b12      	ldr	r3, [pc, #72]	@ (80070d4 <_cbOnUARTTx+0x5c>)
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	461a      	mov	r2, r3
 800708e:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <_cbOnUARTTx+0x60>)
 8007090:	5c9a      	ldrb	r2, [r3, r2]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8007096:	4b0f      	ldr	r3, [pc, #60]	@ (80070d4 <_cbOnUARTTx+0x5c>)
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	3301      	adds	r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <_cbOnUARTTx+0x5c>)
 80070a0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80070a2:	2301      	movs	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80070a6:	e00f      	b.n	80070c8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80070a8:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <_cbOnUARTTx+0x5c>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fd fe9d 	bl	8004df0 <SEGGER_RTT_ReadUpBufferNoLock>
 80070b6:	4603      	mov	r3, r0
 80070b8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da02      	bge.n	80070c6 <_cbOnUARTTx+0x4e>
    r = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e000      	b.n	80070c8 <_cbOnUARTTx+0x50>
  }
Done:
 80070c6:	bf00      	nop
  return r;
 80070c8:	68fb      	ldr	r3, [r7, #12]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000014 	.word	0x20000014
 80070d8:	08007ec4 	.word	0x08007ec4

080070dc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80070e4:	4a04      	ldr	r2, [pc, #16]	@ (80070f8 <SEGGER_UART_init+0x1c>)
 80070e6:	4905      	ldr	r1, [pc, #20]	@ (80070fc <SEGGER_UART_init+0x20>)
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f865 	bl	80071b8 <HIF_UART_Init>
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	08007039 	.word	0x08007039
 80070fc:	08007079 	.word	0x08007079

08007100 <USART3_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART3_IRQHandler(void);
void USART3_IRQHandler(void) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8007106:	4b1e      	ldr	r3, [pc, #120]	@ (8007180 <USART3_IRQHandler+0x80>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d011      	beq.n	800713a <USART3_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8007116:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <USART3_IRQHandler+0x84>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 030b 	and.w	r3, r3, #11
 8007124:	2b00      	cmp	r3, #0
 8007126:	d108      	bne.n	800713a <USART3_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8007128:	4b17      	ldr	r3, [pc, #92]	@ (8007188 <USART3_IRQHandler+0x88>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <USART3_IRQHandler+0x3a>
        _cbOnRx(v);
 8007130:	4b15      	ldr	r3, [pc, #84]	@ (8007188 <USART3_IRQHandler+0x88>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	79fa      	ldrb	r2, [r7, #7]
 8007136:	4610      	mov	r0, r2
 8007138:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01a      	beq.n	800717a <USART3_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8007144:	4b11      	ldr	r3, [pc, #68]	@ (800718c <USART3_IRQHandler+0x8c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d015      	beq.n	8007178 <USART3_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800714c:	4b0f      	ldr	r3, [pc, #60]	@ (800718c <USART3_IRQHandler+0x8c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	1dfa      	adds	r2, r7, #7
 8007152:	4610      	mov	r0, r2
 8007154:	4798      	blx	r3
 8007156:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <USART3_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800715e:	4b0c      	ldr	r3, [pc, #48]	@ (8007190 <USART3_IRQHandler+0x90>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a0b      	ldr	r2, [pc, #44]	@ (8007190 <USART3_IRQHandler+0x90>)
 8007164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e006      	b.n	800717a <USART3_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800716c:	4b04      	ldr	r3, [pc, #16]	@ (8007180 <USART3_IRQHandler+0x80>)
 800716e:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8007170:	79fa      	ldrb	r2, [r7, #7]
 8007172:	4b08      	ldr	r3, [pc, #32]	@ (8007194 <USART3_IRQHandler+0x94>)
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e000      	b.n	800717a <USART3_IRQHandler+0x7a>
      return;
 8007178:	bf00      	nop
    }
  }
}
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40020c1c 	.word	0x40020c1c
 8007184:	40020c24 	.word	0x40020c24
 8007188:	2000d0f8 	.word	0x2000d0f8
 800718c:	2000d0fc 	.word	0x2000d0fc
 8007190:	40020c00 	.word	0x40020c00
 8007194:	40020c28 	.word	0x40020c28

08007198 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a04      	ldr	r2, [pc, #16]	@ (80071b4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80071a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a6:	6013      	str	r3, [r2, #0]
}
 80071a8:	bf00      	nop
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40020c00 	.word	0x40020c00

080071b8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //


  RCC_APB1ENR |= RCC_APB1ENR_USART3EN;        // Enable USART3 clock
 80071c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007280 <HIF_UART_Init+0xc8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2d      	ldr	r2, [pc, #180]	@ (8007280 <HIF_UART_Init+0xc8>)
 80071ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071ce:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= RCC_AHB1ENR_GPIODEN;        // Enable IO port D clock
 80071d0:	4b2c      	ldr	r3, [pc, #176]	@ (8007284 <HIF_UART_Init+0xcc>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2b      	ldr	r2, [pc, #172]	@ (8007284 <HIF_UART_Init+0xcc>)
 80071d6:	f043 0308 	orr.w	r3, r3, #8
 80071da:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRH;
 80071dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007288 <HIF_UART_Init+0xd0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT-8) << 2)) | (15UL << ((GPIO_UART_RX_BIT-8) << 2)));
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80071e8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT-8) << 2)) | (7UL << ((GPIO_UART_RX_BIT-8) << 2)));
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071f0:	613b      	str	r3, [r7, #16]
  GPIO_AFRH = v;
 80071f2:	4a25      	ldr	r2, [pc, #148]	@ (8007288 <HIF_UART_Init+0xd0>)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80071f8:	4b24      	ldr	r3, [pc, #144]	@ (800728c <HIF_UART_Init+0xd4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8007204:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800720c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800720e:	4a1f      	ldr	r2, [pc, #124]	@ (800728c <HIF_UART_Init+0xd4>)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8007214:	4b1d      	ldr	r3, [pc, #116]	@ (800728c <HIF_UART_Init+0xd4>)
 8007216:	f248 022d 	movw	r2, #32813	@ 0x802d
 800721a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800721c:	4b1c      	ldr	r3, [pc, #112]	@ (8007290 <HIF_UART_Init+0xd8>)
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
            | (0 << 12)
			| (0 << 13)							// STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8007222:	4b1c      	ldr	r3, [pc, #112]	@ (8007294 <HIF_UART_Init+0xdc>)
 8007224:	2280      	movs	r2, #128	@ 0x80
 8007226:	601a      	str	r2, [r3, #0]
  //
  // Set baudrate


  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800722e:	4a1a      	ldr	r2, [pc, #104]	@ (8007298 <HIF_UART_Init+0xe0>)
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	fbb2 f3f3 	udiv	r3, r2, r3
 8007236:	3301      	adds	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007246:	d302      	bcc.n	800724e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8007248:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800724c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	4a10      	ldr	r2, [pc, #64]	@ (800729c <HIF_UART_Init+0xe4>)
 800725a:	b29b      	uxth	r3, r3
 800725c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800725e:	4a10      	ldr	r2, [pc, #64]	@ (80072a0 <HIF_UART_Init+0xe8>)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8007264:	4a0f      	ldr	r2, [pc, #60]	@ (80072a4 <HIF_UART_Init+0xec>)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800726a:	2106      	movs	r1, #6
 800726c:	2027      	movs	r0, #39	@ 0x27
 800726e:	f7ff fea9 	bl	8006fc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8007272:	2027      	movs	r0, #39	@ 0x27
 8007274:	f7ff fe88 	bl	8006f88 <__NVIC_EnableIRQ>
}
 8007278:	bf00      	nop
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40023840 	.word	0x40023840
 8007284:	40023830 	.word	0x40023830
 8007288:	40020c24 	.word	0x40020c24
 800728c:	40020c00 	.word	0x40020c00
 8007290:	40020c04 	.word	0x40020c04
 8007294:	40020c08 	.word	0x40020c08
 8007298:	0501bd00 	.word	0x0501bd00
 800729c:	40020c0c 	.word	0x40020c0c
 80072a0:	2000d0f8 	.word	0x2000d0f8
 80072a4:	2000d0fc 	.word	0x2000d0fc

080072a8 <sniprintf>:
 80072a8:	b40c      	push	{r2, r3}
 80072aa:	b530      	push	{r4, r5, lr}
 80072ac:	4b17      	ldr	r3, [pc, #92]	@ (800730c <sniprintf+0x64>)
 80072ae:	1e0c      	subs	r4, r1, #0
 80072b0:	681d      	ldr	r5, [r3, #0]
 80072b2:	b09d      	sub	sp, #116	@ 0x74
 80072b4:	da08      	bge.n	80072c8 <sniprintf+0x20>
 80072b6:	238b      	movs	r3, #139	@ 0x8b
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	f04f 30ff 	mov.w	r0, #4294967295
 80072be:	b01d      	add	sp, #116	@ 0x74
 80072c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072c4:	b002      	add	sp, #8
 80072c6:	4770      	bx	lr
 80072c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80072cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80072d0:	bf14      	ite	ne
 80072d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80072d6:	4623      	moveq	r3, r4
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9307      	str	r3, [sp, #28]
 80072dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072e0:	9002      	str	r0, [sp, #8]
 80072e2:	9006      	str	r0, [sp, #24]
 80072e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80072e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072ea:	ab21      	add	r3, sp, #132	@ 0x84
 80072ec:	a902      	add	r1, sp, #8
 80072ee:	4628      	mov	r0, r5
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	f000 f9ad 	bl	8007650 <_svfiprintf_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	bfbc      	itt	lt
 80072fa:	238b      	movlt	r3, #139	@ 0x8b
 80072fc:	602b      	strlt	r3, [r5, #0]
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d0dd      	beq.n	80072be <sniprintf+0x16>
 8007302:	9b02      	ldr	r3, [sp, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	e7d9      	b.n	80072be <sniprintf+0x16>
 800730a:	bf00      	nop
 800730c:	2000001c 	.word	0x2000001c

08007310 <memcmp>:
 8007310:	b510      	push	{r4, lr}
 8007312:	3901      	subs	r1, #1
 8007314:	4402      	add	r2, r0
 8007316:	4290      	cmp	r0, r2
 8007318:	d101      	bne.n	800731e <memcmp+0xe>
 800731a:	2000      	movs	r0, #0
 800731c:	e005      	b.n	800732a <memcmp+0x1a>
 800731e:	7803      	ldrb	r3, [r0, #0]
 8007320:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007324:	42a3      	cmp	r3, r4
 8007326:	d001      	beq.n	800732c <memcmp+0x1c>
 8007328:	1b18      	subs	r0, r3, r4
 800732a:	bd10      	pop	{r4, pc}
 800732c:	3001      	adds	r0, #1
 800732e:	e7f2      	b.n	8007316 <memcmp+0x6>

08007330 <memset>:
 8007330:	4402      	add	r2, r0
 8007332:	4603      	mov	r3, r0
 8007334:	4293      	cmp	r3, r2
 8007336:	d100      	bne.n	800733a <memset+0xa>
 8007338:	4770      	bx	lr
 800733a:	f803 1b01 	strb.w	r1, [r3], #1
 800733e:	e7f9      	b.n	8007334 <memset+0x4>

08007340 <__libc_init_array>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	4d0d      	ldr	r5, [pc, #52]	@ (8007378 <__libc_init_array+0x38>)
 8007344:	4c0d      	ldr	r4, [pc, #52]	@ (800737c <__libc_init_array+0x3c>)
 8007346:	1b64      	subs	r4, r4, r5
 8007348:	10a4      	asrs	r4, r4, #2
 800734a:	2600      	movs	r6, #0
 800734c:	42a6      	cmp	r6, r4
 800734e:	d109      	bne.n	8007364 <__libc_init_array+0x24>
 8007350:	4d0b      	ldr	r5, [pc, #44]	@ (8007380 <__libc_init_array+0x40>)
 8007352:	4c0c      	ldr	r4, [pc, #48]	@ (8007384 <__libc_init_array+0x44>)
 8007354:	f000 fc74 	bl	8007c40 <_init>
 8007358:	1b64      	subs	r4, r4, r5
 800735a:	10a4      	asrs	r4, r4, #2
 800735c:	2600      	movs	r6, #0
 800735e:	42a6      	cmp	r6, r4
 8007360:	d105      	bne.n	800736e <__libc_init_array+0x2e>
 8007362:	bd70      	pop	{r4, r5, r6, pc}
 8007364:	f855 3b04 	ldr.w	r3, [r5], #4
 8007368:	4798      	blx	r3
 800736a:	3601      	adds	r6, #1
 800736c:	e7ee      	b.n	800734c <__libc_init_array+0xc>
 800736e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007372:	4798      	blx	r3
 8007374:	3601      	adds	r6, #1
 8007376:	e7f2      	b.n	800735e <__libc_init_array+0x1e>
 8007378:	08007f04 	.word	0x08007f04
 800737c:	08007f04 	.word	0x08007f04
 8007380:	08007f04 	.word	0x08007f04
 8007384:	08007f08 	.word	0x08007f08

08007388 <__retarget_lock_acquire_recursive>:
 8007388:	4770      	bx	lr

0800738a <__retarget_lock_release_recursive>:
 800738a:	4770      	bx	lr

0800738c <memcpy>:
 800738c:	440a      	add	r2, r1
 800738e:	4291      	cmp	r1, r2
 8007390:	f100 33ff 	add.w	r3, r0, #4294967295
 8007394:	d100      	bne.n	8007398 <memcpy+0xc>
 8007396:	4770      	bx	lr
 8007398:	b510      	push	{r4, lr}
 800739a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800739e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a2:	4291      	cmp	r1, r2
 80073a4:	d1f9      	bne.n	800739a <memcpy+0xe>
 80073a6:	bd10      	pop	{r4, pc}

080073a8 <_free_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4605      	mov	r5, r0
 80073ac:	2900      	cmp	r1, #0
 80073ae:	d041      	beq.n	8007434 <_free_r+0x8c>
 80073b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b4:	1f0c      	subs	r4, r1, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bfb8      	it	lt
 80073ba:	18e4      	addlt	r4, r4, r3
 80073bc:	f000 f8e0 	bl	8007580 <__malloc_lock>
 80073c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007438 <_free_r+0x90>)
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	b933      	cbnz	r3, 80073d4 <_free_r+0x2c>
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	6014      	str	r4, [r2, #0]
 80073ca:	4628      	mov	r0, r5
 80073cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d0:	f000 b8dc 	b.w	800758c <__malloc_unlock>
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d908      	bls.n	80073ea <_free_r+0x42>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	1821      	adds	r1, r4, r0
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf01      	itttt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	1809      	addeq	r1, r1, r0
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	e7ed      	b.n	80073c6 <_free_r+0x1e>
 80073ea:	461a      	mov	r2, r3
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b10b      	cbz	r3, 80073f4 <_free_r+0x4c>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d9fa      	bls.n	80073ea <_free_r+0x42>
 80073f4:	6811      	ldr	r1, [r2, #0]
 80073f6:	1850      	adds	r0, r2, r1
 80073f8:	42a0      	cmp	r0, r4
 80073fa:	d10b      	bne.n	8007414 <_free_r+0x6c>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	4401      	add	r1, r0
 8007400:	1850      	adds	r0, r2, r1
 8007402:	4283      	cmp	r3, r0
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	d1e0      	bne.n	80073ca <_free_r+0x22>
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	6053      	str	r3, [r2, #4]
 800740e:	4408      	add	r0, r1
 8007410:	6010      	str	r0, [r2, #0]
 8007412:	e7da      	b.n	80073ca <_free_r+0x22>
 8007414:	d902      	bls.n	800741c <_free_r+0x74>
 8007416:	230c      	movs	r3, #12
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	e7d6      	b.n	80073ca <_free_r+0x22>
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	1821      	adds	r1, r4, r0
 8007420:	428b      	cmp	r3, r1
 8007422:	bf04      	itt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	bf04      	itt	eq
 800742c:	1809      	addeq	r1, r1, r0
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	6054      	str	r4, [r2, #4]
 8007432:	e7ca      	b.n	80073ca <_free_r+0x22>
 8007434:	bd38      	pop	{r3, r4, r5, pc}
 8007436:	bf00      	nop
 8007438:	2000d244 	.word	0x2000d244

0800743c <sbrk_aligned>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	4e0f      	ldr	r6, [pc, #60]	@ (800747c <sbrk_aligned+0x40>)
 8007440:	460c      	mov	r4, r1
 8007442:	6831      	ldr	r1, [r6, #0]
 8007444:	4605      	mov	r5, r0
 8007446:	b911      	cbnz	r1, 800744e <sbrk_aligned+0x12>
 8007448:	f000 fba6 	bl	8007b98 <_sbrk_r>
 800744c:	6030      	str	r0, [r6, #0]
 800744e:	4621      	mov	r1, r4
 8007450:	4628      	mov	r0, r5
 8007452:	f000 fba1 	bl	8007b98 <_sbrk_r>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	d103      	bne.n	8007462 <sbrk_aligned+0x26>
 800745a:	f04f 34ff 	mov.w	r4, #4294967295
 800745e:	4620      	mov	r0, r4
 8007460:	bd70      	pop	{r4, r5, r6, pc}
 8007462:	1cc4      	adds	r4, r0, #3
 8007464:	f024 0403 	bic.w	r4, r4, #3
 8007468:	42a0      	cmp	r0, r4
 800746a:	d0f8      	beq.n	800745e <sbrk_aligned+0x22>
 800746c:	1a21      	subs	r1, r4, r0
 800746e:	4628      	mov	r0, r5
 8007470:	f000 fb92 	bl	8007b98 <_sbrk_r>
 8007474:	3001      	adds	r0, #1
 8007476:	d1f2      	bne.n	800745e <sbrk_aligned+0x22>
 8007478:	e7ef      	b.n	800745a <sbrk_aligned+0x1e>
 800747a:	bf00      	nop
 800747c:	2000d240 	.word	0x2000d240

08007480 <_malloc_r>:
 8007480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007484:	1ccd      	adds	r5, r1, #3
 8007486:	f025 0503 	bic.w	r5, r5, #3
 800748a:	3508      	adds	r5, #8
 800748c:	2d0c      	cmp	r5, #12
 800748e:	bf38      	it	cc
 8007490:	250c      	movcc	r5, #12
 8007492:	2d00      	cmp	r5, #0
 8007494:	4606      	mov	r6, r0
 8007496:	db01      	blt.n	800749c <_malloc_r+0x1c>
 8007498:	42a9      	cmp	r1, r5
 800749a:	d904      	bls.n	80074a6 <_malloc_r+0x26>
 800749c:	230c      	movs	r3, #12
 800749e:	6033      	str	r3, [r6, #0]
 80074a0:	2000      	movs	r0, #0
 80074a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800757c <_malloc_r+0xfc>
 80074aa:	f000 f869 	bl	8007580 <__malloc_lock>
 80074ae:	f8d8 3000 	ldr.w	r3, [r8]
 80074b2:	461c      	mov	r4, r3
 80074b4:	bb44      	cbnz	r4, 8007508 <_malloc_r+0x88>
 80074b6:	4629      	mov	r1, r5
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ffbf 	bl	800743c <sbrk_aligned>
 80074be:	1c43      	adds	r3, r0, #1
 80074c0:	4604      	mov	r4, r0
 80074c2:	d158      	bne.n	8007576 <_malloc_r+0xf6>
 80074c4:	f8d8 4000 	ldr.w	r4, [r8]
 80074c8:	4627      	mov	r7, r4
 80074ca:	2f00      	cmp	r7, #0
 80074cc:	d143      	bne.n	8007556 <_malloc_r+0xd6>
 80074ce:	2c00      	cmp	r4, #0
 80074d0:	d04b      	beq.n	800756a <_malloc_r+0xea>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	4639      	mov	r1, r7
 80074d6:	4630      	mov	r0, r6
 80074d8:	eb04 0903 	add.w	r9, r4, r3
 80074dc:	f000 fb5c 	bl	8007b98 <_sbrk_r>
 80074e0:	4581      	cmp	r9, r0
 80074e2:	d142      	bne.n	800756a <_malloc_r+0xea>
 80074e4:	6821      	ldr	r1, [r4, #0]
 80074e6:	1a6d      	subs	r5, r5, r1
 80074e8:	4629      	mov	r1, r5
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff ffa6 	bl	800743c <sbrk_aligned>
 80074f0:	3001      	adds	r0, #1
 80074f2:	d03a      	beq.n	800756a <_malloc_r+0xea>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	442b      	add	r3, r5
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	f8d8 3000 	ldr.w	r3, [r8]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	bb62      	cbnz	r2, 800755c <_malloc_r+0xdc>
 8007502:	f8c8 7000 	str.w	r7, [r8]
 8007506:	e00f      	b.n	8007528 <_malloc_r+0xa8>
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	1b52      	subs	r2, r2, r5
 800750c:	d420      	bmi.n	8007550 <_malloc_r+0xd0>
 800750e:	2a0b      	cmp	r2, #11
 8007510:	d917      	bls.n	8007542 <_malloc_r+0xc2>
 8007512:	1961      	adds	r1, r4, r5
 8007514:	42a3      	cmp	r3, r4
 8007516:	6025      	str	r5, [r4, #0]
 8007518:	bf18      	it	ne
 800751a:	6059      	strne	r1, [r3, #4]
 800751c:	6863      	ldr	r3, [r4, #4]
 800751e:	bf08      	it	eq
 8007520:	f8c8 1000 	streq.w	r1, [r8]
 8007524:	5162      	str	r2, [r4, r5]
 8007526:	604b      	str	r3, [r1, #4]
 8007528:	4630      	mov	r0, r6
 800752a:	f000 f82f 	bl	800758c <__malloc_unlock>
 800752e:	f104 000b 	add.w	r0, r4, #11
 8007532:	1d23      	adds	r3, r4, #4
 8007534:	f020 0007 	bic.w	r0, r0, #7
 8007538:	1ac2      	subs	r2, r0, r3
 800753a:	bf1c      	itt	ne
 800753c:	1a1b      	subne	r3, r3, r0
 800753e:	50a3      	strne	r3, [r4, r2]
 8007540:	e7af      	b.n	80074a2 <_malloc_r+0x22>
 8007542:	6862      	ldr	r2, [r4, #4]
 8007544:	42a3      	cmp	r3, r4
 8007546:	bf0c      	ite	eq
 8007548:	f8c8 2000 	streq.w	r2, [r8]
 800754c:	605a      	strne	r2, [r3, #4]
 800754e:	e7eb      	b.n	8007528 <_malloc_r+0xa8>
 8007550:	4623      	mov	r3, r4
 8007552:	6864      	ldr	r4, [r4, #4]
 8007554:	e7ae      	b.n	80074b4 <_malloc_r+0x34>
 8007556:	463c      	mov	r4, r7
 8007558:	687f      	ldr	r7, [r7, #4]
 800755a:	e7b6      	b.n	80074ca <_malloc_r+0x4a>
 800755c:	461a      	mov	r2, r3
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	42a3      	cmp	r3, r4
 8007562:	d1fb      	bne.n	800755c <_malloc_r+0xdc>
 8007564:	2300      	movs	r3, #0
 8007566:	6053      	str	r3, [r2, #4]
 8007568:	e7de      	b.n	8007528 <_malloc_r+0xa8>
 800756a:	230c      	movs	r3, #12
 800756c:	6033      	str	r3, [r6, #0]
 800756e:	4630      	mov	r0, r6
 8007570:	f000 f80c 	bl	800758c <__malloc_unlock>
 8007574:	e794      	b.n	80074a0 <_malloc_r+0x20>
 8007576:	6005      	str	r5, [r0, #0]
 8007578:	e7d6      	b.n	8007528 <_malloc_r+0xa8>
 800757a:	bf00      	nop
 800757c:	2000d244 	.word	0x2000d244

08007580 <__malloc_lock>:
 8007580:	4801      	ldr	r0, [pc, #4]	@ (8007588 <__malloc_lock+0x8>)
 8007582:	f7ff bf01 	b.w	8007388 <__retarget_lock_acquire_recursive>
 8007586:	bf00      	nop
 8007588:	2000d23c 	.word	0x2000d23c

0800758c <__malloc_unlock>:
 800758c:	4801      	ldr	r0, [pc, #4]	@ (8007594 <__malloc_unlock+0x8>)
 800758e:	f7ff befc 	b.w	800738a <__retarget_lock_release_recursive>
 8007592:	bf00      	nop
 8007594:	2000d23c 	.word	0x2000d23c

08007598 <__ssputs_r>:
 8007598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	688e      	ldr	r6, [r1, #8]
 800759e:	461f      	mov	r7, r3
 80075a0:	42be      	cmp	r6, r7
 80075a2:	680b      	ldr	r3, [r1, #0]
 80075a4:	4682      	mov	sl, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	4690      	mov	r8, r2
 80075aa:	d82d      	bhi.n	8007608 <__ssputs_r+0x70>
 80075ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075b4:	d026      	beq.n	8007604 <__ssputs_r+0x6c>
 80075b6:	6965      	ldr	r5, [r4, #20]
 80075b8:	6909      	ldr	r1, [r1, #16]
 80075ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075be:	eba3 0901 	sub.w	r9, r3, r1
 80075c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075c6:	1c7b      	adds	r3, r7, #1
 80075c8:	444b      	add	r3, r9
 80075ca:	106d      	asrs	r5, r5, #1
 80075cc:	429d      	cmp	r5, r3
 80075ce:	bf38      	it	cc
 80075d0:	461d      	movcc	r5, r3
 80075d2:	0553      	lsls	r3, r2, #21
 80075d4:	d527      	bpl.n	8007626 <__ssputs_r+0x8e>
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7ff ff52 	bl	8007480 <_malloc_r>
 80075dc:	4606      	mov	r6, r0
 80075de:	b360      	cbz	r0, 800763a <__ssputs_r+0xa2>
 80075e0:	6921      	ldr	r1, [r4, #16]
 80075e2:	464a      	mov	r2, r9
 80075e4:	f7ff fed2 	bl	800738c <memcpy>
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	6126      	str	r6, [r4, #16]
 80075f6:	6165      	str	r5, [r4, #20]
 80075f8:	444e      	add	r6, r9
 80075fa:	eba5 0509 	sub.w	r5, r5, r9
 80075fe:	6026      	str	r6, [r4, #0]
 8007600:	60a5      	str	r5, [r4, #8]
 8007602:	463e      	mov	r6, r7
 8007604:	42be      	cmp	r6, r7
 8007606:	d900      	bls.n	800760a <__ssputs_r+0x72>
 8007608:	463e      	mov	r6, r7
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	4632      	mov	r2, r6
 800760e:	4641      	mov	r1, r8
 8007610:	f000 faa8 	bl	8007b64 <memmove>
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	1b9b      	subs	r3, r3, r6
 8007618:	60a3      	str	r3, [r4, #8]
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	4433      	add	r3, r6
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	2000      	movs	r0, #0
 8007622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007626:	462a      	mov	r2, r5
 8007628:	f000 fac6 	bl	8007bb8 <_realloc_r>
 800762c:	4606      	mov	r6, r0
 800762e:	2800      	cmp	r0, #0
 8007630:	d1e0      	bne.n	80075f4 <__ssputs_r+0x5c>
 8007632:	6921      	ldr	r1, [r4, #16]
 8007634:	4650      	mov	r0, sl
 8007636:	f7ff feb7 	bl	80073a8 <_free_r>
 800763a:	230c      	movs	r3, #12
 800763c:	f8ca 3000 	str.w	r3, [sl]
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	e7e9      	b.n	8007622 <__ssputs_r+0x8a>
	...

08007650 <_svfiprintf_r>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	4698      	mov	r8, r3
 8007656:	898b      	ldrh	r3, [r1, #12]
 8007658:	061b      	lsls	r3, r3, #24
 800765a:	b09d      	sub	sp, #116	@ 0x74
 800765c:	4607      	mov	r7, r0
 800765e:	460d      	mov	r5, r1
 8007660:	4614      	mov	r4, r2
 8007662:	d510      	bpl.n	8007686 <_svfiprintf_r+0x36>
 8007664:	690b      	ldr	r3, [r1, #16]
 8007666:	b973      	cbnz	r3, 8007686 <_svfiprintf_r+0x36>
 8007668:	2140      	movs	r1, #64	@ 0x40
 800766a:	f7ff ff09 	bl	8007480 <_malloc_r>
 800766e:	6028      	str	r0, [r5, #0]
 8007670:	6128      	str	r0, [r5, #16]
 8007672:	b930      	cbnz	r0, 8007682 <_svfiprintf_r+0x32>
 8007674:	230c      	movs	r3, #12
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	b01d      	add	sp, #116	@ 0x74
 800767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007682:	2340      	movs	r3, #64	@ 0x40
 8007684:	616b      	str	r3, [r5, #20]
 8007686:	2300      	movs	r3, #0
 8007688:	9309      	str	r3, [sp, #36]	@ 0x24
 800768a:	2320      	movs	r3, #32
 800768c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007690:	f8cd 800c 	str.w	r8, [sp, #12]
 8007694:	2330      	movs	r3, #48	@ 0x30
 8007696:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007834 <_svfiprintf_r+0x1e4>
 800769a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800769e:	f04f 0901 	mov.w	r9, #1
 80076a2:	4623      	mov	r3, r4
 80076a4:	469a      	mov	sl, r3
 80076a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076aa:	b10a      	cbz	r2, 80076b0 <_svfiprintf_r+0x60>
 80076ac:	2a25      	cmp	r2, #37	@ 0x25
 80076ae:	d1f9      	bne.n	80076a4 <_svfiprintf_r+0x54>
 80076b0:	ebba 0b04 	subs.w	fp, sl, r4
 80076b4:	d00b      	beq.n	80076ce <_svfiprintf_r+0x7e>
 80076b6:	465b      	mov	r3, fp
 80076b8:	4622      	mov	r2, r4
 80076ba:	4629      	mov	r1, r5
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff ff6b 	bl	8007598 <__ssputs_r>
 80076c2:	3001      	adds	r0, #1
 80076c4:	f000 80a7 	beq.w	8007816 <_svfiprintf_r+0x1c6>
 80076c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076ca:	445a      	add	r2, fp
 80076cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80076ce:	f89a 3000 	ldrb.w	r3, [sl]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 809f 	beq.w	8007816 <_svfiprintf_r+0x1c6>
 80076d8:	2300      	movs	r3, #0
 80076da:	f04f 32ff 	mov.w	r2, #4294967295
 80076de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076e2:	f10a 0a01 	add.w	sl, sl, #1
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	9307      	str	r3, [sp, #28]
 80076ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80076f0:	4654      	mov	r4, sl
 80076f2:	2205      	movs	r2, #5
 80076f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f8:	484e      	ldr	r0, [pc, #312]	@ (8007834 <_svfiprintf_r+0x1e4>)
 80076fa:	f7f8 fdf1 	bl	80002e0 <memchr>
 80076fe:	9a04      	ldr	r2, [sp, #16]
 8007700:	b9d8      	cbnz	r0, 800773a <_svfiprintf_r+0xea>
 8007702:	06d0      	lsls	r0, r2, #27
 8007704:	bf44      	itt	mi
 8007706:	2320      	movmi	r3, #32
 8007708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800770c:	0711      	lsls	r1, r2, #28
 800770e:	bf44      	itt	mi
 8007710:	232b      	movmi	r3, #43	@ 0x2b
 8007712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007716:	f89a 3000 	ldrb.w	r3, [sl]
 800771a:	2b2a      	cmp	r3, #42	@ 0x2a
 800771c:	d015      	beq.n	800774a <_svfiprintf_r+0xfa>
 800771e:	9a07      	ldr	r2, [sp, #28]
 8007720:	4654      	mov	r4, sl
 8007722:	2000      	movs	r0, #0
 8007724:	f04f 0c0a 	mov.w	ip, #10
 8007728:	4621      	mov	r1, r4
 800772a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800772e:	3b30      	subs	r3, #48	@ 0x30
 8007730:	2b09      	cmp	r3, #9
 8007732:	d94b      	bls.n	80077cc <_svfiprintf_r+0x17c>
 8007734:	b1b0      	cbz	r0, 8007764 <_svfiprintf_r+0x114>
 8007736:	9207      	str	r2, [sp, #28]
 8007738:	e014      	b.n	8007764 <_svfiprintf_r+0x114>
 800773a:	eba0 0308 	sub.w	r3, r0, r8
 800773e:	fa09 f303 	lsl.w	r3, r9, r3
 8007742:	4313      	orrs	r3, r2
 8007744:	9304      	str	r3, [sp, #16]
 8007746:	46a2      	mov	sl, r4
 8007748:	e7d2      	b.n	80076f0 <_svfiprintf_r+0xa0>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	1d19      	adds	r1, r3, #4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	9103      	str	r1, [sp, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	bfbb      	ittet	lt
 8007756:	425b      	neglt	r3, r3
 8007758:	f042 0202 	orrlt.w	r2, r2, #2
 800775c:	9307      	strge	r3, [sp, #28]
 800775e:	9307      	strlt	r3, [sp, #28]
 8007760:	bfb8      	it	lt
 8007762:	9204      	strlt	r2, [sp, #16]
 8007764:	7823      	ldrb	r3, [r4, #0]
 8007766:	2b2e      	cmp	r3, #46	@ 0x2e
 8007768:	d10a      	bne.n	8007780 <_svfiprintf_r+0x130>
 800776a:	7863      	ldrb	r3, [r4, #1]
 800776c:	2b2a      	cmp	r3, #42	@ 0x2a
 800776e:	d132      	bne.n	80077d6 <_svfiprintf_r+0x186>
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	1d1a      	adds	r2, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	9203      	str	r2, [sp, #12]
 8007778:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800777c:	3402      	adds	r4, #2
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007844 <_svfiprintf_r+0x1f4>
 8007784:	7821      	ldrb	r1, [r4, #0]
 8007786:	2203      	movs	r2, #3
 8007788:	4650      	mov	r0, sl
 800778a:	f7f8 fda9 	bl	80002e0 <memchr>
 800778e:	b138      	cbz	r0, 80077a0 <_svfiprintf_r+0x150>
 8007790:	9b04      	ldr	r3, [sp, #16]
 8007792:	eba0 000a 	sub.w	r0, r0, sl
 8007796:	2240      	movs	r2, #64	@ 0x40
 8007798:	4082      	lsls	r2, r0
 800779a:	4313      	orrs	r3, r2
 800779c:	3401      	adds	r4, #1
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a4:	4824      	ldr	r0, [pc, #144]	@ (8007838 <_svfiprintf_r+0x1e8>)
 80077a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077aa:	2206      	movs	r2, #6
 80077ac:	f7f8 fd98 	bl	80002e0 <memchr>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d036      	beq.n	8007822 <_svfiprintf_r+0x1d2>
 80077b4:	4b21      	ldr	r3, [pc, #132]	@ (800783c <_svfiprintf_r+0x1ec>)
 80077b6:	bb1b      	cbnz	r3, 8007800 <_svfiprintf_r+0x1b0>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	3307      	adds	r3, #7
 80077bc:	f023 0307 	bic.w	r3, r3, #7
 80077c0:	3308      	adds	r3, #8
 80077c2:	9303      	str	r3, [sp, #12]
 80077c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c6:	4433      	add	r3, r6
 80077c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ca:	e76a      	b.n	80076a2 <_svfiprintf_r+0x52>
 80077cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80077d0:	460c      	mov	r4, r1
 80077d2:	2001      	movs	r0, #1
 80077d4:	e7a8      	b.n	8007728 <_svfiprintf_r+0xd8>
 80077d6:	2300      	movs	r3, #0
 80077d8:	3401      	adds	r4, #1
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	4619      	mov	r1, r3
 80077de:	f04f 0c0a 	mov.w	ip, #10
 80077e2:	4620      	mov	r0, r4
 80077e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e8:	3a30      	subs	r2, #48	@ 0x30
 80077ea:	2a09      	cmp	r2, #9
 80077ec:	d903      	bls.n	80077f6 <_svfiprintf_r+0x1a6>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0c6      	beq.n	8007780 <_svfiprintf_r+0x130>
 80077f2:	9105      	str	r1, [sp, #20]
 80077f4:	e7c4      	b.n	8007780 <_svfiprintf_r+0x130>
 80077f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80077fa:	4604      	mov	r4, r0
 80077fc:	2301      	movs	r3, #1
 80077fe:	e7f0      	b.n	80077e2 <_svfiprintf_r+0x192>
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	462a      	mov	r2, r5
 8007806:	4b0e      	ldr	r3, [pc, #56]	@ (8007840 <_svfiprintf_r+0x1f0>)
 8007808:	a904      	add	r1, sp, #16
 800780a:	4638      	mov	r0, r7
 800780c:	f3af 8000 	nop.w
 8007810:	1c42      	adds	r2, r0, #1
 8007812:	4606      	mov	r6, r0
 8007814:	d1d6      	bne.n	80077c4 <_svfiprintf_r+0x174>
 8007816:	89ab      	ldrh	r3, [r5, #12]
 8007818:	065b      	lsls	r3, r3, #25
 800781a:	f53f af2d 	bmi.w	8007678 <_svfiprintf_r+0x28>
 800781e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007820:	e72c      	b.n	800767c <_svfiprintf_r+0x2c>
 8007822:	ab03      	add	r3, sp, #12
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	462a      	mov	r2, r5
 8007828:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <_svfiprintf_r+0x1f0>)
 800782a:	a904      	add	r1, sp, #16
 800782c:	4638      	mov	r0, r7
 800782e:	f000 f879 	bl	8007924 <_printf_i>
 8007832:	e7ed      	b.n	8007810 <_svfiprintf_r+0x1c0>
 8007834:	08007ec8 	.word	0x08007ec8
 8007838:	08007ed2 	.word	0x08007ed2
 800783c:	00000000 	.word	0x00000000
 8007840:	08007599 	.word	0x08007599
 8007844:	08007ece 	.word	0x08007ece

08007848 <_printf_common>:
 8007848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	4616      	mov	r6, r2
 800784e:	4698      	mov	r8, r3
 8007850:	688a      	ldr	r2, [r1, #8]
 8007852:	690b      	ldr	r3, [r1, #16]
 8007854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007858:	4293      	cmp	r3, r2
 800785a:	bfb8      	it	lt
 800785c:	4613      	movlt	r3, r2
 800785e:	6033      	str	r3, [r6, #0]
 8007860:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007864:	4607      	mov	r7, r0
 8007866:	460c      	mov	r4, r1
 8007868:	b10a      	cbz	r2, 800786e <_printf_common+0x26>
 800786a:	3301      	adds	r3, #1
 800786c:	6033      	str	r3, [r6, #0]
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	0699      	lsls	r1, r3, #26
 8007872:	bf42      	ittt	mi
 8007874:	6833      	ldrmi	r3, [r6, #0]
 8007876:	3302      	addmi	r3, #2
 8007878:	6033      	strmi	r3, [r6, #0]
 800787a:	6825      	ldr	r5, [r4, #0]
 800787c:	f015 0506 	ands.w	r5, r5, #6
 8007880:	d106      	bne.n	8007890 <_printf_common+0x48>
 8007882:	f104 0a19 	add.w	sl, r4, #25
 8007886:	68e3      	ldr	r3, [r4, #12]
 8007888:	6832      	ldr	r2, [r6, #0]
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	42ab      	cmp	r3, r5
 800788e:	dc26      	bgt.n	80078de <_printf_common+0x96>
 8007890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007894:	6822      	ldr	r2, [r4, #0]
 8007896:	3b00      	subs	r3, #0
 8007898:	bf18      	it	ne
 800789a:	2301      	movne	r3, #1
 800789c:	0692      	lsls	r2, r2, #26
 800789e:	d42b      	bmi.n	80078f8 <_printf_common+0xb0>
 80078a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078a4:	4641      	mov	r1, r8
 80078a6:	4638      	mov	r0, r7
 80078a8:	47c8      	blx	r9
 80078aa:	3001      	adds	r0, #1
 80078ac:	d01e      	beq.n	80078ec <_printf_common+0xa4>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	6922      	ldr	r2, [r4, #16]
 80078b2:	f003 0306 	and.w	r3, r3, #6
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	bf02      	ittt	eq
 80078ba:	68e5      	ldreq	r5, [r4, #12]
 80078bc:	6833      	ldreq	r3, [r6, #0]
 80078be:	1aed      	subeq	r5, r5, r3
 80078c0:	68a3      	ldr	r3, [r4, #8]
 80078c2:	bf0c      	ite	eq
 80078c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c8:	2500      	movne	r5, #0
 80078ca:	4293      	cmp	r3, r2
 80078cc:	bfc4      	itt	gt
 80078ce:	1a9b      	subgt	r3, r3, r2
 80078d0:	18ed      	addgt	r5, r5, r3
 80078d2:	2600      	movs	r6, #0
 80078d4:	341a      	adds	r4, #26
 80078d6:	42b5      	cmp	r5, r6
 80078d8:	d11a      	bne.n	8007910 <_printf_common+0xc8>
 80078da:	2000      	movs	r0, #0
 80078dc:	e008      	b.n	80078f0 <_printf_common+0xa8>
 80078de:	2301      	movs	r3, #1
 80078e0:	4652      	mov	r2, sl
 80078e2:	4641      	mov	r1, r8
 80078e4:	4638      	mov	r0, r7
 80078e6:	47c8      	blx	r9
 80078e8:	3001      	adds	r0, #1
 80078ea:	d103      	bne.n	80078f4 <_printf_common+0xac>
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f4:	3501      	adds	r5, #1
 80078f6:	e7c6      	b.n	8007886 <_printf_common+0x3e>
 80078f8:	18e1      	adds	r1, r4, r3
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	2030      	movs	r0, #48	@ 0x30
 80078fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007902:	4422      	add	r2, r4
 8007904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800790c:	3302      	adds	r3, #2
 800790e:	e7c7      	b.n	80078a0 <_printf_common+0x58>
 8007910:	2301      	movs	r3, #1
 8007912:	4622      	mov	r2, r4
 8007914:	4641      	mov	r1, r8
 8007916:	4638      	mov	r0, r7
 8007918:	47c8      	blx	r9
 800791a:	3001      	adds	r0, #1
 800791c:	d0e6      	beq.n	80078ec <_printf_common+0xa4>
 800791e:	3601      	adds	r6, #1
 8007920:	e7d9      	b.n	80078d6 <_printf_common+0x8e>
	...

08007924 <_printf_i>:
 8007924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	7e0f      	ldrb	r7, [r1, #24]
 800792a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800792c:	2f78      	cmp	r7, #120	@ 0x78
 800792e:	4691      	mov	r9, r2
 8007930:	4680      	mov	r8, r0
 8007932:	460c      	mov	r4, r1
 8007934:	469a      	mov	sl, r3
 8007936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800793a:	d807      	bhi.n	800794c <_printf_i+0x28>
 800793c:	2f62      	cmp	r7, #98	@ 0x62
 800793e:	d80a      	bhi.n	8007956 <_printf_i+0x32>
 8007940:	2f00      	cmp	r7, #0
 8007942:	f000 80d2 	beq.w	8007aea <_printf_i+0x1c6>
 8007946:	2f58      	cmp	r7, #88	@ 0x58
 8007948:	f000 80b9 	beq.w	8007abe <_printf_i+0x19a>
 800794c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007954:	e03a      	b.n	80079cc <_printf_i+0xa8>
 8007956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800795a:	2b15      	cmp	r3, #21
 800795c:	d8f6      	bhi.n	800794c <_printf_i+0x28>
 800795e:	a101      	add	r1, pc, #4	@ (adr r1, 8007964 <_printf_i+0x40>)
 8007960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007964:	080079bd 	.word	0x080079bd
 8007968:	080079d1 	.word	0x080079d1
 800796c:	0800794d 	.word	0x0800794d
 8007970:	0800794d 	.word	0x0800794d
 8007974:	0800794d 	.word	0x0800794d
 8007978:	0800794d 	.word	0x0800794d
 800797c:	080079d1 	.word	0x080079d1
 8007980:	0800794d 	.word	0x0800794d
 8007984:	0800794d 	.word	0x0800794d
 8007988:	0800794d 	.word	0x0800794d
 800798c:	0800794d 	.word	0x0800794d
 8007990:	08007ad1 	.word	0x08007ad1
 8007994:	080079fb 	.word	0x080079fb
 8007998:	08007a8b 	.word	0x08007a8b
 800799c:	0800794d 	.word	0x0800794d
 80079a0:	0800794d 	.word	0x0800794d
 80079a4:	08007af3 	.word	0x08007af3
 80079a8:	0800794d 	.word	0x0800794d
 80079ac:	080079fb 	.word	0x080079fb
 80079b0:	0800794d 	.word	0x0800794d
 80079b4:	0800794d 	.word	0x0800794d
 80079b8:	08007a93 	.word	0x08007a93
 80079bc:	6833      	ldr	r3, [r6, #0]
 80079be:	1d1a      	adds	r2, r3, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6032      	str	r2, [r6, #0]
 80079c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079cc:	2301      	movs	r3, #1
 80079ce:	e09d      	b.n	8007b0c <_printf_i+0x1e8>
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	6820      	ldr	r0, [r4, #0]
 80079d4:	1d19      	adds	r1, r3, #4
 80079d6:	6031      	str	r1, [r6, #0]
 80079d8:	0606      	lsls	r6, r0, #24
 80079da:	d501      	bpl.n	80079e0 <_printf_i+0xbc>
 80079dc:	681d      	ldr	r5, [r3, #0]
 80079de:	e003      	b.n	80079e8 <_printf_i+0xc4>
 80079e0:	0645      	lsls	r5, r0, #25
 80079e2:	d5fb      	bpl.n	80079dc <_printf_i+0xb8>
 80079e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079e8:	2d00      	cmp	r5, #0
 80079ea:	da03      	bge.n	80079f4 <_printf_i+0xd0>
 80079ec:	232d      	movs	r3, #45	@ 0x2d
 80079ee:	426d      	negs	r5, r5
 80079f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f4:	4859      	ldr	r0, [pc, #356]	@ (8007b5c <_printf_i+0x238>)
 80079f6:	230a      	movs	r3, #10
 80079f8:	e011      	b.n	8007a1e <_printf_i+0xfa>
 80079fa:	6821      	ldr	r1, [r4, #0]
 80079fc:	6833      	ldr	r3, [r6, #0]
 80079fe:	0608      	lsls	r0, r1, #24
 8007a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a04:	d402      	bmi.n	8007a0c <_printf_i+0xe8>
 8007a06:	0649      	lsls	r1, r1, #25
 8007a08:	bf48      	it	mi
 8007a0a:	b2ad      	uxthmi	r5, r5
 8007a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a0e:	4853      	ldr	r0, [pc, #332]	@ (8007b5c <_printf_i+0x238>)
 8007a10:	6033      	str	r3, [r6, #0]
 8007a12:	bf14      	ite	ne
 8007a14:	230a      	movne	r3, #10
 8007a16:	2308      	moveq	r3, #8
 8007a18:	2100      	movs	r1, #0
 8007a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a1e:	6866      	ldr	r6, [r4, #4]
 8007a20:	60a6      	str	r6, [r4, #8]
 8007a22:	2e00      	cmp	r6, #0
 8007a24:	bfa2      	ittt	ge
 8007a26:	6821      	ldrge	r1, [r4, #0]
 8007a28:	f021 0104 	bicge.w	r1, r1, #4
 8007a2c:	6021      	strge	r1, [r4, #0]
 8007a2e:	b90d      	cbnz	r5, 8007a34 <_printf_i+0x110>
 8007a30:	2e00      	cmp	r6, #0
 8007a32:	d04b      	beq.n	8007acc <_printf_i+0x1a8>
 8007a34:	4616      	mov	r6, r2
 8007a36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a3e:	5dc7      	ldrb	r7, [r0, r7]
 8007a40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a44:	462f      	mov	r7, r5
 8007a46:	42bb      	cmp	r3, r7
 8007a48:	460d      	mov	r5, r1
 8007a4a:	d9f4      	bls.n	8007a36 <_printf_i+0x112>
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d10b      	bne.n	8007a68 <_printf_i+0x144>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	07df      	lsls	r7, r3, #31
 8007a54:	d508      	bpl.n	8007a68 <_printf_i+0x144>
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	6861      	ldr	r1, [r4, #4]
 8007a5a:	4299      	cmp	r1, r3
 8007a5c:	bfde      	ittt	le
 8007a5e:	2330      	movle	r3, #48	@ 0x30
 8007a60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a68:	1b92      	subs	r2, r2, r6
 8007a6a:	6122      	str	r2, [r4, #16]
 8007a6c:	f8cd a000 	str.w	sl, [sp]
 8007a70:	464b      	mov	r3, r9
 8007a72:	aa03      	add	r2, sp, #12
 8007a74:	4621      	mov	r1, r4
 8007a76:	4640      	mov	r0, r8
 8007a78:	f7ff fee6 	bl	8007848 <_printf_common>
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d14a      	bne.n	8007b16 <_printf_i+0x1f2>
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	b004      	add	sp, #16
 8007a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	f043 0320 	orr.w	r3, r3, #32
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	4833      	ldr	r0, [pc, #204]	@ (8007b60 <_printf_i+0x23c>)
 8007a94:	2778      	movs	r7, #120	@ 0x78
 8007a96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	6831      	ldr	r1, [r6, #0]
 8007a9e:	061f      	lsls	r7, r3, #24
 8007aa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aa4:	d402      	bmi.n	8007aac <_printf_i+0x188>
 8007aa6:	065f      	lsls	r7, r3, #25
 8007aa8:	bf48      	it	mi
 8007aaa:	b2ad      	uxthmi	r5, r5
 8007aac:	6031      	str	r1, [r6, #0]
 8007aae:	07d9      	lsls	r1, r3, #31
 8007ab0:	bf44      	itt	mi
 8007ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ab6:	6023      	strmi	r3, [r4, #0]
 8007ab8:	b11d      	cbz	r5, 8007ac2 <_printf_i+0x19e>
 8007aba:	2310      	movs	r3, #16
 8007abc:	e7ac      	b.n	8007a18 <_printf_i+0xf4>
 8007abe:	4827      	ldr	r0, [pc, #156]	@ (8007b5c <_printf_i+0x238>)
 8007ac0:	e7e9      	b.n	8007a96 <_printf_i+0x172>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	f023 0320 	bic.w	r3, r3, #32
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	e7f6      	b.n	8007aba <_printf_i+0x196>
 8007acc:	4616      	mov	r6, r2
 8007ace:	e7bd      	b.n	8007a4c <_printf_i+0x128>
 8007ad0:	6833      	ldr	r3, [r6, #0]
 8007ad2:	6825      	ldr	r5, [r4, #0]
 8007ad4:	6961      	ldr	r1, [r4, #20]
 8007ad6:	1d18      	adds	r0, r3, #4
 8007ad8:	6030      	str	r0, [r6, #0]
 8007ada:	062e      	lsls	r6, r5, #24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	d501      	bpl.n	8007ae4 <_printf_i+0x1c0>
 8007ae0:	6019      	str	r1, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <_printf_i+0x1c6>
 8007ae4:	0668      	lsls	r0, r5, #25
 8007ae6:	d5fb      	bpl.n	8007ae0 <_printf_i+0x1bc>
 8007ae8:	8019      	strh	r1, [r3, #0]
 8007aea:	2300      	movs	r3, #0
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	4616      	mov	r6, r2
 8007af0:	e7bc      	b.n	8007a6c <_printf_i+0x148>
 8007af2:	6833      	ldr	r3, [r6, #0]
 8007af4:	1d1a      	adds	r2, r3, #4
 8007af6:	6032      	str	r2, [r6, #0]
 8007af8:	681e      	ldr	r6, [r3, #0]
 8007afa:	6862      	ldr	r2, [r4, #4]
 8007afc:	2100      	movs	r1, #0
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7f8 fbee 	bl	80002e0 <memchr>
 8007b04:	b108      	cbz	r0, 8007b0a <_printf_i+0x1e6>
 8007b06:	1b80      	subs	r0, r0, r6
 8007b08:	6060      	str	r0, [r4, #4]
 8007b0a:	6863      	ldr	r3, [r4, #4]
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b14:	e7aa      	b.n	8007a6c <_printf_i+0x148>
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	47d0      	blx	sl
 8007b20:	3001      	adds	r0, #1
 8007b22:	d0ad      	beq.n	8007a80 <_printf_i+0x15c>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	079b      	lsls	r3, r3, #30
 8007b28:	d413      	bmi.n	8007b52 <_printf_i+0x22e>
 8007b2a:	68e0      	ldr	r0, [r4, #12]
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	4298      	cmp	r0, r3
 8007b30:	bfb8      	it	lt
 8007b32:	4618      	movlt	r0, r3
 8007b34:	e7a6      	b.n	8007a84 <_printf_i+0x160>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4632      	mov	r2, r6
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	47d0      	blx	sl
 8007b40:	3001      	adds	r0, #1
 8007b42:	d09d      	beq.n	8007a80 <_printf_i+0x15c>
 8007b44:	3501      	adds	r5, #1
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	9903      	ldr	r1, [sp, #12]
 8007b4a:	1a5b      	subs	r3, r3, r1
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	dcf2      	bgt.n	8007b36 <_printf_i+0x212>
 8007b50:	e7eb      	b.n	8007b2a <_printf_i+0x206>
 8007b52:	2500      	movs	r5, #0
 8007b54:	f104 0619 	add.w	r6, r4, #25
 8007b58:	e7f5      	b.n	8007b46 <_printf_i+0x222>
 8007b5a:	bf00      	nop
 8007b5c:	08007ed9 	.word	0x08007ed9
 8007b60:	08007eea 	.word	0x08007eea

08007b64 <memmove>:
 8007b64:	4288      	cmp	r0, r1
 8007b66:	b510      	push	{r4, lr}
 8007b68:	eb01 0402 	add.w	r4, r1, r2
 8007b6c:	d902      	bls.n	8007b74 <memmove+0x10>
 8007b6e:	4284      	cmp	r4, r0
 8007b70:	4623      	mov	r3, r4
 8007b72:	d807      	bhi.n	8007b84 <memmove+0x20>
 8007b74:	1e43      	subs	r3, r0, #1
 8007b76:	42a1      	cmp	r1, r4
 8007b78:	d008      	beq.n	8007b8c <memmove+0x28>
 8007b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b82:	e7f8      	b.n	8007b76 <memmove+0x12>
 8007b84:	4402      	add	r2, r0
 8007b86:	4601      	mov	r1, r0
 8007b88:	428a      	cmp	r2, r1
 8007b8a:	d100      	bne.n	8007b8e <memmove+0x2a>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b96:	e7f7      	b.n	8007b88 <memmove+0x24>

08007b98 <_sbrk_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4d06      	ldr	r5, [pc, #24]	@ (8007bb4 <_sbrk_r+0x1c>)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	f000 f83e 	bl	8007c24 <_sbrk>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_sbrk_r+0x1a>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_sbrk_r+0x1a>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	2000d238 	.word	0x2000d238

08007bb8 <_realloc_r>:
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	4615      	mov	r5, r2
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	b921      	cbnz	r1, 8007bce <_realloc_r+0x16>
 8007bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc8:	4611      	mov	r1, r2
 8007bca:	f7ff bc59 	b.w	8007480 <_malloc_r>
 8007bce:	b92a      	cbnz	r2, 8007bdc <_realloc_r+0x24>
 8007bd0:	f7ff fbea 	bl	80073a8 <_free_r>
 8007bd4:	2400      	movs	r4, #0
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bdc:	f000 f81a 	bl	8007c14 <_malloc_usable_size_r>
 8007be0:	4285      	cmp	r5, r0
 8007be2:	4606      	mov	r6, r0
 8007be4:	d802      	bhi.n	8007bec <_realloc_r+0x34>
 8007be6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bea:	d8f4      	bhi.n	8007bd6 <_realloc_r+0x1e>
 8007bec:	4629      	mov	r1, r5
 8007bee:	4640      	mov	r0, r8
 8007bf0:	f7ff fc46 	bl	8007480 <_malloc_r>
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d0ec      	beq.n	8007bd4 <_realloc_r+0x1c>
 8007bfa:	42b5      	cmp	r5, r6
 8007bfc:	462a      	mov	r2, r5
 8007bfe:	4621      	mov	r1, r4
 8007c00:	bf28      	it	cs
 8007c02:	4632      	movcs	r2, r6
 8007c04:	f7ff fbc2 	bl	800738c <memcpy>
 8007c08:	4621      	mov	r1, r4
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	f7ff fbcc 	bl	80073a8 <_free_r>
 8007c10:	463c      	mov	r4, r7
 8007c12:	e7e0      	b.n	8007bd6 <_realloc_r+0x1e>

08007c14 <_malloc_usable_size_r>:
 8007c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c18:	1f18      	subs	r0, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bfbc      	itt	lt
 8007c1e:	580b      	ldrlt	r3, [r1, r0]
 8007c20:	18c0      	addlt	r0, r0, r3
 8007c22:	4770      	bx	lr

08007c24 <_sbrk>:
 8007c24:	4a04      	ldr	r2, [pc, #16]	@ (8007c38 <_sbrk+0x14>)
 8007c26:	6811      	ldr	r1, [r2, #0]
 8007c28:	4603      	mov	r3, r0
 8007c2a:	b909      	cbnz	r1, 8007c30 <_sbrk+0xc>
 8007c2c:	4903      	ldr	r1, [pc, #12]	@ (8007c3c <_sbrk+0x18>)
 8007c2e:	6011      	str	r1, [r2, #0]
 8007c30:	6810      	ldr	r0, [r2, #0]
 8007c32:	4403      	add	r3, r0
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	4770      	bx	lr
 8007c38:	2000d248 	.word	0x2000d248
 8007c3c:	2000d250 	.word	0x2000d250

08007c40 <_init>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr

08007c4c <_fini>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr
