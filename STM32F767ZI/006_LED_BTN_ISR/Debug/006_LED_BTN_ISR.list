
006_LED_BTN_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aac  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007cac  08007cac  00008cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080fc  080080fc  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000008  080080fc  080080fc  000090fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008104  08008104  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008104  08008104  00009104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008108  08008108  00009108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800810c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d0a4  2000001c  08008128  0000a01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d0c0  08008128  0000a0c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e3a  00000000  00000000  0000a04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f9  00000000  00000000  0001ee84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00021f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8f  00000000  00000000  000233c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000506e  00000000  00000000  0002434f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001887a  00000000  00000000  000293bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105911  00000000  00000000  00041c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005490  00000000  00000000  0014758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000103  00000000  00000000  0014ca1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007c94 	.word	0x08007c94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	08007c94 	.word	0x08007c94

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000ba84 	.word	0x2000ba84

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f103 0208 	add.w	r2, r3, #8
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f04f 32ff 	mov.w	r2, #4294967295
 80005dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f103 0208 	add.w	r2, r3, #8
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f103 0208 	add.w	r2, r3, #8
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d103      	bne.n	8000686 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e00c      	b.n	80006a0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3308      	adds	r3, #8
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e002      	b.n	8000694 <vListInsert+0x2e>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	429a      	cmp	r2, r3
 800069e:	d2f6      	bcs.n	800068e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	6892      	ldr	r2, [r2, #8]
 80006ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	6852      	ldr	r2, [r2, #4]
 80006f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	d103      	bne.n	800070c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d104      	bne.n	800074a <xQueueGenericReset+0x1e>
 8000740:	492a      	ldr	r1, [pc, #168]	@ (80007ec <xQueueGenericReset+0xc0>)
 8000742:	f240 100d 	movw	r0, #269	@ 0x10d
 8000746:	f005 fe57 	bl	80063f8 <vAssertCalled>

    taskENTER_CRITICAL();
 800074a:	f002 fa65 	bl	8002c18 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000756:	68f9      	ldr	r1, [r7, #12]
 8000758:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800075a:	fb01 f303 	mul.w	r3, r1, r3
 800075e:	441a      	add	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2200      	movs	r2, #0
 8000768:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077a:	3b01      	subs	r3, #1
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000780:	fb01 f303 	mul.w	r3, r1, r3
 8000784:	441a      	add	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	22ff      	movs	r2, #255	@ 0xff
 800078e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	22ff      	movs	r2, #255	@ 0xff
 8000796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d114      	bne.n	80007ca <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d01a      	beq.n	80007de <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3310      	adds	r3, #16
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f961 	bl	8001a74 <xTaskRemoveFromEventList>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <xQueueGenericReset+0xc4>)
 80007ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	e009      	b.n	80007de <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3310      	adds	r3, #16
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fef8 	bl	80005c4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3324      	adds	r3, #36	@ 0x24
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fef3 	bl	80005c4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007de:	f002 fa45 	bl	8002c6c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08007cac 	.word	0x08007cac
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <xQueueGenericCreate+0x1e>
 8000808:	4921      	ldr	r1, [pc, #132]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800080a:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 800080e:	f005 fdf3 	bl	80063f8 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <xQueueGenericCreate+0x3c>
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d101      	bne.n	8000834 <xQueueGenericCreate+0x40>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <xQueueGenericCreate+0x42>
 8000834:	2300      	movs	r3, #0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d104      	bne.n	8000844 <xQueueGenericCreate+0x50>
 800083a:	4915      	ldr	r1, [pc, #84]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800083c:	f44f 70c7 	mov.w	r0, #398	@ 0x18e
 8000840:	f005 fdda 	bl	80063f8 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800084a:	d904      	bls.n	8000856 <xQueueGenericCreate+0x62>
 800084c:	4910      	ldr	r1, [pc, #64]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800084e:	f240 1091 	movw	r0, #401	@ 0x191
 8000852:	f005 fdd1 	bl	80063f8 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3350      	adds	r3, #80	@ 0x50
 800085a:	4618      	mov	r0, r3
 800085c:	f002 faf2 	bl	8002e44 <pvPortMalloc>
 8000860:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3350      	adds	r3, #80	@ 0x50
 8000870:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4613      	mov	r3, r2
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f000 f808 	bl	8000894 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000884:	69bb      	ldr	r3, [r7, #24]
    }
 8000886:	4618      	mov	r0, r3
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	08007cac 	.word	0x08007cac

08000894 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e002      	b.n	80008b6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008c2:	2101      	movs	r1, #1
 80008c4:	69b8      	ldr	r0, [r7, #24]
 80008c6:	f7ff ff31 	bl	800072c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	2073      	movs	r0, #115	@ 0x73
 80008da:	f004 f957 	bl	8004b8c <SEGGER_SYSVIEW_RecordU32x3>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	@ 0x30
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d104      	bne.n	800090e <xQueueGenericSend+0x26>
 8000904:	497e      	ldr	r1, [pc, #504]	@ (8000b00 <xQueueGenericSend+0x218>)
 8000906:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 800090a:	f005 fd75 	bl	80063f8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <xQueueGenericSend+0x34>
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <xQueueGenericSend+0x38>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <xQueueGenericSend+0x3a>
 8000920:	2300      	movs	r3, #0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d104      	bne.n	8000930 <xQueueGenericSend+0x48>
 8000926:	4976      	ldr	r1, [pc, #472]	@ (8000b00 <xQueueGenericSend+0x218>)
 8000928:	f240 300d 	movw	r0, #781	@ 0x30d
 800092c:	f005 fd64 	bl	80063f8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d103      	bne.n	800093e <xQueueGenericSend+0x56>
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800093a:	2b01      	cmp	r3, #1
 800093c:	d101      	bne.n	8000942 <xQueueGenericSend+0x5a>
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <xQueueGenericSend+0x5c>
 8000942:	2300      	movs	r3, #0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <xQueueGenericSend+0x6a>
 8000948:	496d      	ldr	r1, [pc, #436]	@ (8000b00 <xQueueGenericSend+0x218>)
 800094a:	f240 300e 	movw	r0, #782	@ 0x30e
 800094e:	f005 fd53 	bl	80063f8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000952:	f001 fa21 	bl	8001d98 <xTaskGetSchedulerState>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <xQueueGenericSend+0x7a>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <xQueueGenericSend+0x7e>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <xQueueGenericSend+0x80>
 8000966:	2300      	movs	r3, #0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d104      	bne.n	8000976 <xQueueGenericSend+0x8e>
 800096c:	4964      	ldr	r1, [pc, #400]	@ (8000b00 <xQueueGenericSend+0x218>)
 800096e:	f240 3011 	movw	r0, #785	@ 0x311
 8000972:	f005 fd41 	bl	80063f8 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000976:	f002 f94f 	bl	8002c18 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000982:	429a      	cmp	r2, r3
 8000984:	d302      	bcc.n	800098c <xQueueGenericSend+0xa4>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d136      	bne.n	80009fa <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	4618      	mov	r0, r3
 8000990:	f004 ff38 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	460b      	mov	r3, r1
 800099e:	4601      	mov	r1, r0
 80009a0:	205a      	movs	r0, #90	@ 0x5a
 80009a2:	f004 f969 	bl	8004c78 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6a38      	ldr	r0, [r7, #32]
 80009ac:	f000 fa54 	bl	8000e58 <prvCopyDataToQueue>
 80009b0:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d010      	beq.n	80009dc <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	3324      	adds	r3, #36	@ 0x24
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 f858 	bl	8001a74 <xTaskRemoveFromEventList>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d013      	beq.n	80009f2 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <xQueueGenericSend+0x21c>)
 80009cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	f3bf 8f4f 	dsb	sy
 80009d6:	f3bf 8f6f 	isb	sy
 80009da:	e00a      	b.n	80009f2 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009e2:	4b48      	ldr	r3, [pc, #288]	@ (8000b04 <xQueueGenericSend+0x21c>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009f2:	f002 f93b 	bl	8002c6c <vPortExitCritical>
                return pdPASS;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e07d      	b.n	8000af6 <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d110      	bne.n	8000a22 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a00:	f002 f934 	bl	8002c6c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fefc 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	460b      	mov	r3, r1
 8000a16:	4601      	mov	r1, r0
 8000a18:	205a      	movs	r0, #90	@ 0x5a
 8000a1a:	f004 f92d 	bl	8004c78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e069      	b.n	8000af6 <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d106      	bne.n	8000a36 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 f883 	bl	8001b38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a36:	f002 f919 	bl	8002c6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a3a:	f000 fde7 	bl	800160c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a3e:	f002 f8eb 	bl	8002c18 <vPortEnterCritical>
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4e:	d103      	bne.n	8000a58 <xQueueGenericSend+0x170>
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d103      	bne.n	8000a6e <xQueueGenericSend+0x186>
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a6e:	f002 f8fd 	bl	8002c6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a72:	1d3a      	adds	r2, r7, #4
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f872 	bl	8001b64 <xTaskCheckForTimeOut>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d124      	bne.n	8000ad0 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a86:	6a38      	ldr	r0, [r7, #32]
 8000a88:	f000 fade 	bl	8001048 <prvIsQueueFull>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d018      	beq.n	8000ac4 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	3310      	adds	r3, #16
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 ffa0 	bl	80019e0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000aa0:	6a38      	ldr	r0, [r7, #32]
 8000aa2:	f000 fa69 	bl	8000f78 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aa6:	f000 fdbf 	bl	8001628 <xTaskResumeAll>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f47f af62 	bne.w	8000976 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <xQueueGenericSend+0x21c>)
 8000ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	f3bf 8f4f 	dsb	sy
 8000abe:	f3bf 8f6f 	isb	sy
 8000ac2:	e758      	b.n	8000976 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ac4:	6a38      	ldr	r0, [r7, #32]
 8000ac6:	f000 fa57 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000aca:	f000 fdad 	bl	8001628 <xTaskResumeAll>
 8000ace:	e752      	b.n	8000976 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ad0:	6a38      	ldr	r0, [r7, #32]
 8000ad2:	f000 fa51 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ad6:	f000 fda7 	bl	8001628 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fe91 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	460b      	mov	r3, r1
 8000aec:	4601      	mov	r1, r0
 8000aee:	205a      	movs	r0, #90	@ 0x5a
 8000af0:	f004 f8c2 	bl	8004c78 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000af4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08007cac 	.word	0x08007cac
 8000b04:	e000ed04 	.word	0xe000ed04

08000b08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8000b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d104      	bne.n	8000b2a <xQueueGenericSendFromISR+0x22>
 8000b20:	494c      	ldr	r1, [pc, #304]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b22:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8000b26:	f005 fc67 	bl	80063f8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <xQueueGenericSendFromISR+0x30>
 8000b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <xQueueGenericSendFromISR+0x34>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <xQueueGenericSendFromISR+0x36>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <xQueueGenericSendFromISR+0x44>
 8000b42:	4944      	ldr	r1, [pc, #272]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b44:	f240 30e1 	movw	r0, #993	@ 0x3e1
 8000b48:	f005 fc56 	bl	80063f8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d103      	bne.n	8000b5a <xQueueGenericSendFromISR+0x52>
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d101      	bne.n	8000b5e <xQueueGenericSendFromISR+0x56>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <xQueueGenericSendFromISR+0x58>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <xQueueGenericSendFromISR+0x66>
 8000b64:	493b      	ldr	r1, [pc, #236]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b66:	f240 30e2 	movw	r0, #994	@ 0x3e2
 8000b6a:	f005 fc45 	bl	80063f8 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b6e:	f002 f935 	bl	8002ddc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b72:	f3ef 8211 	mrs	r2, BASEPRI
 8000b76:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000b7a:	f383 8811 	msr	BASEPRI, r3
 8000b7e:	f3bf 8f6f 	isb	sy
 8000b82:	f3bf 8f4f 	dsb	sy
 8000b86:	61ba      	str	r2, [r7, #24]
 8000b88:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d302      	bcc.n	8000ba0 <xQueueGenericSendFromISR+0x98>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d142      	bne.n	8000c26 <xQueueGenericSendFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bae:	61fb      	str	r3, [r7, #28]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 fe26 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000bb8:	4601      	mov	r1, r0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	2060      	movs	r0, #96	@ 0x60
 8000bc0:	f003 ff8a 	bl	8004ad8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bca:	f000 f945 	bl	8000e58 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bce:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd6:	d112      	bne.n	8000bfe <xQueueGenericSendFromISR+0xf6>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01f      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be2:	3324      	adds	r3, #36	@ 0x24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 ff45 	bl	8001a74 <xTaskRemoveFromEventList>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d017      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d014      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e010      	b.n	8000c20 <xQueueGenericSendFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000bfe:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c04:	d104      	bne.n	8000c10 <xQueueGenericSendFromISR+0x108>
 8000c06:	4913      	ldr	r1, [pc, #76]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000c08:	f240 406b 	movw	r0, #1131	@ 0x46b
 8000c0c:	f005 fbf4 	bl	80063f8 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8000c24:	e00b      	b.n	8000c3e <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 fdeb 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	2060      	movs	r0, #96	@ 0x60
 8000c36:	f003 ff4f 	bl	8004ad8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c48:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	@ 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08007cac 	.word	0x08007cac

08000c58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08d      	sub	sp, #52	@ 0x34
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <xQueueReceive+0x24>
 8000c72:	4977      	ldr	r1, [pc, #476]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000c74:	f240 502f 	movw	r0, #1327	@ 0x52f
 8000c78:	f005 fbbe 	bl	80063f8 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <xQueueReceive+0x32>
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <xQueueReceive+0x36>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <xQueueReceive+0x38>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <xQueueReceive+0x46>
 8000c94:	496e      	ldr	r1, [pc, #440]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000c96:	f240 5033 	movw	r0, #1331	@ 0x533
 8000c9a:	f005 fbad 	bl	80063f8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c9e:	f001 f87b 	bl	8001d98 <xTaskGetSchedulerState>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <xQueueReceive+0x56>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <xQueueReceive+0x5a>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <xQueueReceive+0x5c>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <xQueueReceive+0x6a>
 8000cb8:	4965      	ldr	r1, [pc, #404]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000cba:	f44f 60a7 	mov.w	r0, #1336	@ 0x538
 8000cbe:	f005 fb9b 	bl	80063f8 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000cc2:	f001 ffa9 	bl	8002c18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cca:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d02f      	beq.n	8000d32 <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	6a38      	ldr	r0, [r7, #32]
 8000cd6:	f000 f929 	bl	8000f2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 fd91 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f004 fd8d 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000cea:	4602      	mov	r2, r0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	9100      	str	r1, [sp, #0]
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	205c      	movs	r0, #92	@ 0x5c
 8000cf6:	f003 ffbf 	bl	8004c78 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00f      	beq.n	8000d2a <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	3310      	adds	r3, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 feb0 	bl	8001a74 <xTaskRemoveFromEventList>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <xQueueReceive+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e54 <xQueueReceive+0x1fc>)
 8000d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	f3bf 8f4f 	dsb	sy
 8000d26:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d2a:	f001 ff9f 	bl	8002c6c <vPortExitCritical>
                return pdPASS;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e08a      	b.n	8000e48 <xQueueReceive+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d113      	bne.n	8000d60 <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d38:	f001 ff98 	bl	8002c6c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fd60 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000d44:	4604      	mov	r4, r0
 8000d46:	2000      	movs	r0, #0
 8000d48:	f004 fd5c 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2101      	movs	r1, #1
 8000d52:	9100      	str	r1, [sp, #0]
 8000d54:	4621      	mov	r1, r4
 8000d56:	205c      	movs	r0, #92	@ 0x5c
 8000d58:	f003 ff8e 	bl	8004c78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e073      	b.n	8000e48 <xQueueReceive+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fee4 	bl	8001b38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d74:	f001 ff7a 	bl	8002c6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d78:	f000 fc48 	bl	800160c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d7c:	f001 ff4c 	bl	8002c18 <vPortEnterCritical>
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d103      	bne.n	8000d96 <xQueueReceive+0x13e>
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da2:	d103      	bne.n	8000dac <xQueueReceive+0x154>
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dac:	f001 ff5e 	bl	8002c6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000db0:	1d3a      	adds	r2, r7, #4
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fed3 	bl	8001b64 <xTaskCheckForTimeOut>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d124      	bne.n	8000e0e <xQueueReceive+0x1b6>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f000 f929 	bl	800101c <prvIsQueueEmpty>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d018      	beq.n	8000e02 <xQueueReceive+0x1aa>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	3324      	adds	r3, #36	@ 0x24
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fe01 	bl	80019e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000dde:	6a38      	ldr	r0, [r7, #32]
 8000de0:	f000 f8ca 	bl	8000f78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000de4:	f000 fc20 	bl	8001628 <xTaskResumeAll>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f47f af69 	bne.w	8000cc2 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <xQueueReceive+0x1fc>)
 8000df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	e75f      	b.n	8000cc2 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e02:	6a38      	ldr	r0, [r7, #32]
 8000e04:	f000 f8b8 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e08:	f000 fc0e 	bl	8001628 <xTaskResumeAll>
 8000e0c:	e759      	b.n	8000cc2 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e0e:	6a38      	ldr	r0, [r7, #32]
 8000e10:	f000 f8b2 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e14:	f000 fc08 	bl	8001628 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e18:	6a38      	ldr	r0, [r7, #32]
 8000e1a:	f000 f8ff 	bl	800101c <prvIsQueueEmpty>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f43f af4e 	beq.w	8000cc2 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fceb 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	f004 fce7 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8000e36:	4602      	mov	r2, r0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	9100      	str	r1, [sp, #0]
 8000e3e:	4621      	mov	r1, r4
 8000e40:	205c      	movs	r0, #92	@ 0x5c
 8000e42:	f003 ff19 	bl	8004c78 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e46:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	372c      	adds	r7, #44	@ 0x2c
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	08007cac 	.word	0x08007cac
 8000e54:	e000ed04 	.word	0xe000ed04

08000e58 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e6c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d14d      	bne.n	8000f1a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 ffa6 	bl	8001dd4 <xTaskPriorityDisinherit>
 8000e88:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	e043      	b.n	8000f1a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d119      	bne.n	8000ecc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6858      	ldr	r0, [r3, #4]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	f006 fee8 	bl	8007c78 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	441a      	add	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d32b      	bcc.n	8000f1a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	e026      	b.n	8000f1a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	68d8      	ldr	r0, [r3, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	f006 fece 	bl	8007c78 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	441a      	add	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	425b      	negs	r3, r3
 8000f02:	441a      	add	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d105      	bne.n	8000f1a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f22:	697b      	ldr	r3, [r7, #20]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d018      	beq.n	8000f70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	441a      	add	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d303      	bcc.n	8000f60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68d9      	ldr	r1, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	461a      	mov	r2, r3
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f006 fe84 	bl	8007c78 <memcpy>
    }
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f80:	f001 fe4a 	bl	8002c18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f8c:	e011      	b.n	8000fb2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d012      	beq.n	8000fbc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3324      	adds	r3, #36	@ 0x24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd6a 	bl	8001a74 <xTaskRemoveFromEventList>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000fa6:	f000 fe39 	bl	8001c1c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	dce9      	bgt.n	8000f8e <prvUnlockQueue+0x16>
 8000fba:	e000      	b.n	8000fbe <prvUnlockQueue+0x46>
                        break;
 8000fbc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	22ff      	movs	r2, #255	@ 0xff
 8000fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000fc6:	f001 fe51 	bl	8002c6c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000fca:	f001 fe25 	bl	8002c18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000fd4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fd6:	e011      	b.n	8000ffc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d012      	beq.n	8001006 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fd45 	bl	8001a74 <xTaskRemoveFromEventList>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ff0:	f000 fe14 	bl	8001c1c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dce9      	bgt.n	8000fd8 <prvUnlockQueue+0x60>
 8001004:	e000      	b.n	8001008 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001006:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001010:	f001 fe2c 	bl	8002c6c <vPortExitCritical>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001024:	f001 fdf8 	bl	8002c18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001030:	2301      	movs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e001      	b.n	800103a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800103a:	f001 fe17 	bl	8002c6c <vPortExitCritical>

    return xReturn;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001050:	f001 fde2 	bl	8002c18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800105c:	429a      	cmp	r2, r3
 800105e:	d102      	bne.n	8001066 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e001      	b.n	800106a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800106a:	f001 fdff 	bl	8002c6c <vPortExitCritical>

    return xReturn;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e01e      	b.n	80010c6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d115      	bne.n	80010c0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001094:	4910      	ldr	r1, [pc, #64]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fba9 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 80010b2:	4601      	mov	r1, r0
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	2071      	movs	r0, #113	@ 0x71
 80010ba:	f003 fd0d 	bl	8004ad8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80010be:	e006      	b.n	80010ce <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	d9dd      	bls.n	8001088 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000038 	.word	0x20000038

080010dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80010ec:	f001 fd94 	bl	8002c18 <vPortEnterCritical>
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d103      	bne.n	8001106 <vQueueWaitForMessageRestricted+0x2a>
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800110c:	b25b      	sxtb	r3, r3
 800110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001112:	d103      	bne.n	800111c <vQueueWaitForMessageRestricted+0x40>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800111c:	f001 fda6 	bl	8002c6c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3324      	adds	r3, #36	@ 0x24
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fc75 	bl	8001a20 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff1e 	bl	8000f78 <prvUnlockQueue>
    }
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	@ 0x30
 8001148:	af04      	add	r7, sp, #16
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fe73 	bl	8002e44 <pvPortMalloc>
 800115e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00e      	beq.n	8001184 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001166:	2058      	movs	r0, #88	@ 0x58
 8001168:	f001 fe6c 	bl	8002e44 <pvPortMalloc>
 800116c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
 800117a:	e005      	b.n	8001188 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f001 ff2f 	bl	8002fe0 <vPortFree>
 8001182:	e001      	b.n	8001188 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	2300      	movs	r3, #0
 8001192:	9303      	str	r3, [sp, #12]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 f80f 	bl	80011c8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011aa:	69f8      	ldr	r0, [r7, #28]
 80011ac:	f000 f89e 	bl	80012ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	e002      	b.n	80011bc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80011bc:	69bb      	ldr	r3, [r7, #24]
    }
 80011be:	4618      	mov	r0, r3
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80011d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	461a      	mov	r2, r3
 80011e0:	21a5      	movs	r1, #165	@ 0xa5
 80011e2:	f006 fd1d 	bl	8007c20 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80011f0:	440b      	add	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f023 0307 	bic.w	r3, r3, #7
 80011fe:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <prvInitialiseNewTask+0x4c>
 800120a:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <prvInitialiseNewTask+0x120>)
 800120c:	f240 3069 	movw	r0, #873	@ 0x369
 8001210:	f005 f8f2 	bl	80063f8 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01f      	beq.n	800125a <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e012      	b.n	8001246 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	4413      	add	r3, r2
 8001226:	7819      	ldrb	r1, [r3, #0]
 8001228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	4413      	add	r3, r2
 800122e:	3334      	adds	r3, #52	@ 0x34
 8001230:	460a      	mov	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d9e9      	bls.n	8001220 <prvInitialiseNewTask+0x58>
 800124c:	e000      	b.n	8001250 <prvInitialiseNewTask+0x88>
            {
                break;
 800124e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001258:	e003      	b.n	8001262 <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d901      	bls.n	800126c <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001268:	2304      	movs	r3, #4
 800126a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800126c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001274:	6a3a      	ldr	r2, [r7, #32]
 8001276:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	3304      	adds	r3, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f9be 	bl	8000604 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	3318      	adds	r3, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f9b9 	bl	8000604 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001296:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f1c3 0205 	rsb	r2, r3, #5
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80012a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012aa:	3350      	adds	r3, #80	@ 0x50
 80012ac:	2204      	movs	r2, #4
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 fcb5 	bl	8007c20 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80012b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b8:	3354      	adds	r3, #84	@ 0x54
 80012ba:	2201      	movs	r2, #1
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fcae 	bl	8007c20 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	6938      	ldr	r0, [r7, #16]
 80012ca:	f001 fb0b 	bl	80028e4 <pxPortInitialiseStack>
 80012ce:	4602      	mov	r2, r0
 80012d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08007d18 	.word	0x08007d18

080012ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012f4:	f001 fc90 	bl	8002c18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012f8:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a3a      	ldr	r2, [pc, #232]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 8001300:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800130a:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001310:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d110      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001318:	f000 fca4 	bl	8001c64 <prvInitialiseTaskLists>
 800131c:	e00d      	b.n	800133a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800131e:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <prvAddNewTaskToReadyList+0x104>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001326:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	429a      	cmp	r2, r3
 8001332:	d802      	bhi.n	800133a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001334:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a2c      	ldr	r2, [pc, #176]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 8001342:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d016      	beq.n	8001380 <prvAddNewTaskToReadyList+0x94>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f004 f92f 	bl	80055b8 <SEGGER_SYSVIEW_OnTaskCreate>
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	461d      	mov	r5, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461c      	mov	r4, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	1ae3      	subs	r3, r4, r3
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	462b      	mov	r3, r5
 800137c:	f001 fff4 	bl	8003368 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	f004 f99c 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <prvAddNewTaskToReadyList+0x10c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	4a18      	ldr	r2, [pc, #96]	@ (80013f8 <prvAddNewTaskToReadyList+0x10c>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <prvAddNewTaskToReadyList+0x110>)
 80013a8:	441a      	add	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f7ff f934 	bl	800061e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80013b6:	f001 fc59 	bl	8002c6c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <prvAddNewTaskToReadyList+0x104>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00e      	beq.n	80013e0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <prvAddNewTaskToReadyList+0x114>)
 80013d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	f3bf 8f4f 	dsb	sy
 80013dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}
 80013e8:	20000150 	.word	0x20000150
 80013ec:	20000078 	.word	0x20000078
 80013f0:	2000015c 	.word	0x2000015c
 80013f4:	2000016c 	.word	0x2000016c
 80013f8:	20000158 	.word	0x20000158
 80013fc:	2000007c 	.word	0x2000007c
 8001400:	e000ed04 	.word	0xe000ed04

08001404 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800140c:	f001 fc04 	bl	8002c18 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <vTaskDelete+0x18>
 8001416:	4b43      	ldr	r3, [pc, #268]	@ (8001524 <vTaskDelete+0x120>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	e000      	b.n	800141e <vTaskDelete+0x1a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3304      	adds	r3, #4
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f957 	bl	80006d8 <uxListRemove>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d115      	bne.n	800145c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001434:	493c      	ldr	r1, [pc, #240]	@ (8001528 <vTaskDelete+0x124>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10a      	bne.n	800145c <vTaskDelete+0x58>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	2201      	movs	r2, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	4b36      	ldr	r3, [pc, #216]	@ (800152c <vTaskDelete+0x128>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4013      	ands	r3, r2
 8001458:	4a34      	ldr	r2, [pc, #208]	@ (800152c <vTaskDelete+0x128>)
 800145a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3318      	adds	r3, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f935 	bl	80006d8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800146e:	4b30      	ldr	r3, [pc, #192]	@ (8001530 <vTaskDelete+0x12c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	4a2e      	ldr	r2, [pc, #184]	@ (8001530 <vTaskDelete+0x12c>)
 8001476:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <vTaskDelete+0x120>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	429a      	cmp	r2, r3
 8001480:	d118      	bne.n	80014b4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3304      	adds	r3, #4
 8001486:	4619      	mov	r1, r3
 8001488:	482a      	ldr	r0, [pc, #168]	@ (8001534 <vTaskDelete+0x130>)
 800148a:	f7ff f8c8 	bl	800061e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <vTaskDelete+0x134>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a28      	ldr	r2, [pc, #160]	@ (8001538 <vTaskDelete+0x134>)
 8001496:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4618      	mov	r0, r3
 800149c:	f004 f9b2 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	2022      	movs	r0, #34	@ 0x22
 80014a6:	f003 fadb 	bl	8004a60 <SEGGER_SYSVIEW_RecordU32>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 ffc3 	bl	8003438 <SYSVIEW_DeleteTask>
 80014b2:	e016      	b.n	80014e2 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80014b4:	4b21      	ldr	r3, [pc, #132]	@ (800153c <vTaskDelete+0x138>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4a20      	ldr	r2, [pc, #128]	@ (800153c <vTaskDelete+0x138>)
 80014bc:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 f99f 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4619      	mov	r1, r3
 80014ca:	2022      	movs	r0, #34	@ 0x22
 80014cc:	f003 fac8 	bl	8004a60 <SEGGER_SYSVIEW_RecordU32>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 ffb0 	bl	8003438 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 fc31 	bl	8001d40 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80014de:	f000 fc3f 	bl	8001d60 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80014e2:	f001 fbc3 	bl	8002c6c <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <vTaskDelete+0x13c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d015      	beq.n	800151a <vTaskDelete+0x116>
        {
            if( pxTCB == pxCurrentTCB )
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <vTaskDelete+0x120>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d110      	bne.n	800151a <vTaskDelete+0x116>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <vTaskDelete+0x140>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <vTaskDelete+0x106>
 8001500:	4911      	ldr	r1, [pc, #68]	@ (8001548 <vTaskDelete+0x144>)
 8001502:	f240 40dd 	movw	r0, #1245	@ 0x4dd
 8001506:	f004 ff77 	bl	80063f8 <vAssertCalled>
                portYIELD_WITHIN_API();
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <vTaskDelete+0x148>)
 800150c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	f3bf 8f4f 	dsb	sy
 8001516:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000078 	.word	0x20000078
 8001528:	2000007c 	.word	0x2000007c
 800152c:	20000158 	.word	0x20000158
 8001530:	2000016c 	.word	0x2000016c
 8001534:	20000124 	.word	0x20000124
 8001538:	20000138 	.word	0x20000138
 800153c:	20000150 	.word	0x20000150
 8001540:	2000015c 	.word	0x2000015c
 8001544:	20000178 	.word	0x20000178
 8001548:	08007d18 	.word	0x08007d18
 800154c:	e000ed04 	.word	0xe000ed04

08001550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <vTaskStartScheduler+0x98>)
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	2300      	movs	r3, #0
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	2282      	movs	r2, #130	@ 0x82
 8001562:	4922      	ldr	r1, [pc, #136]	@ (80015ec <vTaskStartScheduler+0x9c>)
 8001564:	4822      	ldr	r0, [pc, #136]	@ (80015f0 <vTaskStartScheduler+0xa0>)
 8001566:	f7ff fded 	bl	8001144 <xTaskCreate>
 800156a:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001572:	f000 fea1 	bl	80022b8 <xTimerCreateTimerTask>
 8001576:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d124      	bne.n	80015c8 <vTaskStartScheduler+0x78>
        __asm volatile
 800157e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8001582:	f383 8811 	msr	BASEPRI, r3
 8001586:	f3bf 8f6f 	isb	sy
 800158a:	f3bf 8f4f 	dsb	sy
 800158e:	603b      	str	r3, [r7, #0]
    }
 8001590:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <vTaskStartScheduler+0xa4>)
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <vTaskStartScheduler+0xa8>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <vTaskStartScheduler+0xac>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <vTaskStartScheduler+0xb0>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <vTaskStartScheduler+0x98>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d102      	bne.n	80015b8 <vTaskStartScheduler+0x68>
 80015b2:	f003 ffe5 	bl	8005580 <SEGGER_SYSVIEW_OnIdle>
 80015b6:	e004      	b.n	80015c2 <vTaskStartScheduler+0x72>
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <vTaskStartScheduler+0xb0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 f83d 	bl	800563c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80015c2:	f001 fa17 	bl	80029f4 <xPortStartScheduler>
 80015c6:	e008      	b.n	80015da <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ce:	d104      	bne.n	80015da <vTaskStartScheduler+0x8a>
 80015d0:	490c      	ldr	r1, [pc, #48]	@ (8001604 <vTaskStartScheduler+0xb4>)
 80015d2:	f640 0041 	movw	r0, #2113	@ 0x841
 80015d6:	f004 ff0f 	bl	80063f8 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <vTaskStartScheduler+0xb8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000174 	.word	0x20000174
 80015ec:	08007d84 	.word	0x08007d84
 80015f0:	08001c35 	.word	0x08001c35
 80015f4:	20000170 	.word	0x20000170
 80015f8:	2000015c 	.word	0x2000015c
 80015fc:	20000154 	.word	0x20000154
 8001600:	20000078 	.word	0x20000078
 8001604:	08007d18 	.word	0x08007d18
 8001608:	20000000 	.word	0x20000000

0800160c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <vTaskSuspendAll+0x18>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	4a03      	ldr	r2, [pc, #12]	@ (8001624 <vTaskSuspendAll+0x18>)
 8001618:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	20000178 	.word	0x20000178

08001628 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001636:	4b40      	ldr	r3, [pc, #256]	@ (8001738 <xTaskResumeAll+0x110>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d104      	bne.n	8001648 <xTaskResumeAll+0x20>
 800163e:	493f      	ldr	r1, [pc, #252]	@ (800173c <xTaskResumeAll+0x114>)
 8001640:	f640 00b4 	movw	r0, #2228	@ 0x8b4
 8001644:	f004 fed8 	bl	80063f8 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001648:	f001 fae6 	bl	8002c18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800164c:	4b3a      	ldr	r3, [pc, #232]	@ (8001738 <xTaskResumeAll+0x110>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	4a39      	ldr	r2, [pc, #228]	@ (8001738 <xTaskResumeAll+0x110>)
 8001654:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001656:	4b38      	ldr	r3, [pc, #224]	@ (8001738 <xTaskResumeAll+0x110>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d165      	bne.n	800172a <xTaskResumeAll+0x102>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <xTaskResumeAll+0x118>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d061      	beq.n	800172a <xTaskResumeAll+0x102>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001666:	e032      	b.n	80016ce <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001668:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <xTaskResumeAll+0x11c>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3318      	adds	r3, #24
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff f82f 	bl	80006d8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3304      	adds	r3, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f82a 	bl	80006d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	f004 f81a 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001690:	2201      	movs	r2, #1
 8001692:	409a      	lsls	r2, r3
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <xTaskResumeAll+0x120>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4313      	orrs	r3, r2
 800169a:	4a2b      	ldr	r2, [pc, #172]	@ (8001748 <xTaskResumeAll+0x120>)
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4a28      	ldr	r2, [pc, #160]	@ (800174c <xTaskResumeAll+0x124>)
 80016ac:	441a      	add	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3304      	adds	r3, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4610      	mov	r0, r2
 80016b6:	f7fe ffb2 	bl	800061e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016be:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <xTaskResumeAll+0x128>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d302      	bcc.n	80016ce <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 80016c8:	4b22      	ldr	r3, [pc, #136]	@ (8001754 <xTaskResumeAll+0x12c>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <xTaskResumeAll+0x11c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1c8      	bne.n	8001668 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80016dc:	f000 fb40 	bl	8001d60 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80016e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <xTaskResumeAll+0x130>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d010      	beq.n	800170e <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80016ec:	f000 f85a 	bl	80017a4 <xTaskIncrementTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <xTaskResumeAll+0x12c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f1      	bne.n	80016ec <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <xTaskResumeAll+0x130>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <xTaskResumeAll+0x12c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <xTaskResumeAll+0x102>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001716:	2301      	movs	r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <xTaskResumeAll+0x134>)
 800171c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	f3bf 8f4f 	dsb	sy
 8001726:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800172a:	f001 fa9f 	bl	8002c6c <vPortExitCritical>

    return xAlreadyYielded;
 800172e:	68bb      	ldr	r3, [r7, #8]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000178 	.word	0x20000178
 800173c:	08007d18 	.word	0x08007d18
 8001740:	20000150 	.word	0x20000150
 8001744:	20000110 	.word	0x20000110
 8001748:	20000158 	.word	0x20000158
 800174c:	2000007c 	.word	0x2000007c
 8001750:	20000078 	.word	0x20000078
 8001754:	20000164 	.word	0x20000164
 8001758:	20000160 	.word	0x20000160
 800175c:	e000ed04 	.word	0xe000ed04

08001760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <xTaskGetTickCount+0x1c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000154 	.word	0x20000154

08001780 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001786:	f001 fb29 	bl	8002ddc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800178e:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <xTaskGetTickCountFromISR+0x20>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001794:	683b      	ldr	r3, [r7, #0]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000154 	.word	0x20000154

080017a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017ae:	4b4d      	ldr	r3, [pc, #308]	@ (80018e4 <xTaskIncrementTick+0x140>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 808c 	bne.w	80018d0 <xTaskIncrementTick+0x12c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80017b8:	4b4b      	ldr	r3, [pc, #300]	@ (80018e8 <xTaskIncrementTick+0x144>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80017c0:	4a49      	ldr	r2, [pc, #292]	@ (80018e8 <xTaskIncrementTick+0x144>)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11a      	bne.n	8001802 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 80017cc:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <xTaskIncrementTick+0x148>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <xTaskIncrementTick+0x3c>
 80017d6:	4946      	ldr	r1, [pc, #280]	@ (80018f0 <xTaskIncrementTick+0x14c>)
 80017d8:	f640 20c7 	movw	r0, #2759	@ 0xac7
 80017dc:	f004 fe0c 	bl	80063f8 <vAssertCalled>
 80017e0:	4b42      	ldr	r3, [pc, #264]	@ (80018ec <xTaskIncrementTick+0x148>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b43      	ldr	r3, [pc, #268]	@ (80018f4 <xTaskIncrementTick+0x150>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a40      	ldr	r2, [pc, #256]	@ (80018ec <xTaskIncrementTick+0x148>)
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4a41      	ldr	r2, [pc, #260]	@ (80018f4 <xTaskIncrementTick+0x150>)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b40      	ldr	r3, [pc, #256]	@ (80018f8 <xTaskIncrementTick+0x154>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a3f      	ldr	r2, [pc, #252]	@ (80018f8 <xTaskIncrementTick+0x154>)
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	f000 faaf 	bl	8001d60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001802:	4b3e      	ldr	r3, [pc, #248]	@ (80018fc <xTaskIncrementTick+0x158>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d34c      	bcc.n	80018a6 <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800180c:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <xTaskIncrementTick+0x148>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d104      	bne.n	8001820 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001816:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <xTaskIncrementTick+0x158>)
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	601a      	str	r2, [r3, #0]
                    break;
 800181e:	e042      	b.n	80018a6 <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001820:	4b32      	ldr	r3, [pc, #200]	@ (80018ec <xTaskIncrementTick+0x148>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d203      	bcs.n	8001840 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001838:	4a30      	ldr	r2, [pc, #192]	@ (80018fc <xTaskIncrementTick+0x158>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800183e:	e032      	b.n	80018a6 <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3304      	adds	r3, #4
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe ff47 	bl	80006d8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	3318      	adds	r3, #24
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe ff3e 	bl	80006d8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 ff2e 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001868:	2201      	movs	r2, #1
 800186a:	409a      	lsls	r2, r3
 800186c:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <xTaskIncrementTick+0x15c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4313      	orrs	r3, r2
 8001872:	4a23      	ldr	r2, [pc, #140]	@ (8001900 <xTaskIncrementTick+0x15c>)
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4a20      	ldr	r2, [pc, #128]	@ (8001904 <xTaskIncrementTick+0x160>)
 8001884:	441a      	add	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3304      	adds	r3, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f7fe fec6 	bl	800061e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001896:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <xTaskIncrementTick+0x164>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	429a      	cmp	r2, r3
 800189e:	d3b5      	bcc.n	800180c <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 80018a0:	2301      	movs	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018a4:	e7b2      	b.n	800180c <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <xTaskIncrementTick+0x164>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ac:	4915      	ldr	r1, [pc, #84]	@ (8001904 <xTaskIncrementTick+0x160>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d901      	bls.n	80018c2 <xTaskIncrementTick+0x11e>
                {
                    xSwitchRequired = pdTRUE;
 80018be:	2301      	movs	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <xTaskIncrementTick+0x168>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <xTaskIncrementTick+0x136>
                {
                    xSwitchRequired = pdTRUE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e004      	b.n	80018da <xTaskIncrementTick+0x136>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <xTaskIncrementTick+0x16c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <xTaskIncrementTick+0x16c>)
 80018d8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80018da:	697b      	ldr	r3, [r7, #20]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000178 	.word	0x20000178
 80018e8:	20000154 	.word	0x20000154
 80018ec:	20000108 	.word	0x20000108
 80018f0:	08007d18 	.word	0x08007d18
 80018f4:	2000010c 	.word	0x2000010c
 80018f8:	20000168 	.word	0x20000168
 80018fc:	20000170 	.word	0x20000170
 8001900:	20000158 	.word	0x20000158
 8001904:	2000007c 	.word	0x2000007c
 8001908:	20000078 	.word	0x20000078
 800190c:	20000164 	.word	0x20000164
 8001910:	20000160 	.word	0x20000160

08001914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800191a:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <vTaskSwitchContext+0xb0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <vTaskSwitchContext+0xb4>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001928:	e047      	b.n	80019ba <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 800192a:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <vTaskSwitchContext+0xb4>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001930:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <vTaskSwitchContext+0xb8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	f1c3 031f 	rsb	r3, r3, #31
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4922      	ldr	r1, [pc, #136]	@ (80019d0 <vTaskSwitchContext+0xbc>)
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d104      	bne.n	8001964 <vTaskSwitchContext+0x50>
 800195a:	491e      	ldr	r1, [pc, #120]	@ (80019d4 <vTaskSwitchContext+0xc0>)
 800195c:	f640 4002 	movw	r0, #3074	@ 0xc02
 8001960:	f004 fd4a 	bl	80063f8 <vAssertCalled>
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4a18      	ldr	r2, [pc, #96]	@ (80019d0 <vTaskSwitchContext+0xbc>)
 8001970:	4413      	add	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3308      	adds	r3, #8
 8001986:	429a      	cmp	r2, r3
 8001988:	d104      	bne.n	8001994 <vTaskSwitchContext+0x80>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <vTaskSwitchContext+0xc4>)
 800199c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <vTaskSwitchContext+0xc4>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <vTaskSwitchContext+0xc8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d102      	bne.n	80019b0 <vTaskSwitchContext+0x9c>
 80019aa:	f003 fde9 	bl	8005580 <SEGGER_SYSVIEW_OnIdle>
}
 80019ae:	e004      	b.n	80019ba <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <vTaskSwitchContext+0xc4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fe41 	bl	800563c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000178 	.word	0x20000178
 80019c8:	20000164 	.word	0x20000164
 80019cc:	20000158 	.word	0x20000158
 80019d0:	2000007c 	.word	0x2000007c
 80019d4:	08007d18 	.word	0x08007d18
 80019d8:	20000078 	.word	0x20000078
 80019dc:	20000174 	.word	0x20000174

080019e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d104      	bne.n	80019fa <vTaskPlaceOnEventList+0x1a>
 80019f0:	4909      	ldr	r1, [pc, #36]	@ (8001a18 <vTaskPlaceOnEventList+0x38>)
 80019f2:	f640 401c 	movw	r0, #3100	@ 0xc1c
 80019f6:	f004 fcff 	bl	80063f8 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <vTaskPlaceOnEventList+0x3c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3318      	adds	r3, #24
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe fe2f 	bl	8000666 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a08:	2101      	movs	r1, #1
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	f000 fbdc 	bl	80021c8 <prvAddCurrentTaskToDelayedList>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	08007d18 	.word	0x08007d18
 8001a1c:	20000078 	.word	0x20000078

08001a20 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d104      	bne.n	8001a3c <vTaskPlaceOnEventListRestricted+0x1c>
 8001a32:	490e      	ldr	r1, [pc, #56]	@ (8001a6c <vTaskPlaceOnEventListRestricted+0x4c>)
 8001a34:	f640 404b 	movw	r0, #3147	@ 0xc4b
 8001a38:	f004 fcde 	bl	80063f8 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <vTaskPlaceOnEventListRestricted+0x50>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3318      	adds	r3, #24
 8001a42:	4619      	mov	r1, r3
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7fe fdea 	bl	800061e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
 8001a54:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001a56:	2024      	movs	r0, #36	@ 0x24
 8001a58:	f002 ffe4 	bl	8004a24 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	68b8      	ldr	r0, [r7, #8]
 8001a60:	f000 fbb2 	bl	80021c8 <prvAddCurrentTaskToDelayedList>
    }
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	08007d18 	.word	0x08007d18
 8001a70:	20000078 	.word	0x20000078

08001a74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d104      	bne.n	8001a94 <xTaskRemoveFromEventList+0x20>
 8001a8a:	4924      	ldr	r1, [pc, #144]	@ (8001b1c <xTaskRemoveFromEventList+0xa8>)
 8001a8c:	f640 407b 	movw	r0, #3195	@ 0xc7b
 8001a90:	f004 fcb2 	bl	80063f8 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3318      	adds	r3, #24
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fe1d 	bl	80006d8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <xTaskRemoveFromEventList+0xac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d120      	bne.n	8001ae8 <xTaskRemoveFromEventList+0x74>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fe14 	bl	80006d8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fe04 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	2201      	movs	r2, #1
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <xTaskRemoveFromEventList+0xb0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	4a17      	ldr	r2, [pc, #92]	@ (8001b24 <xTaskRemoveFromEventList+0xb0>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4a14      	ldr	r2, [pc, #80]	@ (8001b28 <xTaskRemoveFromEventList+0xb4>)
 8001ad8:	441a      	add	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3304      	adds	r3, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f7fe fd9c 	bl	800061e <vListInsertEnd>
 8001ae6:	e005      	b.n	8001af4 <xTaskRemoveFromEventList+0x80>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3318      	adds	r3, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	480f      	ldr	r0, [pc, #60]	@ (8001b2c <xTaskRemoveFromEventList+0xb8>)
 8001af0:	f7fe fd95 	bl	800061e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <xTaskRemoveFromEventList+0xbc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d905      	bls.n	8001b0e <xTaskRemoveFromEventList+0x9a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <xTaskRemoveFromEventList+0xc0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e001      	b.n	8001b12 <xTaskRemoveFromEventList+0x9e>
    }
    else
    {
        xReturn = pdFALSE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	08007d18 	.word	0x08007d18
 8001b20:	20000178 	.word	0x20000178
 8001b24:	20000158 	.word	0x20000158
 8001b28:	2000007c 	.word	0x2000007c
 8001b2c:	20000110 	.word	0x20000110
 8001b30:	20000078 	.word	0x20000078
 8001b34:	20000164 	.word	0x20000164

08001b38 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <vTaskInternalSetTimeOutState+0x24>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <vTaskInternalSetTimeOutState+0x28>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000168 	.word	0x20000168
 8001b60:	20000154 	.word	0x20000154

08001b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <xTaskCheckForTimeOut+0x1a>
 8001b74:	4926      	ldr	r1, [pc, #152]	@ (8001c10 <xTaskCheckForTimeOut+0xac>)
 8001b76:	f640 40f6 	movw	r0, #3318	@ 0xcf6
 8001b7a:	f004 fc3d 	bl	80063f8 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <xTaskCheckForTimeOut+0x2a>
 8001b84:	4922      	ldr	r1, [pc, #136]	@ (8001c10 <xTaskCheckForTimeOut+0xac>)
 8001b86:	f640 40f7 	movw	r0, #3319	@ 0xcf7
 8001b8a:	f004 fc35 	bl	80063f8 <vAssertCalled>

    taskENTER_CRITICAL();
 8001b8e:	f001 f843 	bl	8002c18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <xTaskCheckForTimeOut+0xb0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001baa:	d102      	bne.n	8001bb2 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e026      	b.n	8001c00 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <xTaskCheckForTimeOut+0xb4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d00a      	beq.n	8001bd4 <xTaskCheckForTimeOut+0x70>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d305      	bcc.n	8001bd4 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e015      	b.n	8001c00 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20b      	bcs.n	8001bf6 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad2      	subs	r2, r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa4 	bl	8001b38 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e004      	b.n	8001c00 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001c00:	f001 f834 	bl	8002c6c <vPortExitCritical>

    return xReturn;
 8001c04:	697b      	ldr	r3, [r7, #20]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	08007d18 	.word	0x08007d18
 8001c14:	20000154 	.word	0x20000154
 8001c18:	20000168 	.word	0x20000168

08001c1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <vTaskMissedYield+0x14>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000164 	.word	0x20000164

08001c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c3c:	f000 f852 	bl	8001ce4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <prvIdleTask+0x28>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d9f9      	bls.n	8001c3c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <prvIdleTask+0x2c>)
 8001c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c58:	e7f0      	b.n	8001c3c <prvIdleTask+0x8>
 8001c5a:	bf00      	nop
 8001c5c:	2000007c 	.word	0x2000007c
 8001c60:	e000ed04 	.word	0xe000ed04

08001c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	e00c      	b.n	8001c8a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <prvInitialiseTaskLists+0x60>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fca0 	bl	80005c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3301      	adds	r3, #1
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d9ef      	bls.n	8001c70 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c90:	480d      	ldr	r0, [pc, #52]	@ (8001cc8 <prvInitialiseTaskLists+0x64>)
 8001c92:	f7fe fc97 	bl	80005c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c96:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <prvInitialiseTaskLists+0x68>)
 8001c98:	f7fe fc94 	bl	80005c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c9c:	480c      	ldr	r0, [pc, #48]	@ (8001cd0 <prvInitialiseTaskLists+0x6c>)
 8001c9e:	f7fe fc91 	bl	80005c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001ca2:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <prvInitialiseTaskLists+0x70>)
 8001ca4:	f7fe fc8e 	bl	80005c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <prvInitialiseTaskLists+0x74>)
 8001caa:	f7fe fc8b 	bl	80005c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <prvInitialiseTaskLists+0x78>)
 8001cb0:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <prvInitialiseTaskLists+0x64>)
 8001cb2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <prvInitialiseTaskLists+0x7c>)
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <prvInitialiseTaskLists+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000007c 	.word	0x2000007c
 8001cc8:	200000e0 	.word	0x200000e0
 8001ccc:	200000f4 	.word	0x200000f4
 8001cd0:	20000110 	.word	0x20000110
 8001cd4:	20000124 	.word	0x20000124
 8001cd8:	2000013c 	.word	0x2000013c
 8001cdc:	20000108 	.word	0x20000108
 8001ce0:	2000010c 	.word	0x2000010c

08001ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cea:	e019      	b.n	8001d20 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001cec:	f000 ff94 	bl	8002c18 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cf0:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <prvCheckTasksWaitingTermination+0x50>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fceb 	bl	80006d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001d02:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <prvCheckTasksWaitingTermination+0x54>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <prvCheckTasksWaitingTermination+0x54>)
 8001d0a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <prvCheckTasksWaitingTermination+0x58>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <prvCheckTasksWaitingTermination+0x58>)
 8001d14:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001d16:	f000 ffa9 	bl	8002c6c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f810 	bl	8001d40 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <prvCheckTasksWaitingTermination+0x58>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e1      	bne.n	8001cec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000124 	.word	0x20000124
 8001d38:	20000150 	.word	0x20000150
 8001d3c:	20000138 	.word	0x20000138

08001d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 f947 	bl	8002fe0 <vPortFree>
                vPortFree( pxTCB );
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f001 f944 	bl	8002fe0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d64:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <prvResetNextTaskUnblockTime+0x30>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d104      	bne.n	8001d78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <prvResetNextTaskUnblockTime+0x34>)
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d76:	e005      	b.n	8001d84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <prvResetNextTaskUnblockTime+0x30>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <prvResetNextTaskUnblockTime+0x34>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000108 	.word	0x20000108
 8001d94:	20000170 	.word	0x20000170

08001d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <xTaskGetSchedulerState+0x34>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001da6:	2301      	movs	r3, #1
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	e008      	b.n	8001dbe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <xTaskGetSchedulerState+0x38>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001db4:	2302      	movs	r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	e001      	b.n	8001dbe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001dbe:	687b      	ldr	r3, [r7, #4]
    }
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	2000015c 	.word	0x2000015c
 8001dd0:	20000178 	.word	0x20000178

08001dd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d05c      	beq.n	8001ea4 <xTaskPriorityDisinherit+0xd0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001dea:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <xTaskPriorityDisinherit+0xdc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d004      	beq.n	8001dfe <xTaskPriorityDisinherit+0x2a>
 8001df4:	492f      	ldr	r1, [pc, #188]	@ (8001eb4 <xTaskPriorityDisinherit+0xe0>)
 8001df6:	f241 0056 	movw	r0, #4182	@ 0x1056
 8001dfa:	f004 fafd 	bl	80063f8 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d104      	bne.n	8001e10 <xTaskPriorityDisinherit+0x3c>
 8001e06:	492b      	ldr	r1, [pc, #172]	@ (8001eb4 <xTaskPriorityDisinherit+0xe0>)
 8001e08:	f241 0057 	movw	r0, #4183	@ 0x1057
 8001e0c:	f004 faf4 	bl	80063f8 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d03e      	beq.n	8001ea4 <xTaskPriorityDisinherit+0xd0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d13a      	bne.n	8001ea4 <xTaskPriorityDisinherit+0xd0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3304      	adds	r3, #4
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fc50 	bl	80006d8 <uxListRemove>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10a      	bne.n	8001e54 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	2201      	movs	r2, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <xTaskPriorityDisinherit+0xe4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <xTaskPriorityDisinherit+0xe4>)
 8001e52:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4619      	mov	r1, r3
 8001e58:	204a      	movs	r0, #74	@ 0x4a
 8001e5a:	f002 fe01 	bl	8004a60 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	f1c3 0205 	rsb	r2, r3, #5
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	2201      	movs	r2, #1
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <xTaskPriorityDisinherit+0xe4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <xTaskPriorityDisinherit+0xe4>)
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <xTaskPriorityDisinherit+0xe8>)
 8001e92:	441a      	add	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	3304      	adds	r3, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f7fe fbbf 	bl	800061e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    }
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000078 	.word	0x20000078
 8001eb4:	08007d18 	.word	0x08007d18
 8001eb8:	20000158 	.word	0x20000158
 8001ebc:	2000007c 	.word	0x2000007c

08001ec0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d004      	beq.n	8001ede <xTaskGenericNotifyWait+0x1e>
 8001ed4:	4939      	ldr	r1, [pc, #228]	@ (8001fbc <xTaskGenericNotifyWait+0xfc>)
 8001ed6:	f241 20b5 	movw	r0, #4789	@ 0x12b5
 8001eda:	f004 fa8d 	bl	80063f8 <vAssertCalled>

        taskENTER_CRITICAL();
 8001ede:	f000 fe9b 	bl	8002c18 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <xTaskGenericNotifyWait+0x100>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3354      	adds	r3, #84	@ 0x54
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d022      	beq.n	8001f3a <xTaskGenericNotifyWait+0x7a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001ef4:	4b32      	ldr	r3, [pc, #200]	@ (8001fc0 <xTaskGenericNotifyWait+0x100>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	3214      	adds	r2, #20
 8001efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	43d2      	mvns	r2, r2
 8001f04:	4011      	ands	r1, r2
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	3214      	adds	r2, #20
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <xTaskGenericNotifyWait+0x100>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	3354      	adds	r3, #84	@ 0x54
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <xTaskGenericNotifyWait+0x7a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f22:	2101      	movs	r1, #1
 8001f24:	6a38      	ldr	r0, [r7, #32]
 8001f26:	f000 f94f 	bl	80021c8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001f2a:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <xTaskGenericNotifyWait+0x104>)
 8001f2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001f3a:	f000 fe97 	bl	8002c6c <vPortExitCritical>

        taskENTER_CRITICAL();
 8001f3e:	f000 fe6b 	bl	8002c18 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	2040      	movs	r0, #64	@ 0x40
 8001f50:	f002 fe92 	bl	8004c78 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <xTaskGenericNotifyWait+0x100>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	3214      	adds	r2, #20
 8001f62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <xTaskGenericNotifyWait+0x100>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	3354      	adds	r3, #84	@ 0x54
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d002      	beq.n	8001f82 <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e00e      	b.n	8001fa0 <xTaskGenericNotifyWait+0xe0>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001f82:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <xTaskGenericNotifyWait+0x100>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	3214      	adds	r2, #20
 8001f8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	43d2      	mvns	r2, r2
 8001f92:	4011      	ands	r1, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	3214      	adds	r2, #20
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <xTaskGenericNotifyWait+0x100>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3354      	adds	r3, #84	@ 0x54
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001fae:	f000 fe5d 	bl	8002c6c <vPortExitCritical>

        return xReturn;
 8001fb2:	697b      	ldr	r3, [r7, #20]
    }
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	08007d18 	.word	0x08007d18
 8001fc0:	20000078 	.word	0x20000078
 8001fc4:	e000ed04 	.word	0xe000ed04

08001fc8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d104      	bne.n	8001fea <xTaskGenericNotifyFromISR+0x22>
 8001fe0:	4971      	ldr	r1, [pc, #452]	@ (80021a8 <xTaskGenericNotifyFromISR+0x1e0>)
 8001fe2:	f241 308a 	movw	r0, #5002	@ 0x138a
 8001fe6:	f004 fa07 	bl	80063f8 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <xTaskGenericNotifyFromISR+0x32>
 8001ff0:	496d      	ldr	r1, [pc, #436]	@ (80021a8 <xTaskGenericNotifyFromISR+0x1e0>)
 8001ff2:	f241 308b 	movw	r0, #5003	@ 0x138b
 8001ff6:	f004 f9ff 	bl	80063f8 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ffa:	f000 feef 	bl	8002ddc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
        __asm volatile
 8002002:	f3ef 8211 	mrs	r2, BASEPRI
 8002006:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	61fa      	str	r2, [r7, #28]
 8002018:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 800201a:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
        {
            if( pulPreviousNotificationValue != NULL )
 800201e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <xTaskGenericNotifyFromISR+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	3214      	adds	r2, #20
 800202a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800202e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002030:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	3354      	adds	r3, #84	@ 0x54
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4413      	add	r3, r2
 8002046:	3354      	adds	r3, #84	@ 0x54
 8002048:	2202      	movs	r2, #2
 800204a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d83b      	bhi.n	80020ca <xTaskGenericNotifyFromISR+0x102>
 8002052:	a201      	add	r2, pc, #4	@ (adr r2, 8002058 <xTaskGenericNotifyFromISR+0x90>)
 8002054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002058:	080020df 	.word	0x080020df
 800205c:	0800206d 	.word	0x0800206d
 8002060:	08002089 	.word	0x08002089
 8002064:	080020a1 	.word	0x080020a1
 8002068:	080020af 	.word	0x080020af
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800206c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	3214      	adds	r2, #20
 8002072:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	ea42 0103 	orr.w	r1, r2, r3
 800207c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	3214      	adds	r2, #20
 8002082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002086:	e02d      	b.n	80020e4 <xTaskGenericNotifyFromISR+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	3214      	adds	r2, #20
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	1c59      	adds	r1, r3, #1
 8002094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	3214      	adds	r2, #20
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800209e:	e021      	b.n	80020e4 <xTaskGenericNotifyFromISR+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80020a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	3214      	adds	r2, #20
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80020ac:	e01a      	b.n	80020e4 <xTaskGenericNotifyFromISR+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80020ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d006      	beq.n	80020c4 <xTaskGenericNotifyFromISR+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80020b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	3214      	adds	r2, #20
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80020c2:	e00f      	b.n	80020e4 <xTaskGenericNotifyFromISR+0x11c>
                        xReturn = pdFAIL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 80020c8:	e00c      	b.n	80020e4 <xTaskGenericNotifyFromISR+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80020ca:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <xTaskGenericNotifyFromISR+0x1e4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <xTaskGenericNotifyFromISR+0x11a>
 80020d2:	4935      	ldr	r1, [pc, #212]	@ (80021a8 <xTaskGenericNotifyFromISR+0x1e0>)
 80020d4:	f241 30d2 	movw	r0, #5074	@ 0x13d2
 80020d8:	f004 f98e 	bl	80063f8 <vAssertCalled>
                    break;
 80020dc:	e001      	b.n	80020e2 <xTaskGenericNotifyFromISR+0x11a>
                    break;
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <xTaskGenericNotifyFromISR+0x11c>
                    break;
 80020e2:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fb8c 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 80020ec:	78f9      	ldrb	r1, [r7, #3]
 80020ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020f2:	9201      	str	r2, [sp, #4]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	460b      	mov	r3, r1
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4601      	mov	r1, r0
 80020fc:	203f      	movs	r0, #63	@ 0x3f
 80020fe:	f002 fe4d 	bl	8004d9c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002102:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002106:	2b01      	cmp	r3, #1
 8002108:	d143      	bne.n	8002192 <xTaskGenericNotifyFromISR+0x1ca>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800210a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <xTaskGenericNotifyFromISR+0x154>
 8002112:	4925      	ldr	r1, [pc, #148]	@ (80021a8 <xTaskGenericNotifyFromISR+0x1e0>)
 8002114:	f241 30dd 	movw	r0, #5085	@ 0x13dd
 8002118:	f004 f96e 	bl	80063f8 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800211c:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <xTaskGenericNotifyFromISR+0x1e8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d120      	bne.n	8002166 <xTaskGenericNotifyFromISR+0x19e>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002126:	3304      	adds	r3, #4
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fad5 	bl	80006d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800212e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fac5 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <xTaskGenericNotifyFromISR+0x1ec>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	4a1b      	ldr	r2, [pc, #108]	@ (80021b4 <xTaskGenericNotifyFromISR+0x1ec>)
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4a18      	ldr	r2, [pc, #96]	@ (80021b8 <xTaskGenericNotifyFromISR+0x1f0>)
 8002156:	441a      	add	r2, r3
 8002158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215a:	3304      	adds	r3, #4
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f7fe fa5d 	bl	800061e <vListInsertEnd>
 8002164:	e005      	b.n	8002172 <xTaskGenericNotifyFromISR+0x1aa>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	3318      	adds	r3, #24
 800216a:	4619      	mov	r1, r3
 800216c:	4813      	ldr	r0, [pc, #76]	@ (80021bc <xTaskGenericNotifyFromISR+0x1f4>)
 800216e:	f7fe fa56 	bl	800061e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002176:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <xTaskGenericNotifyFromISR+0x1f8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217c:	429a      	cmp	r2, r3
 800217e:	d908      	bls.n	8002192 <xTaskGenericNotifyFromISR+0x1ca>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <xTaskGenericNotifyFromISR+0x1c4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <xTaskGenericNotifyFromISR+0x1fc>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	617b      	str	r3, [r7, #20]
        __asm volatile
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f383 8811 	msr	BASEPRI, r3
    }
 800219c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800219e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80021a0:	4618      	mov	r0, r3
 80021a2:	3730      	adds	r7, #48	@ 0x30
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	08007d18 	.word	0x08007d18
 80021ac:	20000154 	.word	0x20000154
 80021b0:	20000178 	.word	0x20000178
 80021b4:	20000158 	.word	0x20000158
 80021b8:	2000007c 	.word	0x2000007c
 80021bc:	20000110 	.word	0x20000110
 80021c0:	20000078 	.word	0x20000078
 80021c4:	20000164 	.word	0x20000164

080021c8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80021d2:	4b32      	ldr	r3, [pc, #200]	@ (800229c <prvAddCurrentTaskToDelayedList+0xd4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021d8:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3304      	adds	r3, #4
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fa7a 	bl	80006d8 <uxListRemove>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80021ea:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	2201      	movs	r2, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	4b2a      	ldr	r3, [pc, #168]	@ (80022a4 <prvAddCurrentTaskToDelayedList+0xdc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4013      	ands	r3, r2
 80021fe:	4a29      	ldr	r2, [pc, #164]	@ (80022a4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002200:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d110      	bne.n	800222c <prvAddCurrentTaskToDelayedList+0x64>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002210:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	211b      	movs	r1, #27
 8002216:	4618      	mov	r0, r3
 8002218:	f003 fa94 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800221c:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3304      	adds	r3, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4820      	ldr	r0, [pc, #128]	@ (80022a8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002226:	f7fe f9fa 	bl	800061e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800222a:	e032      	b.n	8002292 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002234:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d20f      	bcs.n	8002264 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002244:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2104      	movs	r1, #4
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fa7a 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002250:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <prvAddCurrentTaskToDelayedList+0xe4>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3304      	adds	r3, #4
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f7fe fa02 	bl	8000666 <vListInsert>
}
 8002262:	e016      	b.n	8002292 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002264:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2104      	movs	r1, #4
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fa6a 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3304      	adds	r3, #4
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7fe f9f2 	bl	8000666 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002282:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <prvAddCurrentTaskToDelayedList+0xec>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	d202      	bcs.n	8002292 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800228c:	4a09      	ldr	r2, [pc, #36]	@ (80022b4 <prvAddCurrentTaskToDelayedList+0xec>)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	6013      	str	r3, [r2, #0]
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000154 	.word	0x20000154
 80022a0:	20000078 	.word	0x20000078
 80022a4:	20000158 	.word	0x20000158
 80022a8:	2000013c 	.word	0x2000013c
 80022ac:	2000010c 	.word	0x2000010c
 80022b0:	20000108 	.word	0x20000108
 80022b4:	20000170 	.word	0x20000170

080022b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80022c2:	f000 fad9 	bl	8002878 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <xTimerCreateTimerTask+0x48>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <xTimerCreateTimerTask+0x4c>)
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	2304      	movs	r3, #4
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022dc:	490a      	ldr	r1, [pc, #40]	@ (8002308 <xTimerCreateTimerTask+0x50>)
 80022de:	480b      	ldr	r0, [pc, #44]	@ (800230c <xTimerCreateTimerTask+0x54>)
 80022e0:	f7fe ff30 	bl	8001144 <xTaskCreate>
 80022e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <xTimerCreateTimerTask+0x3e>
 80022ec:	4908      	ldr	r1, [pc, #32]	@ (8002310 <xTimerCreateTimerTask+0x58>)
 80022ee:	f240 100d 	movw	r0, #269	@ 0x10d
 80022f2:	f004 f881 	bl	80063f8 <vAssertCalled>
        return xReturn;
 80022f6:	687b      	ldr	r3, [r7, #4]
    }
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200001ac 	.word	0x200001ac
 8002304:	200001b0 	.word	0x200001b0
 8002308:	08007d9c 	.word	0x08007d9c
 800230c:	0800243d 	.word	0x0800243d
 8002310:	08007da4 	.word	0x08007da4

08002314 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <xTimerGenericCommand+0x22>
 800232c:	491c      	ldr	r1, [pc, #112]	@ (80023a0 <xTimerGenericCommand+0x8c>)
 800232e:	f44f 70c1 	mov.w	r0, #386	@ 0x182
 8002332:	f004 f861 	bl	80063f8 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002336:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <xTimerGenericCommand+0x90>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d02a      	beq.n	8002394 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b05      	cmp	r3, #5
 800234e:	dc18      	bgt.n	8002382 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002350:	f7ff fd22 	bl	8001d98 <xTaskGetSchedulerState>
 8002354:	4603      	mov	r3, r0
 8002356:	2b02      	cmp	r3, #2
 8002358:	d109      	bne.n	800236e <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <xTimerGenericCommand+0x90>)
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	f107 0114 	add.w	r1, r7, #20
 8002362:	2300      	movs	r3, #0
 8002364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002366:	f7fe fabf 	bl	80008e8 <xQueueGenericSend>
 800236a:	6278      	str	r0, [r7, #36]	@ 0x24
 800236c:	e012      	b.n	8002394 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800236e:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <xTimerGenericCommand+0x90>)
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	f107 0114 	add.w	r1, r7, #20
 8002376:	2300      	movs	r3, #0
 8002378:	2200      	movs	r2, #0
 800237a:	f7fe fab5 	bl	80008e8 <xQueueGenericSend>
 800237e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002380:	e008      	b.n	8002394 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002382:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <xTimerGenericCommand+0x90>)
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	f107 0114 	add.w	r1, r7, #20
 800238a:	2300      	movs	r3, #0
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	f7fe fbbb 	bl	8000b08 <xQueueGenericSendFromISR>
 8002392:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002396:	4618      	mov	r0, r3
 8002398:	3728      	adds	r7, #40	@ 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	08007da4 	.word	0x08007da4
 80023a4:	200001ac 	.word	0x200001ac

080023a8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023b2:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <prvProcessExpiredTimer+0x8c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3304      	adds	r3, #4
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f989 	bl	80006d8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01d      	beq.n	8002410 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	18d1      	adds	r1, r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f8d1 	bl	8002588 <prvInsertTimerInActiveList>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01a      	beq.n	8002422 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	2100      	movs	r1, #0
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7ff ff8c 	bl	8002314 <xTimerGenericCommand>
 80023fc:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10e      	bne.n	8002422 <prvProcessExpiredTimer+0x7a>
 8002404:	490c      	ldr	r1, [pc, #48]	@ (8002438 <prvProcessExpiredTimer+0x90>)
 8002406:	f44f 7005 	mov.w	r0, #532	@ 0x214
 800240a:	f003 fff5 	bl	80063f8 <vAssertCalled>
 800240e:	e008      	b.n	8002422 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	4798      	blx	r3
    }
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200001a4 	.word	0x200001a4
 8002438:	08007da4 	.word	0x08007da4

0800243c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f859 	bl	8002500 <prvGetNextExpireTime>
 800244e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4619      	mov	r1, r3
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f805 	bl	8002464 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800245a:	f000 f8d7 	bl	800260c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800245e:	bf00      	nop
 8002460:	e7f0      	b.n	8002444 <prvTimerTask+0x8>
	...

08002464 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800246e:	f7ff f8cd 	bl	800160c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f866 	bl	8002548 <prvSampleTimeNow>
 800247c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d130      	bne.n	80024e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <prvProcessTimerOrBlockTask+0x3c>
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	429a      	cmp	r2, r3
 8002490:	d806      	bhi.n	80024a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002492:	f7ff f8c9 	bl	8001628 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002496:	68f9      	ldr	r1, [r7, #12]
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff85 	bl	80023a8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800249e:	e024      	b.n	80024ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80024a6:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <prvProcessTimerOrBlockTask+0x90>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <prvProcessTimerOrBlockTask+0x50>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <prvProcessTimerOrBlockTask+0x52>
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <prvProcessTimerOrBlockTask+0x94>)
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fe09 	bl	80010dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80024ca:	f7ff f8ad 	bl	8001628 <xTaskResumeAll>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <prvProcessTimerOrBlockTask+0x98>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
    }
 80024e4:	e001      	b.n	80024ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80024e6:	f7ff f89f 	bl	8001628 <xTaskResumeAll>
    }
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200001a8 	.word	0x200001a8
 80024f8:	200001ac 	.word	0x200001ac
 80024fc:	e000ed04 	.word	0xe000ed04

08002500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002508:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <prvGetNextExpireTime+0x44>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <prvGetNextExpireTime+0x16>
 8002512:	2201      	movs	r2, #1
 8002514:	e000      	b.n	8002518 <prvGetNextExpireTime+0x18>
 8002516:	2200      	movs	r2, #0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002524:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <prvGetNextExpireTime+0x44>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e001      	b.n	8002534 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002534:	68fb      	ldr	r3, [r7, #12]
    }
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	200001a4 	.word	0x200001a4

08002548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002550:	f7ff f906 	bl	8001760 <xTaskGetTickCount>
 8002554:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002556:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <prvSampleTimeNow+0x3c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d205      	bcs.n	800256c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002560:	f000 f92a 	bl	80027b8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e002      	b.n	8002572 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002572:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <prvSampleTimeNow+0x3c>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002578:	68fb      	ldr	r3, [r7, #12]
    }
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200001b4 	.word	0x200001b4

08002588 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d812      	bhi.n	80025d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	1ad2      	subs	r2, r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d302      	bcc.n	80025c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80025bc:	2301      	movs	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e01b      	b.n	80025fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <prvInsertTimerInActiveList+0x7c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3304      	adds	r3, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f7fe f84a 	bl	8000666 <vListInsert>
 80025d2:	e012      	b.n	80025fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d206      	bcs.n	80025ea <prvInsertTimerInActiveList+0x62>
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d302      	bcc.n	80025ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e007      	b.n	80025fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <prvInsertTimerInActiveList+0x80>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3304      	adds	r3, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4610      	mov	r0, r2
 80025f6:	f7fe f836 	bl	8000666 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80025fa:	697b      	ldr	r3, [r7, #20]
    }
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200001a8 	.word	0x200001a8
 8002608:	200001a4 	.word	0x200001a4

0800260c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	@ 0x30
 8002610:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002612:	e0bb      	b.n	800278c <prvProcessReceivedCommands+0x180>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da13      	bge.n	8002642 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	3304      	adds	r3, #4
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <prvProcessReceivedCommands+0x26>
 8002628:	4961      	ldr	r1, [pc, #388]	@ (80027b0 <prvProcessReceivedCommands+0x1a4>)
 800262a:	f240 20fa 	movw	r0, #762	@ 0x2fa
 800262e:	f003 fee3 	bl	80063f8 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002638:	6850      	ldr	r0, [r2, #4]
 800263a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263c:	6892      	ldr	r2, [r2, #8]
 800263e:	4611      	mov	r1, r2
 8002640:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f2c0 80a1 	blt.w	800278c <prvProcessReceivedCommands+0x180>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	3304      	adds	r3, #4
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe f83c 	bl	80006d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff70 	bl	8002548 <prvSampleTimeNow>
 8002668:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b09      	cmp	r3, #9
 800266e:	f200 808a 	bhi.w	8002786 <prvProcessReceivedCommands+0x17a>
 8002672:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <prvProcessReceivedCommands+0x6c>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	080026a1 	.word	0x080026a1
 800267c:	080026a1 	.word	0x080026a1
 8002680:	080026a1 	.word	0x080026a1
 8002684:	0800270b 	.word	0x0800270b
 8002688:	0800271f 	.word	0x0800271f
 800268c:	0800275d 	.word	0x0800275d
 8002690:	080026a1 	.word	0x080026a1
 8002694:	080026a1 	.word	0x080026a1
 8002698:	0800270b 	.word	0x0800270b
 800269c:	0800271f 	.word	0x0800271f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	18d1      	adds	r1, r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	6a38      	ldr	r0, [r7, #32]
 80026c0:	f7ff ff62 	bl	8002588 <prvInsertTimerInActiveList>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d05f      	beq.n	800278a <prvProcessReceivedCommands+0x17e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	6a38      	ldr	r0, [r7, #32]
 80026d0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d054      	beq.n	800278a <prvProcessReceivedCommands+0x17e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	441a      	add	r2, r3
 80026e8:	2300      	movs	r3, #0
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	6a38      	ldr	r0, [r7, #32]
 80026f2:	f7ff fe0f 	bl	8002314 <xTimerGenericCommand>
 80026f6:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d145      	bne.n	800278a <prvProcessReceivedCommands+0x17e>
 80026fe:	492c      	ldr	r1, [pc, #176]	@ (80027b0 <prvProcessReceivedCommands+0x1a4>)
 8002700:	f240 3036 	movw	r0, #822	@ 0x336
 8002704:	f003 fe78 	bl	80063f8 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002708:	e03f      	b.n	800278a <prvProcessReceivedCommands+0x17e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	b2da      	uxtb	r2, r3
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800271c:	e036      	b.n	800278c <prvProcessReceivedCommands+0x180>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	b2da      	uxtb	r2, r3
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <prvProcessReceivedCommands+0x13c>
 800273e:	491c      	ldr	r1, [pc, #112]	@ (80027b0 <prvProcessReceivedCommands+0x1a4>)
 8002740:	f240 304f 	movw	r0, #847	@ 0x34f
 8002744:	f003 fe58 	bl	80063f8 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	18d1      	adds	r1, r2, r3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	6a38      	ldr	r0, [r7, #32]
 8002756:	f7ff ff17 	bl	8002588 <prvInsertTimerInActiveList>
                        break;
 800275a:	e017      	b.n	800278c <prvProcessReceivedCommands+0x180>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 800276a:	6a38      	ldr	r0, [r7, #32]
 800276c:	f000 fc38 	bl	8002fe0 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002770:	e00c      	b.n	800278c <prvProcessReceivedCommands+0x180>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002784:	e002      	b.n	800278c <prvProcessReceivedCommands+0x180>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002786:	bf00      	nop
 8002788:	e000      	b.n	800278c <prvProcessReceivedCommands+0x180>
                        break;
 800278a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800278c:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <prvProcessReceivedCommands+0x1a8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f107 0108 	add.w	r1, r7, #8
 8002794:	2200      	movs	r2, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fa5e 	bl	8000c58 <xQueueReceive>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f47f af38 	bne.w	8002614 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3728      	adds	r7, #40	@ 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	08007da4 	.word	0x08007da4
 80027b4:	200001ac 	.word	0x200001ac

080027b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80027be:	e042      	b.n	8002846 <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027c0:	4b2a      	ldr	r3, [pc, #168]	@ (800286c <prvSwitchTimerLists+0xb4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027ca:	4b28      	ldr	r3, [pc, #160]	@ (800286c <prvSwitchTimerLists+0xb4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd ff7d 	bl	80006d8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d028      	beq.n	8002846 <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90e      	bls.n	8002824 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002812:	4b16      	ldr	r3, [pc, #88]	@ (800286c <prvSwitchTimerLists+0xb4>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3304      	adds	r3, #4
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7fd ff22 	bl	8000666 <vListInsert>
 8002822:	e010      	b.n	8002846 <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2300      	movs	r3, #0
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	2100      	movs	r1, #0
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fd70 	bl	8002314 <xTimerGenericCommand>
 8002834:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <prvSwitchTimerLists+0x8e>
 800283c:	490c      	ldr	r1, [pc, #48]	@ (8002870 <prvSwitchTimerLists+0xb8>)
 800283e:	f240 30a9 	movw	r0, #937	@ 0x3a9
 8002842:	f003 fdd9 	bl	80063f8 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002846:	4b09      	ldr	r3, [pc, #36]	@ (800286c <prvSwitchTimerLists+0xb4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1b7      	bne.n	80027c0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <prvSwitchTimerLists+0xb4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002856:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <prvSwitchTimerLists+0xbc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a04      	ldr	r2, [pc, #16]	@ (800286c <prvSwitchTimerLists+0xb4>)
 800285c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800285e:	4a05      	ldr	r2, [pc, #20]	@ (8002874 <prvSwitchTimerLists+0xbc>)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	6013      	str	r3, [r2, #0]
    }
 8002864:	bf00      	nop
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	200001a4 	.word	0x200001a4
 8002870:	08007da4 	.word	0x08007da4
 8002874:	200001a8 	.word	0x200001a8

08002878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800287c:	f000 f9cc 	bl	8002c18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <prvCheckForValidListAndQueue+0x54>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11d      	bne.n	80028c4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002888:	4811      	ldr	r0, [pc, #68]	@ (80028d0 <prvCheckForValidListAndQueue+0x58>)
 800288a:	f7fd fe9b 	bl	80005c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800288e:	4811      	ldr	r0, [pc, #68]	@ (80028d4 <prvCheckForValidListAndQueue+0x5c>)
 8002890:	f7fd fe98 	bl	80005c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <prvCheckForValidListAndQueue+0x60>)
 8002896:	4a0e      	ldr	r2, [pc, #56]	@ (80028d0 <prvCheckForValidListAndQueue+0x58>)
 8002898:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <prvCheckForValidListAndQueue+0x64>)
 800289c:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <prvCheckForValidListAndQueue+0x5c>)
 800289e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80028a0:	2200      	movs	r2, #0
 80028a2:	2110      	movs	r1, #16
 80028a4:	2005      	movs	r0, #5
 80028a6:	f7fd ffa5 	bl	80007f4 <xQueueGenericCreate>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a07      	ldr	r2, [pc, #28]	@ (80028cc <prvCheckForValidListAndQueue+0x54>)
 80028ae:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <prvCheckForValidListAndQueue+0x54>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80028b8:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <prvCheckForValidListAndQueue+0x54>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4908      	ldr	r1, [pc, #32]	@ (80028e0 <prvCheckForValidListAndQueue+0x68>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fbda 	bl	8001078 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028c4:	f000 f9d2 	bl	8002c6c <vPortExitCritical>
    }
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200001ac 	.word	0x200001ac
 80028d0:	2000017c 	.word	0x2000017c
 80028d4:	20000190 	.word	0x20000190
 80028d8:	200001a4 	.word	0x200001a4
 80028dc:	200001a8 	.word	0x200001a8
 80028e0:	08007e10 	.word	0x08007e10

080028e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3b04      	subs	r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3b04      	subs	r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f023 0201 	bic.w	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3b04      	subs	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002914:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <pxPortInitialiseStack+0x64>)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3b14      	subs	r3, #20
 800291e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3b04      	subs	r3, #4
 800292a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f06f 0202 	mvn.w	r2, #2
 8002932:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3b20      	subs	r3, #32
 8002938:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	0800294d 	.word	0x0800294d

0800294c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002956:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <prvTaskExitError+0x44>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d003      	beq.n	8002968 <prvTaskExitError+0x1c>
 8002960:	490c      	ldr	r1, [pc, #48]	@ (8002994 <prvTaskExitError+0x48>)
 8002962:	20e6      	movs	r0, #230	@ 0xe6
 8002964:	f003 fd48 	bl	80063f8 <vAssertCalled>
        __asm volatile
 8002968:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	607b      	str	r3, [r7, #4]
    }
 800297a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800297c:	bf00      	nop
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0fc      	beq.n	800297e <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000004 	.word	0x20000004
 8002994:	08007e18 	.word	0x08007e18
	...

080029a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <pxCurrentTCBConst2>)
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	6808      	ldr	r0, [r1, #0]
 80029a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029aa:	f380 8809 	msr	PSP, r0
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f380 8811 	msr	BASEPRI, r0
 80029ba:	4770      	bx	lr
 80029bc:	f3af 8000 	nop.w

080029c0 <pxCurrentTCBConst2>:
 80029c0:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop

080029c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80029c8:	4808      	ldr	r0, [pc, #32]	@ (80029ec <prvPortStartFirstTask+0x24>)
 80029ca:	6800      	ldr	r0, [r0, #0]
 80029cc:	6800      	ldr	r0, [r0, #0]
 80029ce:	f380 8808 	msr	MSP, r0
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f380 8814 	msr	CONTROL, r0
 80029da:	b662      	cpsie	i
 80029dc:	b661      	cpsie	f
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	df00      	svc	0
 80029e8:	bf00      	nop
 80029ea:	0000      	.short	0x0000
 80029ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop

080029f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029fa:	4b42      	ldr	r3, [pc, #264]	@ (8002b04 <xPortStartScheduler+0x110>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a42      	ldr	r2, [pc, #264]	@ (8002b08 <xPortStartScheduler+0x114>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d104      	bne.n	8002a0e <xPortStartScheduler+0x1a>
 8002a04:	4941      	ldr	r1, [pc, #260]	@ (8002b0c <xPortStartScheduler+0x118>)
 8002a06:	f240 102d 	movw	r0, #301	@ 0x12d
 8002a0a:	f003 fcf5 	bl	80063f8 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b04 <xPortStartScheduler+0x110>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3f      	ldr	r2, [pc, #252]	@ (8002b10 <xPortStartScheduler+0x11c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d104      	bne.n	8002a22 <xPortStartScheduler+0x2e>
 8002a18:	493c      	ldr	r1, [pc, #240]	@ (8002b0c <xPortStartScheduler+0x118>)
 8002a1a:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 8002a1e:	f003 fceb 	bl	80063f8 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a22:	4b3c      	ldr	r3, [pc, #240]	@ (8002b14 <xPortStartScheduler+0x120>)
 8002a24:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	22ff      	movs	r2, #255	@ 0xff
 8002a32:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b34      	ldr	r3, [pc, #208]	@ (8002b18 <xPortStartScheduler+0x124>)
 8002a48:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a50:	e009      	b.n	8002a66 <xPortStartScheduler+0x72>
            {
                ulMaxPRIGROUPValue--;
 8002a52:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	4a30      	ldr	r2, [pc, #192]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002a5a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6e:	2b80      	cmp	r3, #128	@ 0x80
 8002a70:	d0ef      	beq.n	8002a52 <xPortStartScheduler+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002a72:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d004      	beq.n	8002a88 <xPortStartScheduler+0x94>
 8002a7e:	4923      	ldr	r1, [pc, #140]	@ (8002b0c <xPortStartScheduler+0x118>)
 8002a80:	f240 1057 	movw	r0, #343	@ 0x157
 8002a84:	f003 fcb8 	bl	80063f8 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a88:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1c3 0307 	rsb	r3, r3, #7
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d004      	beq.n	8002a9e <xPortStartScheduler+0xaa>
 8002a94:	491d      	ldr	r1, [pc, #116]	@ (8002b0c <xPortStartScheduler+0x118>)
 8002a96:	f44f 70b0 	mov.w	r0, #352	@ 0x160
 8002a9a:	f003 fcad 	bl	80063f8 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002aa6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b1c <xPortStartScheduler+0x128>)
 8002ab2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002abc:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <xPortStartScheduler+0x12c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a17      	ldr	r2, [pc, #92]	@ (8002b20 <xPortStartScheduler+0x12c>)
 8002ac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ac6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <xPortStartScheduler+0x12c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <xPortStartScheduler+0x12c>)
 8002ace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002ad2:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ad4:	f000 f952 	bl	8002d7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <xPortStartScheduler+0x130>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002ade:	f000 f971 	bl	8002dc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <xPortStartScheduler+0x134>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a10      	ldr	r2, [pc, #64]	@ (8002b28 <xPortStartScheduler+0x134>)
 8002ae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002aec:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002aee:	f7ff ff6b 	bl	80029c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002af2:	f7fe ff0f 	bl	8001914 <vTaskSwitchContext>
    prvTaskExitError();
 8002af6:	f7ff ff29 	bl	800294c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	e000ed00 	.word	0xe000ed00
 8002b08:	410fc271 	.word	0x410fc271
 8002b0c:	08007e18 	.word	0x08007e18
 8002b10:	410fc270 	.word	0x410fc270
 8002b14:	e000e400 	.word	0xe000e400
 8002b18:	200001b8 	.word	0x200001b8
 8002b1c:	200001bc 	.word	0x200001bc
 8002b20:	e000ed20 	.word	0xe000ed20
 8002b24:	20000004 	.word	0x20000004
 8002b28:	e000ef34 	.word	0xe000ef34

08002b2c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b32:	4b32      	ldr	r3, [pc, #200]	@ (8002bfc <vInitPrioGroupValue+0xd0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a32      	ldr	r2, [pc, #200]	@ (8002c00 <vInitPrioGroupValue+0xd4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d104      	bne.n	8002b46 <vInitPrioGroupValue+0x1a>
 8002b3c:	4931      	ldr	r1, [pc, #196]	@ (8002c04 <vInitPrioGroupValue+0xd8>)
 8002b3e:	f240 109b 	movw	r0, #411	@ 0x19b
 8002b42:	f003 fc59 	bl	80063f8 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b46:	4b2d      	ldr	r3, [pc, #180]	@ (8002bfc <vInitPrioGroupValue+0xd0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c08 <vInitPrioGroupValue+0xdc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d104      	bne.n	8002b5a <vInitPrioGroupValue+0x2e>
 8002b50:	492c      	ldr	r1, [pc, #176]	@ (8002c04 <vInitPrioGroupValue+0xd8>)
 8002b52:	f44f 70ce 	mov.w	r0, #412	@ 0x19c
 8002b56:	f003 fc4f 	bl	80063f8 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c0c <vInitPrioGroupValue+0xe0>)
 8002b5c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	22ff      	movs	r2, #255	@ 0xff
 8002b6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <vInitPrioGroupValue+0xe4>)
 8002b80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b82:	4b24      	ldr	r3, [pc, #144]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b88:	e009      	b.n	8002b9e <vInitPrioGroupValue+0x72>
            {
                ulMaxPRIGROUPValue--;
 8002b8a:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	4a20      	ldr	r2, [pc, #128]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002b92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	2b80      	cmp	r3, #128	@ 0x80
 8002ba8:	d0ef      	beq.n	8002b8a <vInitPrioGroupValue+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d004      	beq.n	8002bc0 <vInitPrioGroupValue+0x94>
 8002bb6:	4913      	ldr	r1, [pc, #76]	@ (8002c04 <vInitPrioGroupValue+0xd8>)
 8002bb8:	f240 10c5 	movw	r0, #453	@ 0x1c5
 8002bbc:	f003 fc1c 	bl	80063f8 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bc0:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1c3 0307 	rsb	r3, r3, #7
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d004      	beq.n	8002bd6 <vInitPrioGroupValue+0xaa>
 8002bcc:	490d      	ldr	r1, [pc, #52]	@ (8002c04 <vInitPrioGroupValue+0xd8>)
 8002bce:	f44f 70e7 	mov.w	r0, #462	@ 0x1ce
 8002bd2:	f003 fc11 	bl	80063f8 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002bde:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002be8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <vInitPrioGroupValue+0xe8>)
 8002bea:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	e000ed00 	.word	0xe000ed00
 8002c00:	410fc271 	.word	0x410fc271
 8002c04:	08007e18 	.word	0x08007e18
 8002c08:	410fc270 	.word	0x410fc270
 8002c0c:	e000e400 	.word	0xe000e400
 8002c10:	200001b8 	.word	0x200001b8
 8002c14:	200001bc 	.word	0x200001bc

08002c18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c1e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	607b      	str	r3, [r7, #4]
    }
 8002c30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <vPortEnterCritical+0x48>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	4a09      	ldr	r2, [pc, #36]	@ (8002c60 <vPortEnterCritical+0x48>)
 8002c3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <vPortEnterCritical+0x48>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d109      	bne.n	8002c58 <vPortEnterCritical+0x40>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c44:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <vPortEnterCritical+0x4c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <vPortEnterCritical+0x40>
 8002c4e:	4906      	ldr	r1, [pc, #24]	@ (8002c68 <vPortEnterCritical+0x50>)
 8002c50:	f44f 70f9 	mov.w	r0, #498	@ 0x1f2
 8002c54:	f003 fbd0 	bl	80063f8 <vAssertCalled>
    }
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000004 	.word	0x20000004
 8002c64:	e000ed04 	.word	0xe000ed04
 8002c68:	08007e18 	.word	0x08007e18

08002c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002c72:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <vPortExitCritical+0x40>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <vPortExitCritical+0x18>
 8002c7a:	490d      	ldr	r1, [pc, #52]	@ (8002cb0 <vPortExitCritical+0x44>)
 8002c7c:	f240 10f9 	movw	r0, #505	@ 0x1f9
 8002c80:	f003 fbba 	bl	80063f8 <vAssertCalled>
    uxCriticalNesting--;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <vPortExitCritical+0x40>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <vPortExitCritical+0x40>)
 8002c8c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002c8e:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <vPortExitCritical+0x40>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <vPortExitCritical+0x36>
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
        __asm volatile
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f383 8811 	msr	BASEPRI, r3
    }
 8002ca0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000004 	.word	0x20000004
 8002cb0:	08007e18 	.word	0x08007e18
	...

08002cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002cc0:	f3ef 8009 	mrs	r0, PSP
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <pxCurrentTCBConst>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f01e 0f10 	tst.w	lr, #16
 8002cd0:	bf08      	it	eq
 8002cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cda:	6010      	str	r0, [r2, #0]
 8002cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ce0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8002ce4:	f380 8811 	msr	BASEPRI, r0
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f7fe fe10 	bl	8001914 <vTaskSwitchContext>
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f380 8811 	msr	BASEPRI, r0
 8002cfc:	bc09      	pop	{r0, r3}
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	6808      	ldr	r0, [r1, #0]
 8002d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d06:	f01e 0f10 	tst.w	lr, #16
 8002d0a:	bf08      	it	eq
 8002d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d10:	f380 8809 	msr	PSP, r0
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	f3af 8000 	nop.w

08002d20 <pxCurrentTCBConst>:
 8002d20:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop

08002d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	607b      	str	r3, [r7, #4]
    }
 8002d40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002d42:	f002 fba3 	bl	800548c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d46:	f7fe fd2d 	bl	80017a4 <xTaskIncrementTick>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002d50:	f002 fbfa 	bl	8005548 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d54:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <SysTick_Handler+0x50>)
 8002d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e001      	b.n	8002d62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002d5e:	f002 fbd7 	bl	8005510 <SEGGER_SYSVIEW_RecordExitISR>
 8002d62:	2300      	movs	r3, #0
 8002d64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f383 8811 	msr	BASEPRI, r3
    }
 8002d6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <vPortSetupTimerInterrupt+0x34>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <vPortSetupTimerInterrupt+0x38>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <vPortSetupTimerInterrupt+0x3c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <vPortSetupTimerInterrupt+0x40>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <vPortSetupTimerInterrupt+0x44>)
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d9e:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <vPortSetupTimerInterrupt+0x34>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010
 8002db4:	e000e018 	.word	0xe000e018
 8002db8:	20000010 	.word	0x20000010
 8002dbc:	10624dd3 	.word	0x10624dd3
 8002dc0:	e000e014 	.word	0xe000e014

08002dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002dd4 <vPortEnableVFP+0x10>
 8002dc8:	6801      	ldr	r1, [r0, #0]
 8002dca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002dce:	6001      	str	r1, [r0, #0]
 8002dd0:	4770      	bx	lr
 8002dd2:	0000      	.short	0x0000
 8002dd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop

08002ddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002de2:	f3ef 8305 	mrs	r3, IPSR
 8002de6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	d90e      	bls.n	8002e0c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002dee:	4a10      	ldr	r2, [pc, #64]	@ (8002e30 <vPortValidateInterruptPriority+0x54>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <vPortValidateInterruptPriority+0x58>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d204      	bcs.n	8002e0c <vPortValidateInterruptPriority+0x30>
 8002e02:	490d      	ldr	r1, [pc, #52]	@ (8002e38 <vPortValidateInterruptPriority+0x5c>)
 8002e04:	f44f 7054 	mov.w	r0, #848	@ 0x350
 8002e08:	f003 faf6 	bl	80063f8 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <vPortValidateInterruptPriority+0x60>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <vPortValidateInterruptPriority+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d904      	bls.n	8002e26 <vPortValidateInterruptPriority+0x4a>
 8002e1c:	4906      	ldr	r1, [pc, #24]	@ (8002e38 <vPortValidateInterruptPriority+0x5c>)
 8002e1e:	f44f 7058 	mov.w	r0, #864	@ 0x360
 8002e22:	f003 fae9 	bl	80063f8 <vAssertCalled>
    }
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000e3f0 	.word	0xe000e3f0
 8002e34:	200001b8 	.word	0x200001b8
 8002e38:	08007e18 	.word	0x08007e18
 8002e3c:	e000ed0c 	.word	0xe000ed0c
 8002e40:	200001bc 	.word	0x200001bc

08002e44 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002e50:	f7fe fbdc 	bl	800160c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e54:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc4 <pvPortMalloc+0x180>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002e5c:	f000 f918 	bl	8003090 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e60:	4b59      	ldr	r3, [pc, #356]	@ (8002fc8 <pvPortMalloc+0x184>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 809a 	bne.w	8002fa2 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d027      	beq.n	8002ec4 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002e74:	2208      	movs	r2, #8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d221      	bcs.n	8002ec4 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8002e80:	2208      	movs	r2, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01b      	beq.n	8002eca <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f023 0307 	bic.w	r3, r3, #7
 8002e98:	3308      	adds	r3, #8
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d20e      	bcs.n	8002ebe <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f023 0307 	bic.w	r3, r3, #7
 8002ea6:	3308      	adds	r3, #8
 8002ea8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <pvPortMalloc+0x86>
 8002eb4:	4945      	ldr	r1, [pc, #276]	@ (8002fcc <pvPortMalloc+0x188>)
 8002eb6:	209a      	movs	r0, #154	@ 0x9a
 8002eb8:	f003 fa9e 	bl	80063f8 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ebc:	e005      	b.n	8002eca <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ec2:	e002      	b.n	8002eca <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	e000      	b.n	8002ecc <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002eca:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d067      	beq.n	8002fa2 <pvPortMalloc+0x15e>
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd0 <pvPortMalloc+0x18c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d862      	bhi.n	8002fa2 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002edc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd4 <pvPortMalloc+0x190>)
 8002ede:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8002ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd4 <pvPortMalloc+0x190>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ee6:	e004      	b.n	8002ef2 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d903      	bls.n	8002f04 <pvPortMalloc+0xc0>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f1      	bne.n	8002ee8 <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f04:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc4 <pvPortMalloc+0x180>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d049      	beq.n	8002fa2 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2208      	movs	r2, #8
 8002f14:	4413      	add	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	1ad2      	subs	r2, r2, r3
 8002f28:	2308      	movs	r3, #8
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d918      	bls.n	8002f62 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <pvPortMalloc+0x106>
 8002f42:	4922      	ldr	r1, [pc, #136]	@ (8002fcc <pvPortMalloc+0x188>)
 8002f44:	20cd      	movs	r0, #205	@ 0xcd
 8002f46:	f003 fa57 	bl	80063f8 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1ad2      	subs	r2, r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f000 f8f9 	bl	8003154 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f62:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <pvPortMalloc+0x18c>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <pvPortMalloc+0x18c>)
 8002f6e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f70:	4b17      	ldr	r3, [pc, #92]	@ (8002fd0 <pvPortMalloc+0x18c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b18      	ldr	r3, [pc, #96]	@ (8002fd8 <pvPortMalloc+0x194>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d203      	bcs.n	8002f84 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f7c:	4b14      	ldr	r3, [pc, #80]	@ (8002fd0 <pvPortMalloc+0x18c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a15      	ldr	r2, [pc, #84]	@ (8002fd8 <pvPortMalloc+0x194>)
 8002f82:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <pvPortMalloc+0x184>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002f98:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <pvPortMalloc+0x198>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fdc <pvPortMalloc+0x198>)
 8002fa0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002fa2:	f7fe fb41 	bl	8001628 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <pvPortMalloc+0x176>
 8002fb0:	4906      	ldr	r1, [pc, #24]	@ (8002fcc <pvPortMalloc+0x188>)
 8002fb2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002fb6:	f003 fa1f 	bl	80063f8 <vAssertCalled>
    return pvReturn;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	2000b9c8 	.word	0x2000b9c8
 8002fc8:	2000b9dc 	.word	0x2000b9dc
 8002fcc:	08007e98 	.word	0x08007e98
 8002fd0:	2000b9cc 	.word	0x2000b9cc
 8002fd4:	2000b9c0 	.word	0x2000b9c0
 8002fd8:	2000b9d0 	.word	0x2000b9d0
 8002fdc:	2000b9d4 	.word	0x2000b9d4

08002fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d041      	beq.n	8003076 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	425b      	negs	r3, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <vPortFree+0xa0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <vPortFree+0x38>
 800300e:	491d      	ldr	r1, [pc, #116]	@ (8003084 <vPortFree+0xa4>)
 8003010:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8003014:	f003 f9f0 	bl	80063f8 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <vPortFree+0x4a>
 8003020:	4918      	ldr	r1, [pc, #96]	@ (8003084 <vPortFree+0xa4>)
 8003022:	f240 1023 	movw	r0, #291	@ 0x123
 8003026:	f003 f9e7 	bl	80063f8 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <vPortFree+0xa0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01e      	beq.n	8003076 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11a      	bne.n	8003076 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <vPortFree+0xa0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	43db      	mvns	r3, r3
 800304a:	401a      	ands	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003050:	f7fe fadc 	bl	800160c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <vPortFree+0xa8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4413      	add	r3, r2
 800305e:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <vPortFree+0xa8>)
 8003060:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003062:	68b8      	ldr	r0, [r7, #8]
 8003064:	f000 f876 	bl	8003154 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003068:	4b08      	ldr	r3, [pc, #32]	@ (800308c <vPortFree+0xac>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	4a07      	ldr	r2, [pc, #28]	@ (800308c <vPortFree+0xac>)
 8003070:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003072:	f7fe fad9 	bl	8001628 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	2000b9dc 	.word	0x2000b9dc
 8003084:	08007e98 	.word	0x08007e98
 8003088:	2000b9cc 	.word	0x2000b9cc
 800308c:	2000b9d8 	.word	0x2000b9d8

08003090 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003096:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 800309a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800309c:	4b27      	ldr	r3, [pc, #156]	@ (800313c <prvHeapInit+0xac>)
 800309e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3307      	adds	r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <prvHeapInit+0xac>)
 80030c0:	4413      	add	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <prvHeapInit+0xb0>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80030ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <prvHeapInit+0xb0>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	4413      	add	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80030dc:	2208      	movs	r2, #8
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0307 	bic.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <prvHeapInit+0xb4>)
 80030f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <prvHeapInit+0xb4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80030fa:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <prvHeapInit+0xb4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	1ad2      	subs	r2, r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <prvHeapInit+0xb4>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <prvHeapInit+0xb8>)
 800311e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a09      	ldr	r2, [pc, #36]	@ (800314c <prvHeapInit+0xbc>)
 8003126:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003128:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <prvHeapInit+0xc0>)
 800312a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800312e:	601a      	str	r2, [r3, #0]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	200001c0 	.word	0x200001c0
 8003140:	2000b9c0 	.word	0x2000b9c0
 8003144:	2000b9c8 	.word	0x2000b9c8
 8003148:	2000b9d0 	.word	0x2000b9d0
 800314c:	2000b9cc 	.word	0x2000b9cc
 8003150:	2000b9dc 	.word	0x2000b9dc

08003154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800315c:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <prvInsertBlockIntoFreeList+0xac>)
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e002      	b.n	8003168 <prvInsertBlockIntoFreeList+0x14>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d8f7      	bhi.n	8003162 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	d108      	bne.n	8003196 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	441a      	add	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	441a      	add	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d118      	bne.n	80031dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <prvInsertBlockIntoFreeList+0xb0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d00d      	beq.n	80031d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e008      	b.n	80031e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <prvInsertBlockIntoFreeList+0xb0>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e003      	b.n	80031e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d002      	beq.n	80031f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	2000b9c0 	.word	0x2000b9c0
 8003204:	2000b9c8 	.word	0x2000b9c8

08003208 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800320c:	4803      	ldr	r0, [pc, #12]	@ (800321c <_cbSendSystemDesc+0x14>)
 800320e:	f002 f8e7 	bl	80053e0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003212:	4803      	ldr	r0, [pc, #12]	@ (8003220 <_cbSendSystemDesc+0x18>)
 8003214:	f002 f8e4 	bl	80053e0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	08007f14 	.word	0x08007f14
 8003220:	08007f5c 	.word	0x08007f5c

08003224 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <SEGGER_SYSVIEW_Conf+0x20>)
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <SEGGER_SYSVIEW_Conf+0x20>)
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <SEGGER_SYSVIEW_Conf+0x24>)
 8003232:	4a06      	ldr	r2, [pc, #24]	@ (800324c <SEGGER_SYSVIEW_Conf+0x28>)
 8003234:	f001 fba2 	bl	800497c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003238:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800323c:	f001 fbe2 	bl	8004a04 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000010 	.word	0x20000010
 8003248:	08003209 	.word	0x08003209
 800324c:	080080a8 	.word	0x080080a8

08003250 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	e033      	b.n	80032c4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800325c:	491e      	ldr	r1, [pc, #120]	@ (80032d8 <_cbSendTaskList+0x88>)
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	491a      	ldr	r1, [pc, #104]	@ (80032d8 <_cbSendTaskList+0x88>)
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3304      	adds	r3, #4
 800327c:	6819      	ldr	r1, [r3, #0]
 800327e:	4c16      	ldr	r4, [pc, #88]	@ (80032d8 <_cbSendTaskList+0x88>)
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4423      	add	r3, r4
 800328c:	3308      	adds	r3, #8
 800328e:	681c      	ldr	r4, [r3, #0]
 8003290:	4d11      	ldr	r5, [pc, #68]	@ (80032d8 <_cbSendTaskList+0x88>)
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	442b      	add	r3, r5
 800329e:	330c      	adds	r3, #12
 80032a0:	681d      	ldr	r5, [r3, #0]
 80032a2:	4e0d      	ldr	r6, [pc, #52]	@ (80032d8 <_cbSendTaskList+0x88>)
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4433      	add	r3, r6
 80032b0:	3310      	adds	r3, #16
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	462b      	mov	r3, r5
 80032b8:	4622      	mov	r2, r4
 80032ba:	f000 f979 	bl	80035b0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3301      	adds	r3, #1
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <_cbSendTaskList+0x8c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d3c6      	bcc.n	800325c <_cbSendTaskList+0xc>
  }
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d8:	2000b9e0 	.word	0x2000b9e0
 80032dc:	2000ba80 	.word	0x2000ba80

080032e0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80032e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80032e8:	f7fe fa4a 	bl	8001780 <xTaskGetTickCountFromISR>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2200      	movs	r2, #0
 80032f0:	469a      	mov	sl, r3
 80032f2:	4693      	mov	fp, r2
 80032f4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80032f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	f04f 0a00 	mov.w	sl, #0
 8003304:	f04f 0b00 	mov.w	fp, #0
 8003308:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800330c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003310:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003314:	4652      	mov	r2, sl
 8003316:	465b      	mov	r3, fp
 8003318:	1a14      	subs	r4, r2, r0
 800331a:	eb63 0501 	sbc.w	r5, r3, r1
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	00ab      	lsls	r3, r5, #2
 8003328:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800332c:	00a2      	lsls	r2, r4, #2
 800332e:	4614      	mov	r4, r2
 8003330:	461d      	mov	r5, r3
 8003332:	eb14 0800 	adds.w	r8, r4, r0
 8003336:	eb45 0901 	adc.w	r9, r5, r1
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800334e:	4690      	mov	r8, r2
 8003350:	4699      	mov	r9, r3
 8003352:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003356:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003368 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003376:	2205      	movs	r2, #5
 8003378:	492b      	ldr	r1, [pc, #172]	@ (8003428 <SYSVIEW_AddTask+0xc0>)
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	f004 fc40 	bl	8007c00 <memcmp>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d04b      	beq.n	800341e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003386:	4b29      	ldr	r3, [pc, #164]	@ (800342c <SYSVIEW_AddTask+0xc4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b07      	cmp	r3, #7
 800338c:	d903      	bls.n	8003396 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800338e:	4828      	ldr	r0, [pc, #160]	@ (8003430 <SYSVIEW_AddTask+0xc8>)
 8003390:	f002 fb42 	bl	8005a18 <SEGGER_SYSVIEW_Warn>
    return;
 8003394:	e044      	b.n	8003420 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003396:	4b25      	ldr	r3, [pc, #148]	@ (800342c <SYSVIEW_AddTask+0xc4>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4926      	ldr	r1, [pc, #152]	@ (8003434 <SYSVIEW_AddTask+0xcc>)
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <SYSVIEW_AddTask+0xc4>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4921      	ldr	r1, [pc, #132]	@ (8003434 <SYSVIEW_AddTask+0xcc>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3304      	adds	r3, #4
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80033c0:	4b1a      	ldr	r3, [pc, #104]	@ (800342c <SYSVIEW_AddTask+0xc4>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	491b      	ldr	r1, [pc, #108]	@ (8003434 <SYSVIEW_AddTask+0xcc>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3308      	adds	r3, #8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80033d6:	4b15      	ldr	r3, [pc, #84]	@ (800342c <SYSVIEW_AddTask+0xc4>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4916      	ldr	r1, [pc, #88]	@ (8003434 <SYSVIEW_AddTask+0xcc>)
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	330c      	adds	r3, #12
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <SYSVIEW_AddTask+0xc4>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4910      	ldr	r1, [pc, #64]	@ (8003434 <SYSVIEW_AddTask+0xcc>)
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3310      	adds	r3, #16
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003402:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <SYSVIEW_AddTask+0xc4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	4a08      	ldr	r2, [pc, #32]	@ (800342c <SYSVIEW_AddTask+0xc4>)
 800340a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8ca 	bl	80035b0 <SYSVIEW_SendTaskInfo>
 800341c:	e000      	b.n	8003420 <SYSVIEW_AddTask+0xb8>
    return;
 800341e:	bf00      	nop

}
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	08007f6c 	.word	0x08007f6c
 800342c:	2000ba80 	.word	0x2000ba80
 8003430:	08007f74 	.word	0x08007f74
 8003434:	2000b9e0 	.word	0x2000b9e0

08003438 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003440:	4b59      	ldr	r3, [pc, #356]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80ab 	beq.w	80035a0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e00d      	b.n	800346c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003450:	4956      	ldr	r1, [pc, #344]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d008      	beq.n	8003478 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3301      	adds	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	4b4e      	ldr	r3, [pc, #312]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	429a      	cmp	r2, r3
 8003474:	d3ec      	bcc.n	8003450 <SYSVIEW_DeleteTask+0x18>
 8003476:	e000      	b.n	800347a <SYSVIEW_DeleteTask+0x42>
      break;
 8003478:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800347a:	4b4b      	ldr	r3, [pc, #300]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3b01      	subs	r3, #1
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	429a      	cmp	r2, r3
 8003484:	d111      	bne.n	80034aa <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4a46      	ldr	r2, [pc, #280]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003492:	4413      	add	r3, r2
 8003494:	2214      	movs	r2, #20
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f004 fbc1 	bl	8007c20 <memset>
    _NumTasks--;
 800349e:	4b42      	ldr	r3, [pc, #264]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	4a40      	ldr	r2, [pc, #256]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	e07b      	b.n	80035a2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80034aa:	4b3f      	ldr	r3, [pc, #252]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d276      	bcs.n	80035a2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80034b4:	4b3c      	ldr	r3, [pc, #240]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1e5a      	subs	r2, r3, #1
 80034ba:	493c      	ldr	r1, [pc, #240]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	4838      	ldr	r0, [pc, #224]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4403      	add	r3, r0
 80034d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80034d8:	4b33      	ldr	r3, [pc, #204]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	4933      	ldr	r1, [pc, #204]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3304      	adds	r3, #4
 80034ec:	6819      	ldr	r1, [r3, #0]
 80034ee:	482f      	ldr	r0, [pc, #188]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4403      	add	r3, r0
 80034fc:	3304      	adds	r3, #4
 80034fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003500:	4b29      	ldr	r3, [pc, #164]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	1e5a      	subs	r2, r3, #1
 8003506:	4929      	ldr	r1, [pc, #164]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3308      	adds	r3, #8
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	4825      	ldr	r0, [pc, #148]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4403      	add	r3, r0
 8003524:	3308      	adds	r3, #8
 8003526:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003528:	4b1f      	ldr	r3, [pc, #124]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	491f      	ldr	r1, [pc, #124]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	330c      	adds	r3, #12
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	481b      	ldr	r0, [pc, #108]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4403      	add	r3, r0
 800354c:	330c      	adds	r3, #12
 800354e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003550:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	4915      	ldr	r1, [pc, #84]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3310      	adds	r3, #16
 8003564:	6819      	ldr	r1, [r3, #0]
 8003566:	4811      	ldr	r0, [pc, #68]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4403      	add	r3, r0
 8003574:	3310      	adds	r3, #16
 8003576:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003578:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1e5a      	subs	r2, r3, #1
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a09      	ldr	r2, [pc, #36]	@ (80035ac <SYSVIEW_DeleteTask+0x174>)
 8003588:	4413      	add	r3, r2
 800358a:	2214      	movs	r2, #20
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f004 fb46 	bl	8007c20 <memset>
    _NumTasks--;
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3b01      	subs	r3, #1
 800359a:	4a03      	ldr	r2, [pc, #12]	@ (80035a8 <SYSVIEW_DeleteTask+0x170>)
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e000      	b.n	80035a2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80035a0:	bf00      	nop
  }
}
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	2000ba80 	.word	0x2000ba80
 80035ac:	2000b9e0 	.word	0x2000b9e0

080035b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	@ 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80035be:	f107 0310 	add.w	r3, r7, #16
 80035c2:	2218      	movs	r2, #24
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 fb2a 	bl	8007c20 <memset>
  TaskInfo.TaskID     = TaskID;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 fe03 	bl	80051f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	@ 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <_DoInit+0xa0>)
 80035fc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80035fe:	22a8      	movs	r2, #168	@ 0xa8
 8003600:	2100      	movs	r1, #0
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f004 fb0c 	bl	8007c20 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2203      	movs	r2, #3
 800360c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2203      	movs	r2, #3
 8003612:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4a20      	ldr	r2, [pc, #128]	@ (8003698 <_DoInit+0xa4>)
 8003618:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	4a1f      	ldr	r2, [pc, #124]	@ (800369c <_DoInit+0xa8>)
 800361e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003626:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	4a16      	ldr	r2, [pc, #88]	@ (8003698 <_DoInit+0xa4>)
 800363e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4a17      	ldr	r2, [pc, #92]	@ (80036a0 <_DoInit+0xac>)
 8003644:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2210      	movs	r2, #16
 800364a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2200      	movs	r2, #0
 800365c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800365e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	e00c      	b.n	8003682 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1c3 030f 	rsb	r3, r3, #15
 800366e:	4a0d      	ldr	r2, [pc, #52]	@ (80036a4 <_DoInit+0xb0>)
 8003670:	5cd1      	ldrb	r1, [r2, r3]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	460a      	mov	r2, r1
 800367a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3301      	adds	r3, #1
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d9ef      	bls.n	8003668 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003688:	f3bf 8f5f 	dmb	sy
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	2000ba84 	.word	0x2000ba84
 8003698:	08007fc4 	.word	0x08007fc4
 800369c:	2000bb2c 	.word	0x2000bb2c
 80036a0:	2000bf2c 	.word	0x2000bf2c
 80036a4:	080080b0 	.word	0x080080b0

080036a8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	@ 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80036b4:	2300      	movs	r3, #0
 80036b6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d905      	bls.n	80036d8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d6:	e007      	b.n	80036e8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	69b9      	ldr	r1, [r7, #24]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	1acb      	subs	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	3b01      	subs	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f2:	4293      	cmp	r3, r2
 80036f4:	bf28      	it	cs
 80036f6:	4613      	movcs	r3, r2
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80036fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4293      	cmp	r3, r2
 8003700:	bf28      	it	cs
 8003702:	4613      	movcs	r3, r2
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	6978      	ldr	r0, [r7, #20]
 8003716:	f004 faaf 	bl	8007c78 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800371a:	6a3a      	ldr	r2, [r7, #32]
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	4413      	add	r3, r2
 8003720:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	4413      	add	r3, r2
 8003728:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	4413      	add	r3, r2
 8003738:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	429a      	cmp	r2, r3
 8003742:	d101      	bne.n	8003748 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003748:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1b2      	bne.n	80036be <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003758:	6a3b      	ldr	r3, [r7, #32]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3728      	adds	r7, #40	@ 0x28
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003762:	b580      	push	{r7, lr}
 8003764:	b088      	sub	sp, #32
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d911      	bls.n	80037aa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	6938      	ldr	r0, [r7, #16]
 8003796:	f004 fa6f 	bl	8007c78 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800379a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	441a      	add	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80037a8:	e01f      	b.n	80037ea <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	6938      	ldr	r0, [r7, #16]
 80037be:	f004 fa5b 	bl	8007c78 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4413      	add	r3, r2
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4619      	mov	r1, r3
 80037da:	6938      	ldr	r0, [r7, #16]
 80037dc:	f004 fa4c 	bl	8007c78 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80037e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	60da      	str	r2, [r3, #12]
}
 80037ea:	bf00      	nop
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	429a      	cmp	r2, r3
 800380c:	d808      	bhi.n	8003820 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad2      	subs	r2, r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4413      	add	r3, r2
 800381a:	3b01      	subs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e004      	b.n	800382a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  }
  return r;
 800382a:	697b      	ldr	r3, [r7, #20]
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	@ 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003844:	4b3e      	ldr	r3, [pc, #248]	@ (8003940 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b53      	cmp	r3, #83	@ 0x53
 8003850:	d001      	beq.n	8003856 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003852:	f7ff fecf 	bl	80035f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4a37      	ldr	r2, [pc, #220]	@ (8003940 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003864:	4413      	add	r3, r2
 8003866:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003878:	2300      	movs	r3, #0
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800387c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	429a      	cmp	r2, r3
 8003882:	d92b      	bls.n	80038dc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4293      	cmp	r3, r2
 8003894:	bf28      	it	cs
 8003896:	4613      	movcs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	4413      	add	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	6939      	ldr	r1, [r7, #16]
 80038a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038aa:	f004 f9e5 	bl	8007c78 <memcpy>
    NumBytesRead += NumBytesRem;
 80038ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4413      	add	r3, r2
 80038b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80038b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	4413      	add	r3, r2
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80038c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	4413      	add	r3, r2
 80038cc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d101      	bne.n	80038dc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bf28      	it	cs
 80038ec:	4613      	movcs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d019      	beq.n	800392a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fc:	4413      	add	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	6939      	ldr	r1, [r7, #16]
 8003904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003906:	f004 f9b7 	bl	8007c78 <memcpy>
    NumBytesRead += NumBytesRem;
 800390a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4413      	add	r3, r2
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	4413      	add	r3, r2
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4413      	add	r3, r2
 8003928:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800392a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003934:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003938:	4618      	mov	r0, r3
 800393a:	3730      	adds	r7, #48	@ 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	2000ba84 	.word	0x2000ba84

08003944 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	@ 0x30
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003950:	4b3e      	ldr	r3, [pc, #248]	@ (8003a4c <SEGGER_RTT_ReadNoLock+0x108>)
 8003952:	623b      	str	r3, [r7, #32]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b53      	cmp	r3, #83	@ 0x53
 800395c:	d001      	beq.n	8003962 <SEGGER_RTT_ReadNoLock+0x1e>
 800395e:	f7ff fe49 	bl	80035f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	3360      	adds	r3, #96	@ 0x60
 800396e:	4a37      	ldr	r2, [pc, #220]	@ (8003a4c <SEGGER_RTT_ReadNoLock+0x108>)
 8003970:	4413      	add	r3, r2
 8003972:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003984:	2300      	movs	r3, #0
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	429a      	cmp	r2, r3
 800398e:	d92b      	bls.n	80039e8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4293      	cmp	r3, r2
 80039a0:	bf28      	it	cs
 80039a2:	4613      	movcs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	4413      	add	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	6939      	ldr	r1, [r7, #16]
 80039b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039b6:	f004 f95f 	bl	8007c78 <memcpy>
    NumBytesRead += NumBytesRem;
 80039ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4413      	add	r3, r2
 80039c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4413      	add	r3, r2
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4413      	add	r3, r2
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d101      	bne.n	80039e8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf28      	it	cs
 80039f8:	4613      	movcs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d019      	beq.n	8003a36 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	4413      	add	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	6939      	ldr	r1, [r7, #16]
 8003a10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a12:	f004 f931 	bl	8007c78 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	4413      	add	r3, r2
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4413      	add	r3, r2
 8003a34:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a40:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3730      	adds	r7, #48	@ 0x30
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2000ba84 	.word	0x2000ba84

08003a50 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4613      	mov	r3, r2
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	3360      	adds	r3, #96	@ 0x60
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aec <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003a6e:	4413      	add	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d029      	beq.n	8003ace <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d82e      	bhi.n	8003adc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d013      	beq.n	8003aae <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003a86:	e029      	b.n	8003adc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003a88:	6978      	ldr	r0, [r7, #20]
 8003a8a:	f7ff feb2 	bl	80037f2 <_GetAvailWriteSpace>
 8003a8e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d202      	bcs.n	8003a9e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003a9c:	e021      	b.n	8003ae2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	69b9      	ldr	r1, [r7, #24]
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff fe5b 	bl	8003762 <_WriteNoCheck>
    break;
 8003aac:	e019      	b.n	8003ae2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f7ff fe9f 	bl	80037f2 <_GetAvailWriteSpace>
 8003ab4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4293      	cmp	r3, r2
 8003abc:	bf28      	it	cs
 8003abe:	4613      	movcs	r3, r2
 8003ac0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	6978      	ldr	r0, [r7, #20]
 8003ac8:	f7ff fe4b 	bl	8003762 <_WriteNoCheck>
    break;
 8003acc:	e009      	b.n	8003ae2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	69b9      	ldr	r1, [r7, #24]
 8003ad2:	6978      	ldr	r0, [r7, #20]
 8003ad4:	f7ff fde8 	bl	80036a8 <_WriteBlocking>
 8003ad8:	61f8      	str	r0, [r7, #28]
    break;
 8003ada:	e002      	b.n	8003ae2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
    break;
 8003ae0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	2000ba84 	.word	0x2000ba84

08003af0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003afc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b53      	cmp	r3, #83	@ 0x53
 8003b08:	d001      	beq.n	8003b0e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003b0a:	f7ff fd73 	bl	80035f4 <_DoInit>
  SEGGER_RTT_LOCK();
 8003b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b12:	f04f 0120 	mov.w	r1, #32
 8003b16:	f381 8811 	msr	BASEPRI, r1
 8003b1a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff ff95 	bl	8003a50 <SEGGER_RTT_WriteDownBufferNoLock>
 8003b26:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003b2e:	697b      	ldr	r3, [r7, #20]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	2000ba84 	.word	0x2000ba84

08003b3c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c40 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b53      	cmp	r3, #83	@ 0x53
 8003b56:	d001      	beq.n	8003b5c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003b58:	f7ff fd4c 	bl	80035f4 <_DoInit>
  SEGGER_RTT_LOCK();
 8003b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b60:	f04f 0120 	mov.w	r1, #32
 8003b64:	f381 8811 	msr	BASEPRI, r1
 8003b68:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b6a:	4b35      	ldr	r3, [pc, #212]	@ (8003c40 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003b6c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003b72:	6939      	ldr	r1, [r7, #16]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	440b      	add	r3, r1
 8003b82:	3304      	adds	r3, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	dbeb      	blt.n	8003b72 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003b9a:	e000      	b.n	8003b9e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003b9c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	da3f      	bge.n	8003c28 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003ba8:	6939      	ldr	r1, [r7, #16]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003bbc:	6939      	ldr	r1, [r7, #16]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	3304      	adds	r3, #4
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003bd2:	6939      	ldr	r1, [r7, #16]
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3320      	adds	r3, #32
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003be6:	6939      	ldr	r1, [r7, #16]
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	4613      	mov	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3328      	adds	r3, #40	@ 0x28
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003bfa:	6939      	ldr	r1, [r7, #16]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	3324      	adds	r3, #36	@ 0x24
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003c0e:	6939      	ldr	r1, [r7, #16]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	440b      	add	r3, r1
 8003c1c:	332c      	adds	r3, #44	@ 0x2c
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c22:	f3bf 8f5f 	dmb	sy
 8003c26:	e002      	b.n	8003c2e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003c34:	69fb      	ldr	r3, [r7, #28]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000ba84 	.word	0x2000ba84

08003c44 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003c52:	4b21      	ldr	r3, [pc, #132]	@ (8003cd8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b53      	cmp	r3, #83	@ 0x53
 8003c5e:	d001      	beq.n	8003c64 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003c60:	f7ff fcc8 	bl	80035f4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c64:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003c66:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d82c      	bhi.n	8003cc8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c72:	f04f 0120 	mov.w	r1, #32
 8003c76:	f381 8811 	msr	BASEPRI, r1
 8003c7a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	3360      	adds	r3, #96	@ 0x60
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003cb8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc6:	e002      	b.n	8003cce <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3728      	adds	r7, #40	@ 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	2000ba84 	.word	0x2000ba84

08003cdc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	60fa      	str	r2, [r7, #12]
 8003cf2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b80      	cmp	r3, #128	@ 0x80
 8003cf8:	d90a      	bls.n	8003d10 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003cfe:	e007      	b.n	8003d10 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	1c53      	adds	r3, r2, #1
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1c59      	adds	r1, r3, #1
 8003d0a:	60f9      	str	r1, [r7, #12]
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1e5a      	subs	r2, r3, #1
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <_EncodeStr+0x46>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3307      	adds	r3, #7
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d5a:	4b34      	ldr	r3, [pc, #208]	@ (8003e2c <_HandleIncomingPacket+0xd8>)
 8003d5c:	7e1b      	ldrb	r3, [r3, #24]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	1cfb      	adds	r3, r7, #3
 8003d62:	2201      	movs	r2, #1
 8003d64:	4619      	mov	r1, r3
 8003d66:	f7ff fded 	bl	8003944 <SEGGER_RTT_ReadNoLock>
 8003d6a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d057      	beq.n	8003e22 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	2b80      	cmp	r3, #128	@ 0x80
 8003d76:	d031      	beq.n	8003ddc <_HandleIncomingPacket+0x88>
 8003d78:	2b80      	cmp	r3, #128	@ 0x80
 8003d7a:	dc40      	bgt.n	8003dfe <_HandleIncomingPacket+0xaa>
 8003d7c:	2b07      	cmp	r3, #7
 8003d7e:	dc15      	bgt.n	8003dac <_HandleIncomingPacket+0x58>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	dd3c      	ble.n	8003dfe <_HandleIncomingPacket+0xaa>
 8003d84:	3b01      	subs	r3, #1
 8003d86:	2b06      	cmp	r3, #6
 8003d88:	d839      	bhi.n	8003dfe <_HandleIncomingPacket+0xaa>
 8003d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <_HandleIncomingPacket+0x3c>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003db3 	.word	0x08003db3
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dbf 	.word	0x08003dbf
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dcb 	.word	0x08003dcb
 8003da4:	08003dd1 	.word	0x08003dd1
 8003da8:	08003dd7 	.word	0x08003dd7
 8003dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dae:	d033      	beq.n	8003e18 <_HandleIncomingPacket+0xc4>
 8003db0:	e025      	b.n	8003dfe <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003db2:	f001 f8a1 	bl	8004ef8 <SEGGER_SYSVIEW_Start>
      break;
 8003db6:	e034      	b.n	8003e22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003db8:	f001 f95a 	bl	8005070 <SEGGER_SYSVIEW_Stop>
      break;
 8003dbc:	e031      	b.n	8003e22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003dbe:	f001 fb33 	bl	8005428 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003dc2:	e02e      	b.n	8003e22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003dc4:	f001 faf8 	bl	80053b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003dc8:	e02b      	b.n	8003e22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003dca:	f001 f977 	bl	80050bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003dce:	e028      	b.n	8003e22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003dd0:	f001 fdd0 	bl	8005974 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003dd4:	e025      	b.n	8003e22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003dd6:	f001 fdaf 	bl	8005938 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003dda:	e022      	b.n	8003e22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ddc:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <_HandleIncomingPacket+0xd8>)
 8003dde:	7e1b      	ldrb	r3, [r3, #24]
 8003de0:	4618      	mov	r0, r3
 8003de2:	1cfb      	adds	r3, r7, #3
 8003de4:	2201      	movs	r2, #1
 8003de6:	4619      	mov	r1, r3
 8003de8:	f7ff fdac 	bl	8003944 <SEGGER_RTT_ReadNoLock>
 8003dec:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 fd14 	bl	8005824 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003dfc:	e00e      	b.n	8003e1c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	b25b      	sxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da0c      	bge.n	8003e20 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <_HandleIncomingPacket+0xd8>)
 8003e08:	7e1b      	ldrb	r3, [r3, #24]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	1cfb      	adds	r3, r7, #3
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4619      	mov	r1, r3
 8003e12:	f7ff fd97 	bl	8003944 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003e16:	e003      	b.n	8003e20 <_HandleIncomingPacket+0xcc>
      break;
 8003e18:	bf00      	nop
 8003e1a:	e002      	b.n	8003e22 <_HandleIncomingPacket+0xce>
      break;
 8003e1c:	bf00      	nop
 8003e1e:	e000      	b.n	8003e22 <_HandleIncomingPacket+0xce>
      break;
 8003e20:	bf00      	nop
    }
  }
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2000cf44 	.word	0x2000cf44

08003e30 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	@ 0x30
 8003e34:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003e36:	2301      	movs	r3, #1
 8003e38:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e44:	4b32      	ldr	r3, [pc, #200]	@ (8003f10 <_TrySendOverflowPacket+0xe0>)
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e4a:	e00b      	b.n	8003e64 <_TrySendOverflowPacket+0x34>
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	1c59      	adds	r1, r3, #1
 8003e54:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003e56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	09db      	lsrs	r3, r3, #7
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e68:	d8f0      	bhi.n	8003e4c <_TrySendOverflowPacket+0x1c>
 8003e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e78:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003e7a:	4b26      	ldr	r3, [pc, #152]	@ (8003f14 <_TrySendOverflowPacket+0xe4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003e80:	4b23      	ldr	r3, [pc, #140]	@ (8003f10 <_TrySendOverflowPacket+0xe0>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	e00b      	b.n	8003eac <_TrySendOverflowPacket+0x7c>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	1c59      	adds	r1, r3, #1
 8003e9c:	6279      	str	r1, [r7, #36]	@ 0x24
 8003e9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	09db      	lsrs	r3, r3, #7
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2b7f      	cmp	r3, #127	@ 0x7f
 8003eb0:	d8f0      	bhi.n	8003e94 <_TrySendOverflowPacket+0x64>
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003ec2:	4b13      	ldr	r3, [pc, #76]	@ (8003f10 <_TrySendOverflowPacket+0xe0>)
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	1d3b      	adds	r3, r7, #4
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f7fc f9b4 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003edc:	f001 ff2e 	bl	8005d3c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f10 <_TrySendOverflowPacket+0xe0>)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003eec:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <_TrySendOverflowPacket+0xe0>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <_TrySendOverflowPacket+0xe0>)
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e004      	b.n	8003f04 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003efa:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <_TrySendOverflowPacket+0xe0>)
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	3301      	adds	r3, #1
 8003f00:	4a03      	ldr	r2, [pc, #12]	@ (8003f10 <_TrySendOverflowPacket+0xe0>)
 8003f02:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003f04:	693b      	ldr	r3, [r7, #16]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3730      	adds	r7, #48	@ 0x30
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	2000cf44 	.word	0x2000cf44
 8003f14:	e0001004 	.word	0xe0001004

08003f18 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	@ 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003f24:	4b96      	ldr	r3, [pc, #600]	@ (8004180 <_SendPacket+0x268>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d010      	beq.n	8003f4e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003f2c:	4b94      	ldr	r3, [pc, #592]	@ (8004180 <_SendPacket+0x268>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8130 	beq.w	8004196 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003f36:	4b92      	ldr	r3, [pc, #584]	@ (8004180 <_SendPacket+0x268>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d109      	bne.n	8003f52 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003f3e:	f7ff ff77 	bl	8003e30 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003f42:	4b8f      	ldr	r3, [pc, #572]	@ (8004180 <_SendPacket+0x268>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f040 8127 	bne.w	800419a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8003f4c:	e001      	b.n	8003f52 <_SendPacket+0x3a>
    goto Send;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <_SendPacket+0x3c>
Send:
 8003f52:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b1f      	cmp	r3, #31
 8003f58:	d809      	bhi.n	8003f6e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003f5a:	4b89      	ldr	r3, [pc, #548]	@ (8004180 <_SendPacket+0x268>)
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f040 8118 	bne.w	800419e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b17      	cmp	r3, #23
 8003f72:	d807      	bhi.n	8003f84 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	e0c4      	b.n	800410e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f90:	d912      	bls.n	8003fb8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	09da      	lsrs	r2, r3, #7
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	3a01      	subs	r2, #1
 8003faa:	60fa      	str	r2, [r7, #12]
 8003fac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e006      	b.n	8003fc6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b7e      	cmp	r3, #126	@ 0x7e
 8003fca:	d807      	bhi.n	8003fdc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e098      	b.n	800410e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe2:	d212      	bcs.n	800400a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	09da      	lsrs	r2, r3, #7
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	3a01      	subs	r2, #1
 8003ffc:	60fa      	str	r2, [r7, #12]
 8003ffe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e081      	b.n	800410e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004010:	d21d      	bcs.n	800404e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0b9a      	lsrs	r2, r3, #14
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b01      	subs	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	09db      	lsrs	r3, r3, #7
 8004026:	b2db      	uxtb	r3, r3
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	3a01      	subs	r2, #1
 800402c:	60fa      	str	r2, [r7, #12]
 800402e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	3a01      	subs	r2, #1
 8004040:	60fa      	str	r2, [r7, #12]
 8004042:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004046:	b2da      	uxtb	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e05f      	b.n	800410e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004054:	d228      	bcs.n	80040a8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0d5a      	lsrs	r2, r3, #21
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b01      	subs	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0b9b      	lsrs	r3, r3, #14
 800406a:	b2db      	uxtb	r3, r3
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	3a01      	subs	r2, #1
 8004070:	60fa      	str	r2, [r7, #12]
 8004072:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004076:	b2da      	uxtb	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	09db      	lsrs	r3, r3, #7
 8004080:	b2db      	uxtb	r3, r3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	3a01      	subs	r2, #1
 8004086:	60fa      	str	r2, [r7, #12]
 8004088:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	3a01      	subs	r2, #1
 800409a:	60fa      	str	r2, [r7, #12]
 800409c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	e032      	b.n	800410e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	0f1a      	lsrs	r2, r3, #28
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	0d5b      	lsrs	r3, r3, #21
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	3a01      	subs	r2, #1
 80040c2:	60fa      	str	r2, [r7, #12]
 80040c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0b9b      	lsrs	r3, r3, #14
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	3a01      	subs	r2, #1
 80040d8:	60fa      	str	r2, [r7, #12]
 80040da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	09db      	lsrs	r3, r3, #7
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	3a01      	subs	r2, #1
 80040ee:	60fa      	str	r2, [r7, #12]
 80040f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	3a01      	subs	r2, #1
 8004102:	60fa      	str	r2, [r7, #12]
 8004104:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800410e:	4b1d      	ldr	r3, [pc, #116]	@ (8004184 <_SendPacket+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004114:	4b1a      	ldr	r3, [pc, #104]	@ (8004180 <_SendPacket+0x268>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	623b      	str	r3, [r7, #32]
 8004126:	e00b      	b.n	8004140 <_SendPacket+0x228>
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	6279      	str	r1, [r7, #36]	@ 0x24
 8004132:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	09db      	lsrs	r3, r3, #7
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	2b7f      	cmp	r3, #127	@ 0x7f
 8004144:	d8f0      	bhi.n	8004128 <_SendPacket+0x210>
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	627a      	str	r2, [r7, #36]	@ 0x24
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004156:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <_SendPacket+0x268>)
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	4618      	mov	r0, r3
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	461a      	mov	r2, r3
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	f7fc f86b 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800416a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800416c:	f001 fde6 	bl	8005d3c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004176:	4a02      	ldr	r2, [pc, #8]	@ (8004180 <_SendPacket+0x268>)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	60d3      	str	r3, [r2, #12]
 800417c:	e010      	b.n	80041a0 <_SendPacket+0x288>
 800417e:	bf00      	nop
 8004180:	2000cf44 	.word	0x2000cf44
 8004184:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <_SendPacket+0x2d8>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	4b17      	ldr	r3, [pc, #92]	@ (80041f0 <_SendPacket+0x2d8>)
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e004      	b.n	80041a0 <_SendPacket+0x288>
    goto SendDone;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <_SendPacket+0x288>
      goto SendDone;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <_SendPacket+0x288>
      goto SendDone;
 800419e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80041a0:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <_SendPacket+0x2d8>)
 80041a2:	7e1b      	ldrb	r3, [r3, #24]
 80041a4:	4619      	mov	r1, r3
 80041a6:	4a13      	ldr	r2, [pc, #76]	@ (80041f4 <_SendPacket+0x2dc>)
 80041a8:	460b      	mov	r3, r1
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	440b      	add	r3, r1
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	336c      	adds	r3, #108	@ 0x6c
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b0e      	ldr	r3, [pc, #56]	@ (80041f0 <_SendPacket+0x2d8>)
 80041b8:	7e1b      	ldrb	r3, [r3, #24]
 80041ba:	4618      	mov	r0, r3
 80041bc:	490d      	ldr	r1, [pc, #52]	@ (80041f4 <_SendPacket+0x2dc>)
 80041be:	4603      	mov	r3, r0
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4403      	add	r3, r0
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	440b      	add	r3, r1
 80041c8:	3370      	adds	r3, #112	@ 0x70
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d00b      	beq.n	80041e8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <_SendPacket+0x2d8>)
 80041d2:	789b      	ldrb	r3, [r3, #2]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80041d8:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <_SendPacket+0x2d8>)
 80041da:	2201      	movs	r2, #1
 80041dc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80041de:	f7ff fdb9 	bl	8003d54 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80041e2:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <_SendPacket+0x2d8>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80041e8:	bf00      	nop
 80041ea:	3728      	adds	r7, #40	@ 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	2000cf44 	.word	0x2000cf44
 80041f4:	2000ba84 	.word	0x2000ba84

080041f8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	@ 0x28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	3301      	adds	r3, #1
 800420e:	2b80      	cmp	r3, #128	@ 0x80
 8004210:	d80a      	bhi.n	8004228 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6051      	str	r1, [r2, #4]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	2b80      	cmp	r3, #128	@ 0x80
 800422e:	d15a      	bne.n	80042e6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	623b      	str	r3, [r7, #32]
 8004250:	e00b      	b.n	800426a <_StoreChar+0x72>
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	1c59      	adds	r1, r3, #1
 800425a:	6279      	str	r1, [r7, #36]	@ 0x24
 800425c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	09db      	lsrs	r3, r3, #7
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	2b7f      	cmp	r3, #127	@ 0x7f
 800426e:	d8f0      	bhi.n	8004252 <_StoreChar+0x5a>
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	627a      	str	r2, [r7, #36]	@ 0x24
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	2300      	movs	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e00b      	b.n	80042a2 <_StoreChar+0xaa>
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	1c59      	adds	r1, r3, #1
 8004292:	61f9      	str	r1, [r7, #28]
 8004294:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	09db      	lsrs	r3, r3, #7
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80042a6:	d8f0      	bhi.n	800428a <_StoreChar+0x92>
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	61fa      	str	r2, [r7, #28]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	221a      	movs	r2, #26
 80042be:	6939      	ldr	r1, [r7, #16]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fe29 	bl	8003f18 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fd36 	bl	8003d3c <_PreparePacket>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
  }
}
 80042e6:	bf00      	nop
 80042e8:	3728      	adds	r7, #40	@ 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	@ 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004302:	2301      	movs	r3, #1
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004306:	2301      	movs	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800430a:	e007      	b.n	800431c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	623b      	str	r3, [r7, #32]
    Width++;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3301      	adds	r3, #1
 800431a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	d2f3      	bcs.n	800430c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	429a      	cmp	r2, r3
 800432a:	d901      	bls.n	8004330 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d000      	beq.n	800433c <_PrintUnsigned+0x4c>
 800433a:	e01f      	b.n	800437c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01c      	beq.n	800437c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <_PrintUnsigned+0x68>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <_PrintUnsigned+0x68>
        c = '0';
 8004352:	2330      	movs	r3, #48	@ 0x30
 8004354:	76fb      	strb	r3, [r7, #27]
 8004356:	e001      	b.n	800435c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004358:	2320      	movs	r3, #32
 800435a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800435c:	e007      	b.n	800436e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	3b01      	subs	r3, #1
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004364:	7efb      	ldrb	r3, [r7, #27]
 8004366:	4619      	mov	r1, r3
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff ff45 	bl	80041f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <_PrintUnsigned+0x8c>
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	429a      	cmp	r2, r3
 800437a:	d3f0      	bcc.n	800435e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d903      	bls.n	800438a <_PrintUnsigned+0x9a>
      NumDigits--;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	3b01      	subs	r3, #1
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	e009      	b.n	800439e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d200      	bcs.n	800439e <_PrintUnsigned+0xae>
        break;
 800439c:	e005      	b.n	80043aa <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80043a8:	e7e8      	b.n	800437c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80043c2:	4a15      	ldr	r2, [pc, #84]	@ (8004418 <_PrintUnsigned+0x128>)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	4619      	mov	r1, r3
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff ff13 	bl	80041f8 <_StoreChar>
    Digit /= Base;
 80043d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e3      	bne.n	80043aa <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d011      	beq.n	8004410 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00e      	beq.n	8004410 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80043f2:	e006      	b.n	8004402 <_PrintUnsigned+0x112>
        FieldWidth--;
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	3b01      	subs	r3, #1
 80043f8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80043fa:	2120      	movs	r1, #32
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff fefb 	bl	80041f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <_PrintUnsigned+0x120>
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440c:	429a      	cmp	r2, r3
 800440e:	d3f1      	bcc.n	80043f4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8004410:	bf00      	nop
 8004412:	3728      	adds	r7, #40	@ 0x28
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	080080d0 	.word	0x080080d0

0800441c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	bfb8      	it	lt
 8004430:	425b      	neglt	r3, r3
 8004432:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004434:	2301      	movs	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004438:	e007      	b.n	800444a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004442:	613b      	str	r3, [r7, #16]
    Width++;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	3301      	adds	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	429a      	cmp	r2, r3
 8004450:	daf3      	bge.n	800443a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	429a      	cmp	r2, r3
 8004458:	d901      	bls.n	800445e <_PrintInt+0x42>
    Width = NumDigits;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <_PrintInt+0x5e>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	db04      	blt.n	8004474 <_PrintInt+0x58>
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <_PrintInt+0x5e>
    FieldWidth--;
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	3b01      	subs	r3, #1
 8004478:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <_PrintInt+0x6e>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <_PrintInt+0x9c>
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d111      	bne.n	80044b8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00e      	beq.n	80044b8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800449a:	e006      	b.n	80044aa <_PrintInt+0x8e>
        FieldWidth--;
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	3b01      	subs	r3, #1
 80044a0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80044a2:	2120      	movs	r1, #32
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff fea7 	bl	80041f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <_PrintInt+0x9c>
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3f1      	bcc.n	800449c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	da07      	bge.n	80044ce <_PrintInt+0xb2>
    v = -v;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	425b      	negs	r3, r3
 80044c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80044c4:	212d      	movs	r1, #45	@ 0x2d
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff fe96 	bl	80041f8 <_StoreChar>
 80044cc:	e008      	b.n	80044e0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80044d8:	212b      	movs	r1, #43	@ 0x2b
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff fe8c 	bl	80041f8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d019      	beq.n	800451e <_PrintInt+0x102>
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d114      	bne.n	800451e <_PrintInt+0x102>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d111      	bne.n	800451e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00e      	beq.n	800451e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004500:	e006      	b.n	8004510 <_PrintInt+0xf4>
        FieldWidth--;
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	3b01      	subs	r3, #1
 8004506:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004508:	2130      	movs	r1, #48	@ 0x30
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fe74 	bl	80041f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <_PrintInt+0x102>
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	429a      	cmp	r2, r3
 800451c:	d3f1      	bcc.n	8004502 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fedf 	bl	80042f0 <_PrintUnsigned>
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b098      	sub	sp, #96	@ 0x60
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004548:	f3ef 8311 	mrs	r3, BASEPRI
 800454c:	f04f 0120 	mov.w	r1, #32
 8004550:	f381 8811 	msr	BASEPRI, r1
 8004554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004556:	48b7      	ldr	r0, [pc, #732]	@ (8004834 <_VPrintTarget+0x2f8>)
 8004558:	f7ff fbf0 	bl	8003d3c <_PreparePacket>
 800455c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800455e:	4bb5      	ldr	r3, [pc, #724]	@ (8004834 <_VPrintTarget+0x2f8>)
 8004560:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	3301      	adds	r3, #1
 800456e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004582:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 81a8 	beq.w	80048dc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800458c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004590:	2b25      	cmp	r3, #37	@ 0x25
 8004592:	f040 8195 	bne.w	80048c0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004596:	2300      	movs	r3, #0
 8004598:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80045a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80045aa:	3b23      	subs	r3, #35	@ 0x23
 80045ac:	2b0d      	cmp	r3, #13
 80045ae:	d83f      	bhi.n	8004630 <_VPrintTarget+0xf4>
 80045b0:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <_VPrintTarget+0x7c>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	08004621 	.word	0x08004621
 80045bc:	08004631 	.word	0x08004631
 80045c0:	08004631 	.word	0x08004631
 80045c4:	08004631 	.word	0x08004631
 80045c8:	08004631 	.word	0x08004631
 80045cc:	08004631 	.word	0x08004631
 80045d0:	08004631 	.word	0x08004631
 80045d4:	08004631 	.word	0x08004631
 80045d8:	08004611 	.word	0x08004611
 80045dc:	08004631 	.word	0x08004631
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	08004631 	.word	0x08004631
 80045e8:	08004631 	.word	0x08004631
 80045ec:	08004601 	.word	0x08004601
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80045f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e01a      	b.n	8004636 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3301      	adds	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e012      	b.n	8004636 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	e00a      	b.n	8004636 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004622:	f043 0308 	orr.w	r3, r3, #8
 8004626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3301      	adds	r3, #1
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e002      	b.n	8004636 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004630:	2300      	movs	r3, #0
 8004632:	653b      	str	r3, [r7, #80]	@ 0x50
 8004634:	bf00      	nop
        }
      } while (v);
 8004636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1b0      	bne.n	800459e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800463c:	2300      	movs	r3, #0
 800463e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004648:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800464c:	2b2f      	cmp	r3, #47	@ 0x2f
 800464e:	d912      	bls.n	8004676 <_VPrintTarget+0x13a>
 8004650:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004654:	2b39      	cmp	r3, #57	@ 0x39
 8004656:	d80e      	bhi.n	8004676 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800465e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	461a      	mov	r2, r3
 800466a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800466e:	4413      	add	r3, r2
 8004670:	3b30      	subs	r3, #48	@ 0x30
 8004672:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004674:	e7e4      	b.n	8004640 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004676:	2300      	movs	r3, #0
 8004678:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004682:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004686:	2b2e      	cmp	r3, #46	@ 0x2e
 8004688:	d11d      	bne.n	80046c6 <_VPrintTarget+0x18a>
        sFormat++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3301      	adds	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004698:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800469c:	2b2f      	cmp	r3, #47	@ 0x2f
 800469e:	d912      	bls.n	80046c6 <_VPrintTarget+0x18a>
 80046a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046a4:	2b39      	cmp	r3, #57	@ 0x39
 80046a6:	d80e      	bhi.n	80046c6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3301      	adds	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80046ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	461a      	mov	r2, r3
 80046ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046be:	4413      	add	r3, r2
 80046c0:	3b30      	subs	r3, #48	@ 0x30
 80046c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80046c4:	e7e4      	b.n	8004690 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80046ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80046d4:	d003      	beq.n	80046de <_VPrintTarget+0x1a2>
 80046d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046da:	2b68      	cmp	r3, #104	@ 0x68
 80046dc:	d107      	bne.n	80046ee <_VPrintTarget+0x1b2>
          c = *sFormat;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80046ec:	e7ef      	b.n	80046ce <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80046ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046f2:	2b25      	cmp	r3, #37	@ 0x25
 80046f4:	f000 80d8 	beq.w	80048a8 <_VPrintTarget+0x36c>
 80046f8:	2b25      	cmp	r3, #37	@ 0x25
 80046fa:	f2c0 80dc 	blt.w	80048b6 <_VPrintTarget+0x37a>
 80046fe:	2b78      	cmp	r3, #120	@ 0x78
 8004700:	f300 80d9 	bgt.w	80048b6 <_VPrintTarget+0x37a>
 8004704:	2b58      	cmp	r3, #88	@ 0x58
 8004706:	f2c0 80d6 	blt.w	80048b6 <_VPrintTarget+0x37a>
 800470a:	3b58      	subs	r3, #88	@ 0x58
 800470c:	2b20      	cmp	r3, #32
 800470e:	f200 80d2 	bhi.w	80048b6 <_VPrintTarget+0x37a>
 8004712:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <_VPrintTarget+0x1dc>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	0800480f 	.word	0x0800480f
 800471c:	080048b7 	.word	0x080048b7
 8004720:	080048b7 	.word	0x080048b7
 8004724:	080048b7 	.word	0x080048b7
 8004728:	080048b7 	.word	0x080048b7
 800472c:	080048b7 	.word	0x080048b7
 8004730:	080048b7 	.word	0x080048b7
 8004734:	080048b7 	.word	0x080048b7
 8004738:	080048b7 	.word	0x080048b7
 800473c:	080048b7 	.word	0x080048b7
 8004740:	080048b7 	.word	0x080048b7
 8004744:	0800479d 	.word	0x0800479d
 8004748:	080047c3 	.word	0x080047c3
 800474c:	080048b7 	.word	0x080048b7
 8004750:	080048b7 	.word	0x080048b7
 8004754:	080048b7 	.word	0x080048b7
 8004758:	080048b7 	.word	0x080048b7
 800475c:	080048b7 	.word	0x080048b7
 8004760:	080048b7 	.word	0x080048b7
 8004764:	080048b7 	.word	0x080048b7
 8004768:	080048b7 	.word	0x080048b7
 800476c:	080048b7 	.word	0x080048b7
 8004770:	080048b7 	.word	0x080048b7
 8004774:	080048b7 	.word	0x080048b7
 8004778:	08004883 	.word	0x08004883
 800477c:	080048b7 	.word	0x080048b7
 8004780:	080048b7 	.word	0x080048b7
 8004784:	08004839 	.word	0x08004839
 8004788:	080048b7 	.word	0x080048b7
 800478c:	080047e9 	.word	0x080047e9
 8004790:	080048b7 	.word	0x080048b7
 8004794:	080048b7 	.word	0x080048b7
 8004798:	0800480f 	.word	0x0800480f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1d19      	adds	r1, r3, #4
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6011      	str	r1, [r2, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80047aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80047b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80047b4:	f107 0310 	add.w	r3, r7, #16
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fd1c 	bl	80041f8 <_StoreChar>
        break;
 80047c0:	e07a      	b.n	80048b8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	1d19      	adds	r1, r3, #4
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6011      	str	r1, [r2, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80047d0:	f107 0010 	add.w	r0, r7, #16
 80047d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047de:	220a      	movs	r2, #10
 80047e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047e2:	f7ff fe1b 	bl	800441c <_PrintInt>
        break;
 80047e6:	e067      	b.n	80048b8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1d19      	adds	r1, r3, #4
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6011      	str	r1, [r2, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80047f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047f8:	f107 0010 	add.w	r0, r7, #16
 80047fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004806:	220a      	movs	r2, #10
 8004808:	f7ff fd72 	bl	80042f0 <_PrintUnsigned>
        break;
 800480c:	e054      	b.n	80048b8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	1d19      	adds	r1, r3, #4
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6011      	str	r1, [r2, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800481c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800481e:	f107 0010 	add.w	r0, r7, #16
 8004822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800482c:	2210      	movs	r2, #16
 800482e:	f7ff fd5f 	bl	80042f0 <_PrintUnsigned>
        break;
 8004832:	e041      	b.n	80048b8 <_VPrintTarget+0x37c>
 8004834:	2000cf74 	.word	0x2000cf74
      case 's':
        s = va_arg(*pParamList, const char*);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	1d19      	adds	r1, r3, #4
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8004846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <_VPrintTarget+0x314>
          s = "(null)";
 800484c:	4b4a      	ldr	r3, [pc, #296]	@ (8004978 <_VPrintTarget+0x43c>)
 800484e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800485a:	3301      	adds	r3, #1
 800485c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 800485e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004866:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fcc1 	bl	80041f8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	2b7f      	cmp	r3, #127	@ 0x7f
 800487a:	d9e9      	bls.n	8004850 <_VPrintTarget+0x314>
        break;
 800487c:	e01c      	b.n	80048b8 <_VPrintTarget+0x37c>
            break;
 800487e:	bf00      	nop
        break;
 8004880:	e01a      	b.n	80048b8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	1d19      	adds	r1, r3, #4
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6011      	str	r1, [r2, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004890:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004892:	f107 0010 	add.w	r0, r7, #16
 8004896:	2300      	movs	r3, #0
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	2308      	movs	r3, #8
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2308      	movs	r3, #8
 80048a0:	2210      	movs	r2, #16
 80048a2:	f7ff fd25 	bl	80042f0 <_PrintUnsigned>
        break;
 80048a6:	e007      	b.n	80048b8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80048a8:	f107 0310 	add.w	r3, r7, #16
 80048ac:	2125      	movs	r1, #37	@ 0x25
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fca2 	bl	80041f8 <_StoreChar>
        break;
 80048b4:	e000      	b.n	80048b8 <_VPrintTarget+0x37c>
      default:
        break;
 80048b6:	bf00      	nop
      }
      sFormat++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e007      	b.n	80048d0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80048c0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80048c4:	f107 0310 	add.w	r3, r7, #16
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fc94 	bl	80041f8 <_StoreChar>
    }
  } while (*sFormat);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f47f ae4d 	bne.w	8004574 <_VPrintTarget+0x38>
 80048da:	e000      	b.n	80048de <_VPrintTarget+0x3a2>
      break;
 80048dc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d041      	beq.n	8004968 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048f4:	e00b      	b.n	800490e <_VPrintTarget+0x3d2>
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fc:	1c59      	adds	r1, r3, #1
 80048fe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004900:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	09db      	lsrs	r3, r3, #7
 800490c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800490e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004910:	2b7f      	cmp	r3, #127	@ 0x7f
 8004912:	d8f0      	bhi.n	80048f6 <_VPrintTarget+0x3ba>
 8004914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800491a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004922:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
 8004928:	2300      	movs	r3, #0
 800492a:	633b      	str	r3, [r7, #48]	@ 0x30
 800492c:	e00b      	b.n	8004946 <_VPrintTarget+0x40a>
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	b2da      	uxtb	r2, r3
 8004932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004934:	1c59      	adds	r1, r3, #1
 8004936:	6379      	str	r1, [r7, #52]	@ 0x34
 8004938:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	09db      	lsrs	r3, r3, #7
 8004944:	633b      	str	r3, [r7, #48]	@ 0x30
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	2b7f      	cmp	r3, #127	@ 0x7f
 800494a:	d8f0      	bhi.n	800492e <_VPrintTarget+0x3f2>
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	637a      	str	r2, [r7, #52]	@ 0x34
 8004952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	6979      	ldr	r1, [r7, #20]
 8004960:	221a      	movs	r2, #26
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fad8 	bl	8003f18 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800496e:	bf00      	nop
 8004970:	3758      	adds	r7, #88	@ 0x58
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	08007fd0 	.word	0x08007fd0

0800497c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800498a:	2300      	movs	r3, #0
 800498c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004990:	4917      	ldr	r1, [pc, #92]	@ (80049f0 <SEGGER_SYSVIEW_Init+0x74>)
 8004992:	4818      	ldr	r0, [pc, #96]	@ (80049f4 <SEGGER_SYSVIEW_Init+0x78>)
 8004994:	f7ff f8d2 	bl	8003b3c <SEGGER_RTT_AllocUpBuffer>
 8004998:	4603      	mov	r3, r0
 800499a:	b2da      	uxtb	r2, r3
 800499c:	4b16      	ldr	r3, [pc, #88]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800499e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80049a0:	4b15      	ldr	r3, [pc, #84]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049a2:	785a      	ldrb	r2, [r3, #1]
 80049a4:	4b14      	ldr	r3, [pc, #80]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80049a8:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049aa:	7e1b      	ldrb	r3, [r3, #24]
 80049ac:	4618      	mov	r0, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	2308      	movs	r3, #8
 80049b4:	4a11      	ldr	r2, [pc, #68]	@ (80049fc <SEGGER_SYSVIEW_Init+0x80>)
 80049b6:	490f      	ldr	r1, [pc, #60]	@ (80049f4 <SEGGER_SYSVIEW_Init+0x78>)
 80049b8:	f7ff f944 	bl	8003c44 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80049bc:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a00 <SEGGER_SYSVIEW_Init+0x84>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a0c      	ldr	r2, [pc, #48]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80049ca:	4a0b      	ldr	r2, [pc, #44]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80049d0:	4a09      	ldr	r2, [pc, #36]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80049d6:	4a08      	ldr	r2, [pc, #32]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80049dc:	4a06      	ldr	r2, [pc, #24]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80049e2:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	2000bf3c 	.word	0x2000bf3c
 80049f4:	08007fd8 	.word	0x08007fd8
 80049f8:	2000cf44 	.word	0x2000cf44
 80049fc:	2000cf3c 	.word	0x2000cf3c
 8004a00:	e0001004 	.word	0xe0001004

08004a04 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004a0c:	4a04      	ldr	r2, [pc, #16]	@ (8004a20 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6113      	str	r3, [r2, #16]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000cf44 	.word	0x2000cf44

08004a24 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a30:	f04f 0120 	mov.w	r1, #32
 8004a34:	f381 8811 	msr	BASEPRI, r1
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	4808      	ldr	r0, [pc, #32]	@ (8004a5c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004a3c:	f7ff f97e 	bl	8003d3c <_PreparePacket>
 8004a40:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68b8      	ldr	r0, [r7, #8]
 8004a48:	f7ff fa66 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f383 8811 	msr	BASEPRI, r3
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	2000cf74 	.word	0x2000cf74

08004a60 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a6e:	f04f 0120 	mov.w	r1, #32
 8004a72:	f381 8811 	msr	BASEPRI, r1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	4816      	ldr	r0, [pc, #88]	@ (8004ad4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004a7a:	f7ff f95f 	bl	8003d3c <_PreparePacket>
 8004a7e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e00b      	b.n	8004aa6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1c59      	adds	r1, r3, #1
 8004a96:	61f9      	str	r1, [r7, #28]
 8004a98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	09db      	lsrs	r3, r3, #7
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aaa:	d8f0      	bhi.n	8004a8e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	6938      	ldr	r0, [r7, #16]
 8004ac2:	f7ff fa29 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f383 8811 	msr	BASEPRI, r3
}
 8004acc:	bf00      	nop
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	2000cf74 	.word	0x2000cf74

08004ad8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08c      	sub	sp, #48	@ 0x30
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ae4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae8:	f04f 0120 	mov.w	r1, #32
 8004aec:	f381 8811 	msr	BASEPRI, r1
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	4825      	ldr	r0, [pc, #148]	@ (8004b88 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004af4:	f7ff f922 	bl	8003d3c <_PreparePacket>
 8004af8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b06:	e00b      	b.n	8004b20 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004b12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b24:	d8f0      	bhi.n	8004b08 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b34:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	e00b      	b.n	8004b58 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	09db      	lsrs	r3, r3, #7
 8004b56:	623b      	str	r3, [r7, #32]
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b5c:	d8f0      	bhi.n	8004b40 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b64:	6a3a      	ldr	r2, [r7, #32]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	6979      	ldr	r1, [r7, #20]
 8004b72:	69b8      	ldr	r0, [r7, #24]
 8004b74:	f7ff f9d0 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
}
 8004b7e:	bf00      	nop
 8004b80:	3730      	adds	r7, #48	@ 0x30
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2000cf74 	.word	0x2000cf74

08004b8c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08e      	sub	sp, #56	@ 0x38
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b9e:	f04f 0120 	mov.w	r1, #32
 8004ba2:	f381 8811 	msr	BASEPRI, r1
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	4832      	ldr	r0, [pc, #200]	@ (8004c74 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004baa:	f7ff f8c7 	bl	8003d3c <_PreparePacket>
 8004bae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bbc:	e00b      	b.n	8004bd6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	1c59      	adds	r1, r3, #1
 8004bc6:	6379      	str	r1, [r7, #52]	@ 0x34
 8004bc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	09db      	lsrs	r3, r3, #7
 8004bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bda:	d8f0      	bhi.n	8004bbe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	637a      	str	r2, [r7, #52]	@ 0x34
 8004be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf4:	e00b      	b.n	8004c0e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	1c59      	adds	r1, r3, #1
 8004bfe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004c00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0a:	09db      	lsrs	r3, r3, #7
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c12:	d8f0      	bhi.n	8004bf6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	623b      	str	r3, [r7, #32]
 8004c2c:	e00b      	b.n	8004c46 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	09db      	lsrs	r3, r3, #7
 8004c44:	623b      	str	r3, [r7, #32]
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c4a:	d8f0      	bhi.n	8004c2e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c52:	6a3a      	ldr	r2, [r7, #32]
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6979      	ldr	r1, [r7, #20]
 8004c60:	69b8      	ldr	r0, [r7, #24]
 8004c62:	f7ff f959 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f383 8811 	msr	BASEPRI, r3
}
 8004c6c:	bf00      	nop
 8004c6e:	3738      	adds	r7, #56	@ 0x38
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	2000cf74 	.word	0x2000cf74

08004c78 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b090      	sub	sp, #64	@ 0x40
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c86:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8a:	f04f 0120 	mov.w	r1, #32
 8004c8e:	f381 8811 	msr	BASEPRI, r1
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	4840      	ldr	r0, [pc, #256]	@ (8004d98 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004c96:	f7ff f851 	bl	8003d3c <_PreparePacket>
 8004c9a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ca8:	e00b      	b.n	8004cc2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb0:	1c59      	adds	r1, r3, #1
 8004cb2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004cb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cbe:	09db      	lsrs	r3, r3, #7
 8004cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cc6:	d8f0      	bhi.n	8004caa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce0:	e00b      	b.n	8004cfa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce8:	1c59      	adds	r1, r3, #1
 8004cea:	6379      	str	r1, [r7, #52]	@ 0x34
 8004cec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	09db      	lsrs	r3, r3, #7
 8004cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cfe:	d8f0      	bhi.n	8004ce2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d18:	e00b      	b.n	8004d32 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d20:	1c59      	adds	r1, r3, #1
 8004d22:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	09db      	lsrs	r3, r3, #7
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d36:	d8f0      	bhi.n	8004d1a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	e00b      	b.n	8004d6a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	09db      	lsrs	r3, r3, #7
 8004d68:	623b      	str	r3, [r7, #32]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d6e:	d8f0      	bhi.n	8004d52 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d76:	6a3a      	ldr	r2, [r7, #32]
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	6979      	ldr	r1, [r7, #20]
 8004d84:	69b8      	ldr	r0, [r7, #24]
 8004d86:	f7ff f8c7 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	f383 8811 	msr	BASEPRI, r3
}
 8004d90:	bf00      	nop
 8004d92:	3740      	adds	r7, #64	@ 0x40
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	2000cf74 	.word	0x2000cf74

08004d9c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b092      	sub	sp, #72	@ 0x48
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004daa:	f3ef 8311 	mrs	r3, BASEPRI
 8004dae:	f04f 0120 	mov.w	r1, #32
 8004db2:	f381 8811 	msr	BASEPRI, r1
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	484e      	ldr	r0, [pc, #312]	@ (8004ef4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004dba:	f7fe ffbf 	bl	8003d3c <_PreparePacket>
 8004dbe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dcc:	e00b      	b.n	8004de6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8004dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd4:	1c59      	adds	r1, r3, #1
 8004dd6:	6479      	str	r1, [r7, #68]	@ 0x44
 8004dd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de2:	09db      	lsrs	r3, r3, #7
 8004de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dea:	d8f0      	bhi.n	8004dce <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8004dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	647a      	str	r2, [r7, #68]	@ 0x44
 8004df2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e04:	e00b      	b.n	8004e1e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0c:	1c59      	adds	r1, r3, #1
 8004e0e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004e10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	09db      	lsrs	r3, r3, #7
 8004e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e22:	d8f0      	bhi.n	8004e06 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8004e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e3c:	e00b      	b.n	8004e56 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e44:	1c59      	adds	r1, r3, #1
 8004e46:	6379      	str	r1, [r7, #52]	@ 0x34
 8004e48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	09db      	lsrs	r3, r3, #7
 8004e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e5a:	d8f0      	bhi.n	8004e3e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e74:	e00b      	b.n	8004e8e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	1c59      	adds	r1, r3, #1
 8004e7e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	09db      	lsrs	r3, r3, #7
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e92:	d8f0      	bhi.n	8004e76 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8004e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eaa:	623b      	str	r3, [r7, #32]
 8004eac:	e00b      	b.n	8004ec6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	1c59      	adds	r1, r3, #1
 8004eb6:	6279      	str	r1, [r7, #36]	@ 0x24
 8004eb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	09db      	lsrs	r3, r3, #7
 8004ec4:	623b      	str	r3, [r7, #32]
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eca:	d8f0      	bhi.n	8004eae <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	69b8      	ldr	r0, [r7, #24]
 8004ee2:	f7ff f819 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f383 8811 	msr	BASEPRI, r3
}
 8004eec:	bf00      	nop
 8004eee:	3748      	adds	r7, #72	@ 0x48
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	2000cf74 	.word	0x2000cf74

08004ef8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	@ 0x30
 8004efc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004efe:	4b59      	ldr	r3, [pc, #356]	@ (8005064 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f04:	f3ef 8311 	mrs	r3, BASEPRI
 8004f08:	f04f 0120 	mov.w	r1, #32
 8004f0c:	f381 8811 	msr	BASEPRI, r1
 8004f10:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f12:	4b54      	ldr	r3, [pc, #336]	@ (8005064 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	220a      	movs	r2, #10
 8004f18:	4953      	ldr	r1, [pc, #332]	@ (8005068 <SEGGER_SYSVIEW_Start+0x170>)
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fb f990 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004f26:	f000 ff09 	bl	8005d3c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f2a:	200a      	movs	r0, #10
 8004f2c:	f7ff fd7a 	bl	8004a24 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f30:	f3ef 8311 	mrs	r3, BASEPRI
 8004f34:	f04f 0120 	mov.w	r1, #32
 8004f38:	f381 8811 	msr	BASEPRI, r1
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	484b      	ldr	r0, [pc, #300]	@ (800506c <SEGGER_SYSVIEW_Start+0x174>)
 8004f40:	f7fe fefc 	bl	8003d3c <_PreparePacket>
 8004f44:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f4e:	4b45      	ldr	r3, [pc, #276]	@ (8005064 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f54:	e00b      	b.n	8004f6e <SEGGER_SYSVIEW_Start+0x76>
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5c:	1c59      	adds	r1, r3, #1
 8004f5e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004f60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	09db      	lsrs	r3, r3, #7
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f72:	d8f0      	bhi.n	8004f56 <SEGGER_SYSVIEW_Start+0x5e>
 8004f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f88:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	623b      	str	r3, [r7, #32]
 8004f8e:	e00b      	b.n	8004fa8 <SEGGER_SYSVIEW_Start+0xb0>
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	1c59      	adds	r1, r3, #1
 8004f98:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	09db      	lsrs	r3, r3, #7
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fac:	d8f0      	bhi.n	8004f90 <SEGGER_SYSVIEW_Start+0x98>
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	4b28      	ldr	r3, [pc, #160]	@ (8005064 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	e00b      	b.n	8004fe2 <SEGGER_SYSVIEW_Start+0xea>
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	1c59      	adds	r1, r3, #1
 8004fd2:	61f9      	str	r1, [r7, #28]
 8004fd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	09db      	lsrs	r3, r3, #7
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fe6:	d8f0      	bhi.n	8004fca <SEGGER_SYSVIEW_Start+0xd2>
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	61fa      	str	r2, [r7, #28]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	e00b      	b.n	800501a <SEGGER_SYSVIEW_Start+0x122>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	6179      	str	r1, [r7, #20]
 800500c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	09db      	lsrs	r3, r3, #7
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b7f      	cmp	r3, #127	@ 0x7f
 800501e:	d8f0      	bhi.n	8005002 <SEGGER_SYSVIEW_Start+0x10a>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	617a      	str	r2, [r7, #20]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005030:	2218      	movs	r2, #24
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fe ff6f 	bl	8003f18 <_SendPacket>
      RECORD_END();
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005040:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <SEGGER_SYSVIEW_Start+0x16c>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005048:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <SEGGER_SYSVIEW_Start+0x16c>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800504e:	f000 f9eb 	bl	8005428 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005052:	f000 f9b1 	bl	80053b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005056:	f000 fc8d 	bl	8005974 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800505a:	bf00      	nop
 800505c:	3730      	adds	r7, #48	@ 0x30
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2000cf44 	.word	0x2000cf44
 8005068:	080080c4 	.word	0x080080c4
 800506c:	2000cf74 	.word	0x2000cf74

08005070 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005076:	f3ef 8311 	mrs	r3, BASEPRI
 800507a:	f04f 0120 	mov.w	r1, #32
 800507e:	f381 8811 	msr	BASEPRI, r1
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	480b      	ldr	r0, [pc, #44]	@ (80050b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005086:	f7fe fe59 	bl	8003d3c <_PreparePacket>
 800508a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005094:	220b      	movs	r2, #11
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6838      	ldr	r0, [r7, #0]
 800509a:	f7fe ff3d 	bl	8003f18 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f383 8811 	msr	BASEPRI, r3
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	2000cf74 	.word	0x2000cf74
 80050b8:	2000cf44 	.word	0x2000cf44

080050bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	@ 0x30
 80050c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80050c2:	f3ef 8311 	mrs	r3, BASEPRI
 80050c6:	f04f 0120 	mov.w	r1, #32
 80050ca:	f381 8811 	msr	BASEPRI, r1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	4845      	ldr	r0, [pc, #276]	@ (80051e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80050d2:	f7fe fe33 	bl	8003d3c <_PreparePacket>
 80050d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050e0:	4b42      	ldr	r3, [pc, #264]	@ (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050e6:	e00b      	b.n	8005100 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80050f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005102:	2b7f      	cmp	r3, #127	@ 0x7f
 8005104:	d8f0      	bhi.n	80050e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800510c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
 800511a:	4b34      	ldr	r3, [pc, #208]	@ (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	623b      	str	r3, [r7, #32]
 8005120:	e00b      	b.n	800513a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	6279      	str	r1, [r7, #36]	@ 0x24
 800512c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	09db      	lsrs	r3, r3, #7
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2b7f      	cmp	r3, #127	@ 0x7f
 800513e:	d8f0      	bhi.n	8005122 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	627a      	str	r2, [r7, #36]	@ 0x24
 8005146:	6a3a      	ldr	r2, [r7, #32]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	4b25      	ldr	r3, [pc, #148]	@ (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e00b      	b.n	8005174 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	61f9      	str	r1, [r7, #28]
 8005166:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	09db      	lsrs	r3, r3, #7
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b7f      	cmp	r3, #127	@ 0x7f
 8005178:	d8f0      	bhi.n	800515c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	61fa      	str	r2, [r7, #28]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e00b      	b.n	80051ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	1c59      	adds	r1, r3, #1
 800519c:	6179      	str	r1, [r7, #20]
 800519e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	09db      	lsrs	r3, r3, #7
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80051b0:	d8f0      	bhi.n	8005194 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	617a      	str	r2, [r7, #20]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80051c2:	2218      	movs	r2, #24
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	68b8      	ldr	r0, [r7, #8]
 80051c8:	f7fe fea6 	bl	8003f18 <_SendPacket>
  RECORD_END();
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80051d2:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80051da:	4b04      	ldr	r3, [pc, #16]	@ (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	4798      	blx	r3
  }
}
 80051e0:	bf00      	nop
 80051e2:	3730      	adds	r7, #48	@ 0x30
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	2000cf74 	.word	0x2000cf74
 80051ec:	2000cf44 	.word	0x2000cf44

080051f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b092      	sub	sp, #72	@ 0x48
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80051f8:	f3ef 8311 	mrs	r3, BASEPRI
 80051fc:	f04f 0120 	mov.w	r1, #32
 8005200:	f381 8811 	msr	BASEPRI, r1
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	486a      	ldr	r0, [pc, #424]	@ (80053b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005208:	f7fe fd98 	bl	8003d3c <_PreparePacket>
 800520c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	647b      	str	r3, [r7, #68]	@ 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b66      	ldr	r3, [pc, #408]	@ (80053b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	643b      	str	r3, [r7, #64]	@ 0x40
 8005222:	e00b      	b.n	800523c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005226:	b2da      	uxtb	r2, r3
 8005228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	6479      	str	r1, [r7, #68]	@ 0x44
 800522e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005238:	09db      	lsrs	r3, r3, #7
 800523a:	643b      	str	r3, [r7, #64]	@ 0x40
 800523c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800523e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005240:	d8f0      	bhi.n	8005224 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	647a      	str	r2, [r7, #68]	@ 0x44
 8005248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800525c:	e00b      	b.n	8005276 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800525e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005260:	b2da      	uxtb	r2, r3
 8005262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005264:	1c59      	adds	r1, r3, #1
 8005266:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005268:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	09db      	lsrs	r3, r3, #7
 8005274:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	2b7f      	cmp	r3, #127	@ 0x7f
 800527a:	d8f0      	bhi.n	800525e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800527c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800528a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	4619      	mov	r1, r3
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7fe fd21 	bl	8003cdc <_EncodeStr>
 800529a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800529c:	2209      	movs	r2, #9
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	6938      	ldr	r0, [r7, #16]
 80052a2:	f7fe fe39 	bl	8003f18 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b40      	ldr	r3, [pc, #256]	@ (80053b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ba:	e00b      	b.n	80052d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	6379      	str	r1, [r7, #52]	@ 0x34
 80052c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80052d8:	d8f0      	bhi.n	80052bc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	637a      	str	r2, [r7, #52]	@ 0x34
 80052e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f4:	e00b      	b.n	800530e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80052f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005300:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	09db      	lsrs	r3, r3, #7
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	2b7f      	cmp	r3, #127	@ 0x7f
 8005312:	d8f0      	bhi.n	80052f6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800531a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005322:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	e00b      	b.n	8005348 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	6279      	str	r1, [r7, #36]	@ 0x24
 800533a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	09db      	lsrs	r3, r3, #7
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	2b7f      	cmp	r3, #127	@ 0x7f
 800534c:	d8f0      	bhi.n	8005330 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	627a      	str	r2, [r7, #36]	@ 0x24
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e00b      	b.n	8005382 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	1c59      	adds	r1, r3, #1
 8005372:	61f9      	str	r1, [r7, #28]
 8005374:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	09db      	lsrs	r3, r3, #7
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b7f      	cmp	r3, #127	@ 0x7f
 8005386:	d8f0      	bhi.n	800536a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	61fa      	str	r2, [r7, #28]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005398:	2215      	movs	r2, #21
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	6938      	ldr	r0, [r7, #16]
 800539e:	f7fe fdbb 	bl	8003f18 <_SendPacket>
  RECORD_END();
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f383 8811 	msr	BASEPRI, r3
}
 80053a8:	bf00      	nop
 80053aa:	3748      	adds	r7, #72	@ 0x48
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	2000cf74 	.word	0x2000cf74
 80053b4:	2000cf44 	.word	0x2000cf44

080053b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80053bc:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80053c4:	4b05      	ldr	r3, [pc, #20]	@ (80053dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80053ce:	4b03      	ldr	r3, [pc, #12]	@ (80053dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4798      	blx	r3
  }
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	2000cf44 	.word	0x2000cf44

080053e0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053e8:	f3ef 8311 	mrs	r3, BASEPRI
 80053ec:	f04f 0120 	mov.w	r1, #32
 80053f0:	f381 8811 	msr	BASEPRI, r1
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	480b      	ldr	r0, [pc, #44]	@ (8005424 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80053f8:	f7fe fca0 	bl	8003d3c <_PreparePacket>
 80053fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053fe:	2280      	movs	r2, #128	@ 0x80
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	6938      	ldr	r0, [r7, #16]
 8005404:	f7fe fc6a 	bl	8003cdc <_EncodeStr>
 8005408:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800540a:	220e      	movs	r2, #14
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	6938      	ldr	r0, [r7, #16]
 8005410:	f7fe fd82 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f383 8811 	msr	BASEPRI, r3
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	2000cf74 	.word	0x2000cf74

08005428 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800542e:	4b15      	ldr	r3, [pc, #84]	@ (8005484 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01a      	beq.n	800546c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005436:	4b13      	ldr	r3, [pc, #76]	@ (8005484 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d015      	beq.n	800546c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005440:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4798      	blx	r3
 8005448:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800544c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800544e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	000a      	movs	r2, r1
 800545c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800545e:	4613      	mov	r3, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4621      	mov	r1, r4
 8005464:	200d      	movs	r0, #13
 8005466:	f7ff fb37 	bl	8004ad8 <SEGGER_SYSVIEW_RecordU32x2>
 800546a:	e006      	b.n	800547a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800546c:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4619      	mov	r1, r3
 8005472:	200c      	movs	r0, #12
 8005474:	f7ff faf4 	bl	8004a60 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}
 8005482:	bf00      	nop
 8005484:	2000cf44 	.word	0x2000cf44
 8005488:	e0001004 	.word	0xe0001004

0800548c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005492:	f3ef 8311 	mrs	r3, BASEPRI
 8005496:	f04f 0120 	mov.w	r1, #32
 800549a:	f381 8811 	msr	BASEPRI, r1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	4819      	ldr	r0, [pc, #100]	@ (8005508 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80054a2:	f7fe fc4b 	bl	8003d3c <_PreparePacket>
 80054a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80054ac:	4b17      	ldr	r3, [pc, #92]	@ (800550c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e00b      	b.n	80054d8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	1c59      	adds	r1, r3, #1
 80054c8:	6179      	str	r1, [r7, #20]
 80054ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	09db      	lsrs	r3, r3, #7
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b7f      	cmp	r3, #127	@ 0x7f
 80054dc:	d8f0      	bhi.n	80054c0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	617a      	str	r2, [r7, #20]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80054ee:	2202      	movs	r2, #2
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	68b8      	ldr	r0, [r7, #8]
 80054f4:	f7fe fd10 	bl	8003f18 <_SendPacket>
  RECORD_END();
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f383 8811 	msr	BASEPRI, r3
}
 80054fe:	bf00      	nop
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	2000cf74 	.word	0x2000cf74
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005516:	f3ef 8311 	mrs	r3, BASEPRI
 800551a:	f04f 0120 	mov.w	r1, #32
 800551e:	f381 8811 	msr	BASEPRI, r1
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	4807      	ldr	r0, [pc, #28]	@ (8005544 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005526:	f7fe fc09 	bl	8003d3c <_PreparePacket>
 800552a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800552c:	2203      	movs	r2, #3
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6838      	ldr	r0, [r7, #0]
 8005532:	f7fe fcf1 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f383 8811 	msr	BASEPRI, r3
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	2000cf74 	.word	0x2000cf74

08005548 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800554e:	f3ef 8311 	mrs	r3, BASEPRI
 8005552:	f04f 0120 	mov.w	r1, #32
 8005556:	f381 8811 	msr	BASEPRI, r1
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	4807      	ldr	r0, [pc, #28]	@ (800557c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800555e:	f7fe fbed 	bl	8003d3c <_PreparePacket>
 8005562:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005564:	2212      	movs	r2, #18
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6838      	ldr	r0, [r7, #0]
 800556a:	f7fe fcd5 	bl	8003f18 <_SendPacket>
  RECORD_END();
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f383 8811 	msr	BASEPRI, r3
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	2000cf74 	.word	0x2000cf74

08005580 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005586:	f3ef 8311 	mrs	r3, BASEPRI
 800558a:	f04f 0120 	mov.w	r1, #32
 800558e:	f381 8811 	msr	BASEPRI, r1
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	4807      	ldr	r0, [pc, #28]	@ (80055b4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005596:	f7fe fbd1 	bl	8003d3c <_PreparePacket>
 800559a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800559c:	2211      	movs	r2, #17
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6838      	ldr	r0, [r7, #0]
 80055a2:	f7fe fcb9 	bl	8003f18 <_SendPacket>
  RECORD_END();
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f383 8811 	msr	BASEPRI, r3
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	2000cf74 	.word	0x2000cf74

080055b8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055c0:	f3ef 8311 	mrs	r3, BASEPRI
 80055c4:	f04f 0120 	mov.w	r1, #32
 80055c8:	f381 8811 	msr	BASEPRI, r1
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	4819      	ldr	r0, [pc, #100]	@ (8005634 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80055d0:	f7fe fbb4 	bl	8003d3c <_PreparePacket>
 80055d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055da:	4b17      	ldr	r3, [pc, #92]	@ (8005638 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e00b      	b.n	8005606 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	61f9      	str	r1, [r7, #28]
 80055f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	09db      	lsrs	r3, r3, #7
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b7f      	cmp	r3, #127	@ 0x7f
 800560a:	d8f0      	bhi.n	80055ee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	61fa      	str	r2, [r7, #28]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800561c:	2208      	movs	r2, #8
 800561e:	68f9      	ldr	r1, [r7, #12]
 8005620:	6938      	ldr	r0, [r7, #16]
 8005622:	f7fe fc79 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f383 8811 	msr	BASEPRI, r3
}
 800562c:	bf00      	nop
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	2000cf74 	.word	0x2000cf74
 8005638:	2000cf44 	.word	0x2000cf44

0800563c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005644:	f3ef 8311 	mrs	r3, BASEPRI
 8005648:	f04f 0120 	mov.w	r1, #32
 800564c:	f381 8811 	msr	BASEPRI, r1
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	4819      	ldr	r0, [pc, #100]	@ (80056b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005654:	f7fe fb72 	bl	8003d3c <_PreparePacket>
 8005658:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800565e:	4b17      	ldr	r3, [pc, #92]	@ (80056bc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e00b      	b.n	800568a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	1c59      	adds	r1, r3, #1
 800567a:	61f9      	str	r1, [r7, #28]
 800567c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	09db      	lsrs	r3, r3, #7
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b7f      	cmp	r3, #127	@ 0x7f
 800568e:	d8f0      	bhi.n	8005672 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	61fa      	str	r2, [r7, #28]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80056a0:	2204      	movs	r2, #4
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	6938      	ldr	r0, [r7, #16]
 80056a6:	f7fe fc37 	bl	8003f18 <_SendPacket>
  RECORD_END();
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f383 8811 	msr	BASEPRI, r3
}
 80056b0:	bf00      	nop
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	2000cf74 	.word	0x2000cf74
 80056bc:	2000cf44 	.word	0x2000cf44

080056c0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056c8:	f3ef 8311 	mrs	r3, BASEPRI
 80056cc:	f04f 0120 	mov.w	r1, #32
 80056d0:	f381 8811 	msr	BASEPRI, r1
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	4819      	ldr	r0, [pc, #100]	@ (800573c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80056d8:	f7fe fb30 	bl	8003d3c <_PreparePacket>
 80056dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056e2:	4b17      	ldr	r3, [pc, #92]	@ (8005740 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e00b      	b.n	800570e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	61f9      	str	r1, [r7, #28]
 8005700:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b7f      	cmp	r3, #127	@ 0x7f
 8005712:	d8f0      	bhi.n	80056f6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	61fa      	str	r2, [r7, #28]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005724:	2206      	movs	r2, #6
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	6938      	ldr	r0, [r7, #16]
 800572a:	f7fe fbf5 	bl	8003f18 <_SendPacket>
  RECORD_END();
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f383 8811 	msr	BASEPRI, r3
}
 8005734:	bf00      	nop
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2000cf74 	.word	0x2000cf74
 8005740:	2000cf44 	.word	0x2000cf44

08005744 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	@ 0x28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800574e:	f3ef 8311 	mrs	r3, BASEPRI
 8005752:	f04f 0120 	mov.w	r1, #32
 8005756:	f381 8811 	msr	BASEPRI, r1
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	4827      	ldr	r0, [pc, #156]	@ (80057fc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800575e:	f7fe faed 	bl	8003d3c <_PreparePacket>
 8005762:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005768:	4b25      	ldr	r3, [pc, #148]	@ (8005800 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	e00b      	b.n	8005794 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	6279      	str	r1, [r7, #36]	@ 0x24
 8005786:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	09db      	lsrs	r3, r3, #7
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	2b7f      	cmp	r3, #127	@ 0x7f
 8005798:	d8f0      	bhi.n	800577c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	627a      	str	r2, [r7, #36]	@ 0x24
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	e00b      	b.n	80057cc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	61f9      	str	r1, [r7, #28]
 80057be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	09db      	lsrs	r3, r3, #7
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80057d0:	d8f0      	bhi.n	80057b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	61fa      	str	r2, [r7, #28]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80057e2:	2207      	movs	r2, #7
 80057e4:	68f9      	ldr	r1, [r7, #12]
 80057e6:	6938      	ldr	r0, [r7, #16]
 80057e8:	f7fe fb96 	bl	8003f18 <_SendPacket>
  RECORD_END();
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f383 8811 	msr	BASEPRI, r3
}
 80057f2:	bf00      	nop
 80057f4:	3728      	adds	r7, #40	@ 0x28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	2000cf74 	.word	0x2000cf74
 8005800:	2000cf44 	.word	0x2000cf44

08005804 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800580c:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	1ad3      	subs	r3, r2, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	2000cf44 	.word	0x2000cf44

08005824 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	@ 0x30
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800582e:	4b40      	ldr	r3, [pc, #256]	@ (8005930 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d077      	beq.n	8005926 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005836:	4b3e      	ldr	r3, [pc, #248]	@ (8005930 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800583c:	2300      	movs	r3, #0
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005840:	e008      	b.n	8005854 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800584e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005850:	3301      	adds	r3, #1
 8005852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005858:	429a      	cmp	r2, r3
 800585a:	d3f2      	bcc.n	8005842 <SEGGER_SYSVIEW_SendModule+0x1e>
 800585c:	e000      	b.n	8005860 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800585e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d055      	beq.n	8005912 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005866:	f3ef 8311 	mrs	r3, BASEPRI
 800586a:	f04f 0120 	mov.w	r1, #32
 800586e:	f381 8811 	msr	BASEPRI, r1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	482f      	ldr	r0, [pc, #188]	@ (8005934 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005876:	f7fe fa61 	bl	8003d3c <_PreparePacket>
 800587a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	e00b      	b.n	80058a2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	6279      	str	r1, [r7, #36]	@ 0x24
 8005894:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a6:	d8f0      	bhi.n	800588a <SEGGER_SYSVIEW_SendModule+0x66>
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80058ae:	6a3a      	ldr	r2, [r7, #32]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	e00b      	b.n	80058dc <SEGGER_SYSVIEW_SendModule+0xb8>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	61f9      	str	r1, [r7, #28]
 80058ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	09db      	lsrs	r3, r3, #7
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e0:	d8f0      	bhi.n	80058c4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	61fa      	str	r2, [r7, #28]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2280      	movs	r2, #128	@ 0x80
 80058f8:	4619      	mov	r1, r3
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7fe f9ee 	bl	8003cdc <_EncodeStr>
 8005900:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005902:	2216      	movs	r2, #22
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	6938      	ldr	r0, [r7, #16]
 8005908:	f7fe fb06 	bl	8003f18 <_SendPacket>
      RECORD_END();
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <SEGGER_SYSVIEW_SendModule+0x102>
 8005918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4798      	blx	r3
    }
  }
}
 8005926:	bf00      	nop
 8005928:	3730      	adds	r7, #48	@ 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	2000cf6c 	.word	0x2000cf6c
 8005934:	2000cf74 	.word	0x2000cf74

08005938 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800593e:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00f      	beq.n	8005966 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f2      	bne.n	800594c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	2000cf6c 	.word	0x2000cf6c

08005974 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800597a:	f3ef 8311 	mrs	r3, BASEPRI
 800597e:	f04f 0120 	mov.w	r1, #32
 8005982:	f381 8811 	msr	BASEPRI, r1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	4817      	ldr	r0, [pc, #92]	@ (80059e8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800598a:	f7fe f9d7 	bl	8003d3c <_PreparePacket>
 800598e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	e00b      	b.n	80059b8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	6179      	str	r1, [r7, #20]
 80059aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	09db      	lsrs	r3, r3, #7
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80059bc:	d8f0      	bhi.n	80059a0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	617a      	str	r2, [r7, #20]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059ce:	221b      	movs	r2, #27
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	68b8      	ldr	r0, [r7, #8]
 80059d4:	f7fe faa0 	bl	8003f18 <_SendPacket>
  RECORD_END();
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f383 8811 	msr	BASEPRI, r3
}
 80059de:	bf00      	nop
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	2000cf74 	.word	0x2000cf74
 80059ec:	2000cf70 	.word	0x2000cf70

080059f0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80059f0:	b40f      	push	{r0, r1, r2, r3}
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80059fe:	1d3b      	adds	r3, r7, #4
 8005a00:	461a      	mov	r2, r3
 8005a02:	2100      	movs	r1, #0
 8005a04:	6938      	ldr	r0, [r7, #16]
 8005a06:	f7fe fd99 	bl	800453c <_VPrintTarget>
  va_end(ParamList);
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a14:	b004      	add	sp, #16
 8005a16:	4770      	bx	lr

08005a18 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	@ 0x28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a20:	f3ef 8311 	mrs	r3, BASEPRI
 8005a24:	f04f 0120 	mov.w	r1, #32
 8005a28:	f381 8811 	msr	BASEPRI, r1
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	4827      	ldr	r0, [pc, #156]	@ (8005acc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a30:	f7fe f984 	bl	8003d3c <_PreparePacket>
 8005a34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a36:	2280      	movs	r2, #128	@ 0x80
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	6938      	ldr	r0, [r7, #16]
 8005a3c:	f7fe f94e 	bl	8003cdc <_EncodeStr>
 8005a40:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a46:	2301      	movs	r3, #1
 8005a48:	623b      	str	r3, [r7, #32]
 8005a4a:	e00b      	b.n	8005a64 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	09db      	lsrs	r3, r3, #7
 8005a62:	623b      	str	r3, [r7, #32]
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a68:	d8f0      	bhi.n	8005a4c <SEGGER_SYSVIEW_Warn+0x34>
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a70:	6a3a      	ldr	r2, [r7, #32]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e00b      	b.n	8005a9c <SEGGER_SYSVIEW_Warn+0x84>
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	61f9      	str	r1, [r7, #28]
 8005a8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aa0:	d8f0      	bhi.n	8005a84 <SEGGER_SYSVIEW_Warn+0x6c>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	61fa      	str	r2, [r7, #28]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ab2:	221a      	movs	r2, #26
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	6938      	ldr	r0, [r7, #16]
 8005ab8:	f7fe fa2e 	bl	8003f18 <_SendPacket>
  RECORD_END();
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f383 8811 	msr	BASEPRI, r3
}
 8005ac2:	bf00      	nop
 8005ac4:	3728      	adds	r7, #40	@ 0x28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2000cf74 	.word	0x2000cf74

08005ad0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ad4:	4b13      	ldr	r3, [pc, #76]	@ (8005b24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005ad6:	7e1b      	ldrb	r3, [r3, #24]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4a13      	ldr	r2, [pc, #76]	@ (8005b28 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005adc:	460b      	mov	r3, r1
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	440b      	add	r3, r1
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	336c      	adds	r3, #108	@ 0x6c
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b0e      	ldr	r3, [pc, #56]	@ (8005b24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005aec:	7e1b      	ldrb	r3, [r3, #24]
 8005aee:	4618      	mov	r0, r3
 8005af0:	490d      	ldr	r1, [pc, #52]	@ (8005b28 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005af2:	4603      	mov	r3, r0
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	4403      	add	r3, r0
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	440b      	add	r3, r1
 8005afc:	3370      	adds	r3, #112	@ 0x70
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d00b      	beq.n	8005b1c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b04:	4b07      	ldr	r3, [pc, #28]	@ (8005b24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b06:	789b      	ldrb	r3, [r3, #2]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d107      	bne.n	8005b1c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b0c:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b12:	f7fe f91f 	bl	8003d54 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b16:	4b03      	ldr	r3, [pc, #12]	@ (8005b24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b1c:	4b01      	ldr	r3, [pc, #4]	@ (8005b24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	2000cf44 	.word	0x2000cf44
 8005b28:	2000ba84 	.word	0x2000ba84

08005b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	db0b      	blt.n	8005b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	f003 021f 	and.w	r2, r3, #31
 8005b44:	4907      	ldr	r1, [pc, #28]	@ (8005b64 <__NVIC_EnableIRQ+0x38>)
 8005b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	e000e100 	.word	0xe000e100

08005b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	db0a      	blt.n	8005b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	490c      	ldr	r1, [pc, #48]	@ (8005bb4 <__NVIC_SetPriority+0x4c>)
 8005b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b86:	0112      	lsls	r2, r2, #4
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b90:	e00a      	b.n	8005ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	4908      	ldr	r1, [pc, #32]	@ (8005bb8 <__NVIC_SetPriority+0x50>)
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	3b04      	subs	r3, #4
 8005ba0:	0112      	lsls	r2, r2, #4
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	761a      	strb	r2, [r3, #24]
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	e000e100 	.word	0xe000e100
 8005bb8:	e000ed00 	.word	0xe000ed00

08005bbc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005bc2:	f7ff ff85 	bl	8005ad0 <SEGGER_SYSVIEW_IsStarted>
 8005bc6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005bce:	f7ff f993 	bl	8004ef8 <SEGGER_SYSVIEW_Start>
  }
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005be6:	4b0c      	ldr	r3, [pc, #48]	@ (8005c18 <_cbOnUARTRx+0x3c>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d806      	bhi.n	8005bfc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005bee:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <_cbOnUARTRx+0x3c>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	4b08      	ldr	r3, [pc, #32]	@ (8005c18 <_cbOnUARTRx+0x3c>)
 8005bf8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005bfa:	e009      	b.n	8005c10 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005bfc:	f7ff ffde 	bl	8005bbc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005c00:	4b05      	ldr	r3, [pc, #20]	@ (8005c18 <_cbOnUARTRx+0x3c>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4618      	mov	r0, r3
 8005c06:	1dfb      	adds	r3, r7, #7
 8005c08:	2201      	movs	r2, #1
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f7fd ff70 	bl	8003af0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005c10:	bf00      	nop
}
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000008 	.word	0x20000008

08005c1c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005c24:	4b14      	ldr	r3, [pc, #80]	@ (8005c78 <_cbOnUARTTx+0x5c>)
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d80f      	bhi.n	8005c4c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005c2c:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <_cbOnUARTTx+0x5c>)
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	461a      	mov	r2, r3
 8005c32:	4b12      	ldr	r3, [pc, #72]	@ (8005c7c <_cbOnUARTTx+0x60>)
 8005c34:	5c9a      	ldrb	r2, [r3, r2]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c78 <_cbOnUARTTx+0x5c>)
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <_cbOnUARTTx+0x5c>)
 8005c44:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005c46:	2301      	movs	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005c4a:	e00f      	b.n	8005c6c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <_cbOnUARTTx+0x5c>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fd fdef 	bl	8003838 <SEGGER_RTT_ReadUpBufferNoLock>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da02      	bge.n	8005c6a <_cbOnUARTTx+0x4e>
    r = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e000      	b.n	8005c6c <_cbOnUARTTx+0x50>
  }
Done:
 8005c6a:	bf00      	nop
  return r;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000008 	.word	0x20000008
 8005c7c:	080080e0 	.word	0x080080e0

08005c80 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005c88:	4a04      	ldr	r2, [pc, #16]	@ (8005c9c <SEGGER_UART_init+0x1c>)
 8005c8a:	4905      	ldr	r1, [pc, #20]	@ (8005ca0 <SEGGER_UART_init+0x20>)
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f865 	bl	8005d5c <HIF_UART_Init>
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08005bdd 	.word	0x08005bdd
 8005ca0:	08005c1d 	.word	0x08005c1d

08005ca4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005caa:	4b1e      	ldr	r3, [pc, #120]	@ (8005d24 <USART2_IRQHandler+0x80>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d011      	beq.n	8005cde <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8005cba:	4b1b      	ldr	r3, [pc, #108]	@ (8005d28 <USART2_IRQHandler+0x84>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 030b 	and.w	r3, r3, #11
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d108      	bne.n	8005cde <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005ccc:	4b17      	ldr	r3, [pc, #92]	@ (8005d2c <USART2_IRQHandler+0x88>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005cd4:	4b15      	ldr	r3, [pc, #84]	@ (8005d2c <USART2_IRQHandler+0x88>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	79fa      	ldrb	r2, [r7, #7]
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01a      	beq.n	8005d1e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005ce8:	4b11      	ldr	r3, [pc, #68]	@ (8005d30 <USART2_IRQHandler+0x8c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d015      	beq.n	8005d1c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8005d30 <USART2_IRQHandler+0x8c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	1dfa      	adds	r2, r7, #7
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4798      	blx	r3
 8005cfa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005d02:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <USART2_IRQHandler+0x90>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a0b      	ldr	r2, [pc, #44]	@ (8005d34 <USART2_IRQHandler+0x90>)
 8005d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e006      	b.n	8005d1e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005d10:	4b04      	ldr	r3, [pc, #16]	@ (8005d24 <USART2_IRQHandler+0x80>)
 8005d12:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8005d14:	79fa      	ldrb	r2, [r7, #7]
 8005d16:	4b08      	ldr	r3, [pc, #32]	@ (8005d38 <USART2_IRQHandler+0x94>)
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e000      	b.n	8005d1e <USART2_IRQHandler+0x7a>
      return;
 8005d1c:	bf00      	nop
    }
  }
}
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	4000441c 	.word	0x4000441c
 8005d28:	40004424 	.word	0x40004424
 8005d2c:	2000d058 	.word	0x2000d058
 8005d30:	2000d05c 	.word	0x2000d05c
 8005d34:	40004400 	.word	0x40004400
 8005d38:	40004428 	.word	0x40004428

08005d3c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005d40:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a04      	ldr	r2, [pc, #16]	@ (8005d58 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d4a:	6013      	str	r3, [r2, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40004400 	.word	0x40004400

08005d5c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //


  RCC_APB1ENR |= RCC_APB1ENR_USART2EN;        // Enable USART2 clock
 8005d68:	4b2e      	ldr	r3, [pc, #184]	@ (8005e24 <HIF_UART_Init+0xc8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e24 <HIF_UART_Init+0xc8>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d72:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= RCC_AHB1ENR_GPIODEN;        // Enable IO port D clock
 8005d74:	4b2c      	ldr	r3, [pc, #176]	@ (8005e28 <HIF_UART_Init+0xcc>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2b      	ldr	r2, [pc, #172]	@ (8005e28 <HIF_UART_Init+0xcc>)
 8005d7a:	f043 0308 	orr.w	r3, r3, #8
 8005d7e:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRL;
 8005d80:	4b2a      	ldr	r3, [pc, #168]	@ (8005e2c <HIF_UART_Init+0xd0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8005d8c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f043 63ee 	orr.w	r3, r3, #124780544	@ 0x7700000
 8005d94:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005d96:	4a25      	ldr	r2, [pc, #148]	@ (8005e2c <HIF_UART_Init+0xd0>)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005d9c:	4b24      	ldr	r3, [pc, #144]	@ (8005e30 <HIF_UART_Init+0xd4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8005da8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005db0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005db2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e30 <HIF_UART_Init+0xd4>)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005db8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e34 <HIF_UART_Init+0xd8>)
 8005dba:	f248 022d 	movw	r2, #32813	@ 0x802d
 8005dbe:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e38 <HIF_UART_Init+0xdc>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
            | (0 << 12)
			| (0 << 13)							// STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e3c <HIF_UART_Init+0xe0>)
 8005dc8:	2280      	movs	r2, #128	@ 0x80
 8005dca:	601a      	str	r2, [r3, #0]
  //
  // Set baudrate


  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e40 <HIF_UART_Init+0xe4>)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dda:	3301      	adds	r3, #1
 8005ddc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dea:	d302      	bcc.n	8005df2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005dec:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005df0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	4a11      	ldr	r2, [pc, #68]	@ (8005e44 <HIF_UART_Init+0xe8>)
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005e02:	4a11      	ldr	r2, [pc, #68]	@ (8005e48 <HIF_UART_Init+0xec>)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005e08:	4a10      	ldr	r2, [pc, #64]	@ (8005e4c <HIF_UART_Init+0xf0>)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005e0e:	2106      	movs	r1, #6
 8005e10:	2026      	movs	r0, #38	@ 0x26
 8005e12:	f7ff fea9 	bl	8005b68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005e16:	2026      	movs	r0, #38	@ 0x26
 8005e18:	f7ff fe88 	bl	8005b2c <__NVIC_EnableIRQ>
}
 8005e1c:	bf00      	nop
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40023840 	.word	0x40023840
 8005e28:	40023830 	.word	0x40023830
 8005e2c:	40020c20 	.word	0x40020c20
 8005e30:	40020c00 	.word	0x40020c00
 8005e34:	40004400 	.word	0x40004400
 8005e38:	40004404 	.word	0x40004404
 8005e3c:	40004408 	.word	0x40004408
 8005e40:	0501bd00 	.word	0x0501bd00
 8005e44:	4000440c 	.word	0x4000440c
 8005e48:	2000d058 	.word	0x2000d058
 8005e4c:	2000d05c 	.word	0x2000d05c

08005e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e56:	f000 fbfc 	bl	8006652 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e5a:	f000 f877 	bl	8005f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e5e:	f000 f8df 	bl	8006020 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005e62:	4b2b      	ldr	r3, [pc, #172]	@ (8005f10 <main+0xc0>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4a2a      	ldr	r2, [pc, #168]	@ (8005f10 <main+0xc0>)
 8005e68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e6c:	60d3      	str	r3, [r2, #12]

      DWT->LAR = 0xC5ACCE55;
 8005e6e:	4b29      	ldr	r3, [pc, #164]	@ (8005f14 <main+0xc4>)
 8005e70:	4a29      	ldr	r2, [pc, #164]	@ (8005f18 <main+0xc8>)
 8005e72:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0

      DWT->CYCCNT = 0;
 8005e76:	4b27      	ldr	r3, [pc, #156]	@ (8005f14 <main+0xc4>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	605a      	str	r2, [r3, #4]

      DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005e7c:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <main+0xc4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a24      	ldr	r2, [pc, #144]	@ (8005f14 <main+0xc4>)
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	6013      	str	r3, [r2, #0]
   SEGGER_UART_init(250000);
 8005e88:	4824      	ldr	r0, [pc, #144]	@ (8005f1c <main+0xcc>)
 8005e8a:	f7ff fef9 	bl	8005c80 <SEGGER_UART_init>
   SEGGER_SYSVIEW_Conf();
 8005e8e:	f7fd f9c9 	bl	8003224 <SEGGER_SYSVIEW_Conf>

   status=  xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 3,&task1_handle);
 8005e92:	4b23      	ldr	r3, [pc, #140]	@ (8005f20 <main+0xd0>)
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	2303      	movs	r3, #3
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	22c8      	movs	r2, #200	@ 0xc8
 8005e9e:	4921      	ldr	r1, [pc, #132]	@ (8005f24 <main+0xd4>)
 8005ea0:	4821      	ldr	r0, [pc, #132]	@ (8005f28 <main+0xd8>)
 8005ea2:	f7fb f94f 	bl	8001144 <xTaskCreate>
 8005ea6:	6078      	str	r0, [r7, #4]
   configASSERT(status == pdPASS);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d003      	beq.n	8005eb6 <main+0x66>
 8005eae:	491f      	ldr	r1, [pc, #124]	@ (8005f2c <main+0xdc>)
 8005eb0:	2070      	movs	r0, #112	@ 0x70
 8005eb2:	f000 faa1 	bl	80063f8 <vAssertCalled>
   next_task_handle = task1_handle;
 8005eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f20 <main+0xd0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <main+0xe0>)
 8005ebc:	6013      	str	r3, [r2, #0]
   status=  xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 2,&task2_handle);
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <main+0xe4>)
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	22c8      	movs	r2, #200	@ 0xc8
 8005eca:	491b      	ldr	r1, [pc, #108]	@ (8005f38 <main+0xe8>)
 8005ecc:	481b      	ldr	r0, [pc, #108]	@ (8005f3c <main+0xec>)
 8005ece:	f7fb f939 	bl	8001144 <xTaskCreate>
 8005ed2:	6078      	str	r0, [r7, #4]
   configASSERT(status == pdPASS);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d003      	beq.n	8005ee2 <main+0x92>
 8005eda:	4914      	ldr	r1, [pc, #80]	@ (8005f2c <main+0xdc>)
 8005edc:	2073      	movs	r0, #115	@ 0x73
 8005ede:	f000 fa8b 	bl	80063f8 <vAssertCalled>
   status=  xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 1,&task3_handle);
 8005ee2:	4b17      	ldr	r3, [pc, #92]	@ (8005f40 <main+0xf0>)
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	2300      	movs	r3, #0
 8005eec:	22c8      	movs	r2, #200	@ 0xc8
 8005eee:	4915      	ldr	r1, [pc, #84]	@ (8005f44 <main+0xf4>)
 8005ef0:	4815      	ldr	r0, [pc, #84]	@ (8005f48 <main+0xf8>)
 8005ef2:	f7fb f927 	bl	8001144 <xTaskCreate>
 8005ef6:	6078      	str	r0, [r7, #4]
   configASSERT(status == pdPASS);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d003      	beq.n	8005f06 <main+0xb6>
 8005efe:	490b      	ldr	r1, [pc, #44]	@ (8005f2c <main+0xdc>)
 8005f00:	2075      	movs	r0, #117	@ 0x75
 8005f02:	f000 fa79 	bl	80063f8 <vAssertCalled>

   vTaskStartScheduler();
 8005f06:	f7fb fb23 	bl	8001550 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <main+0xba>
 8005f0e:	bf00      	nop
 8005f10:	e000edf0 	.word	0xe000edf0
 8005f14:	e0001000 	.word	0xe0001000
 8005f18:	c5acce55 	.word	0xc5acce55
 8005f1c:	0003d090 	.word	0x0003d090
 8005f20:	2000d064 	.word	0x2000d064
 8005f24:	08007fe0 	.word	0x08007fe0
 8005f28:	080062b5 	.word	0x080062b5
 8005f2c:	08007ff0 	.word	0x08007ff0
 8005f30:	2000d060 	.word	0x2000d060
 8005f34:	2000d068 	.word	0x2000d068
 8005f38:	08008004 	.word	0x08008004
 8005f3c:	0800638d 	.word	0x0800638d
 8005f40:	2000d06c 	.word	0x2000d06c
 8005f44:	08008014 	.word	0x08008014
 8005f48:	08006321 	.word	0x08006321

08005f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b094      	sub	sp, #80	@ 0x50
 8005f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f52:	f107 031c 	add.w	r3, r7, #28
 8005f56:	2234      	movs	r2, #52	@ 0x34
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 fe60 	bl	8007c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f60:	f107 0308 	add.w	r3, r7, #8
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f70:	4b29      	ldr	r3, [pc, #164]	@ (8006018 <SystemClock_Config+0xcc>)
 8005f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f74:	4a28      	ldr	r2, [pc, #160]	@ (8006018 <SystemClock_Config+0xcc>)
 8005f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f7c:	4b26      	ldr	r3, [pc, #152]	@ (8006018 <SystemClock_Config+0xcc>)
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f88:	4b24      	ldr	r3, [pc, #144]	@ (800601c <SystemClock_Config+0xd0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005f90:	4a22      	ldr	r2, [pc, #136]	@ (800601c <SystemClock_Config+0xd0>)
 8005f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	4b20      	ldr	r3, [pc, #128]	@ (800601c <SystemClock_Config+0xd0>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005fac:	2310      	movs	r3, #16
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005fb8:	2308      	movs	r3, #8
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005fbc:	23a8      	movs	r3, #168	@ 0xa8
 8005fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fcc:	f107 031c 	add.w	r3, r7, #28
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fe51 	bl	8006c78 <HAL_RCC_OscConfig>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005fdc:	f000 fa32 	bl	8006444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005fe0:	230f      	movs	r3, #15
 8005fe2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005fec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005ff0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ff6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ff8:	f107 0308 	add.w	r3, r7, #8
 8005ffc:	2105      	movs	r1, #5
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 f8e8 	bl	80071d4 <HAL_RCC_ClockConfig>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800600a:	f000 fa1b 	bl	8006444 <Error_Handler>
  }
}
 800600e:	bf00      	nop
 8006010:	3750      	adds	r7, #80	@ 0x50
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40023800 	.word	0x40023800
 800601c:	40007000 	.word	0x40007000

08006020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	@ 0x30
 8006024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006026:	f107 031c 	add.w	r3, r7, #28
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	609a      	str	r2, [r3, #8]
 8006032:	60da      	str	r2, [r3, #12]
 8006034:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006036:	4b83      	ldr	r3, [pc, #524]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603a:	4a82      	ldr	r2, [pc, #520]	@ (8006244 <MX_GPIO_Init+0x224>)
 800603c:	f043 0304 	orr.w	r3, r3, #4
 8006040:	6313      	str	r3, [r2, #48]	@ 0x30
 8006042:	4b80      	ldr	r3, [pc, #512]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800604e:	4b7d      	ldr	r3, [pc, #500]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	4a7c      	ldr	r2, [pc, #496]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006058:	6313      	str	r3, [r2, #48]	@ 0x30
 800605a:	4b7a      	ldr	r3, [pc, #488]	@ (8006244 <MX_GPIO_Init+0x224>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006066:	4b77      	ldr	r3, [pc, #476]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	4a76      	ldr	r2, [pc, #472]	@ (8006244 <MX_GPIO_Init+0x224>)
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	6313      	str	r3, [r2, #48]	@ 0x30
 8006072:	4b74      	ldr	r3, [pc, #464]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800607e:	4b71      	ldr	r3, [pc, #452]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	4a70      	ldr	r2, [pc, #448]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006084:	f043 0302 	orr.w	r3, r3, #2
 8006088:	6313      	str	r3, [r2, #48]	@ 0x30
 800608a:	4b6e      	ldr	r3, [pc, #440]	@ (8006244 <MX_GPIO_Init+0x224>)
 800608c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006096:	4b6b      	ldr	r3, [pc, #428]	@ (8006244 <MX_GPIO_Init+0x224>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	4a6a      	ldr	r2, [pc, #424]	@ (8006244 <MX_GPIO_Init+0x224>)
 800609c:	f043 0308 	orr.w	r3, r3, #8
 80060a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80060a2:	4b68      	ldr	r3, [pc, #416]	@ (8006244 <MX_GPIO_Init+0x224>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80060ae:	4b65      	ldr	r3, [pc, #404]	@ (8006244 <MX_GPIO_Init+0x224>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	4a64      	ldr	r2, [pc, #400]	@ (8006244 <MX_GPIO_Init+0x224>)
 80060b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ba:	4b62      	ldr	r3, [pc, #392]	@ (8006244 <MX_GPIO_Init+0x224>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80060c6:	2200      	movs	r2, #0
 80060c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80060cc:	485e      	ldr	r0, [pc, #376]	@ (8006248 <MX_GPIO_Init+0x228>)
 80060ce:	f000 fd7b 	bl	8006bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80060d2:	2200      	movs	r2, #0
 80060d4:	2140      	movs	r1, #64	@ 0x40
 80060d6:	485d      	ldr	r0, [pc, #372]	@ (800624c <MX_GPIO_Init+0x22c>)
 80060d8:	f000 fd76 	bl	8006bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80060dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80060e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80060e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80060ec:	f107 031c 	add.w	r3, r7, #28
 80060f0:	4619      	mov	r1, r3
 80060f2:	4857      	ldr	r0, [pc, #348]	@ (8006250 <MX_GPIO_Init+0x230>)
 80060f4:	f000 fbbc 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060f8:	2332      	movs	r3, #50	@ 0x32
 80060fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fc:	2302      	movs	r3, #2
 80060fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006100:	2300      	movs	r3, #0
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006104:	2303      	movs	r3, #3
 8006106:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006108:	230b      	movs	r3, #11
 800610a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800610c:	f107 031c 	add.w	r3, r7, #28
 8006110:	4619      	mov	r1, r3
 8006112:	484f      	ldr	r0, [pc, #316]	@ (8006250 <MX_GPIO_Init+0x230>)
 8006114:	f000 fbac 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006118:	2386      	movs	r3, #134	@ 0x86
 800611a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611c:	2302      	movs	r3, #2
 800611e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006120:	2300      	movs	r3, #0
 8006122:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006124:	2303      	movs	r3, #3
 8006126:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006128:	230b      	movs	r3, #11
 800612a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800612c:	f107 031c 	add.w	r3, r7, #28
 8006130:	4619      	mov	r1, r3
 8006132:	4848      	ldr	r0, [pc, #288]	@ (8006254 <MX_GPIO_Init+0x234>)
 8006134:	f000 fb9c 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8006138:	f244 0381 	movw	r3, #16513	@ 0x4081
 800613c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800613e:	2301      	movs	r3, #1
 8006140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006146:	2300      	movs	r3, #0
 8006148:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800614a:	f107 031c 	add.w	r3, r7, #28
 800614e:	4619      	mov	r1, r3
 8006150:	483d      	ldr	r0, [pc, #244]	@ (8006248 <MX_GPIO_Init+0x228>)
 8006152:	f000 fb8d 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006156:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800615a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615c:	2302      	movs	r3, #2
 800615e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006160:	2300      	movs	r3, #0
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006164:	2303      	movs	r3, #3
 8006166:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006168:	230b      	movs	r3, #11
 800616a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800616c:	f107 031c 	add.w	r3, r7, #28
 8006170:	4619      	mov	r1, r3
 8006172:	4835      	ldr	r0, [pc, #212]	@ (8006248 <MX_GPIO_Init+0x228>)
 8006174:	f000 fb7c 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006178:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800617c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617e:	2302      	movs	r3, #2
 8006180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006186:	2303      	movs	r3, #3
 8006188:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800618a:	2307      	movs	r3, #7
 800618c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800618e:	f107 031c 	add.w	r3, r7, #28
 8006192:	4619      	mov	r1, r3
 8006194:	4830      	ldr	r0, [pc, #192]	@ (8006258 <MX_GPIO_Init+0x238>)
 8006196:	f000 fb6b 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800619a:	2340      	movs	r3, #64	@ 0x40
 800619c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800619e:	2301      	movs	r3, #1
 80061a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a6:	2300      	movs	r3, #0
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80061aa:	f107 031c 	add.w	r3, r7, #28
 80061ae:	4619      	mov	r1, r3
 80061b0:	4826      	ldr	r0, [pc, #152]	@ (800624c <MX_GPIO_Init+0x22c>)
 80061b2:	f000 fb5d 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061ba:	2300      	movs	r3, #0
 80061bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80061c2:	f107 031c 	add.w	r3, r7, #28
 80061c6:	4619      	mov	r1, r3
 80061c8:	4820      	ldr	r0, [pc, #128]	@ (800624c <MX_GPIO_Init+0x22c>)
 80061ca:	f000 fb51 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80061ce:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80061d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d4:	2302      	movs	r3, #2
 80061d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061dc:	2303      	movs	r3, #3
 80061de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80061e0:	230a      	movs	r3, #10
 80061e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e4:	f107 031c 	add.w	r3, r7, #28
 80061e8:	4619      	mov	r1, r3
 80061ea:	481a      	ldr	r0, [pc, #104]	@ (8006254 <MX_GPIO_Init+0x234>)
 80061ec:	f000 fb40 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80061f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061f6:	2300      	movs	r3, #0
 80061f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80061fe:	f107 031c 	add.w	r3, r7, #28
 8006202:	4619      	mov	r1, r3
 8006204:	4813      	ldr	r0, [pc, #76]	@ (8006254 <MX_GPIO_Init+0x234>)
 8006206:	f000 fb33 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800620a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800620e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006210:	2302      	movs	r3, #2
 8006212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006214:	2300      	movs	r3, #0
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006218:	2303      	movs	r3, #3
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800621c:	230b      	movs	r3, #11
 800621e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006220:	f107 031c 	add.w	r3, r7, #28
 8006224:	4619      	mov	r1, r3
 8006226:	4809      	ldr	r0, [pc, #36]	@ (800624c <MX_GPIO_Init+0x22c>)
 8006228:	f000 fb22 	bl	8006870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800622c:	2200      	movs	r2, #0
 800622e:	2105      	movs	r1, #5
 8006230:	2028      	movs	r0, #40	@ 0x28
 8006232:	f000 faf3 	bl	800681c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006236:	2028      	movs	r0, #40	@ 0x28
 8006238:	f000 fb0c 	bl	8006854 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800623c:	bf00      	nop
 800623e:	3730      	adds	r7, #48	@ 0x30
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40023800 	.word	0x40023800
 8006248:	40020400 	.word	0x40020400
 800624c:	40021800 	.word	0x40021800
 8006250:	40020800 	.word	0x40020800
 8006254:	40020000 	.word	0x40020000
 8006258:	40020c00 	.word	0x40020c00

0800625c <Button_Interrupt_Handler>:

/* USER CODE BEGIN 4 */
void Button_Interrupt_Handler(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskAwoken = pdFALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
	traceISR_ENTER();
 8006266:	f7ff f911 	bl	800548c <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskAwoken);
 800626a:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <Button_Interrupt_Handler+0x50>)
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	1d3b      	adds	r3, r7, #4
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	2300      	movs	r3, #0
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	2300      	movs	r3, #0
 8006278:	2200      	movs	r2, #0
 800627a:	2100      	movs	r1, #0
 800627c:	f7fb fea4 	bl	8001fc8 <xTaskGenericNotifyFromISR>
	traceISR_EXIT();
 8006280:	f7ff f946 	bl	8005510 <SEGGER_SYSVIEW_RecordExitISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskAwoken);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <Button_Interrupt_Handler+0x44>
 800628a:	f7ff f95d 	bl	8005548 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800628e:	4b08      	ldr	r3, [pc, #32]	@ (80062b0 <Button_Interrupt_Handler+0x54>)
 8006290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	f3bf 8f6f 	isb	sy
}
 800629e:	e001      	b.n	80062a4 <Button_Interrupt_Handler+0x48>
	portYIELD_FROM_ISR(pxHigherPriorityTaskAwoken);
 80062a0:	f7ff f936 	bl	8005510 <SEGGER_SYSVIEW_RecordExitISR>
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	2000d060 	.word	0x2000d060
 80062b0:	e000ed04 	.word	0xe000ed04

080062b4 <led_green_handler>:
static void led_green_handler(void* parameters)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80062bc:	4813      	ldr	r0, [pc, #76]	@ (800630c <led_green_handler+0x58>)
 80062be:	f7ff fb97 	bl	80059f0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN);
 80062c2:	2101      	movs	r1, #1
 80062c4:	4812      	ldr	r0, [pc, #72]	@ (8006310 <led_green_handler+0x5c>)
 80062c6:	f000 fc98 	bl	8006bfa <HAL_GPIO_TogglePin>
		status =xTaskNotifyWait(0,0,NULL,1000);
 80062ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	2200      	movs	r2, #0
 80062d4:	2100      	movs	r1, #0
 80062d6:	2000      	movs	r0, #0
 80062d8:	f7fb fdf2 	bl	8001ec0 <xTaskGenericNotifyWait>
 80062dc:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d1eb      	bne.n	80062bc <led_green_handler+0x8>
		{
			portENTER_CRITICAL();
 80062e4:	f7fc fc98 	bl	8002c18 <vPortEnterCritical>
			next_task_handle = task2_handle;
 80062e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006314 <led_green_handler+0x60>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006318 <led_green_handler+0x64>)
 80062ee:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, LED_GREEN, GPIO_PIN_RESET);
 80062f0:	2200      	movs	r2, #0
 80062f2:	2101      	movs	r1, #1
 80062f4:	4806      	ldr	r0, [pc, #24]	@ (8006310 <led_green_handler+0x5c>)
 80062f6:	f000 fc67 	bl	8006bc8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Suspend Green LED Task");
 80062fa:	4808      	ldr	r0, [pc, #32]	@ (800631c <led_green_handler+0x68>)
 80062fc:	f7ff fb78 	bl	80059f0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8006300:	f7fc fcb4 	bl	8002c6c <vPortExitCritical>
			vTaskDelete(NULL);
 8006304:	2000      	movs	r0, #0
 8006306:	f7fb f87d 	bl	8001404 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 800630a:	e7d7      	b.n	80062bc <led_green_handler+0x8>
 800630c:	08008024 	.word	0x08008024
 8006310:	40020400 	.word	0x40020400
 8006314:	2000d068 	.word	0x2000d068
 8006318:	2000d060 	.word	0x2000d060
 800631c:	08008038 	.word	0x08008038

08006320 <led_red_handler>:
		}

	}
}
static void led_red_handler(void* parameters)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
	BaseType_t status;
		while(1)
		{

			SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8006328:	4814      	ldr	r0, [pc, #80]	@ (800637c <led_red_handler+0x5c>)
 800632a:	f7ff fb61 	bl	80059f0 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_TogglePin(GPIOB, LED_RED);
 800632e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006332:	4813      	ldr	r0, [pc, #76]	@ (8006380 <led_red_handler+0x60>)
 8006334:	f000 fc61 	bl	8006bfa <HAL_GPIO_TogglePin>
			status =xTaskNotifyWait(0,0,NULL,400);
 8006338:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	2200      	movs	r2, #0
 8006342:	2100      	movs	r1, #0
 8006344:	2000      	movs	r0, #0
 8006346:	f7fb fdbb 	bl	8001ec0 <xTaskGenericNotifyWait>
 800634a:	60f8      	str	r0, [r7, #12]
			if (status == pdTRUE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d1ea      	bne.n	8006328 <led_red_handler+0x8>
			{
				portENTER_CRITICAL();
 8006352:	f7fc fc61 	bl	8002c18 <vPortEnterCritical>
				next_task_handle = NULL;
 8006356:	4b0b      	ldr	r3, [pc, #44]	@ (8006384 <led_red_handler+0x64>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_RED, GPIO_PIN_RESET);
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006362:	4807      	ldr	r0, [pc, #28]	@ (8006380 <led_red_handler+0x60>)
 8006364:	f000 fc30 	bl	8006bc8 <HAL_GPIO_WritePin>
				SEGGER_SYSVIEW_PrintfTarget("Suspend Red LED Task");
 8006368:	4807      	ldr	r0, [pc, #28]	@ (8006388 <led_red_handler+0x68>)
 800636a:	f7ff fb41 	bl	80059f0 <SEGGER_SYSVIEW_PrintfTarget>
				portEXIT_CRITICAL();
 800636e:	f7fc fc7d 	bl	8002c6c <vPortExitCritical>
				vTaskDelete(NULL);
 8006372:	2000      	movs	r0, #0
 8006374:	f7fb f846 	bl	8001404 <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8006378:	e7d6      	b.n	8006328 <led_red_handler+0x8>
 800637a:	bf00      	nop
 800637c:	08008050 	.word	0x08008050
 8006380:	40020400 	.word	0x40020400
 8006384:	2000d060 	.word	0x2000d060
 8006388:	08008064 	.word	0x08008064

0800638c <led_blue_handler>:
			}

		}
}
static void led_blue_handler(void* parameters)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af02      	add	r7, sp, #8
 8006392:	6078      	str	r0, [r7, #4]
	BaseType_t status;
			while(1)
			{
				SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8006394:	4813      	ldr	r0, [pc, #76]	@ (80063e4 <led_blue_handler+0x58>)
 8006396:	f7ff fb2b 	bl	80059f0 <SEGGER_SYSVIEW_PrintfTarget>
				HAL_GPIO_TogglePin(GPIOB, LED_BLUE);
 800639a:	2180      	movs	r1, #128	@ 0x80
 800639c:	4812      	ldr	r0, [pc, #72]	@ (80063e8 <led_blue_handler+0x5c>)
 800639e:	f000 fc2c 	bl	8006bfa <HAL_GPIO_TogglePin>
				status =xTaskNotifyWait(0,0,NULL,800);
 80063a2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	2300      	movs	r3, #0
 80063aa:	2200      	movs	r2, #0
 80063ac:	2100      	movs	r1, #0
 80063ae:	2000      	movs	r0, #0
 80063b0:	f7fb fd86 	bl	8001ec0 <xTaskGenericNotifyWait>
 80063b4:	60f8      	str	r0, [r7, #12]
				if (status == pdTRUE)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d1eb      	bne.n	8006394 <led_blue_handler+0x8>
				{
					portENTER_CRITICAL();
 80063bc:	f7fc fc2c 	bl	8002c18 <vPortEnterCritical>
					next_task_handle = task3_handle;
 80063c0:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <led_blue_handler+0x60>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a0a      	ldr	r2, [pc, #40]	@ (80063f0 <led_blue_handler+0x64>)
 80063c6:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOB, LED_BLUE, GPIO_PIN_RESET);
 80063c8:	2200      	movs	r2, #0
 80063ca:	2180      	movs	r1, #128	@ 0x80
 80063cc:	4806      	ldr	r0, [pc, #24]	@ (80063e8 <led_blue_handler+0x5c>)
 80063ce:	f000 fbfb 	bl	8006bc8 <HAL_GPIO_WritePin>
					SEGGER_SYSVIEW_PrintfTarget("Suspend Blue LED Task");
 80063d2:	4808      	ldr	r0, [pc, #32]	@ (80063f4 <led_blue_handler+0x68>)
 80063d4:	f7ff fb0c 	bl	80059f0 <SEGGER_SYSVIEW_PrintfTarget>
					portEXIT_CRITICAL();
 80063d8:	f7fc fc48 	bl	8002c6c <vPortExitCritical>
					vTaskDelete(NULL);
 80063dc:	2000      	movs	r0, #0
 80063de:	f7fb f811 	bl	8001404 <vTaskDelete>
				SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 80063e2:	e7d7      	b.n	8006394 <led_blue_handler+0x8>
 80063e4:	0800807c 	.word	0x0800807c
 80063e8:	40020400 	.word	0x40020400
 80063ec:	2000d06c 	.word	0x2000d06c
 80063f0:	2000d060 	.word	0x2000d060
 80063f4:	08008090 	.word	0x08008090

080063f8 <vAssertCalled>:
				}

			}
}
void vAssertCalled( unsigned long ulLine, const char * const pcFileName )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
//static portBASE_TYPE xPrinted = pdFALSE;
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]

    /* Parameters are not used. */
    ( void ) ulLine;
    ( void ) pcFileName;

    taskENTER_CRITICAL();
 8006406:	f7fc fc07 	bl	8002c18 <vPortEnterCritical>
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 1 )
 800640a:	bf00      	nop
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d0fc      	beq.n	800640c <vAssertCalled+0x14>
        {
        }
    }
    taskEXIT_CRITICAL();
 8006412:	f7fc fc2b 	bl	8002c6c <vPortExitCritical>
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a04      	ldr	r2, [pc, #16]	@ (8006440 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d101      	bne.n	8006436 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006432:	f000 f91b 	bl	800666c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40010000 	.word	0x40010000

08006444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006448:	b672      	cpsid	i
}
 800644a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800644c:	bf00      	nop
 800644e:	e7fd      	b.n	800644c <Error_Handler+0x8>

08006450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006456:	4b0f      	ldr	r3, [pc, #60]	@ (8006494 <HAL_MspInit+0x44>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645a:	4a0e      	ldr	r2, [pc, #56]	@ (8006494 <HAL_MspInit+0x44>)
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006460:	6413      	str	r3, [r2, #64]	@ 0x40
 8006462:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <HAL_MspInit+0x44>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800646a:	607b      	str	r3, [r7, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800646e:	4b09      	ldr	r3, [pc, #36]	@ (8006494 <HAL_MspInit+0x44>)
 8006470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006472:	4a08      	ldr	r2, [pc, #32]	@ (8006494 <HAL_MspInit+0x44>)
 8006474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006478:	6453      	str	r3, [r2, #68]	@ 0x44
 800647a:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <HAL_MspInit+0x44>)
 800647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8006486:	f7fc fb51 	bl	8002b2c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40023800 	.word	0x40023800

08006498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	@ 0x30
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80064a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006568 <HAL_InitTick+0xd0>)
 80064aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006568 <HAL_InitTick+0xd0>)
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80064b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006568 <HAL_InitTick+0xd0>)
 80064b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80064c0:	f107 020c 	add.w	r2, r7, #12
 80064c4:	f107 0310 	add.w	r3, r7, #16
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 f892 	bl	80075f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80064d0:	f001 f87c 	bl	80075cc <HAL_RCC_GetPCLK2Freq>
 80064d4:	4603      	mov	r3, r0
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	4a23      	ldr	r2, [pc, #140]	@ (800656c <HAL_InitTick+0xd4>)
 80064de:	fba2 2303 	umull	r2, r3, r2, r3
 80064e2:	0c9b      	lsrs	r3, r3, #18
 80064e4:	3b01      	subs	r3, #1
 80064e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80064e8:	4b21      	ldr	r3, [pc, #132]	@ (8006570 <HAL_InitTick+0xd8>)
 80064ea:	4a22      	ldr	r2, [pc, #136]	@ (8006574 <HAL_InitTick+0xdc>)
 80064ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80064ee:	4b20      	ldr	r3, [pc, #128]	@ (8006570 <HAL_InitTick+0xd8>)
 80064f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80064f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80064f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006570 <HAL_InitTick+0xd8>)
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80064fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006570 <HAL_InitTick+0xd8>)
 80064fe:	2200      	movs	r2, #0
 8006500:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006502:	4b1b      	ldr	r3, [pc, #108]	@ (8006570 <HAL_InitTick+0xd8>)
 8006504:	2200      	movs	r2, #0
 8006506:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006508:	4b19      	ldr	r3, [pc, #100]	@ (8006570 <HAL_InitTick+0xd8>)
 800650a:	2200      	movs	r2, #0
 800650c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800650e:	4818      	ldr	r0, [pc, #96]	@ (8006570 <HAL_InitTick+0xd8>)
 8006510:	f001 f8a2 	bl	8007658 <HAL_TIM_Base_Init>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800651a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800651e:	2b00      	cmp	r3, #0
 8006520:	d11b      	bne.n	800655a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006522:	4813      	ldr	r0, [pc, #76]	@ (8006570 <HAL_InitTick+0xd8>)
 8006524:	f001 f8fa 	bl	800771c <HAL_TIM_Base_Start_IT>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800652e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006532:	2b00      	cmp	r3, #0
 8006534:	d111      	bne.n	800655a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006536:	2019      	movs	r0, #25
 8006538:	f000 f98c 	bl	8006854 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d808      	bhi.n	8006554 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8006542:	2200      	movs	r2, #0
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	2019      	movs	r0, #25
 8006548:	f000 f968 	bl	800681c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800654c:	4a0a      	ldr	r2, [pc, #40]	@ (8006578 <HAL_InitTick+0xe0>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e002      	b.n	800655a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800655a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800655e:	4618      	mov	r0, r3
 8006560:	3730      	adds	r7, #48	@ 0x30
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40023800 	.word	0x40023800
 800656c:	431bde83 	.word	0x431bde83
 8006570:	2000d070 	.word	0x2000d070
 8006574:	40010000 	.word	0x40010000
 8006578:	20000014 	.word	0x20000014

0800657c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006580:	bf00      	nop
 8006582:	e7fd      	b.n	8006580 <NMI_Handler+0x4>

08006584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006588:	bf00      	nop
 800658a:	e7fd      	b.n	8006588 <HardFault_Handler+0x4>

0800658c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006590:	bf00      	nop
 8006592:	e7fd      	b.n	8006590 <MemManage_Handler+0x4>

08006594 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006598:	bf00      	nop
 800659a:	e7fd      	b.n	8006598 <BusFault_Handler+0x4>

0800659c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065a0:	bf00      	nop
 80065a2:	e7fd      	b.n	80065a0 <UsageFault_Handler+0x4>

080065a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80065b8:	4802      	ldr	r0, [pc, #8]	@ (80065c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80065ba:	f001 f927 	bl	800780c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80065be:	bf00      	nop
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	2000d070 	.word	0x2000d070

080065c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	Button_Interrupt_Handler();
 80065cc:	f7ff fe46 	bl	800625c <Button_Interrupt_Handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80065d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80065d4:	f000 fb2c 	bl	8006c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80065d8:	bf00      	nop
 80065da:	bd80      	pop	{r7, pc}

080065dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065e0:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <SystemInit+0x20>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e6:	4a05      	ldr	r2, [pc, #20]	@ (80065fc <SystemInit+0x20>)
 80065e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065f0:	bf00      	nop
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	e000ed00 	.word	0xe000ed00

08006600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006604:	f7ff ffea 	bl	80065dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006608:	480c      	ldr	r0, [pc, #48]	@ (800663c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800660a:	490d      	ldr	r1, [pc, #52]	@ (8006640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800660c:	4a0d      	ldr	r2, [pc, #52]	@ (8006644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800660e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006610:	e002      	b.n	8006618 <LoopCopyDataInit>

08006612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006616:	3304      	adds	r3, #4

08006618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800661a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800661c:	d3f9      	bcc.n	8006612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800661e:	4a0a      	ldr	r2, [pc, #40]	@ (8006648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006620:	4c0a      	ldr	r4, [pc, #40]	@ (800664c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006624:	e001      	b.n	800662a <LoopFillZerobss>

08006626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006628:	3204      	adds	r2, #4

0800662a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800662a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800662c:	d3fb      	bcc.n	8006626 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800662e:	f001 faff 	bl	8007c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006632:	f7ff fc0d 	bl	8005e50 <main>
  bx  lr    
 8006636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006638:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800663c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006640:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8006644:	0800810c 	.word	0x0800810c
  ldr r2, =_sbss
 8006648:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800664c:	2000d0c0 	.word	0x2000d0c0

08006650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006650:	e7fe      	b.n	8006650 <ADC_IRQHandler>

08006652 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006656:	2003      	movs	r0, #3
 8006658:	f000 f8d5 	bl	8006806 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800665c:	200f      	movs	r0, #15
 800665e:	f7ff ff1b 	bl	8006498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006662:	f7ff fef5 	bl	8006450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006670:	4b06      	ldr	r3, [pc, #24]	@ (800668c <HAL_IncTick+0x20>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	4b06      	ldr	r3, [pc, #24]	@ (8006690 <HAL_IncTick+0x24>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4413      	add	r3, r2
 800667c:	4a04      	ldr	r2, [pc, #16]	@ (8006690 <HAL_IncTick+0x24>)
 800667e:	6013      	str	r3, [r2, #0]
}
 8006680:	bf00      	nop
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000018 	.word	0x20000018
 8006690:	2000d0bc 	.word	0x2000d0bc

08006694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
  return uwTick;
 8006698:	4b03      	ldr	r3, [pc, #12]	@ (80066a8 <HAL_GetTick+0x14>)
 800669a:	681b      	ldr	r3, [r3, #0]
}
 800669c:	4618      	mov	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	2000d0bc 	.word	0x2000d0bc

080066ac <__NVIC_SetPriorityGrouping>:
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <__NVIC_SetPriorityGrouping+0x40>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066c8:	4013      	ands	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80066d4:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <__NVIC_SetPriorityGrouping+0x44>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066da:	4a04      	ldr	r2, [pc, #16]	@ (80066ec <__NVIC_SetPriorityGrouping+0x40>)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	60d3      	str	r3, [r2, #12]
}
 80066e0:	bf00      	nop
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	e000ed00 	.word	0xe000ed00
 80066f0:	05fa0000 	.word	0x05fa0000

080066f4 <__NVIC_GetPriorityGrouping>:
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066f8:	4b04      	ldr	r3, [pc, #16]	@ (800670c <__NVIC_GetPriorityGrouping+0x18>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	f003 0307 	and.w	r3, r3, #7
}
 8006702:	4618      	mov	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	e000ed00 	.word	0xe000ed00

08006710 <__NVIC_EnableIRQ>:
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800671a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671e:	2b00      	cmp	r3, #0
 8006720:	db0b      	blt.n	800673a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	f003 021f 	and.w	r2, r3, #31
 8006728:	4907      	ldr	r1, [pc, #28]	@ (8006748 <__NVIC_EnableIRQ+0x38>)
 800672a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2001      	movs	r0, #1
 8006732:	fa00 f202 	lsl.w	r2, r0, r2
 8006736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	e000e100 	.word	0xe000e100

0800674c <__NVIC_SetPriority>:
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800675c:	2b00      	cmp	r3, #0
 800675e:	db0a      	blt.n	8006776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	490c      	ldr	r1, [pc, #48]	@ (8006798 <__NVIC_SetPriority+0x4c>)
 8006766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676a:	0112      	lsls	r2, r2, #4
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	440b      	add	r3, r1
 8006770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006774:	e00a      	b.n	800678c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	4908      	ldr	r1, [pc, #32]	@ (800679c <__NVIC_SetPriority+0x50>)
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	3b04      	subs	r3, #4
 8006784:	0112      	lsls	r2, r2, #4
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	440b      	add	r3, r1
 800678a:	761a      	strb	r2, [r3, #24]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	e000e100 	.word	0xe000e100
 800679c:	e000ed00 	.word	0xe000ed00

080067a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b089      	sub	sp, #36	@ 0x24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f1c3 0307 	rsb	r3, r3, #7
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	bf28      	it	cs
 80067be:	2304      	movcs	r3, #4
 80067c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	3304      	adds	r3, #4
 80067c6:	2b06      	cmp	r3, #6
 80067c8:	d902      	bls.n	80067d0 <NVIC_EncodePriority+0x30>
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3b03      	subs	r3, #3
 80067ce:	e000      	b.n	80067d2 <NVIC_EncodePriority+0x32>
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067d4:	f04f 32ff 	mov.w	r2, #4294967295
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	43da      	mvns	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	401a      	ands	r2, r3
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067e8:	f04f 31ff 	mov.w	r1, #4294967295
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	fa01 f303 	lsl.w	r3, r1, r3
 80067f2:	43d9      	mvns	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067f8:	4313      	orrs	r3, r2
         );
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3724      	adds	r7, #36	@ 0x24
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff ff4c 	bl	80066ac <__NVIC_SetPriorityGrouping>
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800682e:	f7ff ff61 	bl	80066f4 <__NVIC_GetPriorityGrouping>
 8006832:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	6978      	ldr	r0, [r7, #20]
 800683a:	f7ff ffb1 	bl	80067a0 <NVIC_EncodePriority>
 800683e:	4602      	mov	r2, r0
 8006840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff ff80 	bl	800674c <__NVIC_SetPriority>
}
 800684c:	bf00      	nop
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800685e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff ff54 	bl	8006710 <__NVIC_EnableIRQ>
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006870:	b480      	push	{r7}
 8006872:	b089      	sub	sp, #36	@ 0x24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006882:	2300      	movs	r3, #0
 8006884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006886:	2300      	movs	r3, #0
 8006888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	e175      	b.n	8006b7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006890:	2201      	movs	r2, #1
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4013      	ands	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	f040 8164 	bne.w	8006b76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d005      	beq.n	80068c6 <HAL_GPIO_Init+0x56>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d130      	bne.n	8006928 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	2203      	movs	r2, #3
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	43db      	mvns	r3, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	4013      	ands	r3, r2
 80068dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068fc:	2201      	movs	r2, #1
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	43db      	mvns	r3, r3
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	4013      	ands	r3, r2
 800690a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	f003 0201 	and.w	r2, r3, #1
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	4313      	orrs	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	2b03      	cmp	r3, #3
 8006932:	d017      	beq.n	8006964 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	2203      	movs	r2, #3
 8006940:	fa02 f303 	lsl.w	r3, r2, r3
 8006944:	43db      	mvns	r3, r3
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	4013      	ands	r3, r2
 800694a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4313      	orrs	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f003 0303 	and.w	r3, r3, #3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d123      	bne.n	80069b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	08da      	lsrs	r2, r3, #3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3208      	adds	r2, #8
 8006978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	220f      	movs	r2, #15
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	43db      	mvns	r3, r3
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	4013      	ands	r3, r2
 8006992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	08da      	lsrs	r2, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3208      	adds	r2, #8
 80069b2:	69b9      	ldr	r1, [r7, #24]
 80069b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	2203      	movs	r2, #3
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	4013      	ands	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f003 0203 	and.w	r2, r3, #3
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80be 	beq.w	8006b76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069fa:	4b66      	ldr	r3, [pc, #408]	@ (8006b94 <HAL_GPIO_Init+0x324>)
 80069fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fe:	4a65      	ldr	r2, [pc, #404]	@ (8006b94 <HAL_GPIO_Init+0x324>)
 8006a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a06:	4b63      	ldr	r3, [pc, #396]	@ (8006b94 <HAL_GPIO_Init+0x324>)
 8006a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006a12:	4a61      	ldr	r2, [pc, #388]	@ (8006b98 <HAL_GPIO_Init+0x328>)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	3302      	adds	r3, #2
 8006a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	220f      	movs	r2, #15
 8006a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2e:	43db      	mvns	r3, r3
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	4013      	ands	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a58      	ldr	r2, [pc, #352]	@ (8006b9c <HAL_GPIO_Init+0x32c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d037      	beq.n	8006aae <HAL_GPIO_Init+0x23e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a57      	ldr	r2, [pc, #348]	@ (8006ba0 <HAL_GPIO_Init+0x330>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d031      	beq.n	8006aaa <HAL_GPIO_Init+0x23a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a56      	ldr	r2, [pc, #344]	@ (8006ba4 <HAL_GPIO_Init+0x334>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d02b      	beq.n	8006aa6 <HAL_GPIO_Init+0x236>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a55      	ldr	r2, [pc, #340]	@ (8006ba8 <HAL_GPIO_Init+0x338>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d025      	beq.n	8006aa2 <HAL_GPIO_Init+0x232>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a54      	ldr	r2, [pc, #336]	@ (8006bac <HAL_GPIO_Init+0x33c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01f      	beq.n	8006a9e <HAL_GPIO_Init+0x22e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a53      	ldr	r2, [pc, #332]	@ (8006bb0 <HAL_GPIO_Init+0x340>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d019      	beq.n	8006a9a <HAL_GPIO_Init+0x22a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a52      	ldr	r2, [pc, #328]	@ (8006bb4 <HAL_GPIO_Init+0x344>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d013      	beq.n	8006a96 <HAL_GPIO_Init+0x226>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a51      	ldr	r2, [pc, #324]	@ (8006bb8 <HAL_GPIO_Init+0x348>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00d      	beq.n	8006a92 <HAL_GPIO_Init+0x222>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a50      	ldr	r2, [pc, #320]	@ (8006bbc <HAL_GPIO_Init+0x34c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d007      	beq.n	8006a8e <HAL_GPIO_Init+0x21e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a4f      	ldr	r2, [pc, #316]	@ (8006bc0 <HAL_GPIO_Init+0x350>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d101      	bne.n	8006a8a <HAL_GPIO_Init+0x21a>
 8006a86:	2309      	movs	r3, #9
 8006a88:	e012      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006a8a:	230a      	movs	r3, #10
 8006a8c:	e010      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	e00e      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006a92:	2307      	movs	r3, #7
 8006a94:	e00c      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006a96:	2306      	movs	r3, #6
 8006a98:	e00a      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006a9a:	2305      	movs	r3, #5
 8006a9c:	e008      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	e006      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e004      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e002      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <HAL_GPIO_Init+0x240>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	f002 0203 	and.w	r2, r2, #3
 8006ab6:	0092      	lsls	r2, r2, #2
 8006ab8:	4093      	lsls	r3, r2
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006ac0:	4935      	ldr	r1, [pc, #212]	@ (8006b98 <HAL_GPIO_Init+0x328>)
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	089b      	lsrs	r3, r3, #2
 8006ac6:	3302      	adds	r3, #2
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ace:	4b3d      	ldr	r3, [pc, #244]	@ (8006bc4 <HAL_GPIO_Init+0x354>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	4013      	ands	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006af2:	4a34      	ldr	r2, [pc, #208]	@ (8006bc4 <HAL_GPIO_Init+0x354>)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006af8:	4b32      	ldr	r3, [pc, #200]	@ (8006bc4 <HAL_GPIO_Init+0x354>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	43db      	mvns	r3, r3
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4013      	ands	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b1c:	4a29      	ldr	r2, [pc, #164]	@ (8006bc4 <HAL_GPIO_Init+0x354>)
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b22:	4b28      	ldr	r3, [pc, #160]	@ (8006bc4 <HAL_GPIO_Init+0x354>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b46:	4a1f      	ldr	r2, [pc, #124]	@ (8006bc4 <HAL_GPIO_Init+0x354>)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc4 <HAL_GPIO_Init+0x354>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	43db      	mvns	r3, r3
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b70:	4a14      	ldr	r2, [pc, #80]	@ (8006bc4 <HAL_GPIO_Init+0x354>)
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	f67f ae86 	bls.w	8006890 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	3724      	adds	r7, #36	@ 0x24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	40023800 	.word	0x40023800
 8006b98:	40013800 	.word	0x40013800
 8006b9c:	40020000 	.word	0x40020000
 8006ba0:	40020400 	.word	0x40020400
 8006ba4:	40020800 	.word	0x40020800
 8006ba8:	40020c00 	.word	0x40020c00
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	40021400 	.word	0x40021400
 8006bb4:	40021800 	.word	0x40021800
 8006bb8:	40021c00 	.word	0x40021c00
 8006bbc:	40022000 	.word	0x40022000
 8006bc0:	40022400 	.word	0x40022400
 8006bc4:	40013c00 	.word	0x40013c00

08006bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	807b      	strh	r3, [r7, #2]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bd8:	787b      	ldrb	r3, [r7, #1]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bde:	887a      	ldrh	r2, [r7, #2]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006be4:	e003      	b.n	8006bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006be6:	887b      	ldrh	r3, [r7, #2]
 8006be8:	041a      	lsls	r2, r3, #16
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	619a      	str	r2, [r3, #24]
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c0c:	887a      	ldrh	r2, [r7, #2]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4013      	ands	r3, r2
 8006c12:	041a      	lsls	r2, r3, #16
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	43d9      	mvns	r1, r3
 8006c18:	887b      	ldrh	r3, [r7, #2]
 8006c1a:	400b      	ands	r3, r1
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	619a      	str	r2, [r3, #24]
}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c3a:	4b08      	ldr	r3, [pc, #32]	@ (8006c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d006      	beq.n	8006c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c46:	4a05      	ldr	r2, [pc, #20]	@ (8006c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f806 	bl	8006c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	40013c00 	.word	0x40013c00

08006c60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006c80:	2300      	movs	r3, #0
 8006c82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e29b      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8087 	beq.w	8006daa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c9c:	4b96      	ldr	r3, [pc, #600]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 030c 	and.w	r3, r3, #12
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d00c      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ca8:	4b93      	ldr	r3, [pc, #588]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 030c 	and.w	r3, r3, #12
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d112      	bne.n	8006cda <HAL_RCC_OscConfig+0x62>
 8006cb4:	4b90      	ldr	r3, [pc, #576]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cc0:	d10b      	bne.n	8006cda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d06c      	beq.n	8006da8 <HAL_RCC_OscConfig+0x130>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d168      	bne.n	8006da8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e275      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce2:	d106      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x7a>
 8006ce4:	4b84      	ldr	r3, [pc, #528]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a83      	ldr	r2, [pc, #524]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	e02e      	b.n	8006d50 <HAL_RCC_OscConfig+0xd8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x9c>
 8006cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4b7c      	ldr	r3, [pc, #496]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a7b      	ldr	r2, [pc, #492]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e01d      	b.n	8006d50 <HAL_RCC_OscConfig+0xd8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d1c:	d10c      	bne.n	8006d38 <HAL_RCC_OscConfig+0xc0>
 8006d1e:	4b76      	ldr	r3, [pc, #472]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a75      	ldr	r2, [pc, #468]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	4b73      	ldr	r3, [pc, #460]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a72      	ldr	r2, [pc, #456]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e00b      	b.n	8006d50 <HAL_RCC_OscConfig+0xd8>
 8006d38:	4b6f      	ldr	r3, [pc, #444]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	4b6c      	ldr	r3, [pc, #432]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a6b      	ldr	r2, [pc, #428]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d013      	beq.n	8006d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d58:	f7ff fc9c 	bl	8006694 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d60:	f7ff fc98 	bl	8006694 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b64      	cmp	r3, #100	@ 0x64
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e229      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d72:	4b61      	ldr	r3, [pc, #388]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCC_OscConfig+0xe8>
 8006d7e:	e014      	b.n	8006daa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d80:	f7ff fc88 	bl	8006694 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d88:	f7ff fc84 	bl	8006694 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	@ 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e215      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d9a:	4b57      	ldr	r3, [pc, #348]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1f0      	bne.n	8006d88 <HAL_RCC_OscConfig+0x110>
 8006da6:	e000      	b.n	8006daa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d069      	beq.n	8006e8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006db6:	4b50      	ldr	r3, [pc, #320]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 030c 	and.w	r3, r3, #12
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00b      	beq.n	8006dda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d11c      	bne.n	8006e08 <HAL_RCC_OscConfig+0x190>
 8006dce:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d116      	bne.n	8006e08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dda:	4b47      	ldr	r3, [pc, #284]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_RCC_OscConfig+0x17a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d001      	beq.n	8006df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e1e9      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df2:	4b41      	ldr	r3, [pc, #260]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	493d      	ldr	r1, [pc, #244]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e06:	e040      	b.n	8006e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d023      	beq.n	8006e58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e10:	4b39      	ldr	r3, [pc, #228]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a38      	ldr	r2, [pc, #224]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1c:	f7ff fc3a 	bl	8006694 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e22:	e008      	b.n	8006e36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e24:	f7ff fc36 	bl	8006694 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e1c7      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e36:	4b30      	ldr	r3, [pc, #192]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f0      	beq.n	8006e24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e42:	4b2d      	ldr	r3, [pc, #180]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	4929      	ldr	r1, [pc, #164]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]
 8006e56:	e018      	b.n	8006e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e58:	4b27      	ldr	r3, [pc, #156]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a26      	ldr	r2, [pc, #152]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7ff fc16 	bl	8006694 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e6c:	f7ff fc12 	bl	8006694 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e1a3      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d038      	beq.n	8006f08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d019      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e9e:	4b16      	ldr	r3, [pc, #88]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ea2:	4a15      	ldr	r2, [pc, #84]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eaa:	f7ff fbf3 	bl	8006694 <HAL_GetTick>
 8006eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eb2:	f7ff fbef 	bl	8006694 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e180      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x23a>
 8006ed0:	e01a      	b.n	8006f08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ed2:	4b09      	ldr	r3, [pc, #36]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed6:	4a08      	ldr	r2, [pc, #32]	@ (8006ef8 <HAL_RCC_OscConfig+0x280>)
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ede:	f7ff fbd9 	bl	8006694 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ee6:	f7ff fbd5 	bl	8006694 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d903      	bls.n	8006efc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e166      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
 8006ef8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006efc:	4b92      	ldr	r3, [pc, #584]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1ee      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 80a4 	beq.w	800705e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f16:	4b8c      	ldr	r3, [pc, #560]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10d      	bne.n	8006f3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f22:	4b89      	ldr	r3, [pc, #548]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f26:	4a88      	ldr	r2, [pc, #544]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f2e:	4b86      	ldr	r3, [pc, #536]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f36:	60bb      	str	r3, [r7, #8]
 8006f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f3e:	4b83      	ldr	r3, [pc, #524]	@ (800714c <HAL_RCC_OscConfig+0x4d4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d118      	bne.n	8006f7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006f4a:	4b80      	ldr	r3, [pc, #512]	@ (800714c <HAL_RCC_OscConfig+0x4d4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7f      	ldr	r2, [pc, #508]	@ (800714c <HAL_RCC_OscConfig+0x4d4>)
 8006f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f56:	f7ff fb9d 	bl	8006694 <HAL_GetTick>
 8006f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f5e:	f7ff fb99 	bl	8006694 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b64      	cmp	r3, #100	@ 0x64
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e12a      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f70:	4b76      	ldr	r3, [pc, #472]	@ (800714c <HAL_RCC_OscConfig+0x4d4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0f0      	beq.n	8006f5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d106      	bne.n	8006f92 <HAL_RCC_OscConfig+0x31a>
 8006f84:	4b70      	ldr	r3, [pc, #448]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f88:	4a6f      	ldr	r2, [pc, #444]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f90:	e02d      	b.n	8006fee <HAL_RCC_OscConfig+0x376>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10c      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x33c>
 8006f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fa6:	4b68      	ldr	r3, [pc, #416]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006faa:	4a67      	ldr	r2, [pc, #412]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fac:	f023 0304 	bic.w	r3, r3, #4
 8006fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fb2:	e01c      	b.n	8006fee <HAL_RCC_OscConfig+0x376>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d10c      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x35e>
 8006fbc:	4b62      	ldr	r3, [pc, #392]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc0:	4a61      	ldr	r2, [pc, #388]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fc2:	f043 0304 	orr.w	r3, r3, #4
 8006fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fcc:	4a5e      	ldr	r2, [pc, #376]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fd4:	e00b      	b.n	8006fee <HAL_RCC_OscConfig+0x376>
 8006fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fda:	4a5b      	ldr	r2, [pc, #364]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fe2:	4b59      	ldr	r3, [pc, #356]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe6:	4a58      	ldr	r2, [pc, #352]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d015      	beq.n	8007022 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff6:	f7ff fb4d 	bl	8006694 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ffc:	e00a      	b.n	8007014 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffe:	f7ff fb49 	bl	8006694 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800700c:	4293      	cmp	r3, r2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e0d8      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007014:	4b4c      	ldr	r3, [pc, #304]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0ee      	beq.n	8006ffe <HAL_RCC_OscConfig+0x386>
 8007020:	e014      	b.n	800704c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007022:	f7ff fb37 	bl	8006694 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007028:	e00a      	b.n	8007040 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800702a:	f7ff fb33 	bl	8006694 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007038:	4293      	cmp	r3, r2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e0c2      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007040:	4b41      	ldr	r3, [pc, #260]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8007042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1ee      	bne.n	800702a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d105      	bne.n	800705e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007052:	4b3d      	ldr	r3, [pc, #244]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	4a3c      	ldr	r2, [pc, #240]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8007058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80ae 	beq.w	80071c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007068:	4b37      	ldr	r3, [pc, #220]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 030c 	and.w	r3, r3, #12
 8007070:	2b08      	cmp	r3, #8
 8007072:	d06d      	beq.n	8007150 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d14b      	bne.n	8007114 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707c:	4b32      	ldr	r3, [pc, #200]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a31      	ldr	r2, [pc, #196]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8007082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7ff fb04 	bl	8006694 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007090:	f7ff fb00 	bl	8006694 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e091      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a2:	4b29      	ldr	r3, [pc, #164]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f0      	bne.n	8007090 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69da      	ldr	r2, [r3, #28]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070bc:	019b      	lsls	r3, r3, #6
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	3b01      	subs	r3, #1
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d0:	061b      	lsls	r3, r3, #24
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d8:	071b      	lsls	r3, r3, #28
 80070da:	491b      	ldr	r1, [pc, #108]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070e0:	4b19      	ldr	r3, [pc, #100]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a18      	ldr	r2, [pc, #96]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 80070e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ec:	f7ff fad2 	bl	8006694 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f4:	f7ff face 	bl	8006694 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e05f      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007106:	4b10      	ldr	r3, [pc, #64]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0f0      	beq.n	80070f4 <HAL_RCC_OscConfig+0x47c>
 8007112:	e057      	b.n	80071c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007114:	4b0c      	ldr	r3, [pc, #48]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a0b      	ldr	r2, [pc, #44]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 800711a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800711e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7ff fab8 	bl	8006694 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007128:	f7ff fab4 	bl	8006694 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e045      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713a:	4b03      	ldr	r3, [pc, #12]	@ (8007148 <HAL_RCC_OscConfig+0x4d0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x4b0>
 8007146:	e03d      	b.n	80071c4 <HAL_RCC_OscConfig+0x54c>
 8007148:	40023800 	.word	0x40023800
 800714c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007150:	4b1f      	ldr	r3, [pc, #124]	@ (80071d0 <HAL_RCC_OscConfig+0x558>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d030      	beq.n	80071c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007168:	429a      	cmp	r2, r3
 800716a:	d129      	bne.n	80071c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007176:	429a      	cmp	r2, r3
 8007178:	d122      	bne.n	80071c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007180:	4013      	ands	r3, r2
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007186:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007188:	4293      	cmp	r3, r2
 800718a:	d119      	bne.n	80071c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	3b01      	subs	r3, #1
 800719a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800719c:	429a      	cmp	r2, r3
 800719e:	d10f      	bne.n	80071c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d107      	bne.n	80071c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071bc:	429a      	cmp	r2, r3
 80071be:	d001      	beq.n	80071c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40023800 	.word	0x40023800

080071d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0d0      	b.n	800738e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071ec:	4b6a      	ldr	r3, [pc, #424]	@ (8007398 <HAL_RCC_ClockConfig+0x1c4>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d910      	bls.n	800721c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b67      	ldr	r3, [pc, #412]	@ (8007398 <HAL_RCC_ClockConfig+0x1c4>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 020f 	bic.w	r2, r3, #15
 8007202:	4965      	ldr	r1, [pc, #404]	@ (8007398 <HAL_RCC_ClockConfig+0x1c4>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b63      	ldr	r3, [pc, #396]	@ (8007398 <HAL_RCC_ClockConfig+0x1c4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0b8      	b.n	800738e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d020      	beq.n	800726a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007234:	4b59      	ldr	r3, [pc, #356]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	4a58      	ldr	r2, [pc, #352]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 800723a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800723e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800724c:	4b53      	ldr	r3, [pc, #332]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	4a52      	ldr	r2, [pc, #328]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007256:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007258:	4b50      	ldr	r3, [pc, #320]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	494d      	ldr	r1, [pc, #308]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007266:	4313      	orrs	r3, r2
 8007268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d040      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d107      	bne.n	800728e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727e:	4b47      	ldr	r3, [pc, #284]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d115      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e07f      	b.n	800738e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b02      	cmp	r3, #2
 8007294:	d107      	bne.n	80072a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007296:	4b41      	ldr	r3, [pc, #260]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e073      	b.n	800738e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a6:	4b3d      	ldr	r3, [pc, #244]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e06b      	b.n	800738e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072b6:	4b39      	ldr	r3, [pc, #228]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f023 0203 	bic.w	r2, r3, #3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	4936      	ldr	r1, [pc, #216]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c8:	f7ff f9e4 	bl	8006694 <HAL_GetTick>
 80072cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ce:	e00a      	b.n	80072e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d0:	f7ff f9e0 	bl	8006694 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072de:	4293      	cmp	r3, r2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e053      	b.n	800738e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072e6:	4b2d      	ldr	r3, [pc, #180]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 020c 	and.w	r2, r3, #12
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d1eb      	bne.n	80072d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072f8:	4b27      	ldr	r3, [pc, #156]	@ (8007398 <HAL_RCC_ClockConfig+0x1c4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d210      	bcs.n	8007328 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007306:	4b24      	ldr	r3, [pc, #144]	@ (8007398 <HAL_RCC_ClockConfig+0x1c4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 020f 	bic.w	r2, r3, #15
 800730e:	4922      	ldr	r1, [pc, #136]	@ (8007398 <HAL_RCC_ClockConfig+0x1c4>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007316:	4b20      	ldr	r3, [pc, #128]	@ (8007398 <HAL_RCC_ClockConfig+0x1c4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e032      	b.n	800738e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007334:	4b19      	ldr	r3, [pc, #100]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4916      	ldr	r1, [pc, #88]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007342:	4313      	orrs	r3, r2
 8007344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007352:	4b12      	ldr	r3, [pc, #72]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	490e      	ldr	r1, [pc, #56]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 8007362:	4313      	orrs	r3, r2
 8007364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007366:	f000 f821 	bl	80073ac <HAL_RCC_GetSysClockFreq>
 800736a:	4602      	mov	r2, r0
 800736c:	4b0b      	ldr	r3, [pc, #44]	@ (800739c <HAL_RCC_ClockConfig+0x1c8>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	091b      	lsrs	r3, r3, #4
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	490a      	ldr	r1, [pc, #40]	@ (80073a0 <HAL_RCC_ClockConfig+0x1cc>)
 8007378:	5ccb      	ldrb	r3, [r1, r3]
 800737a:	fa22 f303 	lsr.w	r3, r2, r3
 800737e:	4a09      	ldr	r2, [pc, #36]	@ (80073a4 <HAL_RCC_ClockConfig+0x1d0>)
 8007380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007382:	4b09      	ldr	r3, [pc, #36]	@ (80073a8 <HAL_RCC_ClockConfig+0x1d4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff f886 	bl	8006498 <HAL_InitTick>

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40023c00 	.word	0x40023c00
 800739c:	40023800 	.word	0x40023800
 80073a0:	080080e4 	.word	0x080080e4
 80073a4:	20000010 	.word	0x20000010
 80073a8:	20000014 	.word	0x20000014

080073ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073b0:	b094      	sub	sp, #80	@ 0x50
 80073b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80073b8:	2300      	movs	r3, #0
 80073ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073bc:	2300      	movs	r3, #0
 80073be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073c4:	4b79      	ldr	r3, [pc, #484]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x200>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 030c 	and.w	r3, r3, #12
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d00d      	beq.n	80073ec <HAL_RCC_GetSysClockFreq+0x40>
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	f200 80e1 	bhi.w	8007598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <HAL_RCC_GetSysClockFreq+0x34>
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d003      	beq.n	80073e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80073de:	e0db      	b.n	8007598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073e0:	4b73      	ldr	r3, [pc, #460]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80073e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073e4:	e0db      	b.n	800759e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073e6:	4b72      	ldr	r3, [pc, #456]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80073e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073ea:	e0d8      	b.n	800759e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073ec:	4b6f      	ldr	r3, [pc, #444]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x200>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80073f6:	4b6d      	ldr	r3, [pc, #436]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x200>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d063      	beq.n	80074ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007402:	4b6a      	ldr	r3, [pc, #424]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	099b      	lsrs	r3, r3, #6
 8007408:	2200      	movs	r2, #0
 800740a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800740c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007414:	633b      	str	r3, [r7, #48]	@ 0x30
 8007416:	2300      	movs	r3, #0
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34
 800741a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800741e:	4622      	mov	r2, r4
 8007420:	462b      	mov	r3, r5
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f04f 0100 	mov.w	r1, #0
 800742a:	0159      	lsls	r1, r3, #5
 800742c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007430:	0150      	lsls	r0, r2, #5
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	4621      	mov	r1, r4
 8007438:	1a51      	subs	r1, r2, r1
 800743a:	6139      	str	r1, [r7, #16]
 800743c:	4629      	mov	r1, r5
 800743e:	eb63 0301 	sbc.w	r3, r3, r1
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007450:	4659      	mov	r1, fp
 8007452:	018b      	lsls	r3, r1, #6
 8007454:	4651      	mov	r1, sl
 8007456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800745a:	4651      	mov	r1, sl
 800745c:	018a      	lsls	r2, r1, #6
 800745e:	4651      	mov	r1, sl
 8007460:	ebb2 0801 	subs.w	r8, r2, r1
 8007464:	4659      	mov	r1, fp
 8007466:	eb63 0901 	sbc.w	r9, r3, r1
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800747a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800747e:	4690      	mov	r8, r2
 8007480:	4699      	mov	r9, r3
 8007482:	4623      	mov	r3, r4
 8007484:	eb18 0303 	adds.w	r3, r8, r3
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	462b      	mov	r3, r5
 800748c:	eb49 0303 	adc.w	r3, r9, r3
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800749e:	4629      	mov	r1, r5
 80074a0:	028b      	lsls	r3, r1, #10
 80074a2:	4621      	mov	r1, r4
 80074a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074a8:	4621      	mov	r1, r4
 80074aa:	028a      	lsls	r2, r1, #10
 80074ac:	4610      	mov	r0, r2
 80074ae:	4619      	mov	r1, r3
 80074b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b2:	2200      	movs	r2, #0
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074bc:	f7f8 ff0a 	bl	80002d4 <__aeabi_uldivmod>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4613      	mov	r3, r2
 80074c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c8:	e058      	b.n	800757c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ca:	4b38      	ldr	r3, [pc, #224]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x200>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	099b      	lsrs	r3, r3, #6
 80074d0:	2200      	movs	r2, #0
 80074d2:	4618      	mov	r0, r3
 80074d4:	4611      	mov	r1, r2
 80074d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80074da:	623b      	str	r3, [r7, #32]
 80074dc:	2300      	movs	r3, #0
 80074de:	627b      	str	r3, [r7, #36]	@ 0x24
 80074e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	f04f 0000 	mov.w	r0, #0
 80074ec:	f04f 0100 	mov.w	r1, #0
 80074f0:	0159      	lsls	r1, r3, #5
 80074f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074f6:	0150      	lsls	r0, r2, #5
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4641      	mov	r1, r8
 80074fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8007502:	4649      	mov	r1, r9
 8007504:	eb63 0b01 	sbc.w	fp, r3, r1
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800751c:	ebb2 040a 	subs.w	r4, r2, sl
 8007520:	eb63 050b 	sbc.w	r5, r3, fp
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	00eb      	lsls	r3, r5, #3
 800752e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007532:	00e2      	lsls	r2, r4, #3
 8007534:	4614      	mov	r4, r2
 8007536:	461d      	mov	r5, r3
 8007538:	4643      	mov	r3, r8
 800753a:	18e3      	adds	r3, r4, r3
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	464b      	mov	r3, r9
 8007540:	eb45 0303 	adc.w	r3, r5, r3
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007552:	4629      	mov	r1, r5
 8007554:	028b      	lsls	r3, r1, #10
 8007556:	4621      	mov	r1, r4
 8007558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800755c:	4621      	mov	r1, r4
 800755e:	028a      	lsls	r2, r1, #10
 8007560:	4610      	mov	r0, r2
 8007562:	4619      	mov	r1, r3
 8007564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007566:	2200      	movs	r2, #0
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	61fa      	str	r2, [r7, #28]
 800756c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007570:	f7f8 feb0 	bl	80002d4 <__aeabi_uldivmod>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4613      	mov	r3, r2
 800757a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800757c:	4b0b      	ldr	r3, [pc, #44]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x200>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	0c1b      	lsrs	r3, r3, #16
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	3301      	adds	r3, #1
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800758c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800758e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007590:	fbb2 f3f3 	udiv	r3, r2, r3
 8007594:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007596:	e002      	b.n	800759e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007598:	4b05      	ldr	r3, [pc, #20]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800759a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800759c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800759e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3750      	adds	r7, #80	@ 0x50
 80075a4:	46bd      	mov	sp, r7
 80075a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075aa:	bf00      	nop
 80075ac:	40023800 	.word	0x40023800
 80075b0:	00f42400 	.word	0x00f42400

080075b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075b8:	4b03      	ldr	r3, [pc, #12]	@ (80075c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80075ba:	681b      	ldr	r3, [r3, #0]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	20000010 	.word	0x20000010

080075cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075d0:	f7ff fff0 	bl	80075b4 <HAL_RCC_GetHCLKFreq>
 80075d4:	4602      	mov	r2, r0
 80075d6:	4b05      	ldr	r3, [pc, #20]	@ (80075ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	0b5b      	lsrs	r3, r3, #13
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	4903      	ldr	r1, [pc, #12]	@ (80075f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075e2:	5ccb      	ldrb	r3, [r1, r3]
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40023800 	.word	0x40023800
 80075f0:	080080f4 	.word	0x080080f4

080075f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	220f      	movs	r2, #15
 8007602:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007604:	4b12      	ldr	r3, [pc, #72]	@ (8007650 <HAL_RCC_GetClockConfig+0x5c>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0203 	and.w	r2, r3, #3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007610:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <HAL_RCC_GetClockConfig+0x5c>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800761c:	4b0c      	ldr	r3, [pc, #48]	@ (8007650 <HAL_RCC_GetClockConfig+0x5c>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007628:	4b09      	ldr	r3, [pc, #36]	@ (8007650 <HAL_RCC_GetClockConfig+0x5c>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	08db      	lsrs	r3, r3, #3
 800762e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007636:	4b07      	ldr	r3, [pc, #28]	@ (8007654 <HAL_RCC_GetClockConfig+0x60>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 020f 	and.w	r2, r3, #15
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	601a      	str	r2, [r3, #0]
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40023800 	.word	0x40023800
 8007654:	40023c00 	.word	0x40023c00

08007658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e049      	b.n	80076fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f841 	bl	8007706 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f000 f9e8 	bl	8007a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
	...

0800771c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d001      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e054      	b.n	80077de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0201 	orr.w	r2, r2, #1
 800774a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a26      	ldr	r2, [pc, #152]	@ (80077ec <HAL_TIM_Base_Start_IT+0xd0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d022      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x80>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800775e:	d01d      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x80>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a22      	ldr	r2, [pc, #136]	@ (80077f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d018      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x80>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a21      	ldr	r2, [pc, #132]	@ (80077f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x80>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1f      	ldr	r2, [pc, #124]	@ (80077f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00e      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x80>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1e      	ldr	r2, [pc, #120]	@ (80077fc <HAL_TIM_Base_Start_IT+0xe0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d009      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x80>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1c      	ldr	r2, [pc, #112]	@ (8007800 <HAL_TIM_Base_Start_IT+0xe4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x80>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1b      	ldr	r2, [pc, #108]	@ (8007804 <HAL_TIM_Base_Start_IT+0xe8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d115      	bne.n	80077c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	4b19      	ldr	r3, [pc, #100]	@ (8007808 <HAL_TIM_Base_Start_IT+0xec>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b06      	cmp	r3, #6
 80077ac:	d015      	beq.n	80077da <HAL_TIM_Base_Start_IT+0xbe>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b4:	d011      	beq.n	80077da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0201 	orr.w	r2, r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c6:	e008      	b.n	80077da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	e000      	b.n	80077dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40010400 	.word	0x40010400
 8007800:	40014000 	.word	0x40014000
 8007804:	40001800 	.word	0x40001800
 8007808:	00010007 	.word	0x00010007

0800780c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d020      	beq.n	8007870 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01b      	beq.n	8007870 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f06f 0202 	mvn.w	r2, #2
 8007840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8e9 	bl	8007a2e <HAL_TIM_IC_CaptureCallback>
 800785c:	e005      	b.n	800786a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f8db 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f8ec 	bl	8007a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d020      	beq.n	80078bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0204 	mvn.w	r2, #4
 800788c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2202      	movs	r2, #2
 8007892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f8c3 	bl	8007a2e <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8b5 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f8c6 	bl	8007a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d020      	beq.n	8007908 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01b      	beq.n	8007908 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0208 	mvn.w	r2, #8
 80078d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2204      	movs	r2, #4
 80078de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f89d 	bl	8007a2e <HAL_TIM_IC_CaptureCallback>
 80078f4:	e005      	b.n	8007902 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f88f 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f8a0 	bl	8007a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	2b00      	cmp	r3, #0
 8007910:	d020      	beq.n	8007954 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01b      	beq.n	8007954 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0210 	mvn.w	r2, #16
 8007924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2208      	movs	r2, #8
 800792a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f877 	bl	8007a2e <HAL_TIM_IC_CaptureCallback>
 8007940:	e005      	b.n	800794e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f869 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f87a 	bl	8007a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0201 	mvn.w	r2, #1
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fe fd54 	bl	8006420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00c      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800799e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f919 	bl	8007bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00c      	beq.n	80079ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80079c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f911 	bl	8007bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00c      	beq.n	80079ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f834 	bl	8007a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00c      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d007      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f06f 0220 	mvn.w	r2, #32
 8007a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f8d9 	bl	8007bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a46      	ldr	r2, [pc, #280]	@ (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8a:	d00f      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a43      	ldr	r2, [pc, #268]	@ (8007b9c <TIM_Base_SetConfig+0x130>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a42      	ldr	r2, [pc, #264]	@ (8007ba0 <TIM_Base_SetConfig+0x134>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a41      	ldr	r2, [pc, #260]	@ (8007ba4 <TIM_Base_SetConfig+0x138>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a40      	ldr	r2, [pc, #256]	@ (8007ba8 <TIM_Base_SetConfig+0x13c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d108      	bne.n	8007abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a35      	ldr	r2, [pc, #212]	@ (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d02b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007acc:	d027      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a32      	ldr	r2, [pc, #200]	@ (8007b9c <TIM_Base_SetConfig+0x130>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d023      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a31      	ldr	r2, [pc, #196]	@ (8007ba0 <TIM_Base_SetConfig+0x134>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d01f      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a30      	ldr	r2, [pc, #192]	@ (8007ba4 <TIM_Base_SetConfig+0x138>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8007ba8 <TIM_Base_SetConfig+0x13c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d017      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2e      	ldr	r2, [pc, #184]	@ (8007bac <TIM_Base_SetConfig+0x140>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a2d      	ldr	r2, [pc, #180]	@ (8007bb0 <TIM_Base_SetConfig+0x144>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00f      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2c      	ldr	r2, [pc, #176]	@ (8007bb4 <TIM_Base_SetConfig+0x148>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a2b      	ldr	r2, [pc, #172]	@ (8007bb8 <TIM_Base_SetConfig+0x14c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d007      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a2a      	ldr	r2, [pc, #168]	@ (8007bbc <TIM_Base_SetConfig+0x150>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a29      	ldr	r2, [pc, #164]	@ (8007bc0 <TIM_Base_SetConfig+0x154>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d108      	bne.n	8007b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a10      	ldr	r2, [pc, #64]	@ (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_Base_SetConfig+0xf8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a12      	ldr	r2, [pc, #72]	@ (8007ba8 <TIM_Base_SetConfig+0x13c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d103      	bne.n	8007b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d105      	bne.n	8007b8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	f023 0201 	bic.w	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	611a      	str	r2, [r3, #16]
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40000c00 	.word	0x40000c00
 8007ba8:	40010400 	.word	0x40010400
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40014400 	.word	0x40014400
 8007bb4:	40014800 	.word	0x40014800
 8007bb8:	40001800 	.word	0x40001800
 8007bbc:	40001c00 	.word	0x40001c00
 8007bc0:	40002000 	.word	0x40002000

08007bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <memcmp>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	3901      	subs	r1, #1
 8007c04:	4402      	add	r2, r0
 8007c06:	4290      	cmp	r0, r2
 8007c08:	d101      	bne.n	8007c0e <memcmp+0xe>
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e005      	b.n	8007c1a <memcmp+0x1a>
 8007c0e:	7803      	ldrb	r3, [r0, #0]
 8007c10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d001      	beq.n	8007c1c <memcmp+0x1c>
 8007c18:	1b18      	subs	r0, r3, r4
 8007c1a:	bd10      	pop	{r4, pc}
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	e7f2      	b.n	8007c06 <memcmp+0x6>

08007c20 <memset>:
 8007c20:	4402      	add	r2, r0
 8007c22:	4603      	mov	r3, r0
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d100      	bne.n	8007c2a <memset+0xa>
 8007c28:	4770      	bx	lr
 8007c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c2e:	e7f9      	b.n	8007c24 <memset+0x4>

08007c30 <__libc_init_array>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4d0d      	ldr	r5, [pc, #52]	@ (8007c68 <__libc_init_array+0x38>)
 8007c34:	4c0d      	ldr	r4, [pc, #52]	@ (8007c6c <__libc_init_array+0x3c>)
 8007c36:	1b64      	subs	r4, r4, r5
 8007c38:	10a4      	asrs	r4, r4, #2
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	42a6      	cmp	r6, r4
 8007c3e:	d109      	bne.n	8007c54 <__libc_init_array+0x24>
 8007c40:	4d0b      	ldr	r5, [pc, #44]	@ (8007c70 <__libc_init_array+0x40>)
 8007c42:	4c0c      	ldr	r4, [pc, #48]	@ (8007c74 <__libc_init_array+0x44>)
 8007c44:	f000 f826 	bl	8007c94 <_init>
 8007c48:	1b64      	subs	r4, r4, r5
 8007c4a:	10a4      	asrs	r4, r4, #2
 8007c4c:	2600      	movs	r6, #0
 8007c4e:	42a6      	cmp	r6, r4
 8007c50:	d105      	bne.n	8007c5e <__libc_init_array+0x2e>
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c58:	4798      	blx	r3
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	e7ee      	b.n	8007c3c <__libc_init_array+0xc>
 8007c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c62:	4798      	blx	r3
 8007c64:	3601      	adds	r6, #1
 8007c66:	e7f2      	b.n	8007c4e <__libc_init_array+0x1e>
 8007c68:	08008104 	.word	0x08008104
 8007c6c:	08008104 	.word	0x08008104
 8007c70:	08008104 	.word	0x08008104
 8007c74:	08008108 	.word	0x08008108

08007c78 <memcpy>:
 8007c78:	440a      	add	r2, r1
 8007c7a:	4291      	cmp	r1, r2
 8007c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c80:	d100      	bne.n	8007c84 <memcpy+0xc>
 8007c82:	4770      	bx	lr
 8007c84:	b510      	push	{r4, lr}
 8007c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c8e:	4291      	cmp	r1, r2
 8007c90:	d1f9      	bne.n	8007c86 <memcpy+0xe>
 8007c92:	bd10      	pop	{r4, pc}

08007c94 <_init>:
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	bf00      	nop
 8007c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9a:	bc08      	pop	{r3}
 8007c9c:	469e      	mov	lr, r3
 8007c9e:	4770      	bx	lr

08007ca0 <_fini>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	bf00      	nop
 8007ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca6:	bc08      	pop	{r3}
 8007ca8:	469e      	mov	lr, r3
 8007caa:	4770      	bx	lr
