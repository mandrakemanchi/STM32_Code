
004_LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072cc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080074cc  080074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d4  080078d4  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  080078d4  080078d4  000088d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078dc  080078dc  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078dc  080078dc  000088dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078e0  080078e0  000088e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080078e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d094  20000018  080078fc  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d0ac  080078fc  000090ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143f8  00000000  00000000  00009046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a0  00000000  00000000  0001d43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  000204e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7d  00000000  00000000  00021908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004341  00000000  00000000  00022885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189a3  00000000  00000000  00026bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105896  00000000  00000000  0003f569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144dff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000542c  00000000  00000000  00144e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000010a  00000000  00000000  0014a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000018 	.word	0x20000018
 800021c:	00000000 	.word	0x00000000
 8000220:	080074b4 	.word	0x080074b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000001c 	.word	0x2000001c
 800023c:	080074b4 	.word	0x080074b4

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000ba80 	.word	0x2000ba80

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f103 0208 	add.w	r2, r3, #8
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f04f 32ff 	mov.w	r2, #4294967295
 80005dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f103 0208 	add.w	r2, r3, #8
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f103 0208 	add.w	r2, r3, #8
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d103      	bne.n	8000686 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e00c      	b.n	80006a0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3308      	adds	r3, #8
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e002      	b.n	8000694 <vListInsert+0x2e>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	429a      	cmp	r2, r3
 800069e:	d2f6      	bcs.n	800068e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	6892      	ldr	r2, [r2, #8]
 80006ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	6852      	ldr	r2, [r2, #4]
 80006f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	d103      	bne.n	800070c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d104      	bne.n	800074a <xQueueGenericReset+0x1e>
 8000740:	492a      	ldr	r1, [pc, #168]	@ (80007ec <xQueueGenericReset+0xc0>)
 8000742:	f240 100d 	movw	r0, #269	@ 0x10d
 8000746:	f005 faa9 	bl	8005c9c <vAssertCalled>

    taskENTER_CRITICAL();
 800074a:	f002 f8ad 	bl	80028a8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000756:	68f9      	ldr	r1, [r7, #12]
 8000758:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800075a:	fb01 f303 	mul.w	r3, r1, r3
 800075e:	441a      	add	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2200      	movs	r2, #0
 8000768:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077a:	3b01      	subs	r3, #1
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000780:	fb01 f303 	mul.w	r3, r1, r3
 8000784:	441a      	add	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	22ff      	movs	r2, #255	@ 0xff
 800078e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	22ff      	movs	r2, #255	@ 0xff
 8000796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d114      	bne.n	80007ca <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d01a      	beq.n	80007de <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3310      	adds	r3, #16
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f92d 	bl	8001a0c <xTaskRemoveFromEventList>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <xQueueGenericReset+0xc4>)
 80007ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	e009      	b.n	80007de <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3310      	adds	r3, #16
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fef8 	bl	80005c4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3324      	adds	r3, #36	@ 0x24
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fef3 	bl	80005c4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007de:	f002 f88d 	bl	80028fc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	080074cc 	.word	0x080074cc
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <xQueueGenericCreate+0x1e>
 8000808:	4921      	ldr	r1, [pc, #132]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800080a:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 800080e:	f005 fa45 	bl	8005c9c <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <xQueueGenericCreate+0x3c>
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d101      	bne.n	8000834 <xQueueGenericCreate+0x40>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <xQueueGenericCreate+0x42>
 8000834:	2300      	movs	r3, #0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d104      	bne.n	8000844 <xQueueGenericCreate+0x50>
 800083a:	4915      	ldr	r1, [pc, #84]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800083c:	f44f 70c7 	mov.w	r0, #398	@ 0x18e
 8000840:	f005 fa2c 	bl	8005c9c <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800084a:	d904      	bls.n	8000856 <xQueueGenericCreate+0x62>
 800084c:	4910      	ldr	r1, [pc, #64]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800084e:	f240 1091 	movw	r0, #401	@ 0x191
 8000852:	f005 fa23 	bl	8005c9c <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3350      	adds	r3, #80	@ 0x50
 800085a:	4618      	mov	r0, r3
 800085c:	f002 f93a 	bl	8002ad4 <pvPortMalloc>
 8000860:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3350      	adds	r3, #80	@ 0x50
 8000870:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4613      	mov	r3, r2
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f000 f808 	bl	8000894 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000884:	69bb      	ldr	r3, [r7, #24]
    }
 8000886:	4618      	mov	r0, r3
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	080074cc 	.word	0x080074cc

08000894 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e002      	b.n	80008b6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008c2:	2101      	movs	r1, #1
 80008c4:	69b8      	ldr	r0, [r7, #24]
 80008c6:	f7ff ff31 	bl	800072c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	2073      	movs	r0, #115	@ 0x73
 80008da:	f003 fee3 	bl	80046a4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	@ 0x30
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d104      	bne.n	800090e <xQueueGenericSend+0x26>
 8000904:	497e      	ldr	r1, [pc, #504]	@ (8000b00 <xQueueGenericSend+0x218>)
 8000906:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 800090a:	f005 f9c7 	bl	8005c9c <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <xQueueGenericSend+0x34>
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <xQueueGenericSend+0x38>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <xQueueGenericSend+0x3a>
 8000920:	2300      	movs	r3, #0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d104      	bne.n	8000930 <xQueueGenericSend+0x48>
 8000926:	4976      	ldr	r1, [pc, #472]	@ (8000b00 <xQueueGenericSend+0x218>)
 8000928:	f240 300d 	movw	r0, #781	@ 0x30d
 800092c:	f005 f9b6 	bl	8005c9c <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d103      	bne.n	800093e <xQueueGenericSend+0x56>
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800093a:	2b01      	cmp	r3, #1
 800093c:	d101      	bne.n	8000942 <xQueueGenericSend+0x5a>
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <xQueueGenericSend+0x5c>
 8000942:	2300      	movs	r3, #0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <xQueueGenericSend+0x6a>
 8000948:	496d      	ldr	r1, [pc, #436]	@ (8000b00 <xQueueGenericSend+0x218>)
 800094a:	f240 300e 	movw	r0, #782	@ 0x30e
 800094e:	f005 f9a5 	bl	8005c9c <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000952:	f001 f9ed 	bl	8001d30 <xTaskGetSchedulerState>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <xQueueGenericSend+0x7a>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <xQueueGenericSend+0x7e>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <xQueueGenericSend+0x80>
 8000966:	2300      	movs	r3, #0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d104      	bne.n	8000976 <xQueueGenericSend+0x8e>
 800096c:	4964      	ldr	r1, [pc, #400]	@ (8000b00 <xQueueGenericSend+0x218>)
 800096e:	f240 3011 	movw	r0, #785	@ 0x311
 8000972:	f005 f993 	bl	8005c9c <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000976:	f001 ff97 	bl	80028a8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000982:	429a      	cmp	r2, r3
 8000984:	d302      	bcc.n	800098c <xQueueGenericSend+0xa4>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d136      	bne.n	80009fa <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	4618      	mov	r0, r3
 8000990:	f004 fc16 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	460b      	mov	r3, r1
 800099e:	4601      	mov	r1, r0
 80009a0:	205a      	movs	r0, #90	@ 0x5a
 80009a2:	f003 fef5 	bl	8004790 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6a38      	ldr	r0, [r7, #32]
 80009ac:	f000 fa54 	bl	8000e58 <prvCopyDataToQueue>
 80009b0:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d010      	beq.n	80009dc <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	3324      	adds	r3, #36	@ 0x24
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 f824 	bl	8001a0c <xTaskRemoveFromEventList>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d013      	beq.n	80009f2 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <xQueueGenericSend+0x21c>)
 80009cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	f3bf 8f4f 	dsb	sy
 80009d6:	f3bf 8f6f 	isb	sy
 80009da:	e00a      	b.n	80009f2 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009e2:	4b48      	ldr	r3, [pc, #288]	@ (8000b04 <xQueueGenericSend+0x21c>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009f2:	f001 ff83 	bl	80028fc <vPortExitCritical>
                return pdPASS;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e07d      	b.n	8000af6 <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d110      	bne.n	8000a22 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a00:	f001 ff7c 	bl	80028fc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fbda 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	460b      	mov	r3, r1
 8000a16:	4601      	mov	r1, r0
 8000a18:	205a      	movs	r0, #90	@ 0x5a
 8000a1a:	f003 feb9 	bl	8004790 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e069      	b.n	8000af6 <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d106      	bne.n	8000a36 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 f84f 	bl	8001ad0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a36:	f001 ff61 	bl	80028fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a3a:	f000 fdb3 	bl	80015a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a3e:	f001 ff33 	bl	80028a8 <vPortEnterCritical>
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4e:	d103      	bne.n	8000a58 <xQueueGenericSend+0x170>
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d103      	bne.n	8000a6e <xQueueGenericSend+0x186>
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a6e:	f001 ff45 	bl	80028fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a72:	1d3a      	adds	r2, r7, #4
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f83e 	bl	8001afc <xTaskCheckForTimeOut>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d124      	bne.n	8000ad0 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a86:	6a38      	ldr	r0, [r7, #32]
 8000a88:	f000 fade 	bl	8001048 <prvIsQueueFull>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d018      	beq.n	8000ac4 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	3310      	adds	r3, #16
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 ff6c 	bl	8001978 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000aa0:	6a38      	ldr	r0, [r7, #32]
 8000aa2:	f000 fa69 	bl	8000f78 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aa6:	f000 fd8b 	bl	80015c0 <xTaskResumeAll>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f47f af62 	bne.w	8000976 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <xQueueGenericSend+0x21c>)
 8000ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	f3bf 8f4f 	dsb	sy
 8000abe:	f3bf 8f6f 	isb	sy
 8000ac2:	e758      	b.n	8000976 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ac4:	6a38      	ldr	r0, [r7, #32]
 8000ac6:	f000 fa57 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000aca:	f000 fd79 	bl	80015c0 <xTaskResumeAll>
 8000ace:	e752      	b.n	8000976 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ad0:	6a38      	ldr	r0, [r7, #32]
 8000ad2:	f000 fa51 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ad6:	f000 fd73 	bl	80015c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fb6f 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	460b      	mov	r3, r1
 8000aec:	4601      	mov	r1, r0
 8000aee:	205a      	movs	r0, #90	@ 0x5a
 8000af0:	f003 fe4e 	bl	8004790 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000af4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	080074cc 	.word	0x080074cc
 8000b04:	e000ed04 	.word	0xe000ed04

08000b08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8000b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d104      	bne.n	8000b2a <xQueueGenericSendFromISR+0x22>
 8000b20:	494c      	ldr	r1, [pc, #304]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b22:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8000b26:	f005 f8b9 	bl	8005c9c <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <xQueueGenericSendFromISR+0x30>
 8000b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <xQueueGenericSendFromISR+0x34>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <xQueueGenericSendFromISR+0x36>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <xQueueGenericSendFromISR+0x44>
 8000b42:	4944      	ldr	r1, [pc, #272]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b44:	f240 30e1 	movw	r0, #993	@ 0x3e1
 8000b48:	f005 f8a8 	bl	8005c9c <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d103      	bne.n	8000b5a <xQueueGenericSendFromISR+0x52>
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d101      	bne.n	8000b5e <xQueueGenericSendFromISR+0x56>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <xQueueGenericSendFromISR+0x58>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <xQueueGenericSendFromISR+0x66>
 8000b64:	493b      	ldr	r1, [pc, #236]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b66:	f240 30e2 	movw	r0, #994	@ 0x3e2
 8000b6a:	f005 f897 	bl	8005c9c <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b6e:	f001 ff7d 	bl	8002a6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b72:	f3ef 8211 	mrs	r2, BASEPRI
 8000b76:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000b7a:	f383 8811 	msr	BASEPRI, r3
 8000b7e:	f3bf 8f6f 	isb	sy
 8000b82:	f3bf 8f4f 	dsb	sy
 8000b86:	61ba      	str	r2, [r7, #24]
 8000b88:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d302      	bcc.n	8000ba0 <xQueueGenericSendFromISR+0x98>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d142      	bne.n	8000c26 <xQueueGenericSendFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bae:	61fb      	str	r3, [r7, #28]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 fb04 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000bb8:	4601      	mov	r1, r0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	2060      	movs	r0, #96	@ 0x60
 8000bc0:	f003 fd16 	bl	80045f0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bca:	f000 f945 	bl	8000e58 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bce:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd6:	d112      	bne.n	8000bfe <xQueueGenericSendFromISR+0xf6>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01f      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be2:	3324      	adds	r3, #36	@ 0x24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 ff11 	bl	8001a0c <xTaskRemoveFromEventList>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d017      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d014      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e010      	b.n	8000c20 <xQueueGenericSendFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000bfe:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c04:	d104      	bne.n	8000c10 <xQueueGenericSendFromISR+0x108>
 8000c06:	4913      	ldr	r1, [pc, #76]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000c08:	f240 406b 	movw	r0, #1131	@ 0x46b
 8000c0c:	f005 f846 	bl	8005c9c <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8000c24:	e00b      	b.n	8000c3e <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 fac9 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	2060      	movs	r0, #96	@ 0x60
 8000c36:	f003 fcdb 	bl	80045f0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c48:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	@ 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	080074cc 	.word	0x080074cc

08000c58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08d      	sub	sp, #52	@ 0x34
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <xQueueReceive+0x24>
 8000c72:	4977      	ldr	r1, [pc, #476]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000c74:	f240 502f 	movw	r0, #1327	@ 0x52f
 8000c78:	f005 f810 	bl	8005c9c <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <xQueueReceive+0x32>
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <xQueueReceive+0x36>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <xQueueReceive+0x38>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <xQueueReceive+0x46>
 8000c94:	496e      	ldr	r1, [pc, #440]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000c96:	f240 5033 	movw	r0, #1331	@ 0x533
 8000c9a:	f004 ffff 	bl	8005c9c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c9e:	f001 f847 	bl	8001d30 <xTaskGetSchedulerState>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <xQueueReceive+0x56>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <xQueueReceive+0x5a>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <xQueueReceive+0x5c>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <xQueueReceive+0x6a>
 8000cb8:	4965      	ldr	r1, [pc, #404]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000cba:	f44f 60a7 	mov.w	r0, #1336	@ 0x538
 8000cbe:	f004 ffed 	bl	8005c9c <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000cc2:	f001 fdf1 	bl	80028a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cca:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d02f      	beq.n	8000d32 <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	6a38      	ldr	r0, [r7, #32]
 8000cd6:	f000 f929 	bl	8000f2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 fa6f 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f004 fa6b 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000cea:	4602      	mov	r2, r0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	9100      	str	r1, [sp, #0]
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	205c      	movs	r0, #92	@ 0x5c
 8000cf6:	f003 fd4b 	bl	8004790 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00f      	beq.n	8000d2a <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	3310      	adds	r3, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fe7c 	bl	8001a0c <xTaskRemoveFromEventList>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <xQueueReceive+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e54 <xQueueReceive+0x1fc>)
 8000d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	f3bf 8f4f 	dsb	sy
 8000d26:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d2a:	f001 fde7 	bl	80028fc <vPortExitCritical>
                return pdPASS;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e08a      	b.n	8000e48 <xQueueReceive+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d113      	bne.n	8000d60 <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d38:	f001 fde0 	bl	80028fc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fa3e 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000d44:	4604      	mov	r4, r0
 8000d46:	2000      	movs	r0, #0
 8000d48:	f004 fa3a 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2101      	movs	r1, #1
 8000d52:	9100      	str	r1, [sp, #0]
 8000d54:	4621      	mov	r1, r4
 8000d56:	205c      	movs	r0, #92	@ 0x5c
 8000d58:	f003 fd1a 	bl	8004790 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e073      	b.n	8000e48 <xQueueReceive+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 feb0 	bl	8001ad0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d74:	f001 fdc2 	bl	80028fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d78:	f000 fc14 	bl	80015a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d7c:	f001 fd94 	bl	80028a8 <vPortEnterCritical>
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d103      	bne.n	8000d96 <xQueueReceive+0x13e>
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da2:	d103      	bne.n	8000dac <xQueueReceive+0x154>
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dac:	f001 fda6 	bl	80028fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000db0:	1d3a      	adds	r2, r7, #4
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fe9f 	bl	8001afc <xTaskCheckForTimeOut>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d124      	bne.n	8000e0e <xQueueReceive+0x1b6>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f000 f929 	bl	800101c <prvIsQueueEmpty>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d018      	beq.n	8000e02 <xQueueReceive+0x1aa>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	3324      	adds	r3, #36	@ 0x24
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fdcd 	bl	8001978 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000dde:	6a38      	ldr	r0, [r7, #32]
 8000de0:	f000 f8ca 	bl	8000f78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000de4:	f000 fbec 	bl	80015c0 <xTaskResumeAll>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f47f af69 	bne.w	8000cc2 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <xQueueReceive+0x1fc>)
 8000df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	e75f      	b.n	8000cc2 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e02:	6a38      	ldr	r0, [r7, #32]
 8000e04:	f000 f8b8 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e08:	f000 fbda 	bl	80015c0 <xTaskResumeAll>
 8000e0c:	e759      	b.n	8000cc2 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e0e:	6a38      	ldr	r0, [r7, #32]
 8000e10:	f000 f8b2 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e14:	f000 fbd4 	bl	80015c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e18:	6a38      	ldr	r0, [r7, #32]
 8000e1a:	f000 f8ff 	bl	800101c <prvIsQueueEmpty>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f43f af4e 	beq.w	8000cc2 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 f9c9 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	f004 f9c5 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 8000e36:	4602      	mov	r2, r0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	9100      	str	r1, [sp, #0]
 8000e3e:	4621      	mov	r1, r4
 8000e40:	205c      	movs	r0, #92	@ 0x5c
 8000e42:	f003 fca5 	bl	8004790 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e46:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	372c      	adds	r7, #44	@ 0x2c
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	080074cc 	.word	0x080074cc
 8000e54:	e000ed04 	.word	0xe000ed04

08000e58 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e6c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d14d      	bne.n	8000f1a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 ff72 	bl	8001d6c <xTaskPriorityDisinherit>
 8000e88:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	e043      	b.n	8000f1a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d119      	bne.n	8000ecc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6858      	ldr	r0, [r3, #4]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	f006 faf8 	bl	8007498 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	441a      	add	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d32b      	bcc.n	8000f1a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	e026      	b.n	8000f1a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	68d8      	ldr	r0, [r3, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	f006 fade 	bl	8007498 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	441a      	add	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	425b      	negs	r3, r3
 8000f02:	441a      	add	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d105      	bne.n	8000f1a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f22:	697b      	ldr	r3, [r7, #20]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d018      	beq.n	8000f70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	441a      	add	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d303      	bcc.n	8000f60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68d9      	ldr	r1, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	461a      	mov	r2, r3
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f006 fa94 	bl	8007498 <memcpy>
    }
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f80:	f001 fc92 	bl	80028a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f8c:	e011      	b.n	8000fb2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d012      	beq.n	8000fbc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3324      	adds	r3, #36	@ 0x24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd36 	bl	8001a0c <xTaskRemoveFromEventList>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000fa6:	f000 fe05 	bl	8001bb4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	dce9      	bgt.n	8000f8e <prvUnlockQueue+0x16>
 8000fba:	e000      	b.n	8000fbe <prvUnlockQueue+0x46>
                        break;
 8000fbc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	22ff      	movs	r2, #255	@ 0xff
 8000fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000fc6:	f001 fc99 	bl	80028fc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000fca:	f001 fc6d 	bl	80028a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000fd4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fd6:	e011      	b.n	8000ffc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d012      	beq.n	8001006 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fd11 	bl	8001a0c <xTaskRemoveFromEventList>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ff0:	f000 fde0 	bl	8001bb4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dce9      	bgt.n	8000fd8 <prvUnlockQueue+0x60>
 8001004:	e000      	b.n	8001008 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001006:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001010:	f001 fc74 	bl	80028fc <vPortExitCritical>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001024:	f001 fc40 	bl	80028a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001030:	2301      	movs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e001      	b.n	800103a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800103a:	f001 fc5f 	bl	80028fc <vPortExitCritical>

    return xReturn;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001050:	f001 fc2a 	bl	80028a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800105c:	429a      	cmp	r2, r3
 800105e:	d102      	bne.n	8001066 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e001      	b.n	800106a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800106a:	f001 fc47 	bl	80028fc <vPortExitCritical>

    return xReturn;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e01e      	b.n	80010c6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d115      	bne.n	80010c0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001094:	4910      	ldr	r1, [pc, #64]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 f887 	bl	80051c0 <SEGGER_SYSVIEW_ShrinkId>
 80010b2:	4601      	mov	r1, r0
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	2071      	movs	r0, #113	@ 0x71
 80010ba:	f003 fa99 	bl	80045f0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80010be:	e006      	b.n	80010ce <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	d9dd      	bls.n	8001088 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000034 	.word	0x20000034

080010dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80010ec:	f001 fbdc 	bl	80028a8 <vPortEnterCritical>
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d103      	bne.n	8001106 <vQueueWaitForMessageRestricted+0x2a>
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800110c:	b25b      	sxtb	r3, r3
 800110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001112:	d103      	bne.n	800111c <vQueueWaitForMessageRestricted+0x40>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800111c:	f001 fbee 	bl	80028fc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3324      	adds	r3, #36	@ 0x24
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fc41 	bl	80019b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff1e 	bl	8000f78 <prvUnlockQueue>
    }
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	@ 0x30
 8001148:	af04      	add	r7, sp, #16
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fcbb 	bl	8002ad4 <pvPortMalloc>
 800115e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00e      	beq.n	8001184 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001166:	2058      	movs	r0, #88	@ 0x58
 8001168:	f001 fcb4 	bl	8002ad4 <pvPortMalloc>
 800116c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
 800117a:	e005      	b.n	8001188 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f001 fd77 	bl	8002c70 <vPortFree>
 8001182:	e001      	b.n	8001188 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	2300      	movs	r3, #0
 8001192:	9303      	str	r3, [sp, #12]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 f80f 	bl	80011c8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011aa:	69f8      	ldr	r0, [r7, #28]
 80011ac:	f000 f89e 	bl	80012ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	e002      	b.n	80011bc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80011bc:	69bb      	ldr	r3, [r7, #24]
    }
 80011be:	4618      	mov	r0, r3
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80011d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	461a      	mov	r2, r3
 80011e0:	21a5      	movs	r1, #165	@ 0xa5
 80011e2:	f006 f92d 	bl	8007440 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80011f0:	440b      	add	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f023 0307 	bic.w	r3, r3, #7
 80011fe:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <prvInitialiseNewTask+0x4c>
 800120a:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <prvInitialiseNewTask+0x120>)
 800120c:	f240 3069 	movw	r0, #873	@ 0x369
 8001210:	f004 fd44 	bl	8005c9c <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01f      	beq.n	800125a <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e012      	b.n	8001246 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	4413      	add	r3, r2
 8001226:	7819      	ldrb	r1, [r3, #0]
 8001228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	4413      	add	r3, r2
 800122e:	3334      	adds	r3, #52	@ 0x34
 8001230:	460a      	mov	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d9e9      	bls.n	8001220 <prvInitialiseNewTask+0x58>
 800124c:	e000      	b.n	8001250 <prvInitialiseNewTask+0x88>
            {
                break;
 800124e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001258:	e003      	b.n	8001262 <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d901      	bls.n	800126c <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001268:	2304      	movs	r3, #4
 800126a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800126c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001274:	6a3a      	ldr	r2, [r7, #32]
 8001276:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	3304      	adds	r3, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f9be 	bl	8000604 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	3318      	adds	r3, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f9b9 	bl	8000604 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001296:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f1c3 0205 	rsb	r2, r3, #5
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80012a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012aa:	3350      	adds	r3, #80	@ 0x50
 80012ac:	2204      	movs	r2, #4
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 f8c5 	bl	8007440 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80012b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b8:	3354      	adds	r3, #84	@ 0x54
 80012ba:	2201      	movs	r2, #1
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 f8be 	bl	8007440 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	6938      	ldr	r0, [r7, #16]
 80012ca:	f001 f953 	bl	8002574 <pxPortInitialiseStack>
 80012ce:	4602      	mov	r2, r0
 80012d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08007538 	.word	0x08007538

080012ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012f4:	f001 fad8 	bl	80028a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012f8:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a3a      	ldr	r2, [pc, #232]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 8001300:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800130a:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001310:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d110      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001318:	f000 fc70 	bl	8001bfc <prvInitialiseTaskLists>
 800131c:	e00d      	b.n	800133a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800131e:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <prvAddNewTaskToReadyList+0x104>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001326:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	429a      	cmp	r2, r3
 8001332:	d802      	bhi.n	800133a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001334:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a2c      	ldr	r2, [pc, #176]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 8001342:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d016      	beq.n	8001380 <prvAddNewTaskToReadyList+0x94>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fe0d 	bl	8004f74 <SEGGER_SYSVIEW_OnTaskCreate>
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	461d      	mov	r5, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461c      	mov	r4, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	1ae3      	subs	r3, r4, r3
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	462b      	mov	r3, r5
 800137c:	f001 fe3c 	bl	8002ff8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fe7a 	bl	800507c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <prvAddNewTaskToReadyList+0x10c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	4a18      	ldr	r2, [pc, #96]	@ (80013f8 <prvAddNewTaskToReadyList+0x10c>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <prvAddNewTaskToReadyList+0x110>)
 80013a8:	441a      	add	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f7ff f934 	bl	800061e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80013b6:	f001 faa1 	bl	80028fc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <prvAddNewTaskToReadyList+0x104>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00e      	beq.n	80013e0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <prvAddNewTaskToReadyList+0x114>)
 80013d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	f3bf 8f4f 	dsb	sy
 80013dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}
 80013e8:	2000014c 	.word	0x2000014c
 80013ec:	20000074 	.word	0x20000074
 80013f0:	20000158 	.word	0x20000158
 80013f4:	20000168 	.word	0x20000168
 80013f8:	20000154 	.word	0x20000154
 80013fc:	20000078 	.word	0x20000078
 8001400:	e000ed04 	.word	0xe000ed04

08001404 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d104      	bne.n	8001422 <xTaskDelayUntil+0x1e>
 8001418:	492f      	ldr	r1, [pc, #188]	@ (80014d8 <xTaskDelayUntil+0xd4>)
 800141a:	f240 40f2 	movw	r0, #1266	@ 0x4f2
 800141e:	f004 fc3d 	bl	8005c9c <vAssertCalled>
        configASSERT( ( xTimeIncrement > 0U ) );
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d104      	bne.n	8001432 <xTaskDelayUntil+0x2e>
 8001428:	492b      	ldr	r1, [pc, #172]	@ (80014d8 <xTaskDelayUntil+0xd4>)
 800142a:	f240 40f3 	movw	r0, #1267	@ 0x4f3
 800142e:	f004 fc35 	bl	8005c9c <vAssertCalled>
        configASSERT( uxSchedulerSuspended == 0 );
 8001432:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <xTaskDelayUntil+0xd8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <xTaskDelayUntil+0x40>
 800143a:	4927      	ldr	r1, [pc, #156]	@ (80014d8 <xTaskDelayUntil+0xd4>)
 800143c:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 8001440:	f004 fc2c 	bl	8005c9c <vAssertCalled>

        vTaskSuspendAll();
 8001444:	f000 f8ae 	bl	80015a4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8001448:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <xTaskDelayUntil+0xdc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	429a      	cmp	r2, r3
 8001460:	d20b      	bcs.n	800147a <xTaskDelayUntil+0x76>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d211      	bcs.n	8001490 <xTaskDelayUntil+0x8c>
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d90d      	bls.n	8001490 <xTaskDelayUntil+0x8c>
                {
                    xShouldDelay = pdTRUE;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e00a      	b.n	8001490 <xTaskDelayUntil+0x8c>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d303      	bcc.n	800148c <xTaskDelayUntil+0x88>
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d901      	bls.n	8001490 <xTaskDelayUntil+0x8c>
                {
                    xShouldDelay = pdTRUE;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <xTaskDelayUntil+0xac>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 800149c:	2024      	movs	r0, #36	@ 0x24
 800149e:	f003 f84d 	bl	800453c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fcd4 	bl	8001e58 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80014b0:	f000 f886 	bl	80015c0 <xTaskResumeAll>
 80014b4:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d107      	bne.n	80014cc <xTaskDelayUntil+0xc8>
        {
            portYIELD_WITHIN_API();
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <xTaskDelayUntil+0xe0>)
 80014be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f3bf 8f4f 	dsb	sy
 80014c8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80014cc:	697b      	ldr	r3, [r7, #20]
    }
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	08007538 	.word	0x08007538
 80014dc:	20000174 	.word	0x20000174
 80014e0:	20000150 	.word	0x20000150
 80014e4:	e000ed04 	.word	0xe000ed04

080014e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80014ee:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <vTaskStartScheduler+0x98>)
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	2282      	movs	r2, #130	@ 0x82
 80014fa:	4922      	ldr	r1, [pc, #136]	@ (8001584 <vTaskStartScheduler+0x9c>)
 80014fc:	4822      	ldr	r0, [pc, #136]	@ (8001588 <vTaskStartScheduler+0xa0>)
 80014fe:	f7ff fe21 	bl	8001144 <xTaskCreate>
 8001502:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800150a:	f000 fd1d 	bl	8001f48 <xTimerCreateTimerTask>
 800150e:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d124      	bne.n	8001560 <vTaskStartScheduler+0x78>
        __asm volatile
 8001516:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800151a:	f383 8811 	msr	BASEPRI, r3
 800151e:	f3bf 8f6f 	isb	sy
 8001522:	f3bf 8f4f 	dsb	sy
 8001526:	603b      	str	r3, [r7, #0]
    }
 8001528:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <vTaskStartScheduler+0xa4>)
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <vTaskStartScheduler+0xa8>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001538:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <vTaskStartScheduler+0xac>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <vTaskStartScheduler+0xb0>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <vTaskStartScheduler+0x98>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d102      	bne.n	8001550 <vTaskStartScheduler+0x68>
 800154a:	f003 fcf7 	bl	8004f3c <SEGGER_SYSVIEW_OnIdle>
 800154e:	e004      	b.n	800155a <vTaskStartScheduler+0x72>
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <vTaskStartScheduler+0xb0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fd4f 	bl	8004ff8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800155a:	f001 f893 	bl	8002684 <xPortStartScheduler>
 800155e:	e008      	b.n	8001572 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	d104      	bne.n	8001572 <vTaskStartScheduler+0x8a>
 8001568:	490c      	ldr	r1, [pc, #48]	@ (800159c <vTaskStartScheduler+0xb4>)
 800156a:	f640 0041 	movw	r0, #2113	@ 0x841
 800156e:	f004 fb95 	bl	8005c9c <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <vTaskStartScheduler+0xb8>)
 8001574:	681b      	ldr	r3, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000170 	.word	0x20000170
 8001584:	080075a4 	.word	0x080075a4
 8001588:	08001bcd 	.word	0x08001bcd
 800158c:	2000016c 	.word	0x2000016c
 8001590:	20000158 	.word	0x20000158
 8001594:	20000150 	.word	0x20000150
 8001598:	20000074 	.word	0x20000074
 800159c:	08007538 	.word	0x08007538
 80015a0:	20000000 	.word	0x20000000

080015a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <vTaskSuspendAll+0x18>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a03      	ldr	r2, [pc, #12]	@ (80015bc <vTaskSuspendAll+0x18>)
 80015b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	20000174 	.word	0x20000174

080015c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80015ce:	4b40      	ldr	r3, [pc, #256]	@ (80016d0 <xTaskResumeAll+0x110>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <xTaskResumeAll+0x20>
 80015d6:	493f      	ldr	r1, [pc, #252]	@ (80016d4 <xTaskResumeAll+0x114>)
 80015d8:	f640 00b4 	movw	r0, #2228	@ 0x8b4
 80015dc:	f004 fb5e 	bl	8005c9c <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80015e0:	f001 f962 	bl	80028a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80015e4:	4b3a      	ldr	r3, [pc, #232]	@ (80016d0 <xTaskResumeAll+0x110>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a39      	ldr	r2, [pc, #228]	@ (80016d0 <xTaskResumeAll+0x110>)
 80015ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015ee:	4b38      	ldr	r3, [pc, #224]	@ (80016d0 <xTaskResumeAll+0x110>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d165      	bne.n	80016c2 <xTaskResumeAll+0x102>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015f6:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <xTaskResumeAll+0x118>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d061      	beq.n	80016c2 <xTaskResumeAll+0x102>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015fe:	e032      	b.n	8001666 <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001600:	4b36      	ldr	r3, [pc, #216]	@ (80016dc <xTaskResumeAll+0x11c>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3318      	adds	r3, #24
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f863 	bl	80006d8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3304      	adds	r3, #4
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f85e 	bl	80006d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fd2c 	bl	800507c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001628:	2201      	movs	r2, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	4b2c      	ldr	r3, [pc, #176]	@ (80016e0 <xTaskResumeAll+0x120>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4313      	orrs	r3, r2
 8001632:	4a2b      	ldr	r2, [pc, #172]	@ (80016e0 <xTaskResumeAll+0x120>)
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4a28      	ldr	r2, [pc, #160]	@ (80016e4 <xTaskResumeAll+0x124>)
 8001644:	441a      	add	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3304      	adds	r3, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f7fe ffe6 	bl	800061e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <xTaskResumeAll+0x128>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	429a      	cmp	r2, r3
 800165e:	d302      	bcc.n	8001666 <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <xTaskResumeAll+0x12c>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <xTaskResumeAll+0x11c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1c8      	bne.n	8001600 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001674:	f000 fb40 	bl	8001cf8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <xTaskResumeAll+0x130>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d010      	beq.n	80016a6 <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001684:	f000 f85a 	bl	800173c <xTaskIncrementTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <xTaskResumeAll+0x12c>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f1      	bne.n	8001684 <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <xTaskResumeAll+0x130>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <xTaskResumeAll+0x12c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <xTaskResumeAll+0x102>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <xTaskResumeAll+0x134>)
 80016b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f3bf 8f4f 	dsb	sy
 80016be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80016c2:	f001 f91b 	bl	80028fc <vPortExitCritical>

    return xAlreadyYielded;
 80016c6:	68bb      	ldr	r3, [r7, #8]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000174 	.word	0x20000174
 80016d4:	08007538 	.word	0x08007538
 80016d8:	2000014c 	.word	0x2000014c
 80016dc:	2000010c 	.word	0x2000010c
 80016e0:	20000154 	.word	0x20000154
 80016e4:	20000078 	.word	0x20000078
 80016e8:	20000074 	.word	0x20000074
 80016ec:	20000160 	.word	0x20000160
 80016f0:	2000015c 	.word	0x2000015c
 80016f4:	e000ed04 	.word	0xe000ed04

080016f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80016fe:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <xTaskGetTickCount+0x1c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000150 	.word	0x20000150

08001718 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800171e:	f001 f9a5 	bl	8002a6c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <xTaskGetTickCountFromISR+0x20>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800172c:	683b      	ldr	r3, [r7, #0]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000150 	.word	0x20000150

0800173c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001746:	4b4d      	ldr	r3, [pc, #308]	@ (800187c <xTaskIncrementTick+0x140>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 808c 	bne.w	8001868 <xTaskIncrementTick+0x12c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001750:	4b4b      	ldr	r3, [pc, #300]	@ (8001880 <xTaskIncrementTick+0x144>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001758:	4a49      	ldr	r2, [pc, #292]	@ (8001880 <xTaskIncrementTick+0x144>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11a      	bne.n	800179a <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8001764:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <xTaskIncrementTick+0x148>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <xTaskIncrementTick+0x3c>
 800176e:	4946      	ldr	r1, [pc, #280]	@ (8001888 <xTaskIncrementTick+0x14c>)
 8001770:	f640 20c7 	movw	r0, #2759	@ 0xac7
 8001774:	f004 fa92 	bl	8005c9c <vAssertCalled>
 8001778:	4b42      	ldr	r3, [pc, #264]	@ (8001884 <xTaskIncrementTick+0x148>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b43      	ldr	r3, [pc, #268]	@ (800188c <xTaskIncrementTick+0x150>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a40      	ldr	r2, [pc, #256]	@ (8001884 <xTaskIncrementTick+0x148>)
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4a41      	ldr	r2, [pc, #260]	@ (800188c <xTaskIncrementTick+0x150>)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b40      	ldr	r3, [pc, #256]	@ (8001890 <xTaskIncrementTick+0x154>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a3f      	ldr	r2, [pc, #252]	@ (8001890 <xTaskIncrementTick+0x154>)
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	f000 faaf 	bl	8001cf8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800179a:	4b3e      	ldr	r3, [pc, #248]	@ (8001894 <xTaskIncrementTick+0x158>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d34c      	bcc.n	800183e <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017a4:	4b37      	ldr	r3, [pc, #220]	@ (8001884 <xTaskIncrementTick+0x148>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d104      	bne.n	80017b8 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017ae:	4b39      	ldr	r3, [pc, #228]	@ (8001894 <xTaskIncrementTick+0x158>)
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	601a      	str	r2, [r3, #0]
                    break;
 80017b6:	e042      	b.n	800183e <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017b8:	4b32      	ldr	r3, [pc, #200]	@ (8001884 <xTaskIncrementTick+0x148>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d203      	bcs.n	80017d8 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80017d0:	4a30      	ldr	r2, [pc, #192]	@ (8001894 <xTaskIncrementTick+0x158>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80017d6:	e032      	b.n	800183e <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3304      	adds	r3, #4
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ff7b 	bl	80006d8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3318      	adds	r3, #24
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe ff72 	bl	80006d8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 fc40 	bl	800507c <SEGGER_SYSVIEW_OnTaskStartReady>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	2201      	movs	r2, #1
 8001802:	409a      	lsls	r2, r3
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <xTaskIncrementTick+0x15c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4313      	orrs	r3, r2
 800180a:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <xTaskIncrementTick+0x15c>)
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4a20      	ldr	r2, [pc, #128]	@ (800189c <xTaskIncrementTick+0x160>)
 800181c:	441a      	add	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3304      	adds	r3, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4610      	mov	r0, r2
 8001826:	f7fe fefa 	bl	800061e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <xTaskIncrementTick+0x164>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	429a      	cmp	r2, r3
 8001836:	d3b5      	bcc.n	80017a4 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8001838:	2301      	movs	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800183c:	e7b2      	b.n	80017a4 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800183e:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <xTaskIncrementTick+0x164>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001844:	4915      	ldr	r1, [pc, #84]	@ (800189c <xTaskIncrementTick+0x160>)
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d901      	bls.n	800185a <xTaskIncrementTick+0x11e>
                {
                    xSwitchRequired = pdTRUE;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <xTaskIncrementTick+0x168>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <xTaskIncrementTick+0x136>
                {
                    xSwitchRequired = pdTRUE;
 8001862:	2301      	movs	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e004      	b.n	8001872 <xTaskIncrementTick+0x136>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <xTaskIncrementTick+0x16c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a0e      	ldr	r2, [pc, #56]	@ (80018a8 <xTaskIncrementTick+0x16c>)
 8001870:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001872:	697b      	ldr	r3, [r7, #20]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000174 	.word	0x20000174
 8001880:	20000150 	.word	0x20000150
 8001884:	20000104 	.word	0x20000104
 8001888:	08007538 	.word	0x08007538
 800188c:	20000108 	.word	0x20000108
 8001890:	20000164 	.word	0x20000164
 8001894:	2000016c 	.word	0x2000016c
 8001898:	20000154 	.word	0x20000154
 800189c:	20000078 	.word	0x20000078
 80018a0:	20000074 	.word	0x20000074
 80018a4:	20000160 	.word	0x20000160
 80018a8:	2000015c 	.word	0x2000015c

080018ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <vTaskSwitchContext+0xb0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80018ba:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <vTaskSwitchContext+0xb4>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80018c0:	e047      	b.n	8001952 <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <vTaskSwitchContext+0xb4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018c8:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <vTaskSwitchContext+0xb8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	f1c3 031f 	rsb	r3, r3, #31
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4922      	ldr	r1, [pc, #136]	@ (8001968 <vTaskSwitchContext+0xbc>)
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <vTaskSwitchContext+0x50>
 80018f2:	491e      	ldr	r1, [pc, #120]	@ (800196c <vTaskSwitchContext+0xc0>)
 80018f4:	f640 4002 	movw	r0, #3074	@ 0xc02
 80018f8:	f004 f9d0 	bl	8005c9c <vAssertCalled>
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4a18      	ldr	r2, [pc, #96]	@ (8001968 <vTaskSwitchContext+0xbc>)
 8001908:	4413      	add	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	3308      	adds	r3, #8
 800191e:	429a      	cmp	r2, r3
 8001920:	d104      	bne.n	800192c <vTaskSwitchContext+0x80>
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <vTaskSwitchContext+0xc4>)
 8001934:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <vTaskSwitchContext+0xc4>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <vTaskSwitchContext+0xc8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d102      	bne.n	8001948 <vTaskSwitchContext+0x9c>
 8001942:	f003 fafb 	bl	8004f3c <SEGGER_SYSVIEW_OnIdle>
}
 8001946:	e004      	b.n	8001952 <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <vTaskSwitchContext+0xc4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fb53 	bl	8004ff8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000174 	.word	0x20000174
 8001960:	20000160 	.word	0x20000160
 8001964:	20000154 	.word	0x20000154
 8001968:	20000078 	.word	0x20000078
 800196c:	08007538 	.word	0x08007538
 8001970:	20000074 	.word	0x20000074
 8001974:	20000170 	.word	0x20000170

08001978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d104      	bne.n	8001992 <vTaskPlaceOnEventList+0x1a>
 8001988:	4909      	ldr	r1, [pc, #36]	@ (80019b0 <vTaskPlaceOnEventList+0x38>)
 800198a:	f640 401c 	movw	r0, #3100	@ 0xc1c
 800198e:	f004 f985 	bl	8005c9c <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <vTaskPlaceOnEventList+0x3c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3318      	adds	r3, #24
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7fe fe63 	bl	8000666 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80019a0:	2101      	movs	r1, #1
 80019a2:	6838      	ldr	r0, [r7, #0]
 80019a4:	f000 fa58 	bl	8001e58 <prvAddCurrentTaskToDelayedList>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	08007538 	.word	0x08007538
 80019b4:	20000074 	.word	0x20000074

080019b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <vTaskPlaceOnEventListRestricted+0x1c>
 80019ca:	490e      	ldr	r1, [pc, #56]	@ (8001a04 <vTaskPlaceOnEventListRestricted+0x4c>)
 80019cc:	f640 404b 	movw	r0, #3147	@ 0xc4b
 80019d0:	f004 f964 	bl	8005c9c <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <vTaskPlaceOnEventListRestricted+0x50>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3318      	adds	r3, #24
 80019da:	4619      	mov	r1, r3
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7fe fe1e 	bl	800061e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80019ee:	2024      	movs	r0, #36	@ 0x24
 80019f0:	f002 fda4 	bl	800453c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f000 fa2e 	bl	8001e58 <prvAddCurrentTaskToDelayedList>
    }
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	08007538 	.word	0x08007538
 8001a08:	20000074 	.word	0x20000074

08001a0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d104      	bne.n	8001a2c <xTaskRemoveFromEventList+0x20>
 8001a22:	4924      	ldr	r1, [pc, #144]	@ (8001ab4 <xTaskRemoveFromEventList+0xa8>)
 8001a24:	f640 407b 	movw	r0, #3195	@ 0xc7b
 8001a28:	f004 f938 	bl	8005c9c <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3318      	adds	r3, #24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fe51 	bl	80006d8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <xTaskRemoveFromEventList+0xac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d120      	bne.n	8001a80 <xTaskRemoveFromEventList+0x74>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3304      	adds	r3, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fe48 	bl	80006d8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fb16 	bl	800507c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	2201      	movs	r2, #1
 8001a56:	409a      	lsls	r2, r3
 8001a58:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <xTaskRemoveFromEventList+0xb0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	4a17      	ldr	r2, [pc, #92]	@ (8001abc <xTaskRemoveFromEventList+0xb0>)
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <xTaskRemoveFromEventList+0xb4>)
 8001a70:	441a      	add	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3304      	adds	r3, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f7fe fdd0 	bl	800061e <vListInsertEnd>
 8001a7e:	e005      	b.n	8001a8c <xTaskRemoveFromEventList+0x80>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3318      	adds	r3, #24
 8001a84:	4619      	mov	r1, r3
 8001a86:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <xTaskRemoveFromEventList+0xb8>)
 8001a88:	f7fe fdc9 	bl	800061e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <xTaskRemoveFromEventList+0xbc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d905      	bls.n	8001aa6 <xTaskRemoveFromEventList+0x9a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <xTaskRemoveFromEventList+0xc0>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e001      	b.n	8001aaa <xTaskRemoveFromEventList+0x9e>
    }
    else
    {
        xReturn = pdFALSE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	08007538 	.word	0x08007538
 8001ab8:	20000174 	.word	0x20000174
 8001abc:	20000154 	.word	0x20000154
 8001ac0:	20000078 	.word	0x20000078
 8001ac4:	2000010c 	.word	0x2000010c
 8001ac8:	20000074 	.word	0x20000074
 8001acc:	20000160 	.word	0x20000160

08001ad0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <vTaskInternalSetTimeOutState+0x24>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <vTaskInternalSetTimeOutState+0x28>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20000164 	.word	0x20000164
 8001af8:	20000150 	.word	0x20000150

08001afc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d104      	bne.n	8001b16 <xTaskCheckForTimeOut+0x1a>
 8001b0c:	4926      	ldr	r1, [pc, #152]	@ (8001ba8 <xTaskCheckForTimeOut+0xac>)
 8001b0e:	f640 40f6 	movw	r0, #3318	@ 0xcf6
 8001b12:	f004 f8c3 	bl	8005c9c <vAssertCalled>
    configASSERT( pxTicksToWait );
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d104      	bne.n	8001b26 <xTaskCheckForTimeOut+0x2a>
 8001b1c:	4922      	ldr	r1, [pc, #136]	@ (8001ba8 <xTaskCheckForTimeOut+0xac>)
 8001b1e:	f640 40f7 	movw	r0, #3319	@ 0xcf7
 8001b22:	f004 f8bb 	bl	8005c9c <vAssertCalled>

    taskENTER_CRITICAL();
 8001b26:	f000 febf 	bl	80028a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b2a:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <xTaskCheckForTimeOut+0xb0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b42:	d102      	bne.n	8001b4a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e026      	b.n	8001b98 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <xTaskCheckForTimeOut+0xb4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d00a      	beq.n	8001b6c <xTaskCheckForTimeOut+0x70>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d305      	bcc.n	8001b6c <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e015      	b.n	8001b98 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d20b      	bcs.n	8001b8e <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad2      	subs	r2, r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa4 	bl	8001ad0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e004      	b.n	8001b98 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001b98:	f000 feb0 	bl	80028fc <vPortExitCritical>

    return xReturn;
 8001b9c:	697b      	ldr	r3, [r7, #20]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	08007538 	.word	0x08007538
 8001bac:	20000150 	.word	0x20000150
 8001bb0:	20000164 	.word	0x20000164

08001bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <vTaskMissedYield+0x14>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	20000160 	.word	0x20000160

08001bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001bd4:	f000 f852 	bl	8001c7c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <prvIdleTask+0x28>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d9f9      	bls.n	8001bd4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <prvIdleTask+0x2c>)
 8001be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001bf0:	e7f0      	b.n	8001bd4 <prvIdleTask+0x8>
 8001bf2:	bf00      	nop
 8001bf4:	20000078 	.word	0x20000078
 8001bf8:	e000ed04 	.word	0xe000ed04

08001bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	e00c      	b.n	8001c22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <prvInitialiseTaskLists+0x60>)
 8001c14:	4413      	add	r3, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fcd4 	bl	80005c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d9ef      	bls.n	8001c08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c28:	480d      	ldr	r0, [pc, #52]	@ (8001c60 <prvInitialiseTaskLists+0x64>)
 8001c2a:	f7fe fccb 	bl	80005c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c2e:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <prvInitialiseTaskLists+0x68>)
 8001c30:	f7fe fcc8 	bl	80005c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c34:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <prvInitialiseTaskLists+0x6c>)
 8001c36:	f7fe fcc5 	bl	80005c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001c3a:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <prvInitialiseTaskLists+0x70>)
 8001c3c:	f7fe fcc2 	bl	80005c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c40:	480b      	ldr	r0, [pc, #44]	@ (8001c70 <prvInitialiseTaskLists+0x74>)
 8001c42:	f7fe fcbf 	bl	80005c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <prvInitialiseTaskLists+0x78>)
 8001c48:	4a05      	ldr	r2, [pc, #20]	@ (8001c60 <prvInitialiseTaskLists+0x64>)
 8001c4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <prvInitialiseTaskLists+0x7c>)
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <prvInitialiseTaskLists+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000078 	.word	0x20000078
 8001c60:	200000dc 	.word	0x200000dc
 8001c64:	200000f0 	.word	0x200000f0
 8001c68:	2000010c 	.word	0x2000010c
 8001c6c:	20000120 	.word	0x20000120
 8001c70:	20000138 	.word	0x20000138
 8001c74:	20000104 	.word	0x20000104
 8001c78:	20000108 	.word	0x20000108

08001c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c82:	e019      	b.n	8001cb8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001c84:	f000 fe10 	bl	80028a8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <prvCheckTasksWaitingTermination+0x50>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3304      	adds	r3, #4
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fd1f 	bl	80006d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <prvCheckTasksWaitingTermination+0x54>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <prvCheckTasksWaitingTermination+0x54>)
 8001ca2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <prvCheckTasksWaitingTermination+0x58>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <prvCheckTasksWaitingTermination+0x58>)
 8001cac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001cae:	f000 fe25 	bl	80028fc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f810 	bl	8001cd8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <prvCheckTasksWaitingTermination+0x58>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e1      	bne.n	8001c84 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000120 	.word	0x20000120
 8001cd0:	2000014c 	.word	0x2000014c
 8001cd4:	20000134 	.word	0x20000134

08001cd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 ffc3 	bl	8002c70 <vPortFree>
                vPortFree( pxTCB );
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 ffc0 	bl	8002c70 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <prvResetNextTaskUnblockTime+0x30>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d104      	bne.n	8001d10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <prvResetNextTaskUnblockTime+0x34>)
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d0e:	e005      	b.n	8001d1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <prvResetNextTaskUnblockTime+0x30>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <prvResetNextTaskUnblockTime+0x34>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000104 	.word	0x20000104
 8001d2c:	2000016c 	.word	0x2000016c

08001d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001d36:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <xTaskGetSchedulerState+0x34>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	e008      	b.n	8001d56 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <xTaskGetSchedulerState+0x38>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	e001      	b.n	8001d56 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001d56:	687b      	ldr	r3, [r7, #4]
    }
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	20000158 	.word	0x20000158
 8001d68:	20000174 	.word	0x20000174

08001d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d05c      	beq.n	8001e3c <xTaskPriorityDisinherit+0xd0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d82:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <xTaskPriorityDisinherit+0xdc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d004      	beq.n	8001d96 <xTaskPriorityDisinherit+0x2a>
 8001d8c:	492f      	ldr	r1, [pc, #188]	@ (8001e4c <xTaskPriorityDisinherit+0xe0>)
 8001d8e:	f241 0056 	movw	r0, #4182	@ 0x1056
 8001d92:	f003 ff83 	bl	8005c9c <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d104      	bne.n	8001da8 <xTaskPriorityDisinherit+0x3c>
 8001d9e:	492b      	ldr	r1, [pc, #172]	@ (8001e4c <xTaskPriorityDisinherit+0xe0>)
 8001da0:	f241 0057 	movw	r0, #4183	@ 0x1057
 8001da4:	f003 ff7a 	bl	8005c9c <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d03e      	beq.n	8001e3c <xTaskPriorityDisinherit+0xd0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d13a      	bne.n	8001e3c <xTaskPriorityDisinherit+0xd0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fc84 	bl	80006d8 <uxListRemove>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10a      	bne.n	8001dec <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	2201      	movs	r2, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <xTaskPriorityDisinherit+0xe4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4013      	ands	r3, r2
 8001de8:	4a19      	ldr	r2, [pc, #100]	@ (8001e50 <xTaskPriorityDisinherit+0xe4>)
 8001dea:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4619      	mov	r1, r3
 8001df0:	204a      	movs	r0, #74	@ 0x4a
 8001df2:	f002 fbc1 	bl	8004578 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	f1c3 0205 	rsb	r2, r3, #5
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0e:	2201      	movs	r2, #1
 8001e10:	409a      	lsls	r2, r3
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <xTaskPriorityDisinherit+0xe4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <xTaskPriorityDisinherit+0xe4>)
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <xTaskPriorityDisinherit+0xe8>)
 8001e2a:	441a      	add	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7fe fbf3 	bl	800061e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    }
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000074 	.word	0x20000074
 8001e4c:	08007538 	.word	0x08007538
 8001e50:	20000154 	.word	0x20000154
 8001e54:	20000078 	.word	0x20000078

08001e58 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001e62:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <prvAddCurrentTaskToDelayedList+0xd4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e68:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fc32 	bl	80006d8 <uxListRemove>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10b      	bne.n	8001e92 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	2201      	movs	r2, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	4b2a      	ldr	r3, [pc, #168]	@ (8001f34 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	4a29      	ldr	r2, [pc, #164]	@ (8001f34 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001e90:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d110      	bne.n	8001ebc <prvAddCurrentTaskToDelayedList+0x64>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00d      	beq.n	8001ebc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001ea0:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	211b      	movs	r1, #27
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 f92a 	bl	8005100 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001eac:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4820      	ldr	r0, [pc, #128]	@ (8001f38 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001eb6:	f7fe fbb2 	bl	800061e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001eba:	e032      	b.n	8001f22 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d20f      	bcs.n	8001ef4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 f910 	bl	8005100 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ee0:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4610      	mov	r0, r2
 8001eee:	f7fe fbba 	bl	8000666 <vListInsert>
}
 8001ef2:	e016      	b.n	8001f22 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2104      	movs	r1, #4
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f900 	bl	8005100 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	f7fe fbaa 	bl	8000666 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <prvAddCurrentTaskToDelayedList+0xec>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d202      	bcs.n	8001f22 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001f1c:	4a09      	ldr	r2, [pc, #36]	@ (8001f44 <prvAddCurrentTaskToDelayedList+0xec>)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6013      	str	r3, [r2, #0]
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000150 	.word	0x20000150
 8001f30:	20000074 	.word	0x20000074
 8001f34:	20000154 	.word	0x20000154
 8001f38:	20000138 	.word	0x20000138
 8001f3c:	20000108 	.word	0x20000108
 8001f40:	20000104 	.word	0x20000104
 8001f44:	2000016c 	.word	0x2000016c

08001f48 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001f52:	f000 fad9 	bl	8002508 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <xTimerCreateTimerTask+0x48>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <xTimerCreateTimerTask+0x4c>)
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	2304      	movs	r3, #4
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2300      	movs	r3, #0
 8001f68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f6c:	490a      	ldr	r1, [pc, #40]	@ (8001f98 <xTimerCreateTimerTask+0x50>)
 8001f6e:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <xTimerCreateTimerTask+0x54>)
 8001f70:	f7ff f8e8 	bl	8001144 <xTaskCreate>
 8001f74:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d104      	bne.n	8001f86 <xTimerCreateTimerTask+0x3e>
 8001f7c:	4908      	ldr	r1, [pc, #32]	@ (8001fa0 <xTimerCreateTimerTask+0x58>)
 8001f7e:	f240 100d 	movw	r0, #269	@ 0x10d
 8001f82:	f003 fe8b 	bl	8005c9c <vAssertCalled>
        return xReturn;
 8001f86:	687b      	ldr	r3, [r7, #4]
    }
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200001a8 	.word	0x200001a8
 8001f94:	200001ac 	.word	0x200001ac
 8001f98:	080075bc 	.word	0x080075bc
 8001f9c:	080020cd 	.word	0x080020cd
 8001fa0:	080075c4 	.word	0x080075c4

08001fa4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <xTimerGenericCommand+0x22>
 8001fbc:	491c      	ldr	r1, [pc, #112]	@ (8002030 <xTimerGenericCommand+0x8c>)
 8001fbe:	f44f 70c1 	mov.w	r0, #386	@ 0x182
 8001fc2:	f003 fe6b 	bl	8005c9c <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <xTimerGenericCommand+0x90>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d02a      	beq.n	8002024 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	dc18      	bgt.n	8002012 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001fe0:	f7ff fea6 	bl	8001d30 <xTaskGetSchedulerState>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d109      	bne.n	8001ffe <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <xTimerGenericCommand+0x90>)
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	f107 0114 	add.w	r1, r7, #20
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ff6:	f7fe fc77 	bl	80008e8 <xQueueGenericSend>
 8001ffa:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ffc:	e012      	b.n	8002024 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <xTimerGenericCommand+0x90>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	f107 0114 	add.w	r1, r7, #20
 8002006:	2300      	movs	r3, #0
 8002008:	2200      	movs	r2, #0
 800200a:	f7fe fc6d 	bl	80008e8 <xQueueGenericSend>
 800200e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002010:	e008      	b.n	8002024 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <xTimerGenericCommand+0x90>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f107 0114 	add.w	r1, r7, #20
 800201a:	2300      	movs	r3, #0
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	f7fe fd73 	bl	8000b08 <xQueueGenericSendFromISR>
 8002022:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002026:	4618      	mov	r0, r3
 8002028:	3728      	adds	r7, #40	@ 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	080075c4 	.word	0x080075c4
 8002034:	200001a8 	.word	0x200001a8

08002038 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af02      	add	r7, sp, #8
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <prvProcessExpiredTimer+0x8c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3304      	adds	r3, #4
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fb41 	bl	80006d8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01d      	beq.n	80020a0 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	18d1      	adds	r1, r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f8d1 	bl	8002218 <prvInsertTimerInActiveList>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01a      	beq.n	80020b2 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800207c:	2300      	movs	r3, #0
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2300      	movs	r3, #0
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	2100      	movs	r1, #0
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff ff8c 	bl	8001fa4 <xTimerGenericCommand>
 800208c:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10e      	bne.n	80020b2 <prvProcessExpiredTimer+0x7a>
 8002094:	490c      	ldr	r1, [pc, #48]	@ (80020c8 <prvProcessExpiredTimer+0x90>)
 8002096:	f44f 7005 	mov.w	r0, #532	@ 0x214
 800209a:	f003 fdff 	bl	8005c9c <vAssertCalled>
 800209e:	e008      	b.n	80020b2 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	4798      	blx	r3
    }
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200001a0 	.word	0x200001a0
 80020c8:	080075c4 	.word	0x080075c4

080020cc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80020d4:	f107 0308 	add.w	r3, r7, #8
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f859 	bl	8002190 <prvGetNextExpireTime>
 80020de:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4619      	mov	r1, r3
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f805 	bl	80020f4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80020ea:	f000 f8d7 	bl	800229c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80020ee:	bf00      	nop
 80020f0:	e7f0      	b.n	80020d4 <prvTimerTask+0x8>
	...

080020f4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80020fe:	f7ff fa51 	bl	80015a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f866 	bl	80021d8 <prvSampleTimeNow>
 800210c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d130      	bne.n	8002176 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10a      	bne.n	8002130 <prvProcessTimerOrBlockTask+0x3c>
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	429a      	cmp	r2, r3
 8002120:	d806      	bhi.n	8002130 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002122:	f7ff fa4d 	bl	80015c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002126:	68f9      	ldr	r1, [r7, #12]
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff85 	bl	8002038 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800212e:	e024      	b.n	800217a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002136:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <prvProcessTimerOrBlockTask+0x90>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <prvProcessTimerOrBlockTask+0x50>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <prvProcessTimerOrBlockTask+0x52>
 8002144:	2300      	movs	r3, #0
 8002146:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <prvProcessTimerOrBlockTask+0x94>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f7fe ffc1 	bl	80010dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800215a:	f7ff fa31 	bl	80015c0 <xTaskResumeAll>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <prvProcessTimerOrBlockTask+0x98>)
 8002166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	f3bf 8f6f 	isb	sy
    }
 8002174:	e001      	b.n	800217a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002176:	f7ff fa23 	bl	80015c0 <xTaskResumeAll>
    }
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001a4 	.word	0x200001a4
 8002188:	200001a8 	.word	0x200001a8
 800218c:	e000ed04 	.word	0xe000ed04

08002190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <prvGetNextExpireTime+0x44>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <prvGetNextExpireTime+0x16>
 80021a2:	2201      	movs	r2, #1
 80021a4:	e000      	b.n	80021a8 <prvGetNextExpireTime+0x18>
 80021a6:	2200      	movs	r2, #0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <prvGetNextExpireTime+0x44>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e001      	b.n	80021c4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80021c4:	68fb      	ldr	r3, [r7, #12]
    }
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	200001a0 	.word	0x200001a0

080021d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80021e0:	f7ff fa8a 	bl	80016f8 <xTaskGetTickCount>
 80021e4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80021e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <prvSampleTimeNow+0x3c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d205      	bcs.n	80021fc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80021f0:	f000 f92a 	bl	8002448 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e002      	b.n	8002202 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002202:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <prvSampleTimeNow+0x3c>)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002208:	68fb      	ldr	r3, [r7, #12]
    }
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200001b0 	.word	0x200001b0

08002218 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d812      	bhi.n	8002264 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	1ad2      	subs	r2, r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	429a      	cmp	r2, r3
 800224a:	d302      	bcc.n	8002252 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800224c:	2301      	movs	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e01b      	b.n	800228a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <prvInsertTimerInActiveList+0x7c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3304      	adds	r3, #4
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f7fe fa02 	bl	8000666 <vListInsert>
 8002262:	e012      	b.n	800228a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d206      	bcs.n	800227a <prvInsertTimerInActiveList+0x62>
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d302      	bcc.n	800227a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002274:	2301      	movs	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e007      	b.n	800228a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <prvInsertTimerInActiveList+0x80>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3304      	adds	r3, #4
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f7fe f9ee 	bl	8000666 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800228a:	697b      	ldr	r3, [r7, #20]
    }
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200001a4 	.word	0x200001a4
 8002298:	200001a0 	.word	0x200001a0

0800229c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	@ 0x30
 80022a0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022a2:	e0bb      	b.n	800241c <prvProcessReceivedCommands+0x180>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da13      	bge.n	80022d2 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	3304      	adds	r3, #4
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <prvProcessReceivedCommands+0x26>
 80022b8:	4961      	ldr	r1, [pc, #388]	@ (8002440 <prvProcessReceivedCommands+0x1a4>)
 80022ba:	f240 20fa 	movw	r0, #762	@ 0x2fa
 80022be:	f003 fced 	bl	8005c9c <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c8:	6850      	ldr	r0, [r2, #4]
 80022ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022cc:	6892      	ldr	r2, [r2, #8]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f2c0 80a1 	blt.w	800241c <prvProcessReceivedCommands+0x180>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	3304      	adds	r3, #4
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f9f4 	bl	80006d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff70 	bl	80021d8 <prvSampleTimeNow>
 80022f8:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	f200 808a 	bhi.w	8002416 <prvProcessReceivedCommands+0x17a>
 8002302:	a201      	add	r2, pc, #4	@ (adr r2, 8002308 <prvProcessReceivedCommands+0x6c>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002331 	.word	0x08002331
 800230c:	08002331 	.word	0x08002331
 8002310:	08002331 	.word	0x08002331
 8002314:	0800239b 	.word	0x0800239b
 8002318:	080023af 	.word	0x080023af
 800231c:	080023ed 	.word	0x080023ed
 8002320:	08002331 	.word	0x08002331
 8002324:	08002331 	.word	0x08002331
 8002328:	0800239b 	.word	0x0800239b
 800232c:	080023af 	.word	0x080023af
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	18d1      	adds	r1, r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	6a38      	ldr	r0, [r7, #32]
 8002350:	f7ff ff62 	bl	8002218 <prvInsertTimerInActiveList>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d05f      	beq.n	800241a <prvProcessReceivedCommands+0x17e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	6a38      	ldr	r0, [r7, #32]
 8002360:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d054      	beq.n	800241a <prvProcessReceivedCommands+0x17e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	441a      	add	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2300      	movs	r3, #0
 800237e:	2100      	movs	r1, #0
 8002380:	6a38      	ldr	r0, [r7, #32]
 8002382:	f7ff fe0f 	bl	8001fa4 <xTimerGenericCommand>
 8002386:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d145      	bne.n	800241a <prvProcessReceivedCommands+0x17e>
 800238e:	492c      	ldr	r1, [pc, #176]	@ (8002440 <prvProcessReceivedCommands+0x1a4>)
 8002390:	f240 3036 	movw	r0, #822	@ 0x336
 8002394:	f003 fc82 	bl	8005c9c <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002398:	e03f      	b.n	800241a <prvProcessReceivedCommands+0x17e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80023ac:	e036      	b.n	800241c <prvProcessReceivedCommands+0x180>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d104      	bne.n	80023d8 <prvProcessReceivedCommands+0x13c>
 80023ce:	491c      	ldr	r1, [pc, #112]	@ (8002440 <prvProcessReceivedCommands+0x1a4>)
 80023d0:	f240 304f 	movw	r0, #847	@ 0x34f
 80023d4:	f003 fc62 	bl	8005c9c <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	18d1      	adds	r1, r2, r3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	6a38      	ldr	r0, [r7, #32]
 80023e6:	f7ff ff17 	bl	8002218 <prvInsertTimerInActiveList>
                        break;
 80023ea:	e017      	b.n	800241c <prvProcessReceivedCommands+0x180>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 80023fa:	6a38      	ldr	r0, [r7, #32]
 80023fc:	f000 fc38 	bl	8002c70 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002400:	e00c      	b.n	800241c <prvProcessReceivedCommands+0x180>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	b2da      	uxtb	r2, r3
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002414:	e002      	b.n	800241c <prvProcessReceivedCommands+0x180>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002416:	bf00      	nop
 8002418:	e000      	b.n	800241c <prvProcessReceivedCommands+0x180>
                        break;
 800241a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <prvProcessReceivedCommands+0x1a8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f107 0108 	add.w	r1, r7, #8
 8002424:	2200      	movs	r2, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fc16 	bl	8000c58 <xQueueReceive>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f af38 	bne.w	80022a4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	@ 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	080075c4 	.word	0x080075c4
 8002444:	200001a8 	.word	0x200001a8

08002448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800244e:	e042      	b.n	80024d6 <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002450:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <prvSwitchTimerLists+0xb4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <prvSwitchTimerLists+0xb4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3304      	adds	r3, #4
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f935 	bl	80006d8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d028      	beq.n	80024d6 <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90e      	bls.n	80024b4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024a2:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <prvSwitchTimerLists+0xb4>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3304      	adds	r3, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f7fe f8da 	bl	8000666 <vListInsert>
 80024b2:	e010      	b.n	80024d6 <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024b4:	2300      	movs	r3, #0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2300      	movs	r3, #0
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	2100      	movs	r1, #0
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff fd70 	bl	8001fa4 <xTimerGenericCommand>
 80024c4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <prvSwitchTimerLists+0x8e>
 80024cc:	490c      	ldr	r1, [pc, #48]	@ (8002500 <prvSwitchTimerLists+0xb8>)
 80024ce:	f240 30a9 	movw	r0, #937	@ 0x3a9
 80024d2:	f003 fbe3 	bl	8005c9c <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <prvSwitchTimerLists+0xb4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1b7      	bne.n	8002450 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <prvSwitchTimerLists+0xb4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <prvSwitchTimerLists+0xbc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a04      	ldr	r2, [pc, #16]	@ (80024fc <prvSwitchTimerLists+0xb4>)
 80024ec:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <prvSwitchTimerLists+0xbc>)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	6013      	str	r3, [r2, #0]
    }
 80024f4:	bf00      	nop
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200001a0 	.word	0x200001a0
 8002500:	080075c4 	.word	0x080075c4
 8002504:	200001a4 	.word	0x200001a4

08002508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800250c:	f000 f9cc 	bl	80028a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <prvCheckForValidListAndQueue+0x54>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11d      	bne.n	8002554 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002518:	4811      	ldr	r0, [pc, #68]	@ (8002560 <prvCheckForValidListAndQueue+0x58>)
 800251a:	f7fe f853 	bl	80005c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800251e:	4811      	ldr	r0, [pc, #68]	@ (8002564 <prvCheckForValidListAndQueue+0x5c>)
 8002520:	f7fe f850 	bl	80005c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <prvCheckForValidListAndQueue+0x60>)
 8002526:	4a0e      	ldr	r2, [pc, #56]	@ (8002560 <prvCheckForValidListAndQueue+0x58>)
 8002528:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <prvCheckForValidListAndQueue+0x64>)
 800252c:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <prvCheckForValidListAndQueue+0x5c>)
 800252e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002530:	2200      	movs	r2, #0
 8002532:	2110      	movs	r1, #16
 8002534:	2005      	movs	r0, #5
 8002536:	f7fe f95d 	bl	80007f4 <xQueueGenericCreate>
 800253a:	4603      	mov	r3, r0
 800253c:	4a07      	ldr	r2, [pc, #28]	@ (800255c <prvCheckForValidListAndQueue+0x54>)
 800253e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <prvCheckForValidListAndQueue+0x54>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <prvCheckForValidListAndQueue+0x54>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4908      	ldr	r1, [pc, #32]	@ (8002570 <prvCheckForValidListAndQueue+0x68>)
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fd92 	bl	8001078 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002554:	f000 f9d2 	bl	80028fc <vPortExitCritical>
    }
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200001a8 	.word	0x200001a8
 8002560:	20000178 	.word	0x20000178
 8002564:	2000018c 	.word	0x2000018c
 8002568:	200001a0 	.word	0x200001a0
 800256c:	200001a4 	.word	0x200001a4
 8002570:	08007630 	.word	0x08007630

08002574 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3b04      	subs	r3, #4
 8002584:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800258c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3b04      	subs	r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f023 0201 	bic.w	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b04      	subs	r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80025a4:	4a0c      	ldr	r2, [pc, #48]	@ (80025d8 <pxPortInitialiseStack+0x64>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3b14      	subs	r3, #20
 80025ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3b04      	subs	r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f06f 0202 	mvn.w	r2, #2
 80025c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3b20      	subs	r3, #32
 80025c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	080025dd 	.word	0x080025dd

080025dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80025e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <prvTaskExitError+0x44>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d003      	beq.n	80025f8 <prvTaskExitError+0x1c>
 80025f0:	490c      	ldr	r1, [pc, #48]	@ (8002624 <prvTaskExitError+0x48>)
 80025f2:	20e6      	movs	r0, #230	@ 0xe6
 80025f4:	f003 fb52 	bl	8005c9c <vAssertCalled>
        __asm volatile
 80025f8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	607b      	str	r3, [r7, #4]
    }
 800260a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800260c:	bf00      	nop
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0fc      	beq.n	800260e <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000004 	.word	0x20000004
 8002624:	08007638 	.word	0x08007638
	...

08002630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <pxCurrentTCBConst2>)
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	6808      	ldr	r0, [r1, #0]
 8002636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800263a:	f380 8809 	msr	PSP, r0
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f380 8811 	msr	BASEPRI, r0
 800264a:	4770      	bx	lr
 800264c:	f3af 8000 	nop.w

08002650 <pxCurrentTCBConst2>:
 8002650:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop

08002658 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <prvPortStartFirstTask+0x24>)
 800265a:	6800      	ldr	r0, [r0, #0]
 800265c:	6800      	ldr	r0, [r0, #0]
 800265e:	f380 8808 	msr	MSP, r0
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	f380 8814 	msr	CONTROL, r0
 800266a:	b662      	cpsie	i
 800266c:	b661      	cpsie	f
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	df00      	svc	0
 8002678:	bf00      	nop
 800267a:	0000      	.short	0x0000
 800267c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop

08002684 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800268a:	4b42      	ldr	r3, [pc, #264]	@ (8002794 <xPortStartScheduler+0x110>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a42      	ldr	r2, [pc, #264]	@ (8002798 <xPortStartScheduler+0x114>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d104      	bne.n	800269e <xPortStartScheduler+0x1a>
 8002694:	4941      	ldr	r1, [pc, #260]	@ (800279c <xPortStartScheduler+0x118>)
 8002696:	f240 102d 	movw	r0, #301	@ 0x12d
 800269a:	f003 faff 	bl	8005c9c <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <xPortStartScheduler+0x110>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a3f      	ldr	r2, [pc, #252]	@ (80027a0 <xPortStartScheduler+0x11c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d104      	bne.n	80026b2 <xPortStartScheduler+0x2e>
 80026a8:	493c      	ldr	r1, [pc, #240]	@ (800279c <xPortStartScheduler+0x118>)
 80026aa:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 80026ae:	f003 faf5 	bl	8005c9c <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026b2:	4b3c      	ldr	r3, [pc, #240]	@ (80027a4 <xPortStartScheduler+0x120>)
 80026b4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	22ff      	movs	r2, #255	@ 0xff
 80026c2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b34      	ldr	r3, [pc, #208]	@ (80027a8 <xPortStartScheduler+0x124>)
 80026d8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026da:	4b34      	ldr	r3, [pc, #208]	@ (80027ac <xPortStartScheduler+0x128>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026e0:	e009      	b.n	80026f6 <xPortStartScheduler+0x72>
            {
                ulMaxPRIGROUPValue--;
 80026e2:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <xPortStartScheduler+0x128>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	4a30      	ldr	r2, [pc, #192]	@ (80027ac <xPortStartScheduler+0x128>)
 80026ea:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b80      	cmp	r3, #128	@ 0x80
 8002700:	d0ef      	beq.n	80026e2 <xPortStartScheduler+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002702:	4b2a      	ldr	r3, [pc, #168]	@ (80027ac <xPortStartScheduler+0x128>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	d004      	beq.n	8002718 <xPortStartScheduler+0x94>
 800270e:	4923      	ldr	r1, [pc, #140]	@ (800279c <xPortStartScheduler+0x118>)
 8002710:	f240 1057 	movw	r0, #343	@ 0x157
 8002714:	f003 fac2 	bl	8005c9c <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002718:	4b24      	ldr	r3, [pc, #144]	@ (80027ac <xPortStartScheduler+0x128>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1c3 0307 	rsb	r3, r3, #7
 8002720:	2b04      	cmp	r3, #4
 8002722:	d004      	beq.n	800272e <xPortStartScheduler+0xaa>
 8002724:	491d      	ldr	r1, [pc, #116]	@ (800279c <xPortStartScheduler+0x118>)
 8002726:	f44f 70b0 	mov.w	r0, #352	@ 0x160
 800272a:	f003 fab7 	bl	8005c9c <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <xPortStartScheduler+0x128>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	4a1d      	ldr	r2, [pc, #116]	@ (80027ac <xPortStartScheduler+0x128>)
 8002736:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002738:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <xPortStartScheduler+0x128>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002740:	4a1a      	ldr	r2, [pc, #104]	@ (80027ac <xPortStartScheduler+0x128>)
 8002742:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800274c:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <xPortStartScheduler+0x12c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a17      	ldr	r2, [pc, #92]	@ (80027b0 <xPortStartScheduler+0x12c>)
 8002752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002756:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002758:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <xPortStartScheduler+0x12c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a14      	ldr	r2, [pc, #80]	@ (80027b0 <xPortStartScheduler+0x12c>)
 800275e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002762:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002764:	f000 f952 	bl	8002a0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002768:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <xPortStartScheduler+0x130>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800276e:	f000 f971 	bl	8002a54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002772:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <xPortStartScheduler+0x134>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a10      	ldr	r2, [pc, #64]	@ (80027b8 <xPortStartScheduler+0x134>)
 8002778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800277c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800277e:	f7ff ff6b 	bl	8002658 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002782:	f7ff f893 	bl	80018ac <vTaskSwitchContext>
    prvTaskExitError();
 8002786:	f7ff ff29 	bl	80025dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	e000ed00 	.word	0xe000ed00
 8002798:	410fc271 	.word	0x410fc271
 800279c:	08007638 	.word	0x08007638
 80027a0:	410fc270 	.word	0x410fc270
 80027a4:	e000e400 	.word	0xe000e400
 80027a8:	200001b4 	.word	0x200001b4
 80027ac:	200001b8 	.word	0x200001b8
 80027b0:	e000ed20 	.word	0xe000ed20
 80027b4:	20000004 	.word	0x20000004
 80027b8:	e000ef34 	.word	0xe000ef34

080027bc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80027c2:	4b32      	ldr	r3, [pc, #200]	@ (800288c <vInitPrioGroupValue+0xd0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a32      	ldr	r2, [pc, #200]	@ (8002890 <vInitPrioGroupValue+0xd4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d104      	bne.n	80027d6 <vInitPrioGroupValue+0x1a>
 80027cc:	4931      	ldr	r1, [pc, #196]	@ (8002894 <vInitPrioGroupValue+0xd8>)
 80027ce:	f240 109b 	movw	r0, #411	@ 0x19b
 80027d2:	f003 fa63 	bl	8005c9c <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80027d6:	4b2d      	ldr	r3, [pc, #180]	@ (800288c <vInitPrioGroupValue+0xd0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2f      	ldr	r2, [pc, #188]	@ (8002898 <vInitPrioGroupValue+0xdc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d104      	bne.n	80027ea <vInitPrioGroupValue+0x2e>
 80027e0:	492c      	ldr	r1, [pc, #176]	@ (8002894 <vInitPrioGroupValue+0xd8>)
 80027e2:	f44f 70ce 	mov.w	r0, #412	@ 0x19c
 80027e6:	f003 fa59 	bl	8005c9c <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80027ea:	4b2c      	ldr	r3, [pc, #176]	@ (800289c <vInitPrioGroupValue+0xe0>)
 80027ec:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	22ff      	movs	r2, #255	@ 0xff
 80027fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4b24      	ldr	r3, [pc, #144]	@ (80028a0 <vInitPrioGroupValue+0xe4>)
 8002810:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002812:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002818:	e009      	b.n	800282e <vInitPrioGroupValue+0x72>
            {
                ulMaxPRIGROUPValue--;
 800281a:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3b01      	subs	r3, #1
 8002820:	4a20      	ldr	r2, [pc, #128]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 8002822:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002836:	2b80      	cmp	r3, #128	@ 0x80
 8002838:	d0ef      	beq.n	800281a <vInitPrioGroupValue+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800283a:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	d004      	beq.n	8002850 <vInitPrioGroupValue+0x94>
 8002846:	4913      	ldr	r1, [pc, #76]	@ (8002894 <vInitPrioGroupValue+0xd8>)
 8002848:	f240 10c5 	movw	r0, #453	@ 0x1c5
 800284c:	f003 fa26 	bl	8005c9c <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1c3 0307 	rsb	r3, r3, #7
 8002858:	2b04      	cmp	r3, #4
 800285a:	d004      	beq.n	8002866 <vInitPrioGroupValue+0xaa>
 800285c:	490d      	ldr	r1, [pc, #52]	@ (8002894 <vInitPrioGroupValue+0xd8>)
 800285e:	f44f 70e7 	mov.w	r0, #462	@ 0x1ce
 8002862:	f003 fa1b 	bl	8005c9c <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	4a0d      	ldr	r2, [pc, #52]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 800286e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002878:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <vInitPrioGroupValue+0xe8>)
 800287a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	410fc271 	.word	0x410fc271
 8002894:	08007638 	.word	0x08007638
 8002898:	410fc270 	.word	0x410fc270
 800289c:	e000e400 	.word	0xe000e400
 80028a0:	200001b4 	.word	0x200001b4
 80028a4:	200001b8 	.word	0x200001b8

080028a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
        __asm volatile
 80028ae:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	607b      	str	r3, [r7, #4]
    }
 80028c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <vPortEnterCritical+0x48>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <vPortEnterCritical+0x48>)
 80028ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80028cc:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <vPortEnterCritical+0x48>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d109      	bne.n	80028e8 <vPortEnterCritical+0x40>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <vPortEnterCritical+0x4c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <vPortEnterCritical+0x40>
 80028de:	4906      	ldr	r1, [pc, #24]	@ (80028f8 <vPortEnterCritical+0x50>)
 80028e0:	f44f 70f9 	mov.w	r0, #498	@ 0x1f2
 80028e4:	f003 f9da 	bl	8005c9c <vAssertCalled>
    }
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000004 	.word	0x20000004
 80028f4:	e000ed04 	.word	0xe000ed04
 80028f8:	08007638 	.word	0x08007638

080028fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002902:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <vPortExitCritical+0x40>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <vPortExitCritical+0x18>
 800290a:	490d      	ldr	r1, [pc, #52]	@ (8002940 <vPortExitCritical+0x44>)
 800290c:	f240 10f9 	movw	r0, #505	@ 0x1f9
 8002910:	f003 f9c4 	bl	8005c9c <vAssertCalled>
    uxCriticalNesting--;
 8002914:	4b09      	ldr	r3, [pc, #36]	@ (800293c <vPortExitCritical+0x40>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <vPortExitCritical+0x40>)
 800291c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800291e:	4b07      	ldr	r3, [pc, #28]	@ (800293c <vPortExitCritical+0x40>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <vPortExitCritical+0x36>
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
        __asm volatile
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f383 8811 	msr	BASEPRI, r3
    }
 8002930:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000004 	.word	0x20000004
 8002940:	08007638 	.word	0x08007638
	...

08002950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002950:	f3ef 8009 	mrs	r0, PSP
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <pxCurrentTCBConst>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f01e 0f10 	tst.w	lr, #16
 8002960:	bf08      	it	eq
 8002962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296a:	6010      	str	r0, [r2, #0]
 800296c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002970:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8002974:	f380 8811 	msr	BASEPRI, r0
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f7fe ff94 	bl	80018ac <vTaskSwitchContext>
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f380 8811 	msr	BASEPRI, r0
 800298c:	bc09      	pop	{r0, r3}
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	6808      	ldr	r0, [r1, #0]
 8002992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002996:	f01e 0f10 	tst.w	lr, #16
 800299a:	bf08      	it	eq
 800299c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80029a0:	f380 8809 	msr	PSP, r0
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	f3af 8000 	nop.w

080029b0 <pxCurrentTCBConst>:
 80029b0:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop

080029b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
        __asm volatile
 80029be:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	607b      	str	r3, [r7, #4]
    }
 80029d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80029d2:	f002 fa39 	bl	8004e48 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80029d6:	f7fe feb1 	bl	800173c <xTaskIncrementTick>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80029e0:	f002 fa90 	bl	8004f04 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <SysTick_Handler+0x50>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e001      	b.n	80029f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80029ee:	f002 fa6d 	bl	8004ecc <SEGGER_SYSVIEW_RecordExitISR>
 80029f2:	2300      	movs	r3, #0
 80029f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f383 8811 	msr	BASEPRI, r3
    }
 80029fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <vPortSetupTimerInterrupt+0x34>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <vPortSetupTimerInterrupt+0x38>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <vPortSetupTimerInterrupt+0x3c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	@ (8002a4c <vPortSetupTimerInterrupt+0x40>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <vPortSetupTimerInterrupt+0x44>)
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a2e:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <vPortSetupTimerInterrupt+0x34>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010
 8002a44:	e000e018 	.word	0xe000e018
 8002a48:	20000010 	.word	0x20000010
 8002a4c:	10624dd3 	.word	0x10624dd3
 8002a50:	e000e014 	.word	0xe000e014

08002a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002a54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002a64 <vPortEnableVFP+0x10>
 8002a58:	6801      	ldr	r1, [r0, #0]
 8002a5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002a5e:	6001      	str	r1, [r0, #0]
 8002a60:	4770      	bx	lr
 8002a62:	0000      	.short	0x0000
 8002a64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop

08002a6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002a72:	f3ef 8305 	mrs	r3, IPSR
 8002a76:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	d90e      	bls.n	8002a9c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002a7e:	4a10      	ldr	r2, [pc, #64]	@ (8002ac0 <vPortValidateInterruptPriority+0x54>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <vPortValidateInterruptPriority+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d204      	bcs.n	8002a9c <vPortValidateInterruptPriority+0x30>
 8002a92:	490d      	ldr	r1, [pc, #52]	@ (8002ac8 <vPortValidateInterruptPriority+0x5c>)
 8002a94:	f44f 7054 	mov.w	r0, #848	@ 0x350
 8002a98:	f003 f900 	bl	8005c9c <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <vPortValidateInterruptPriority+0x60>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <vPortValidateInterruptPriority+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d904      	bls.n	8002ab6 <vPortValidateInterruptPriority+0x4a>
 8002aac:	4906      	ldr	r1, [pc, #24]	@ (8002ac8 <vPortValidateInterruptPriority+0x5c>)
 8002aae:	f44f 7058 	mov.w	r0, #864	@ 0x360
 8002ab2:	f003 f8f3 	bl	8005c9c <vAssertCalled>
    }
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	e000e3f0 	.word	0xe000e3f0
 8002ac4:	200001b4 	.word	0x200001b4
 8002ac8:	08007638 	.word	0x08007638
 8002acc:	e000ed0c 	.word	0xe000ed0c
 8002ad0:	200001b8 	.word	0x200001b8

08002ad4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002ae0:	f7fe fd60 	bl	80015a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8002c54 <pvPortMalloc+0x180>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002aec:	f000 f918 	bl	8002d20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002af0:	4b59      	ldr	r3, [pc, #356]	@ (8002c58 <pvPortMalloc+0x184>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 809a 	bne.w	8002c32 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d027      	beq.n	8002b54 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002b04:	2208      	movs	r2, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d221      	bcs.n	8002b54 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8002b10:	2208      	movs	r2, #8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01b      	beq.n	8002b5a <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f023 0307 	bic.w	r3, r3, #7
 8002b28:	3308      	adds	r3, #8
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d20e      	bcs.n	8002b4e <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f023 0307 	bic.w	r3, r3, #7
 8002b36:	3308      	adds	r3, #8
 8002b38:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <pvPortMalloc+0x86>
 8002b44:	4945      	ldr	r1, [pc, #276]	@ (8002c5c <pvPortMalloc+0x188>)
 8002b46:	209a      	movs	r0, #154	@ 0x9a
 8002b48:	f003 f8a8 	bl	8005c9c <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b4c:	e005      	b.n	8002b5a <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b52:	e002      	b.n	8002b5a <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	e000      	b.n	8002b5c <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b5a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d067      	beq.n	8002c32 <pvPortMalloc+0x15e>
 8002b62:	4b3f      	ldr	r3, [pc, #252]	@ (8002c60 <pvPortMalloc+0x18c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d862      	bhi.n	8002c32 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c64 <pvPortMalloc+0x190>)
 8002b6e:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8002b70:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <pvPortMalloc+0x190>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b76:	e004      	b.n	8002b82 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d903      	bls.n	8002b94 <pvPortMalloc+0xc0>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f1      	bne.n	8002b78 <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002b94:	4b2f      	ldr	r3, [pc, #188]	@ (8002c54 <pvPortMalloc+0x180>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d049      	beq.n	8002c32 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	4413      	add	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	2308      	movs	r3, #8
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d918      	bls.n	8002bf2 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <pvPortMalloc+0x106>
 8002bd2:	4922      	ldr	r1, [pc, #136]	@ (8002c5c <pvPortMalloc+0x188>)
 8002bd4:	20cd      	movs	r0, #205	@ 0xcd
 8002bd6:	f003 f861 	bl	8005c9c <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1ad2      	subs	r2, r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bec:	68b8      	ldr	r0, [r7, #8]
 8002bee:	f000 f8f9 	bl	8002de4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <pvPortMalloc+0x18c>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <pvPortMalloc+0x18c>)
 8002bfe:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c00:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <pvPortMalloc+0x18c>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <pvPortMalloc+0x194>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d203      	bcs.n	8002c14 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <pvPortMalloc+0x18c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a15      	ldr	r2, [pc, #84]	@ (8002c68 <pvPortMalloc+0x194>)
 8002c12:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <pvPortMalloc+0x184>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002c28:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <pvPortMalloc+0x198>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c6c <pvPortMalloc+0x198>)
 8002c30:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002c32:	f7fe fcc5 	bl	80015c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <pvPortMalloc+0x176>
 8002c40:	4906      	ldr	r1, [pc, #24]	@ (8002c5c <pvPortMalloc+0x188>)
 8002c42:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002c46:	f003 f829 	bl	8005c9c <vAssertCalled>
    return pvReturn;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	2000b9c4 	.word	0x2000b9c4
 8002c58:	2000b9d8 	.word	0x2000b9d8
 8002c5c:	080076b8 	.word	0x080076b8
 8002c60:	2000b9c8 	.word	0x2000b9c8
 8002c64:	2000b9bc 	.word	0x2000b9bc
 8002c68:	2000b9cc 	.word	0x2000b9cc
 8002c6c:	2000b9d0 	.word	0x2000b9d0

08002c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d041      	beq.n	8002d06 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002c82:	2308      	movs	r3, #8
 8002c84:	425b      	negs	r3, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4413      	add	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <vPortFree+0xa0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <vPortFree+0x38>
 8002c9e:	491d      	ldr	r1, [pc, #116]	@ (8002d14 <vPortFree+0xa4>)
 8002ca0:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002ca4:	f002 fffa 	bl	8005c9c <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <vPortFree+0x4a>
 8002cb0:	4918      	ldr	r1, [pc, #96]	@ (8002d14 <vPortFree+0xa4>)
 8002cb2:	f240 1023 	movw	r0, #291	@ 0x123
 8002cb6:	f002 fff1 	bl	8005c9c <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <vPortFree+0xa0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01e      	beq.n	8002d06 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11a      	bne.n	8002d06 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <vPortFree+0xa0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002ce0:	f7fe fc60 	bl	80015a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <vPortFree+0xa8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <vPortFree+0xa8>)
 8002cf0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002cf2:	68b8      	ldr	r0, [r7, #8]
 8002cf4:	f000 f876 	bl	8002de4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002cf8:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <vPortFree+0xac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	4a07      	ldr	r2, [pc, #28]	@ (8002d1c <vPortFree+0xac>)
 8002d00:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002d02:	f7fe fc5d 	bl	80015c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000b9d8 	.word	0x2000b9d8
 8002d14:	080076b8 	.word	0x080076b8
 8002d18:	2000b9c8 	.word	0x2000b9c8
 8002d1c:	2000b9d4 	.word	0x2000b9d4

08002d20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d26:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 8002d2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002d2c:	4b27      	ldr	r3, [pc, #156]	@ (8002dcc <prvHeapInit+0xac>)
 8002d2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00c      	beq.n	8002d54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3307      	adds	r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dcc <prvHeapInit+0xac>)
 8002d50:	4413      	add	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <prvHeapInit+0xb0>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd0 <prvHeapInit+0xb0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0307 	bic.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	@ (8002dd4 <prvHeapInit+0xb4>)
 8002d80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002d82:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <prvHeapInit+0xb4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2200      	movs	r2, #0
 8002d88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002d8a:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <prvHeapInit+0xb4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	1ad2      	subs	r2, r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <prvHeapInit+0xb4>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <prvHeapInit+0xb8>)
 8002dae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <prvHeapInit+0xbc>)
 8002db6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002db8:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <prvHeapInit+0xc0>)
 8002dba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002dbe:	601a      	str	r2, [r3, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	200001bc 	.word	0x200001bc
 8002dd0:	2000b9bc 	.word	0x2000b9bc
 8002dd4:	2000b9c4 	.word	0x2000b9c4
 8002dd8:	2000b9cc 	.word	0x2000b9cc
 8002ddc:	2000b9c8 	.word	0x2000b9c8
 8002de0:	2000b9d8 	.word	0x2000b9d8

08002de4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dec:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <prvInsertBlockIntoFreeList+0xac>)
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e002      	b.n	8002df8 <prvInsertBlockIntoFreeList+0x14>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d8f7      	bhi.n	8002df2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d108      	bne.n	8002e26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	441a      	add	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d118      	bne.n	8002e6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <prvInsertBlockIntoFreeList+0xb0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d00d      	beq.n	8002e62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	441a      	add	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e008      	b.n	8002e74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e62:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <prvInsertBlockIntoFreeList+0xb0>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e003      	b.n	8002e74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d002      	beq.n	8002e82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000b9bc 	.word	0x2000b9bc
 8002e94:	2000b9c4 	.word	0x2000b9c4

08002e98 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002e9c:	4803      	ldr	r0, [pc, #12]	@ (8002eac <_cbSendSystemDesc+0x14>)
 8002e9e:	f001 ff7d 	bl	8004d9c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002ea2:	4803      	ldr	r0, [pc, #12]	@ (8002eb0 <_cbSendSystemDesc+0x18>)
 8002ea4:	f001 ff7a 	bl	8004d9c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	08007734 	.word	0x08007734
 8002eb0:	0800777c 	.word	0x0800777c

08002eb4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <SEGGER_SYSVIEW_Conf+0x24>)
 8002ec2:	4a06      	ldr	r2, [pc, #24]	@ (8002edc <SEGGER_SYSVIEW_Conf+0x28>)
 8002ec4:	f001 fae6 	bl	8004494 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002ec8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002ecc:	f001 fb26 	bl	800451c <SEGGER_SYSVIEW_SetRAMBase>
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000010 	.word	0x20000010
 8002ed8:	08002e99 	.word	0x08002e99
 8002edc:	08007880 	.word	0x08007880

08002ee0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	e033      	b.n	8002f54 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002eec:	491e      	ldr	r1, [pc, #120]	@ (8002f68 <_cbSendTaskList+0x88>)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	491a      	ldr	r1, [pc, #104]	@ (8002f68 <_cbSendTaskList+0x88>)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	4c16      	ldr	r4, [pc, #88]	@ (8002f68 <_cbSendTaskList+0x88>)
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4423      	add	r3, r4
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	681c      	ldr	r4, [r3, #0]
 8002f20:	4d11      	ldr	r5, [pc, #68]	@ (8002f68 <_cbSendTaskList+0x88>)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	442b      	add	r3, r5
 8002f2e:	330c      	adds	r3, #12
 8002f30:	681d      	ldr	r5, [r3, #0]
 8002f32:	4e0d      	ldr	r6, [pc, #52]	@ (8002f68 <_cbSendTaskList+0x88>)
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4433      	add	r3, r6
 8002f40:	3310      	adds	r3, #16
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	462b      	mov	r3, r5
 8002f48:	4622      	mov	r2, r4
 8002f4a:	f000 f8bd 	bl	80030c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3301      	adds	r3, #1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <_cbSendTaskList+0x8c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3c6      	bcc.n	8002eec <_cbSendTaskList+0xc>
  }
}
 8002f5e:	bf00      	nop
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f68:	2000b9dc 	.word	0x2000b9dc
 8002f6c:	2000ba7c 	.word	0x2000ba7c

08002f70 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002f78:	f7fe fbce 	bl	8001718 <xTaskGetTickCountFromISR>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2200      	movs	r2, #0
 8002f80:	469a      	mov	sl, r3
 8002f82:	4693      	mov	fp, r2
 8002f84:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	f04f 0a00 	mov.w	sl, #0
 8002f94:	f04f 0b00 	mov.w	fp, #0
 8002f98:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002f9c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002fa0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002fa4:	4652      	mov	r2, sl
 8002fa6:	465b      	mov	r3, fp
 8002fa8:	1a14      	subs	r4, r2, r0
 8002faa:	eb63 0501 	sbc.w	r5, r3, r1
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	00ab      	lsls	r3, r5, #2
 8002fb8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002fbc:	00a2      	lsls	r2, r4, #2
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	461d      	mov	r5, r3
 8002fc2:	eb14 0800 	adds.w	r8, r4, r0
 8002fc6:	eb45 0901 	adc.w	r9, r5, r1
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fde:	4690      	mov	r8, r2
 8002fe0:	4699      	mov	r9, r3
 8002fe2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ff8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003006:	2205      	movs	r2, #5
 8003008:	492b      	ldr	r1, [pc, #172]	@ (80030b8 <SYSVIEW_AddTask+0xc0>)
 800300a:	68b8      	ldr	r0, [r7, #8]
 800300c:	f004 fa08 	bl	8007420 <memcmp>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d04b      	beq.n	80030ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003016:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <SYSVIEW_AddTask+0xc4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b07      	cmp	r3, #7
 800301c:	d903      	bls.n	8003026 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800301e:	4828      	ldr	r0, [pc, #160]	@ (80030c0 <SYSVIEW_AddTask+0xc8>)
 8003020:	f002 f9d8 	bl	80053d4 <SEGGER_SYSVIEW_Warn>
    return;
 8003024:	e044      	b.n	80030b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003026:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <SYSVIEW_AddTask+0xc4>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4926      	ldr	r1, [pc, #152]	@ (80030c4 <SYSVIEW_AddTask+0xcc>)
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800303a:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <SYSVIEW_AddTask+0xc4>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4921      	ldr	r1, [pc, #132]	@ (80030c4 <SYSVIEW_AddTask+0xcc>)
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3304      	adds	r3, #4
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003050:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <SYSVIEW_AddTask+0xc4>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	491b      	ldr	r1, [pc, #108]	@ (80030c4 <SYSVIEW_AddTask+0xcc>)
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3308      	adds	r3, #8
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003066:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <SYSVIEW_AddTask+0xc4>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4916      	ldr	r1, [pc, #88]	@ (80030c4 <SYSVIEW_AddTask+0xcc>)
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	330c      	adds	r3, #12
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800307c:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <SYSVIEW_AddTask+0xc4>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4910      	ldr	r1, [pc, #64]	@ (80030c4 <SYSVIEW_AddTask+0xcc>)
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3310      	adds	r3, #16
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003092:	4b0a      	ldr	r3, [pc, #40]	@ (80030bc <SYSVIEW_AddTask+0xc4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <SYSVIEW_AddTask+0xc4>)
 800309a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f80e 	bl	80030c8 <SYSVIEW_SendTaskInfo>
 80030ac:	e000      	b.n	80030b0 <SYSVIEW_AddTask+0xb8>
    return;
 80030ae:	bf00      	nop

}
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	0800778c 	.word	0x0800778c
 80030bc:	2000ba7c 	.word	0x2000ba7c
 80030c0:	08007794 	.word	0x08007794
 80030c4:	2000b9dc 	.word	0x2000b9dc

080030c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	2218      	movs	r2, #24
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 f9ae 	bl	8007440 <memset>
  TaskInfo.TaskID     = TaskID;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80030f8:	f107 0310 	add.w	r3, r7, #16
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 fd55 	bl	8004bac <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003102:	bf00      	nop
 8003104:	3728      	adds	r7, #40	@ 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003112:	4b26      	ldr	r3, [pc, #152]	@ (80031ac <_DoInit+0xa0>)
 8003114:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003116:	22a8      	movs	r2, #168	@ 0xa8
 8003118:	2100      	movs	r1, #0
 800311a:	6838      	ldr	r0, [r7, #0]
 800311c:	f004 f990 	bl	8007440 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2203      	movs	r2, #3
 8003124:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2203      	movs	r2, #3
 800312a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4a20      	ldr	r2, [pc, #128]	@ (80031b0 <_DoInit+0xa4>)
 8003130:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	4a1f      	ldr	r2, [pc, #124]	@ (80031b4 <_DoInit+0xa8>)
 8003136:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800313e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2200      	movs	r2, #0
 800314a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	4a16      	ldr	r2, [pc, #88]	@ (80031b0 <_DoInit+0xa4>)
 8003156:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <_DoInit+0xac>)
 800315c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2210      	movs	r2, #16
 8003162:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003176:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	e00c      	b.n	800319a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1c3 030f 	rsb	r3, r3, #15
 8003186:	4a0d      	ldr	r2, [pc, #52]	@ (80031bc <_DoInit+0xb0>)
 8003188:	5cd1      	ldrb	r1, [r2, r3]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	460a      	mov	r2, r1
 8003192:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3301      	adds	r3, #1
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b0f      	cmp	r3, #15
 800319e:	d9ef      	bls.n	8003180 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80031a0:	f3bf 8f5f 	dmb	sy
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000ba80 	.word	0x2000ba80
 80031b0:	080077e4 	.word	0x080077e4
 80031b4:	2000bb28 	.word	0x2000bb28
 80031b8:	2000bf28 	.word	0x2000bf28
 80031bc:	08007888 	.word	0x08007888

080031c0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	@ 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d905      	bls.n	80031f0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ee:	e007      	b.n	8003200 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	69b9      	ldr	r1, [r7, #24]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	1acb      	subs	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3b01      	subs	r3, #1
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320a:	4293      	cmp	r3, r2
 800320c:	bf28      	it	cs
 800320e:	4613      	movcs	r3, r2
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4293      	cmp	r3, r2
 8003218:	bf28      	it	cs
 800321a:	4613      	movcs	r3, r2
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	6978      	ldr	r0, [r7, #20]
 800322e:	f004 f933 	bl	8007498 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003232:	6a3a      	ldr	r2, [r7, #32]
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	4413      	add	r3, r2
 8003238:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	4413      	add	r3, r2
 8003240:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	4413      	add	r3, r2
 8003250:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	429a      	cmp	r2, r3
 800325a:	d101      	bne.n	8003260 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003260:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1b2      	bne.n	80031d6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003270:	6a3b      	ldr	r3, [r7, #32]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3728      	adds	r7, #40	@ 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800327a:	b580      	push	{r7, lr}
 800327c:	b088      	sub	sp, #32
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d911      	bls.n	80032c2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	6938      	ldr	r0, [r7, #16]
 80032ae:	f004 f8f3 	bl	8007498 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80032b2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	441a      	add	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80032c0:	e01f      	b.n	8003302 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	6938      	ldr	r0, [r7, #16]
 80032d6:	f004 f8df 	bl	8007498 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4413      	add	r3, r2
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4619      	mov	r1, r3
 80032f2:	6938      	ldr	r0, [r7, #16]
 80032f4:	f004 f8d0 	bl	8007498 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80032f8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	60da      	str	r2, [r3, #12]
}
 8003302:	bf00      	nop
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800330a:	b480      	push	{r7}
 800330c:	b087      	sub	sp, #28
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	429a      	cmp	r2, r3
 8003324:	d808      	bhi.n	8003338 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad2      	subs	r2, r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	3b01      	subs	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e004      	b.n	8003342 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003342:	697b      	ldr	r3, [r7, #20]
}
 8003344:	4618      	mov	r0, r3
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	@ 0x30
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800335c:	4b3e      	ldr	r3, [pc, #248]	@ (8003458 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800335e:	623b      	str	r3, [r7, #32]
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b53      	cmp	r3, #83	@ 0x53
 8003368:	d001      	beq.n	800336e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800336a:	f7ff fecf 	bl	800310c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4a37      	ldr	r2, [pc, #220]	@ (8003458 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800337c:	4413      	add	r3, r2
 800337e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	429a      	cmp	r2, r3
 800339a:	d92b      	bls.n	80033f4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4293      	cmp	r3, r2
 80033ac:	bf28      	it	cs
 80033ae:	4613      	movcs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	4413      	add	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	6939      	ldr	r1, [r7, #16]
 80033c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033c2:	f004 f869 	bl	8007498 <memcpy>
    NumBytesRead += NumBytesRem;
 80033c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4413      	add	r3, r2
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80033ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	4413      	add	r3, r2
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80033de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	4413      	add	r3, r2
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d101      	bne.n	80033f4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4293      	cmp	r3, r2
 8003402:	bf28      	it	cs
 8003404:	4613      	movcs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d019      	beq.n	8003442 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003414:	4413      	add	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	6939      	ldr	r1, [r7, #16]
 800341c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800341e:	f004 f83b 	bl	8007498 <memcpy>
    NumBytesRead += NumBytesRem;
 8003422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	4413      	add	r3, r2
 8003428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800342a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4413      	add	r3, r2
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800343a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	4413      	add	r3, r2
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800344c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003450:	4618      	mov	r0, r3
 8003452:	3730      	adds	r7, #48	@ 0x30
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	2000ba80 	.word	0x2000ba80

0800345c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b08c      	sub	sp, #48	@ 0x30
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003468:	4b3e      	ldr	r3, [pc, #248]	@ (8003564 <SEGGER_RTT_ReadNoLock+0x108>)
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b53      	cmp	r3, #83	@ 0x53
 8003474:	d001      	beq.n	800347a <SEGGER_RTT_ReadNoLock+0x1e>
 8003476:	f7ff fe49 	bl	800310c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	3360      	adds	r3, #96	@ 0x60
 8003486:	4a37      	ldr	r2, [pc, #220]	@ (8003564 <SEGGER_RTT_ReadNoLock+0x108>)
 8003488:	4413      	add	r3, r2
 800348a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800349c:	2300      	movs	r3, #0
 800349e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80034a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d92b      	bls.n	8003500 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4293      	cmp	r3, r2
 80034b8:	bf28      	it	cs
 80034ba:	4613      	movcs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	4413      	add	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	6939      	ldr	r1, [r7, #16]
 80034cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034ce:	f003 ffe3 	bl	8007498 <memcpy>
    NumBytesRead += NumBytesRem;
 80034d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	4413      	add	r3, r2
 80034d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80034da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	4413      	add	r3, r2
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80034ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4413      	add	r3, r2
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d101      	bne.n	8003500 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4293      	cmp	r3, r2
 800350e:	bf28      	it	cs
 8003510:	4613      	movcs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d019      	beq.n	800354e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	4413      	add	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	6939      	ldr	r1, [r7, #16]
 8003528:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800352a:	f003 ffb5 	bl	8007498 <memcpy>
    NumBytesRead += NumBytesRem;
 800352e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4413      	add	r3, r2
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4413      	add	r3, r2
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4413      	add	r3, r2
 800354c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800354e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003558:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800355c:	4618      	mov	r0, r3
 800355e:	3730      	adds	r7, #48	@ 0x30
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	2000ba80 	.word	0x2000ba80

08003568 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	3360      	adds	r3, #96	@ 0x60
 8003584:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003586:	4413      	add	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d029      	beq.n	80035e6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003592:	2b02      	cmp	r3, #2
 8003594:	d82e      	bhi.n	80035f4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800359a:	2b01      	cmp	r3, #1
 800359c:	d013      	beq.n	80035c6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800359e:	e029      	b.n	80035f4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f7ff feb2 	bl	800330a <_GetAvailWriteSpace>
 80035a6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d202      	bcs.n	80035b6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80035b4:	e021      	b.n	80035fa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	69b9      	ldr	r1, [r7, #24]
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f7ff fe5b 	bl	800327a <_WriteNoCheck>
    break;
 80035c4:	e019      	b.n	80035fa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7ff fe9f 	bl	800330a <_GetAvailWriteSpace>
 80035cc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bf28      	it	cs
 80035d6:	4613      	movcs	r3, r2
 80035d8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	6978      	ldr	r0, [r7, #20]
 80035e0:	f7ff fe4b 	bl	800327a <_WriteNoCheck>
    break;
 80035e4:	e009      	b.n	80035fa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff fde8 	bl	80031c0 <_WriteBlocking>
 80035f0:	61f8      	str	r0, [r7, #28]
    break;
 80035f2:	e002      	b.n	80035fa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
    break;
 80035f8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80035fa:	69fb      	ldr	r3, [r7, #28]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3720      	adds	r7, #32
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	2000ba80 	.word	0x2000ba80

08003608 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b53      	cmp	r3, #83	@ 0x53
 8003620:	d001      	beq.n	8003626 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003622:	f7ff fd73 	bl	800310c <_DoInit>
  SEGGER_RTT_LOCK();
 8003626:	f3ef 8311 	mrs	r3, BASEPRI
 800362a:	f04f 0120 	mov.w	r1, #32
 800362e:	f381 8811 	msr	BASEPRI, r1
 8003632:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff ff95 	bl	8003568 <SEGGER_RTT_WriteDownBufferNoLock>
 800363e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003646:	697b      	ldr	r3, [r7, #20]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	2000ba80 	.word	0x2000ba80

08003654 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003662:	4b3d      	ldr	r3, [pc, #244]	@ (8003758 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b53      	cmp	r3, #83	@ 0x53
 800366e:	d001      	beq.n	8003674 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003670:	f7ff fd4c 	bl	800310c <_DoInit>
  SEGGER_RTT_LOCK();
 8003674:	f3ef 8311 	mrs	r3, BASEPRI
 8003678:	f04f 0120 	mov.w	r1, #32
 800367c:	f381 8811 	msr	BASEPRI, r1
 8003680:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003682:	4b35      	ldr	r3, [pc, #212]	@ (8003758 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003684:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800368a:	6939      	ldr	r1, [r7, #16]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	3304      	adds	r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	dbeb      	blt.n	800368a <SEGGER_RTT_AllocUpBuffer+0x36>
 80036b2:	e000      	b.n	80036b6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80036b4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	429a      	cmp	r2, r3
 80036be:	da3f      	bge.n	8003740 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80036c0:	6939      	ldr	r1, [r7, #16]
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80036d4:	6939      	ldr	r1, [r7, #16]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	440b      	add	r3, r1
 80036e4:	3304      	adds	r3, #4
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80036ea:	6939      	ldr	r1, [r7, #16]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	3320      	adds	r3, #32
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80036fe:	6939      	ldr	r1, [r7, #16]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	3328      	adds	r3, #40	@ 0x28
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	3324      	adds	r3, #36	@ 0x24
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003726:	6939      	ldr	r1, [r7, #16]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	332c      	adds	r3, #44	@ 0x2c
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800373a:	f3bf 8f5f 	dmb	sy
 800373e:	e002      	b.n	8003746 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800374c:	69fb      	ldr	r3, [r7, #28]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000ba80 	.word	0x2000ba80

0800375c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800376a:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800376c:	623b      	str	r3, [r7, #32]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b53      	cmp	r3, #83	@ 0x53
 8003776:	d001      	beq.n	800377c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003778:	f7ff fcc8 	bl	800310c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800377c:	4b1c      	ldr	r3, [pc, #112]	@ (80037f0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800377e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d82c      	bhi.n	80037e0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003786:	f3ef 8311 	mrs	r3, BASEPRI
 800378a:	f04f 0120 	mov.w	r1, #32
 800378e:	f381 8811 	msr	BASEPRI, r1
 8003792:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	3360      	adds	r3, #96	@ 0x60
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2200      	movs	r2, #0
 80037c8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ce:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80037d0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037de:	e002      	b.n	80037e6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3728      	adds	r7, #40	@ 0x28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	2000ba80 	.word	0x2000ba80

080037f4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	60fa      	str	r2, [r7, #12]
 800380a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b80      	cmp	r3, #128	@ 0x80
 8003810:	d90a      	bls.n	8003828 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003816:	e007      	b.n	8003828 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	1c53      	adds	r3, r2, #1
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1c59      	adds	r1, r3, #1
 8003822:	60f9      	str	r1, [r7, #12]
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1e5a      	subs	r2, r3, #1
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <_EncodeStr+0x46>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ee      	bne.n	8003818 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	b2da      	uxtb	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	4618      	mov	r0, r3
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3307      	adds	r3, #7
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003872:	4b34      	ldr	r3, [pc, #208]	@ (8003944 <_HandleIncomingPacket+0xd8>)
 8003874:	7e1b      	ldrb	r3, [r3, #24]
 8003876:	4618      	mov	r0, r3
 8003878:	1cfb      	adds	r3, r7, #3
 800387a:	2201      	movs	r2, #1
 800387c:	4619      	mov	r1, r3
 800387e:	f7ff fded 	bl	800345c <SEGGER_RTT_ReadNoLock>
 8003882:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d057      	beq.n	800393a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	2b80      	cmp	r3, #128	@ 0x80
 800388e:	d031      	beq.n	80038f4 <_HandleIncomingPacket+0x88>
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	dc40      	bgt.n	8003916 <_HandleIncomingPacket+0xaa>
 8003894:	2b07      	cmp	r3, #7
 8003896:	dc15      	bgt.n	80038c4 <_HandleIncomingPacket+0x58>
 8003898:	2b00      	cmp	r3, #0
 800389a:	dd3c      	ble.n	8003916 <_HandleIncomingPacket+0xaa>
 800389c:	3b01      	subs	r3, #1
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d839      	bhi.n	8003916 <_HandleIncomingPacket+0xaa>
 80038a2:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <_HandleIncomingPacket+0x3c>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038cb 	.word	0x080038cb
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	080038d7 	.word	0x080038d7
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	080038e3 	.word	0x080038e3
 80038bc:	080038e9 	.word	0x080038e9
 80038c0:	080038ef 	.word	0x080038ef
 80038c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80038c6:	d033      	beq.n	8003930 <_HandleIncomingPacket+0xc4>
 80038c8:	e025      	b.n	8003916 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80038ca:	f000 fff3 	bl	80048b4 <SEGGER_SYSVIEW_Start>
      break;
 80038ce:	e034      	b.n	800393a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80038d0:	f001 f8ac 	bl	8004a2c <SEGGER_SYSVIEW_Stop>
      break;
 80038d4:	e031      	b.n	800393a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80038d6:	f001 fa85 	bl	8004de4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80038da:	e02e      	b.n	800393a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80038dc:	f001 fa4a 	bl	8004d74 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80038e0:	e02b      	b.n	800393a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80038e2:	f001 f8c9 	bl	8004a78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80038e6:	e028      	b.n	800393a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80038e8:	f001 fd22 	bl	8005330 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80038ec:	e025      	b.n	800393a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80038ee:	f001 fd01 	bl	80052f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80038f2:	e022      	b.n	800393a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <_HandleIncomingPacket+0xd8>)
 80038f6:	7e1b      	ldrb	r3, [r3, #24]
 80038f8:	4618      	mov	r0, r3
 80038fa:	1cfb      	adds	r3, r7, #3
 80038fc:	2201      	movs	r2, #1
 80038fe:	4619      	mov	r1, r3
 8003900:	f7ff fdac 	bl	800345c <SEGGER_RTT_ReadNoLock>
 8003904:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	4618      	mov	r0, r3
 8003910:	f001 fc66 	bl	80051e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003914:	e00e      	b.n	8003934 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	b25b      	sxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	da0c      	bge.n	8003938 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <_HandleIncomingPacket+0xd8>)
 8003920:	7e1b      	ldrb	r3, [r3, #24]
 8003922:	4618      	mov	r0, r3
 8003924:	1cfb      	adds	r3, r7, #3
 8003926:	2201      	movs	r2, #1
 8003928:	4619      	mov	r1, r3
 800392a:	f7ff fd97 	bl	800345c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800392e:	e003      	b.n	8003938 <_HandleIncomingPacket+0xcc>
      break;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <_HandleIncomingPacket+0xce>
      break;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <_HandleIncomingPacket+0xce>
      break;
 8003938:	bf00      	nop
    }
  }
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	2000cf40 	.word	0x2000cf40

08003948 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	@ 0x30
 800394c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800394e:	2301      	movs	r3, #1
 8003950:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800395c:	4b32      	ldr	r3, [pc, #200]	@ (8003a28 <_TrySendOverflowPacket+0xe0>)
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003962:	e00b      	b.n	800397c <_TrySendOverflowPacket+0x34>
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003966:	b2da      	uxtb	r2, r3
 8003968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396a:	1c59      	adds	r1, r3, #1
 800396c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800396e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003978:	09db      	lsrs	r3, r3, #7
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003980:	d8f0      	bhi.n	8003964 <_TrySendOverflowPacket+0x1c>
 8003982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003990:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003992:	4b26      	ldr	r3, [pc, #152]	@ (8003a2c <_TrySendOverflowPacket+0xe4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003998:	4b23      	ldr	r3, [pc, #140]	@ (8003a28 <_TrySendOverflowPacket+0xe0>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	623b      	str	r3, [r7, #32]
 80039aa:	e00b      	b.n	80039c4 <_TrySendOverflowPacket+0x7c>
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	1c59      	adds	r1, r3, #1
 80039b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80039b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	09db      	lsrs	r3, r3, #7
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80039c8:	d8f0      	bhi.n	80039ac <_TrySendOverflowPacket+0x64>
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80039da:	4b13      	ldr	r3, [pc, #76]	@ (8003a28 <_TrySendOverflowPacket+0xe0>)
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	4618      	mov	r0, r3
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fc fc28 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80039f0:	4603      	mov	r3, r0
 80039f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80039f4:	f001 fe80 	bl	80056f8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80039fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003a28 <_TrySendOverflowPacket+0xe0>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003a04:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <_TrySendOverflowPacket+0xe0>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <_TrySendOverflowPacket+0xe0>)
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e004      	b.n	8003a1c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <_TrySendOverflowPacket+0xe0>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	3301      	adds	r3, #1
 8003a18:	4a03      	ldr	r2, [pc, #12]	@ (8003a28 <_TrySendOverflowPacket+0xe0>)
 8003a1a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003a1c:	693b      	ldr	r3, [r7, #16]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3730      	adds	r7, #48	@ 0x30
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	2000cf40 	.word	0x2000cf40
 8003a2c:	e0001004 	.word	0xe0001004

08003a30 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003a3c:	4b96      	ldr	r3, [pc, #600]	@ (8003c98 <_SendPacket+0x268>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d010      	beq.n	8003a66 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003a44:	4b94      	ldr	r3, [pc, #592]	@ (8003c98 <_SendPacket+0x268>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8130 	beq.w	8003cae <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003a4e:	4b92      	ldr	r3, [pc, #584]	@ (8003c98 <_SendPacket+0x268>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d109      	bne.n	8003a6a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003a56:	f7ff ff77 	bl	8003948 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003a5a:	4b8f      	ldr	r3, [pc, #572]	@ (8003c98 <_SendPacket+0x268>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	f040 8127 	bne.w	8003cb2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8003a64:	e001      	b.n	8003a6a <_SendPacket+0x3a>
    goto Send;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <_SendPacket+0x3c>
Send:
 8003a6a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b1f      	cmp	r3, #31
 8003a70:	d809      	bhi.n	8003a86 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003a72:	4b89      	ldr	r3, [pc, #548]	@ (8003c98 <_SendPacket+0x268>)
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f040 8118 	bne.w	8003cb6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b17      	cmp	r3, #23
 8003a8a:	d807      	bhi.n	8003a9c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e0c4      	b.n	8003c26 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003aa8:	d912      	bls.n	8003ad0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	09da      	lsrs	r2, r3, #7
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	3a01      	subs	r2, #1
 8003ac2:	60fa      	str	r2, [r7, #12]
 8003ac4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e006      	b.n	8003ade <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b7e      	cmp	r3, #126	@ 0x7e
 8003ae2:	d807      	bhi.n	8003af4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e098      	b.n	8003c26 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003afa:	d212      	bcs.n	8003b22 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	09da      	lsrs	r2, r3, #7
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	3a01      	subs	r2, #1
 8003b14:	60fa      	str	r2, [r7, #12]
 8003b16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	e081      	b.n	8003c26 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b28:	d21d      	bcs.n	8003b66 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0b9a      	lsrs	r2, r3, #14
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	09db      	lsrs	r3, r3, #7
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	3a01      	subs	r2, #1
 8003b44:	60fa      	str	r2, [r7, #12]
 8003b46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	3a01      	subs	r2, #1
 8003b58:	60fa      	str	r2, [r7, #12]
 8003b5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e05f      	b.n	8003c26 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b6c:	d228      	bcs.n	8003bc0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0d5a      	lsrs	r2, r3, #21
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0b9b      	lsrs	r3, r3, #14
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	3a01      	subs	r2, #1
 8003b88:	60fa      	str	r2, [r7, #12]
 8003b8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	09db      	lsrs	r3, r3, #7
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	60fa      	str	r2, [r7, #12]
 8003ba0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	3a01      	subs	r2, #1
 8003bb2:	60fa      	str	r2, [r7, #12]
 8003bb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	e032      	b.n	8003c26 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0f1a      	lsrs	r2, r3, #28
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	0d5b      	lsrs	r3, r3, #21
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	3a01      	subs	r2, #1
 8003bda:	60fa      	str	r2, [r7, #12]
 8003bdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0b9b      	lsrs	r3, r3, #14
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	3a01      	subs	r2, #1
 8003bf0:	60fa      	str	r2, [r7, #12]
 8003bf2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	09db      	lsrs	r3, r3, #7
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	3a01      	subs	r2, #1
 8003c06:	60fa      	str	r2, [r7, #12]
 8003c08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	60fa      	str	r2, [r7, #12]
 8003c1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003c26:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <_SendPacket+0x26c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c98 <_SendPacket+0x268>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	e00b      	b.n	8003c58 <_SendPacket+0x228>
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	6279      	str	r1, [r7, #36]	@ 0x24
 8003c4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	09db      	lsrs	r3, r3, #7
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c5c:	d8f0      	bhi.n	8003c40 <_SendPacket+0x210>
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c64:	6a3a      	ldr	r2, [r7, #32]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <_SendPacket+0x268>)
 8003c70:	785b      	ldrb	r3, [r3, #1]
 8003c72:	4618      	mov	r0, r3
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	f7fc fadf 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003c82:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003c84:	f001 fd38 	bl	80056f8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003c8e:	4a02      	ldr	r2, [pc, #8]	@ (8003c98 <_SendPacket+0x268>)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	60d3      	str	r3, [r2, #12]
 8003c94:	e010      	b.n	8003cb8 <_SendPacket+0x288>
 8003c96:	bf00      	nop
 8003c98:	2000cf40 	.word	0x2000cf40
 8003c9c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003ca0:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <_SendPacket+0x2d8>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b17      	ldr	r3, [pc, #92]	@ (8003d08 <_SendPacket+0x2d8>)
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e004      	b.n	8003cb8 <_SendPacket+0x288>
    goto SendDone;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <_SendPacket+0x288>
      goto SendDone;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <_SendPacket+0x288>
      goto SendDone;
 8003cb6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003cb8:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <_SendPacket+0x2d8>)
 8003cba:	7e1b      	ldrb	r3, [r3, #24]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <_SendPacket+0x2dc>)
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	440b      	add	r3, r1
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	336c      	adds	r3, #108	@ 0x6c
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <_SendPacket+0x2d8>)
 8003cd0:	7e1b      	ldrb	r3, [r3, #24]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	490d      	ldr	r1, [pc, #52]	@ (8003d0c <_SendPacket+0x2dc>)
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4403      	add	r3, r0
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	440b      	add	r3, r1
 8003ce0:	3370      	adds	r3, #112	@ 0x70
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d00b      	beq.n	8003d00 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003ce8:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <_SendPacket+0x2d8>)
 8003cea:	789b      	ldrb	r3, [r3, #2]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <_SendPacket+0x2d8>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003cf6:	f7ff fdb9 	bl	800386c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003cfa:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <_SendPacket+0x2d8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003d00:	bf00      	nop
 8003d02:	3728      	adds	r7, #40	@ 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	2000cf40 	.word	0x2000cf40
 8003d0c:	2000ba80 	.word	0x2000ba80

08003d10 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	@ 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3301      	adds	r3, #1
 8003d26:	2b80      	cmp	r3, #128	@ 0x80
 8003d28:	d80a      	bhi.n	8003d40 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	1c59      	adds	r1, r3, #1
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6051      	str	r1, [r2, #4]
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b80      	cmp	r3, #128	@ 0x80
 8003d46:	d15a      	bne.n	8003dfe <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	623b      	str	r3, [r7, #32]
 8003d68:	e00b      	b.n	8003d82 <_StoreChar+0x72>
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	1c59      	adds	r1, r3, #1
 8003d72:	6279      	str	r1, [r7, #36]	@ 0x24
 8003d74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	09db      	lsrs	r3, r3, #7
 8003d80:	623b      	str	r3, [r7, #32]
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d86:	d8f0      	bhi.n	8003d6a <_StoreChar+0x5a>
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d8e:	6a3a      	ldr	r2, [r7, #32]
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	e00b      	b.n	8003dba <_StoreChar+0xaa>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	61f9      	str	r1, [r7, #28]
 8003dac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	09db      	lsrs	r3, r3, #7
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dbe:	d8f0      	bhi.n	8003da2 <_StoreChar+0x92>
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	61fa      	str	r2, [r7, #28]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	221a      	movs	r2, #26
 8003dd6:	6939      	ldr	r1, [r7, #16]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe29 	bl	8003a30 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fd36 	bl	8003854 <_PreparePacket>
 8003de8:	4602      	mov	r2, r0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3728      	adds	r7, #40	@ 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	@ 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003e22:	e007      	b.n	8003e34 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	623b      	str	r3, [r7, #32]
    Width++;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d2f3      	bcs.n	8003e24 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d901      	bls.n	8003e48 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d000      	beq.n	8003e54 <_PrintUnsigned+0x4c>
 8003e52:	e01f      	b.n	8003e94 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01c      	beq.n	8003e94 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <_PrintUnsigned+0x68>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <_PrintUnsigned+0x68>
        c = '0';
 8003e6a:	2330      	movs	r3, #48	@ 0x30
 8003e6c:	76fb      	strb	r3, [r7, #27]
 8003e6e:	e001      	b.n	8003e74 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8003e70:	2320      	movs	r3, #32
 8003e72:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e74:	e007      	b.n	8003e86 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8003e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8003e7c:	7efb      	ldrb	r3, [r7, #27]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff ff45 	bl	8003d10 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <_PrintUnsigned+0x8c>
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d3f0      	bcc.n	8003e76 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d903      	bls.n	8003ea2 <_PrintUnsigned+0x9a>
      NumDigits--;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	e009      	b.n	8003eb6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d200      	bcs.n	8003eb6 <_PrintUnsigned+0xae>
        break;
 8003eb4:	e005      	b.n	8003ec2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003ec0:	e7e8      	b.n	8003e94 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eca:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed0:	fb02 f303 	mul.w	r3, r2, r3
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003eda:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <_PrintUnsigned+0x128>)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4413      	add	r3, r2
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff ff13 	bl	8003d10 <_StoreChar>
    Digit /= Base;
 8003eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e3      	bne.n	8003ec2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d011      	beq.n	8003f28 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8003f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00e      	beq.n	8003f28 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f0a:	e006      	b.n	8003f1a <_PrintUnsigned+0x112>
        FieldWidth--;
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8003f12:	2120      	movs	r1, #32
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff fefb 	bl	8003d10 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <_PrintUnsigned+0x120>
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d3f1      	bcc.n	8003f0c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3728      	adds	r7, #40	@ 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	080078a8 	.word	0x080078a8

08003f34 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfb8      	it	lt
 8003f48:	425b      	neglt	r3, r3
 8003f4a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003f50:	e007      	b.n	8003f62 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f5a:	613b      	str	r3, [r7, #16]
    Width++;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	daf3      	bge.n	8003f52 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d901      	bls.n	8003f76 <_PrintInt+0x42>
    Width = NumDigits;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <_PrintInt+0x5e>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	db04      	blt.n	8003f8c <_PrintInt+0x58>
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <_PrintInt+0x5e>
    FieldWidth--;
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <_PrintInt+0x6e>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <_PrintInt+0x9c>
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00e      	beq.n	8003fd0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fb2:	e006      	b.n	8003fc2 <_PrintInt+0x8e>
        FieldWidth--;
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003fba:	2120      	movs	r1, #32
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff fea7 	bl	8003d10 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <_PrintInt+0x9c>
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3f1      	bcc.n	8003fb4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da07      	bge.n	8003fe6 <_PrintInt+0xb2>
    v = -v;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	425b      	negs	r3, r3
 8003fda:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003fdc:	212d      	movs	r1, #45	@ 0x2d
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff fe96 	bl	8003d10 <_StoreChar>
 8003fe4:	e008      	b.n	8003ff8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003ff0:	212b      	movs	r1, #43	@ 0x2b
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff fe8c 	bl	8003d10 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d019      	beq.n	8004036 <_PrintInt+0x102>
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d114      	bne.n	8004036 <_PrintInt+0x102>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d111      	bne.n	8004036 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004018:	e006      	b.n	8004028 <_PrintInt+0xf4>
        FieldWidth--;
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	3b01      	subs	r3, #1
 800401e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004020:	2130      	movs	r1, #48	@ 0x30
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7ff fe74 	bl	8003d10 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <_PrintInt+0x102>
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	429a      	cmp	r2, r3
 8004034:	d3f1      	bcc.n	800401a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff fedf 	bl	8003e08 <_PrintUnsigned>
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b098      	sub	sp, #96	@ 0x60
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004060:	f3ef 8311 	mrs	r3, BASEPRI
 8004064:	f04f 0120 	mov.w	r1, #32
 8004068:	f381 8811 	msr	BASEPRI, r1
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406e:	48b7      	ldr	r0, [pc, #732]	@ (800434c <_VPrintTarget+0x2f8>)
 8004070:	f7ff fbf0 	bl	8003854 <_PreparePacket>
 8004074:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004076:	4bb5      	ldr	r3, [pc, #724]	@ (800434c <_VPrintTarget+0x2f8>)
 8004078:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800407a:	2300      	movs	r3, #0
 800407c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800407e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004080:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	3301      	adds	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800409a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 81a8 	beq.w	80043f4 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80040a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040a8:	2b25      	cmp	r3, #37	@ 0x25
 80040aa:	f040 8195 	bne.w	80043d8 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80040b2:	2301      	movs	r3, #1
 80040b4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80040be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040c2:	3b23      	subs	r3, #35	@ 0x23
 80040c4:	2b0d      	cmp	r3, #13
 80040c6:	d83f      	bhi.n	8004148 <_VPrintTarget+0xf4>
 80040c8:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <_VPrintTarget+0x7c>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	08004139 	.word	0x08004139
 80040d4:	08004149 	.word	0x08004149
 80040d8:	08004149 	.word	0x08004149
 80040dc:	08004149 	.word	0x08004149
 80040e0:	08004149 	.word	0x08004149
 80040e4:	08004149 	.word	0x08004149
 80040e8:	08004149 	.word	0x08004149
 80040ec:	08004149 	.word	0x08004149
 80040f0:	08004129 	.word	0x08004129
 80040f4:	08004149 	.word	0x08004149
 80040f8:	08004109 	.word	0x08004109
 80040fc:	08004149 	.word	0x08004149
 8004100:	08004149 	.word	0x08004149
 8004104:	08004119 	.word	0x08004119
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	e01a      	b.n	800414e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411a:	f043 0302 	orr.w	r3, r3, #2
 800411e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e012      	b.n	800414e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800412a:	f043 0304 	orr.w	r3, r3, #4
 800412e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e00a      	b.n	800414e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413a:	f043 0308 	orr.w	r3, r3, #8
 800413e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e002      	b.n	800414e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004148:	2300      	movs	r3, #0
 800414a:	653b      	str	r3, [r7, #80]	@ 0x50
 800414c:	bf00      	nop
        }
      } while (v);
 800414e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1b0      	bne.n	80040b6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004154:	2300      	movs	r3, #0
 8004156:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004160:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004164:	2b2f      	cmp	r3, #47	@ 0x2f
 8004166:	d912      	bls.n	800418e <_VPrintTarget+0x13a>
 8004168:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800416c:	2b39      	cmp	r3, #57	@ 0x39
 800416e:	d80e      	bhi.n	800418e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3301      	adds	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	461a      	mov	r2, r3
 8004182:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004186:	4413      	add	r3, r2
 8004188:	3b30      	subs	r3, #48	@ 0x30
 800418a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 800418c:	e7e4      	b.n	8004158 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800418e:	2300      	movs	r3, #0
 8004190:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800419a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800419e:	2b2e      	cmp	r3, #46	@ 0x2e
 80041a0:	d11d      	bne.n	80041de <_VPrintTarget+0x18a>
        sFormat++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80041b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80041b6:	d912      	bls.n	80041de <_VPrintTarget+0x18a>
 80041b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041bc:	2b39      	cmp	r3, #57	@ 0x39
 80041be:	d80e      	bhi.n	80041de <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80041c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	461a      	mov	r2, r3
 80041d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041d6:	4413      	add	r3, r2
 80041d8:	3b30      	subs	r3, #48	@ 0x30
 80041da:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80041dc:	e7e4      	b.n	80041a8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80041e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041ea:	2b6c      	cmp	r3, #108	@ 0x6c
 80041ec:	d003      	beq.n	80041f6 <_VPrintTarget+0x1a2>
 80041ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041f2:	2b68      	cmp	r3, #104	@ 0x68
 80041f4:	d107      	bne.n	8004206 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3301      	adds	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004204:	e7ef      	b.n	80041e6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004206:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800420a:	2b25      	cmp	r3, #37	@ 0x25
 800420c:	f000 80d8 	beq.w	80043c0 <_VPrintTarget+0x36c>
 8004210:	2b25      	cmp	r3, #37	@ 0x25
 8004212:	f2c0 80dc 	blt.w	80043ce <_VPrintTarget+0x37a>
 8004216:	2b78      	cmp	r3, #120	@ 0x78
 8004218:	f300 80d9 	bgt.w	80043ce <_VPrintTarget+0x37a>
 800421c:	2b58      	cmp	r3, #88	@ 0x58
 800421e:	f2c0 80d6 	blt.w	80043ce <_VPrintTarget+0x37a>
 8004222:	3b58      	subs	r3, #88	@ 0x58
 8004224:	2b20      	cmp	r3, #32
 8004226:	f200 80d2 	bhi.w	80043ce <_VPrintTarget+0x37a>
 800422a:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <_VPrintTarget+0x1dc>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004327 	.word	0x08004327
 8004234:	080043cf 	.word	0x080043cf
 8004238:	080043cf 	.word	0x080043cf
 800423c:	080043cf 	.word	0x080043cf
 8004240:	080043cf 	.word	0x080043cf
 8004244:	080043cf 	.word	0x080043cf
 8004248:	080043cf 	.word	0x080043cf
 800424c:	080043cf 	.word	0x080043cf
 8004250:	080043cf 	.word	0x080043cf
 8004254:	080043cf 	.word	0x080043cf
 8004258:	080043cf 	.word	0x080043cf
 800425c:	080042b5 	.word	0x080042b5
 8004260:	080042db 	.word	0x080042db
 8004264:	080043cf 	.word	0x080043cf
 8004268:	080043cf 	.word	0x080043cf
 800426c:	080043cf 	.word	0x080043cf
 8004270:	080043cf 	.word	0x080043cf
 8004274:	080043cf 	.word	0x080043cf
 8004278:	080043cf 	.word	0x080043cf
 800427c:	080043cf 	.word	0x080043cf
 8004280:	080043cf 	.word	0x080043cf
 8004284:	080043cf 	.word	0x080043cf
 8004288:	080043cf 	.word	0x080043cf
 800428c:	080043cf 	.word	0x080043cf
 8004290:	0800439b 	.word	0x0800439b
 8004294:	080043cf 	.word	0x080043cf
 8004298:	080043cf 	.word	0x080043cf
 800429c:	08004351 	.word	0x08004351
 80042a0:	080043cf 	.word	0x080043cf
 80042a4:	08004301 	.word	0x08004301
 80042a8:	080043cf 	.word	0x080043cf
 80042ac:	080043cf 	.word	0x080043cf
 80042b0:	08004327 	.word	0x08004327
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1d19      	adds	r1, r3, #4
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6011      	str	r1, [r2, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80042c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80042c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80042cc:	f107 0310 	add.w	r3, r7, #16
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd1c 	bl	8003d10 <_StoreChar>
        break;
 80042d8:	e07a      	b.n	80043d0 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	1d19      	adds	r1, r3, #4
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6011      	str	r1, [r2, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80042e8:	f107 0010 	add.w	r0, r7, #16
 80042ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f6:	220a      	movs	r2, #10
 80042f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80042fa:	f7ff fe1b 	bl	8003f34 <_PrintInt>
        break;
 80042fe:	e067      	b.n	80043d0 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1d19      	adds	r1, r3, #4
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800430e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004310:	f107 0010 	add.w	r0, r7, #16
 8004314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800431e:	220a      	movs	r2, #10
 8004320:	f7ff fd72 	bl	8003e08 <_PrintUnsigned>
        break;
 8004324:	e054      	b.n	80043d0 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	1d19      	adds	r1, r3, #4
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6011      	str	r1, [r2, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004334:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004336:	f107 0010 	add.w	r0, r7, #16
 800433a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004344:	2210      	movs	r2, #16
 8004346:	f7ff fd5f 	bl	8003e08 <_PrintUnsigned>
        break;
 800434a:	e041      	b.n	80043d0 <_VPrintTarget+0x37c>
 800434c:	2000cf70 	.word	0x2000cf70
      case 's':
        s = va_arg(*pParamList, const char*);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6011      	str	r1, [r2, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800435e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <_VPrintTarget+0x314>
          s = "(null)";
 8004364:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <_VPrintTarget+0x43c>)
 8004366:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004372:	3301      	adds	r3, #1
 8004374:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004376:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800437e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004382:	f107 0310 	add.w	r3, r7, #16
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fcc1 	bl	8003d10 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	2b7f      	cmp	r3, #127	@ 0x7f
 8004392:	d9e9      	bls.n	8004368 <_VPrintTarget+0x314>
        break;
 8004394:	e01c      	b.n	80043d0 <_VPrintTarget+0x37c>
            break;
 8004396:	bf00      	nop
        break;
 8004398:	e01a      	b.n	80043d0 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	1d19      	adds	r1, r3, #4
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6011      	str	r1, [r2, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80043a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80043aa:	f107 0010 	add.w	r0, r7, #16
 80043ae:	2300      	movs	r3, #0
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	2308      	movs	r3, #8
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	2308      	movs	r3, #8
 80043b8:	2210      	movs	r2, #16
 80043ba:	f7ff fd25 	bl	8003e08 <_PrintUnsigned>
        break;
 80043be:	e007      	b.n	80043d0 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80043c0:	f107 0310 	add.w	r3, r7, #16
 80043c4:	2125      	movs	r1, #37	@ 0x25
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fca2 	bl	8003d10 <_StoreChar>
        break;
 80043cc:	e000      	b.n	80043d0 <_VPrintTarget+0x37c>
      default:
        break;
 80043ce:	bf00      	nop
      }
      sFormat++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e007      	b.n	80043e8 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80043d8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80043dc:	f107 0310 	add.w	r3, r7, #16
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fc94 	bl	8003d10 <_StoreChar>
    }
  } while (*sFormat);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f47f ae4d 	bne.w	800408c <_VPrintTarget+0x38>
 80043f2:	e000      	b.n	80043f6 <_VPrintTarget+0x3a2>
      break;
 80043f4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d041      	beq.n	8004480 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800440c:	e00b      	b.n	8004426 <_VPrintTarget+0x3d2>
 800440e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004410:	b2da      	uxtb	r2, r3
 8004412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004414:	1c59      	adds	r1, r3, #1
 8004416:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004418:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004422:	09db      	lsrs	r3, r3, #7
 8004424:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	2b7f      	cmp	r3, #127	@ 0x7f
 800442a:	d8f0      	bhi.n	800440e <_VPrintTarget+0x3ba>
 800442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004432:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800443a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004440:	2300      	movs	r3, #0
 8004442:	633b      	str	r3, [r7, #48]	@ 0x30
 8004444:	e00b      	b.n	800445e <_VPrintTarget+0x40a>
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	b2da      	uxtb	r2, r3
 800444a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444c:	1c59      	adds	r1, r3, #1
 800444e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004450:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	09db      	lsrs	r3, r3, #7
 800445c:	633b      	str	r3, [r7, #48]	@ 0x30
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	2b7f      	cmp	r3, #127	@ 0x7f
 8004462:	d8f0      	bhi.n	8004446 <_VPrintTarget+0x3f2>
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	637a      	str	r2, [r7, #52]	@ 0x34
 800446a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6979      	ldr	r1, [r7, #20]
 8004478:	221a      	movs	r2, #26
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fad8 	bl	8003a30 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004482:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004486:	bf00      	nop
 8004488:	3758      	adds	r7, #88	@ 0x58
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	080077f0 	.word	0x080077f0

08004494 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044a2:	2300      	movs	r3, #0
 80044a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80044a8:	4917      	ldr	r1, [pc, #92]	@ (8004508 <SEGGER_SYSVIEW_Init+0x74>)
 80044aa:	4818      	ldr	r0, [pc, #96]	@ (800450c <SEGGER_SYSVIEW_Init+0x78>)
 80044ac:	f7ff f8d2 	bl	8003654 <SEGGER_RTT_AllocUpBuffer>
 80044b0:	4603      	mov	r3, r0
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	4b16      	ldr	r3, [pc, #88]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044b6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044ba:	785a      	ldrb	r2, [r3, #1]
 80044bc:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044be:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044c0:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044c2:	7e1b      	ldrb	r3, [r3, #24]
 80044c4:	4618      	mov	r0, r3
 80044c6:	2300      	movs	r3, #0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2308      	movs	r3, #8
 80044cc:	4a11      	ldr	r2, [pc, #68]	@ (8004514 <SEGGER_SYSVIEW_Init+0x80>)
 80044ce:	490f      	ldr	r1, [pc, #60]	@ (800450c <SEGGER_SYSVIEW_Init+0x78>)
 80044d0:	f7ff f944 	bl	800375c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80044d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044da:	4b0f      	ldr	r3, [pc, #60]	@ (8004518 <SEGGER_SYSVIEW_Init+0x84>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a0c      	ldr	r2, [pc, #48]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044e0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80044e2:	4a0b      	ldr	r2, [pc, #44]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80044e8:	4a09      	ldr	r2, [pc, #36]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80044ee:	4a08      	ldr	r2, [pc, #32]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80044f4:	4a06      	ldr	r2, [pc, #24]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80044fa:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <SEGGER_SYSVIEW_Init+0x7c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	2000bf38 	.word	0x2000bf38
 800450c:	080077f8 	.word	0x080077f8
 8004510:	2000cf40 	.word	0x2000cf40
 8004514:	2000cf38 	.word	0x2000cf38
 8004518:	e0001004 	.word	0xe0001004

0800451c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004524:	4a04      	ldr	r2, [pc, #16]	@ (8004538 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6113      	str	r3, [r2, #16]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	2000cf40 	.word	0x2000cf40

0800453c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004544:	f3ef 8311 	mrs	r3, BASEPRI
 8004548:	f04f 0120 	mov.w	r1, #32
 800454c:	f381 8811 	msr	BASEPRI, r1
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4808      	ldr	r0, [pc, #32]	@ (8004574 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004554:	f7ff f97e 	bl	8003854 <_PreparePacket>
 8004558:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	68b8      	ldr	r0, [r7, #8]
 8004560:	f7ff fa66 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f383 8811 	msr	BASEPRI, r3
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2000cf70 	.word	0x2000cf70

08004578 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004582:	f3ef 8311 	mrs	r3, BASEPRI
 8004586:	f04f 0120 	mov.w	r1, #32
 800458a:	f381 8811 	msr	BASEPRI, r1
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	4816      	ldr	r0, [pc, #88]	@ (80045ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004592:	f7ff f95f 	bl	8003854 <_PreparePacket>
 8004596:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e00b      	b.n	80045be <SEGGER_SYSVIEW_RecordU32+0x46>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	1c59      	adds	r1, r3, #1
 80045ae:	61f9      	str	r1, [r7, #28]
 80045b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	09db      	lsrs	r3, r3, #7
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80045c2:	d8f0      	bhi.n	80045a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	61fa      	str	r2, [r7, #28]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	6938      	ldr	r0, [r7, #16]
 80045da:	f7ff fa29 	bl	8003a30 <_SendPacket>
  RECORD_END();
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f383 8811 	msr	BASEPRI, r3
}
 80045e4:	bf00      	nop
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	2000cf70 	.word	0x2000cf70

080045f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08c      	sub	sp, #48	@ 0x30
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80045fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004600:	f04f 0120 	mov.w	r1, #32
 8004604:	f381 8811 	msr	BASEPRI, r1
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	4825      	ldr	r0, [pc, #148]	@ (80046a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800460c:	f7ff f922 	bl	8003854 <_PreparePacket>
 8004610:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800461e:	e00b      	b.n	8004638 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004622:	b2da      	uxtb	r2, r3
 8004624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800462a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	09db      	lsrs	r3, r3, #7
 8004636:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	2b7f      	cmp	r3, #127	@ 0x7f
 800463c:	d8f0      	bhi.n	8004620 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	e00b      	b.n	8004670 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	1c59      	adds	r1, r3, #1
 8004660:	6279      	str	r1, [r7, #36]	@ 0x24
 8004662:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	09db      	lsrs	r3, r3, #7
 800466e:	623b      	str	r3, [r7, #32]
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	2b7f      	cmp	r3, #127	@ 0x7f
 8004674:	d8f0      	bhi.n	8004658 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	627a      	str	r2, [r7, #36]	@ 0x24
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6979      	ldr	r1, [r7, #20]
 800468a:	69b8      	ldr	r0, [r7, #24]
 800468c:	f7ff f9d0 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f383 8811 	msr	BASEPRI, r3
}
 8004696:	bf00      	nop
 8004698:	3730      	adds	r7, #48	@ 0x30
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	2000cf70 	.word	0x2000cf70

080046a4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	@ 0x38
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80046b2:	f3ef 8311 	mrs	r3, BASEPRI
 80046b6:	f04f 0120 	mov.w	r1, #32
 80046ba:	f381 8811 	msr	BASEPRI, r1
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	4832      	ldr	r0, [pc, #200]	@ (800478c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80046c2:	f7ff f8c7 	bl	8003854 <_PreparePacket>
 80046c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d4:	e00b      	b.n	80046ee <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80046d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046dc:	1c59      	adds	r1, r3, #1
 80046de:	6379      	str	r1, [r7, #52]	@ 0x34
 80046e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ea:	09db      	lsrs	r3, r3, #7
 80046ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80046f2:	d8f0      	bhi.n	80046d6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80046f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80046fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004702:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800470c:	e00b      	b.n	8004726 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800470e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004710:	b2da      	uxtb	r2, r3
 8004712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004714:	1c59      	adds	r1, r3, #1
 8004716:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004718:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	09db      	lsrs	r3, r3, #7
 8004724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	2b7f      	cmp	r3, #127	@ 0x7f
 800472a:	d8f0      	bhi.n	800470e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800472c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004732:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	e00b      	b.n	800475e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	1c59      	adds	r1, r3, #1
 800474e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004750:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	09db      	lsrs	r3, r3, #7
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b7f      	cmp	r3, #127	@ 0x7f
 8004762:	d8f0      	bhi.n	8004746 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	627a      	str	r2, [r7, #36]	@ 0x24
 800476a:	6a3a      	ldr	r2, [r7, #32]
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	69b8      	ldr	r0, [r7, #24]
 800477a:	f7ff f959 	bl	8003a30 <_SendPacket>
  RECORD_END();
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f383 8811 	msr	BASEPRI, r3
}
 8004784:	bf00      	nop
 8004786:	3738      	adds	r7, #56	@ 0x38
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	2000cf70 	.word	0x2000cf70

08004790 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b090      	sub	sp, #64	@ 0x40
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800479e:	f3ef 8311 	mrs	r3, BASEPRI
 80047a2:	f04f 0120 	mov.w	r1, #32
 80047a6:	f381 8811 	msr	BASEPRI, r1
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	4840      	ldr	r0, [pc, #256]	@ (80048b0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80047ae:	f7ff f851 	bl	8003854 <_PreparePacket>
 80047b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047c0:	e00b      	b.n	80047da <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80047c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c8:	1c59      	adds	r1, r3, #1
 80047ca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80047cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d6:	09db      	lsrs	r3, r3, #7
 80047d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80047de:	d8f0      	bhi.n	80047c2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80047e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80047f8:	e00b      	b.n	8004812 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004800:	1c59      	adds	r1, r3, #1
 8004802:	6379      	str	r1, [r7, #52]	@ 0x34
 8004804:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	09db      	lsrs	r3, r3, #7
 8004810:	633b      	str	r3, [r7, #48]	@ 0x30
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	2b7f      	cmp	r3, #127	@ 0x7f
 8004816:	d8f0      	bhi.n	80047fa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	637a      	str	r2, [r7, #52]	@ 0x34
 800481e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004830:	e00b      	b.n	800484a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	b2da      	uxtb	r2, r3
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	1c59      	adds	r1, r3, #1
 800483a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800483c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	09db      	lsrs	r3, r3, #7
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	2b7f      	cmp	r3, #127	@ 0x7f
 800484e:	d8f0      	bhi.n	8004832 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
 8004864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	e00b      	b.n	8004882 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	6279      	str	r1, [r7, #36]	@ 0x24
 8004874:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	09db      	lsrs	r3, r3, #7
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	2b7f      	cmp	r3, #127	@ 0x7f
 8004886:	d8f0      	bhi.n	800486a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	627a      	str	r2, [r7, #36]	@ 0x24
 800488e:	6a3a      	ldr	r2, [r7, #32]
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	6979      	ldr	r1, [r7, #20]
 800489c:	69b8      	ldr	r0, [r7, #24]
 800489e:	f7ff f8c7 	bl	8003a30 <_SendPacket>
  RECORD_END();
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f383 8811 	msr	BASEPRI, r3
}
 80048a8:	bf00      	nop
 80048aa:	3740      	adds	r7, #64	@ 0x40
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	2000cf70 	.word	0x2000cf70

080048b4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	@ 0x30
 80048b8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80048ba:	4b59      	ldr	r3, [pc, #356]	@ (8004a20 <SEGGER_SYSVIEW_Start+0x16c>)
 80048bc:	2201      	movs	r2, #1
 80048be:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80048c0:	f3ef 8311 	mrs	r3, BASEPRI
 80048c4:	f04f 0120 	mov.w	r1, #32
 80048c8:	f381 8811 	msr	BASEPRI, r1
 80048cc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80048ce:	4b54      	ldr	r3, [pc, #336]	@ (8004a20 <SEGGER_SYSVIEW_Start+0x16c>)
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	220a      	movs	r2, #10
 80048d4:	4953      	ldr	r1, [pc, #332]	@ (8004a24 <SEGGER_SYSVIEW_Start+0x170>)
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fb fcb2 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80048e2:	f000 ff09 	bl	80056f8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80048e6:	200a      	movs	r0, #10
 80048e8:	f7ff fe28 	bl	800453c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048ec:	f3ef 8311 	mrs	r3, BASEPRI
 80048f0:	f04f 0120 	mov.w	r1, #32
 80048f4:	f381 8811 	msr	BASEPRI, r1
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	484b      	ldr	r0, [pc, #300]	@ (8004a28 <SEGGER_SYSVIEW_Start+0x174>)
 80048fc:	f7fe ffaa 	bl	8003854 <_PreparePacket>
 8004900:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800490a:	4b45      	ldr	r3, [pc, #276]	@ (8004a20 <SEGGER_SYSVIEW_Start+0x16c>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004910:	e00b      	b.n	800492a <SEGGER_SYSVIEW_Start+0x76>
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	b2da      	uxtb	r2, r3
 8004916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004918:	1c59      	adds	r1, r3, #1
 800491a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800491c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	09db      	lsrs	r3, r3, #7
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800492a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492c:	2b7f      	cmp	r3, #127	@ 0x7f
 800492e:	d8f0      	bhi.n	8004912 <SEGGER_SYSVIEW_Start+0x5e>
 8004930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
 8004944:	4b36      	ldr	r3, [pc, #216]	@ (8004a20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	e00b      	b.n	8004964 <SEGGER_SYSVIEW_Start+0xb0>
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	1c59      	adds	r1, r3, #1
 8004954:	6279      	str	r1, [r7, #36]	@ 0x24
 8004956:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	09db      	lsrs	r3, r3, #7
 8004962:	623b      	str	r3, [r7, #32]
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	2b7f      	cmp	r3, #127	@ 0x7f
 8004968:	d8f0      	bhi.n	800494c <SEGGER_SYSVIEW_Start+0x98>
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	4b28      	ldr	r3, [pc, #160]	@ (8004a20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e00b      	b.n	800499e <SEGGER_SYSVIEW_Start+0xea>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	1c59      	adds	r1, r3, #1
 800498e:	61f9      	str	r1, [r7, #28]
 8004990:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	09db      	lsrs	r3, r3, #7
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80049a2:	d8f0      	bhi.n	8004986 <SEGGER_SYSVIEW_Start+0xd2>
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	61fa      	str	r2, [r7, #28]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e00b      	b.n	80049d6 <SEGGER_SYSVIEW_Start+0x122>
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	1c59      	adds	r1, r3, #1
 80049c6:	6179      	str	r1, [r7, #20]
 80049c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	09db      	lsrs	r3, r3, #7
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80049da:	d8f0      	bhi.n	80049be <SEGGER_SYSVIEW_Start+0x10a>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	617a      	str	r2, [r7, #20]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049ec:	2218      	movs	r2, #24
 80049ee:	6839      	ldr	r1, [r7, #0]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff f81d 	bl	8003a30 <_SendPacket>
      RECORD_END();
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049fc:	4b08      	ldr	r3, [pc, #32]	@ (8004a20 <SEGGER_SYSVIEW_Start+0x16c>)
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004a0a:	f000 f9eb 	bl	8004de4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004a0e:	f000 f9b1 	bl	8004d74 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004a12:	f000 fc8d 	bl	8005330 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004a16:	bf00      	nop
 8004a18:	3730      	adds	r7, #48	@ 0x30
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	2000cf40 	.word	0x2000cf40
 8004a24:	0800789c 	.word	0x0800789c
 8004a28:	2000cf70 	.word	0x2000cf70

08004a2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a32:	f3ef 8311 	mrs	r3, BASEPRI
 8004a36:	f04f 0120 	mov.w	r1, #32
 8004a3a:	f381 8811 	msr	BASEPRI, r1
 8004a3e:	607b      	str	r3, [r7, #4]
 8004a40:	480b      	ldr	r0, [pc, #44]	@ (8004a70 <SEGGER_SYSVIEW_Stop+0x44>)
 8004a42:	f7fe ff07 	bl	8003854 <_PreparePacket>
 8004a46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004a48:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <SEGGER_SYSVIEW_Stop+0x48>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004a50:	220b      	movs	r2, #11
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	6838      	ldr	r0, [r7, #0]
 8004a56:	f7fe ffeb 	bl	8003a30 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004a5a:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <SEGGER_SYSVIEW_Stop+0x48>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f383 8811 	msr	BASEPRI, r3
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000cf70 	.word	0x2000cf70
 8004a74:	2000cf40 	.word	0x2000cf40

08004a78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08c      	sub	sp, #48	@ 0x30
 8004a7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a82:	f04f 0120 	mov.w	r1, #32
 8004a86:	f381 8811 	msr	BASEPRI, r1
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	4845      	ldr	r0, [pc, #276]	@ (8004ba4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004a8e:	f7fe fee1 	bl	8003854 <_PreparePacket>
 8004a92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a9c:	4b42      	ldr	r3, [pc, #264]	@ (8004ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aa2:	e00b      	b.n	8004abc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aaa:	1c59      	adds	r1, r3, #1
 8004aac:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004aae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	09db      	lsrs	r3, r3, #7
 8004aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ac0:	d8f0      	bhi.n	8004aa4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad6:	4b34      	ldr	r3, [pc, #208]	@ (8004ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	623b      	str	r3, [r7, #32]
 8004adc:	e00b      	b.n	8004af6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	1c59      	adds	r1, r3, #1
 8004ae6:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ae8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	09db      	lsrs	r3, r3, #7
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004afa:	d8f0      	bhi.n	8004ade <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b02:	6a3a      	ldr	r2, [r7, #32]
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	4b25      	ldr	r3, [pc, #148]	@ (8004ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	e00b      	b.n	8004b30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	61f9      	str	r1, [r7, #28]
 8004b22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	09db      	lsrs	r3, r3, #7
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b34:	d8f0      	bhi.n	8004b18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	e00b      	b.n	8004b68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	6179      	str	r1, [r7, #20]
 8004b5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	09db      	lsrs	r3, r3, #7
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b6c:	d8f0      	bhi.n	8004b50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	617a      	str	r2, [r7, #20]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004b7e:	2218      	movs	r2, #24
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	68b8      	ldr	r0, [r7, #8]
 8004b84:	f7fe ff54 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004b96:	4b04      	ldr	r3, [pc, #16]	@ (8004ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	4798      	blx	r3
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	3730      	adds	r7, #48	@ 0x30
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	2000cf70 	.word	0x2000cf70
 8004ba8:	2000cf40 	.word	0x2000cf40

08004bac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b092      	sub	sp, #72	@ 0x48
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb8:	f04f 0120 	mov.w	r1, #32
 8004bbc:	f381 8811 	msr	BASEPRI, r1
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	486a      	ldr	r0, [pc, #424]	@ (8004d6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004bc4:	f7fe fe46 	bl	8003854 <_PreparePacket>
 8004bc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b66      	ldr	r3, [pc, #408]	@ (8004d70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bde:	e00b      	b.n	8004bf8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	6479      	str	r1, [r7, #68]	@ 0x44
 8004bea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf4:	09db      	lsrs	r3, r3, #7
 8004bf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bfc:	d8f0      	bhi.n	8004be0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c18:	e00b      	b.n	8004c32 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c20:	1c59      	adds	r1, r3, #1
 8004c22:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004c24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2e:	09db      	lsrs	r3, r3, #7
 8004c30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c36:	d8f0      	bhi.n	8004c1a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c46:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	4619      	mov	r1, r3
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7fe fdcf 	bl	80037f4 <_EncodeStr>
 8004c56:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004c58:	2209      	movs	r2, #9
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	6938      	ldr	r0, [r7, #16]
 8004c5e:	f7fe fee7 	bl	8003a30 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4b40      	ldr	r3, [pc, #256]	@ (8004d70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c76:	e00b      	b.n	8004c90 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	6379      	str	r1, [r7, #52]	@ 0x34
 8004c82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8c:	09db      	lsrs	r3, r3, #7
 8004c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c94:	d8f0      	bhi.n	8004c78 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cb0:	e00b      	b.n	8004cca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb8:	1c59      	adds	r1, r3, #1
 8004cba:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004cbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	09db      	lsrs	r3, r3, #7
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cce:	d8f0      	bhi.n	8004cb2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	623b      	str	r3, [r7, #32]
 8004cea:	e00b      	b.n	8004d04 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	6279      	str	r1, [r7, #36]	@ 0x24
 8004cf6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	09db      	lsrs	r3, r3, #7
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d08:	d8f0      	bhi.n	8004cec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	e00b      	b.n	8004d3e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	1c59      	adds	r1, r3, #1
 8004d2e:	61f9      	str	r1, [r7, #28]
 8004d30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	09db      	lsrs	r3, r3, #7
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d42:	d8f0      	bhi.n	8004d26 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	61fa      	str	r2, [r7, #28]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004d54:	2215      	movs	r2, #21
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6938      	ldr	r0, [r7, #16]
 8004d5a:	f7fe fe69 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f383 8811 	msr	BASEPRI, r3
}
 8004d64:	bf00      	nop
 8004d66:	3748      	adds	r7, #72	@ 0x48
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	2000cf70 	.word	0x2000cf70
 8004d70:	2000cf40 	.word	0x2000cf40

08004d74 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004d78:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004d80:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004d8a:	4b03      	ldr	r3, [pc, #12]	@ (8004d98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4798      	blx	r3
  }
}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	2000cf40 	.word	0x2000cf40

08004d9c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004da4:	f3ef 8311 	mrs	r3, BASEPRI
 8004da8:	f04f 0120 	mov.w	r1, #32
 8004dac:	f381 8811 	msr	BASEPRI, r1
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	480b      	ldr	r0, [pc, #44]	@ (8004de0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004db4:	f7fe fd4e 	bl	8003854 <_PreparePacket>
 8004db8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dba:	2280      	movs	r2, #128	@ 0x80
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	6938      	ldr	r0, [r7, #16]
 8004dc0:	f7fe fd18 	bl	80037f4 <_EncodeStr>
 8004dc4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004dc6:	220e      	movs	r2, #14
 8004dc8:	68f9      	ldr	r1, [r7, #12]
 8004dca:	6938      	ldr	r0, [r7, #16]
 8004dcc:	f7fe fe30 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f383 8811 	msr	BASEPRI, r3
}
 8004dd6:	bf00      	nop
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	2000cf70 	.word	0x2000cf70

08004de4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004de4:	b590      	push	{r4, r7, lr}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004dea:	4b15      	ldr	r3, [pc, #84]	@ (8004e40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01a      	beq.n	8004e28 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004df2:	4b13      	ldr	r3, [pc, #76]	@ (8004e40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004dfc:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4798      	blx	r3
 8004e04:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e08:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	000a      	movs	r2, r1
 8004e18:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4621      	mov	r1, r4
 8004e20:	200d      	movs	r0, #13
 8004e22:	f7ff fbe5 	bl	80045f0 <SEGGER_SYSVIEW_RecordU32x2>
 8004e26:	e006      	b.n	8004e36 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004e28:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	200c      	movs	r0, #12
 8004e30:	f7ff fba2 	bl	8004578 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd90      	pop	{r4, r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2000cf40 	.word	0x2000cf40
 8004e44:	e0001004 	.word	0xe0001004

08004e48 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e52:	f04f 0120 	mov.w	r1, #32
 8004e56:	f381 8811 	msr	BASEPRI, r1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	4819      	ldr	r0, [pc, #100]	@ (8004ec4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004e5e:	f7fe fcf9 	bl	8003854 <_PreparePacket>
 8004e62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004e68:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e70:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	e00b      	b.n	8004e94 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1c59      	adds	r1, r3, #1
 8004e84:	6179      	str	r1, [r7, #20]
 8004e86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	09db      	lsrs	r3, r3, #7
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e98:	d8f0      	bhi.n	8004e7c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	617a      	str	r2, [r7, #20]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004eaa:	2202      	movs	r2, #2
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f7fe fdbe 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f383 8811 	msr	BASEPRI, r3
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	2000cf70 	.word	0x2000cf70
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed6:	f04f 0120 	mov.w	r1, #32
 8004eda:	f381 8811 	msr	BASEPRI, r1
 8004ede:	607b      	str	r3, [r7, #4]
 8004ee0:	4807      	ldr	r0, [pc, #28]	@ (8004f00 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004ee2:	f7fe fcb7 	bl	8003854 <_PreparePacket>
 8004ee6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ee8:	2203      	movs	r2, #3
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6838      	ldr	r0, [r7, #0]
 8004eee:	f7fe fd9f 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f383 8811 	msr	BASEPRI, r3
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	2000cf70 	.word	0x2000cf70

08004f04 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f0e:	f04f 0120 	mov.w	r1, #32
 8004f12:	f381 8811 	msr	BASEPRI, r1
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	4807      	ldr	r0, [pc, #28]	@ (8004f38 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004f1a:	f7fe fc9b 	bl	8003854 <_PreparePacket>
 8004f1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004f20:	2212      	movs	r2, #18
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6838      	ldr	r0, [r7, #0]
 8004f26:	f7fe fd83 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f383 8811 	msr	BASEPRI, r3
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	2000cf70 	.word	0x2000cf70

08004f3c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f42:	f3ef 8311 	mrs	r3, BASEPRI
 8004f46:	f04f 0120 	mov.w	r1, #32
 8004f4a:	f381 8811 	msr	BASEPRI, r1
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	4807      	ldr	r0, [pc, #28]	@ (8004f70 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004f52:	f7fe fc7f 	bl	8003854 <_PreparePacket>
 8004f56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004f58:	2211      	movs	r2, #17
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6838      	ldr	r0, [r7, #0]
 8004f5e:	f7fe fd67 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f383 8811 	msr	BASEPRI, r3
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	2000cf70 	.word	0x2000cf70

08004f74 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f80:	f04f 0120 	mov.w	r1, #32
 8004f84:	f381 8811 	msr	BASEPRI, r1
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	4819      	ldr	r0, [pc, #100]	@ (8004ff0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004f8c:	f7fe fc62 	bl	8003854 <_PreparePacket>
 8004f90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f96:	4b17      	ldr	r3, [pc, #92]	@ (8004ff4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	e00b      	b.n	8004fc2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	1c59      	adds	r1, r3, #1
 8004fb2:	61f9      	str	r1, [r7, #28]
 8004fb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	09db      	lsrs	r3, r3, #7
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fc6:	d8f0      	bhi.n	8004faa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	61fa      	str	r2, [r7, #28]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004fd8:	2208      	movs	r2, #8
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	6938      	ldr	r0, [r7, #16]
 8004fde:	f7fe fd27 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f383 8811 	msr	BASEPRI, r3
}
 8004fe8:	bf00      	nop
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	2000cf70 	.word	0x2000cf70
 8004ff4:	2000cf40 	.word	0x2000cf40

08004ff8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005000:	f3ef 8311 	mrs	r3, BASEPRI
 8005004:	f04f 0120 	mov.w	r1, #32
 8005008:	f381 8811 	msr	BASEPRI, r1
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	4819      	ldr	r0, [pc, #100]	@ (8005074 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005010:	f7fe fc20 	bl	8003854 <_PreparePacket>
 8005014:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800501a:	4b17      	ldr	r3, [pc, #92]	@ (8005078 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	e00b      	b.n	8005046 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1c59      	adds	r1, r3, #1
 8005036:	61f9      	str	r1, [r7, #28]
 8005038:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	09db      	lsrs	r3, r3, #7
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b7f      	cmp	r3, #127	@ 0x7f
 800504a:	d8f0      	bhi.n	800502e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	61fa      	str	r2, [r7, #28]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800505c:	2204      	movs	r2, #4
 800505e:	68f9      	ldr	r1, [r7, #12]
 8005060:	6938      	ldr	r0, [r7, #16]
 8005062:	f7fe fce5 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f383 8811 	msr	BASEPRI, r3
}
 800506c:	bf00      	nop
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	2000cf70 	.word	0x2000cf70
 8005078:	2000cf40 	.word	0x2000cf40

0800507c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	f04f 0120 	mov.w	r1, #32
 800508c:	f381 8811 	msr	BASEPRI, r1
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	4819      	ldr	r0, [pc, #100]	@ (80050f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005094:	f7fe fbde 	bl	8003854 <_PreparePacket>
 8005098:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800509e:	4b17      	ldr	r3, [pc, #92]	@ (80050fc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	e00b      	b.n	80050ca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1c59      	adds	r1, r3, #1
 80050ba:	61f9      	str	r1, [r7, #28]
 80050bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	09db      	lsrs	r3, r3, #7
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ce:	d8f0      	bhi.n	80050b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	61fa      	str	r2, [r7, #28]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80050e0:	2206      	movs	r2, #6
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	6938      	ldr	r0, [r7, #16]
 80050e6:	f7fe fca3 	bl	8003a30 <_SendPacket>
  RECORD_END();
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f383 8811 	msr	BASEPRI, r3
}
 80050f0:	bf00      	nop
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	2000cf70 	.word	0x2000cf70
 80050fc:	2000cf40 	.word	0x2000cf40

08005100 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	@ 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800510a:	f3ef 8311 	mrs	r3, BASEPRI
 800510e:	f04f 0120 	mov.w	r1, #32
 8005112:	f381 8811 	msr	BASEPRI, r1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	4827      	ldr	r0, [pc, #156]	@ (80051b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800511a:	f7fe fb9b 	bl	8003854 <_PreparePacket>
 800511e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005124:	4b25      	ldr	r3, [pc, #148]	@ (80051bc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	e00b      	b.n	8005150 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	b2da      	uxtb	r2, r3
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	6279      	str	r1, [r7, #36]	@ 0x24
 8005142:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	09db      	lsrs	r3, r3, #7
 800514e:	623b      	str	r3, [r7, #32]
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	2b7f      	cmp	r3, #127	@ 0x7f
 8005154:	d8f0      	bhi.n	8005138 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	627a      	str	r2, [r7, #36]	@ 0x24
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	e00b      	b.n	8005188 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	1c59      	adds	r1, r3, #1
 8005178:	61f9      	str	r1, [r7, #28]
 800517a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	09db      	lsrs	r3, r3, #7
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b7f      	cmp	r3, #127	@ 0x7f
 800518c:	d8f0      	bhi.n	8005170 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	61fa      	str	r2, [r7, #28]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800519e:	2207      	movs	r2, #7
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	6938      	ldr	r0, [r7, #16]
 80051a4:	f7fe fc44 	bl	8003a30 <_SendPacket>
  RECORD_END();
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f383 8811 	msr	BASEPRI, r3
}
 80051ae:	bf00      	nop
 80051b0:	3728      	adds	r7, #40	@ 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	2000cf70 	.word	0x2000cf70
 80051bc:	2000cf40 	.word	0x2000cf40

080051c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80051c8:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	1ad3      	subs	r3, r2, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	2000cf40 	.word	0x2000cf40

080051e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	@ 0x30
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80051ea:	4b40      	ldr	r3, [pc, #256]	@ (80052ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d077      	beq.n	80052e2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80051f2:	4b3e      	ldr	r3, [pc, #248]	@ (80052ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80051f8:	2300      	movs	r3, #0
 80051fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051fc:	e008      	b.n	8005210 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	3301      	adds	r3, #1
 800520e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005214:	429a      	cmp	r2, r3
 8005216:	d3f2      	bcc.n	80051fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8005218:	e000      	b.n	800521c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800521a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800521c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d055      	beq.n	80052ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005222:	f3ef 8311 	mrs	r3, BASEPRI
 8005226:	f04f 0120 	mov.w	r1, #32
 800522a:	f381 8811 	msr	BASEPRI, r1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	482f      	ldr	r0, [pc, #188]	@ (80052f0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005232:	f7fe fb0f 	bl	8003854 <_PreparePacket>
 8005236:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	e00b      	b.n	800525e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	1c59      	adds	r1, r3, #1
 800524e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005250:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	09db      	lsrs	r3, r3, #7
 800525c:	623b      	str	r3, [r7, #32]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	2b7f      	cmp	r3, #127	@ 0x7f
 8005262:	d8f0      	bhi.n	8005246 <SEGGER_SYSVIEW_SendModule+0x66>
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	627a      	str	r2, [r7, #36]	@ 0x24
 800526a:	6a3a      	ldr	r2, [r7, #32]
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	e00b      	b.n	8005298 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	1c59      	adds	r1, r3, #1
 8005288:	61f9      	str	r1, [r7, #28]
 800528a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	09db      	lsrs	r3, r3, #7
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b7f      	cmp	r3, #127	@ 0x7f
 800529c:	d8f0      	bhi.n	8005280 <SEGGER_SYSVIEW_SendModule+0xa0>
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	61fa      	str	r2, [r7, #28]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2280      	movs	r2, #128	@ 0x80
 80052b4:	4619      	mov	r1, r3
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7fe fa9c 	bl	80037f4 <_EncodeStr>
 80052bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80052be:	2216      	movs	r2, #22
 80052c0:	68f9      	ldr	r1, [r7, #12]
 80052c2:	6938      	ldr	r0, [r7, #16]
 80052c4:	f7fe fbb4 	bl	8003a30 <_SendPacket>
      RECORD_END();
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80052ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <SEGGER_SYSVIEW_SendModule+0x102>
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80052dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4798      	blx	r3
    }
  }
}
 80052e2:	bf00      	nop
 80052e4:	3730      	adds	r7, #48	@ 0x30
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	2000cf68 	.word	0x2000cf68
 80052f0:	2000cf70 	.word	0x2000cf70

080052f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80052fa:	4b0c      	ldr	r3, [pc, #48]	@ (800532c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00f      	beq.n	8005322 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005302:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f2      	bne.n	8005308 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	2000cf68 	.word	0x2000cf68

08005330 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005336:	f3ef 8311 	mrs	r3, BASEPRI
 800533a:	f04f 0120 	mov.w	r1, #32
 800533e:	f381 8811 	msr	BASEPRI, r1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	4817      	ldr	r0, [pc, #92]	@ (80053a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005346:	f7fe fa85 	bl	8003854 <_PreparePacket>
 800534a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e00b      	b.n	8005374 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	6179      	str	r1, [r7, #20]
 8005366:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	09db      	lsrs	r3, r3, #7
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b7f      	cmp	r3, #127	@ 0x7f
 8005378:	d8f0      	bhi.n	800535c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	617a      	str	r2, [r7, #20]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800538a:	221b      	movs	r2, #27
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	68b8      	ldr	r0, [r7, #8]
 8005390:	f7fe fb4e 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f383 8811 	msr	BASEPRI, r3
}
 800539a:	bf00      	nop
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	2000cf70 	.word	0x2000cf70
 80053a8:	2000cf6c 	.word	0x2000cf6c

080053ac <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80053ac:	b40f      	push	{r0, r1, r2, r3}
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	461a      	mov	r2, r3
 80053be:	2100      	movs	r1, #0
 80053c0:	6938      	ldr	r0, [r7, #16]
 80053c2:	f7fe fe47 	bl	8004054 <_VPrintTarget>
  va_end(ParamList);
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d0:	b004      	add	sp, #16
 80053d2:	4770      	bx	lr

080053d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	@ 0x28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053dc:	f3ef 8311 	mrs	r3, BASEPRI
 80053e0:	f04f 0120 	mov.w	r1, #32
 80053e4:	f381 8811 	msr	BASEPRI, r1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	4827      	ldr	r0, [pc, #156]	@ (8005488 <SEGGER_SYSVIEW_Warn+0xb4>)
 80053ec:	f7fe fa32 	bl	8003854 <_PreparePacket>
 80053f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053f2:	2280      	movs	r2, #128	@ 0x80
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	6938      	ldr	r0, [r7, #16]
 80053f8:	f7fe f9fc 	bl	80037f4 <_EncodeStr>
 80053fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
 8005402:	2301      	movs	r3, #1
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	e00b      	b.n	8005420 <SEGGER_SYSVIEW_Warn+0x4c>
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	6279      	str	r1, [r7, #36]	@ 0x24
 8005412:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	09db      	lsrs	r3, r3, #7
 800541e:	623b      	str	r3, [r7, #32]
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	2b7f      	cmp	r3, #127	@ 0x7f
 8005424:	d8f0      	bhi.n	8005408 <SEGGER_SYSVIEW_Warn+0x34>
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	627a      	str	r2, [r7, #36]	@ 0x24
 800542c:	6a3a      	ldr	r2, [r7, #32]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e00b      	b.n	8005458 <SEGGER_SYSVIEW_Warn+0x84>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	61f9      	str	r1, [r7, #28]
 800544a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b7f      	cmp	r3, #127	@ 0x7f
 800545c:	d8f0      	bhi.n	8005440 <SEGGER_SYSVIEW_Warn+0x6c>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	61fa      	str	r2, [r7, #28]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800546e:	221a      	movs	r2, #26
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	6938      	ldr	r0, [r7, #16]
 8005474:	f7fe fadc 	bl	8003a30 <_SendPacket>
  RECORD_END();
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
 8005480:	3728      	adds	r7, #40	@ 0x28
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	2000cf70 	.word	0x2000cf70

0800548c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005490:	4b13      	ldr	r3, [pc, #76]	@ (80054e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005492:	7e1b      	ldrb	r3, [r3, #24]
 8005494:	4619      	mov	r1, r3
 8005496:	4a13      	ldr	r2, [pc, #76]	@ (80054e4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005498:	460b      	mov	r3, r1
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	440b      	add	r3, r1
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	336c      	adds	r3, #108	@ 0x6c
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b0e      	ldr	r3, [pc, #56]	@ (80054e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054a8:	7e1b      	ldrb	r3, [r3, #24]
 80054aa:	4618      	mov	r0, r3
 80054ac:	490d      	ldr	r1, [pc, #52]	@ (80054e4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80054ae:	4603      	mov	r3, r0
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4403      	add	r3, r0
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	3370      	adds	r3, #112	@ 0x70
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d00b      	beq.n	80054d8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80054c0:	4b07      	ldr	r3, [pc, #28]	@ (80054e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054c2:	789b      	ldrb	r3, [r3, #2]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d107      	bne.n	80054d8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80054c8:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80054ce:	f7fe f9cd 	bl	800386c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80054d2:	4b03      	ldr	r3, [pc, #12]	@ (80054e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80054d8:	4b01      	ldr	r3, [pc, #4]	@ (80054e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054da:	781b      	ldrb	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	2000cf40 	.word	0x2000cf40
 80054e4:	2000ba80 	.word	0x2000ba80

080054e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	db0b      	blt.n	8005512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	f003 021f 	and.w	r2, r3, #31
 8005500:	4907      	ldr	r1, [pc, #28]	@ (8005520 <__NVIC_EnableIRQ+0x38>)
 8005502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	2001      	movs	r0, #1
 800550a:	fa00 f202 	lsl.w	r2, r0, r2
 800550e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	e000e100 	.word	0xe000e100

08005524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	6039      	str	r1, [r7, #0]
 800552e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005534:	2b00      	cmp	r3, #0
 8005536:	db0a      	blt.n	800554e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	490c      	ldr	r1, [pc, #48]	@ (8005570 <__NVIC_SetPriority+0x4c>)
 800553e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005542:	0112      	lsls	r2, r2, #4
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	440b      	add	r3, r1
 8005548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800554c:	e00a      	b.n	8005564 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	4908      	ldr	r1, [pc, #32]	@ (8005574 <__NVIC_SetPriority+0x50>)
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	3b04      	subs	r3, #4
 800555c:	0112      	lsls	r2, r2, #4
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	440b      	add	r3, r1
 8005562:	761a      	strb	r2, [r3, #24]
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	e000e100 	.word	0xe000e100
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800557e:	f7ff ff85 	bl	800548c <SEGGER_SYSVIEW_IsStarted>
 8005582:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800558a:	f7ff f993 	bl	80048b4 <SEGGER_SYSVIEW_Start>
  }
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80055a2:	4b0c      	ldr	r3, [pc, #48]	@ (80055d4 <_cbOnUARTRx+0x3c>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d806      	bhi.n	80055b8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80055aa:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <_cbOnUARTRx+0x3c>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <_cbOnUARTRx+0x3c>)
 80055b4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80055b6:	e009      	b.n	80055cc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80055b8:	f7ff ffde 	bl	8005578 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <_cbOnUARTRx+0x3c>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	1dfb      	adds	r3, r7, #7
 80055c4:	2201      	movs	r2, #1
 80055c6:	4619      	mov	r1, r3
 80055c8:	f7fe f81e 	bl	8003608 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80055cc:	bf00      	nop
}
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000008 	.word	0x20000008

080055d8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80055e0:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <_cbOnUARTTx+0x5c>)
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d80f      	bhi.n	8005608 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80055e8:	4b12      	ldr	r3, [pc, #72]	@ (8005634 <_cbOnUARTTx+0x5c>)
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	461a      	mov	r2, r3
 80055ee:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <_cbOnUARTTx+0x60>)
 80055f0:	5c9a      	ldrb	r2, [r3, r2]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80055f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005634 <_cbOnUARTTx+0x5c>)
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	3301      	adds	r3, #1
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <_cbOnUARTTx+0x5c>)
 8005600:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005602:	2301      	movs	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005606:	e00f      	b.n	8005628 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005608:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <_cbOnUARTTx+0x5c>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4618      	mov	r0, r3
 8005612:	f7fd fe9d 	bl	8003350 <SEGGER_RTT_ReadUpBufferNoLock>
 8005616:	4603      	mov	r3, r0
 8005618:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	da02      	bge.n	8005626 <_cbOnUARTTx+0x4e>
    r = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e000      	b.n	8005628 <_cbOnUARTTx+0x50>
  }
Done:
 8005626:	bf00      	nop
  return r;
 8005628:	68fb      	ldr	r3, [r7, #12]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000008 	.word	0x20000008
 8005638:	080078b8 	.word	0x080078b8

0800563c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005644:	4a04      	ldr	r2, [pc, #16]	@ (8005658 <SEGGER_UART_init+0x1c>)
 8005646:	4905      	ldr	r1, [pc, #20]	@ (800565c <SEGGER_UART_init+0x20>)
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f865 	bl	8005718 <HIF_UART_Init>
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	08005599 	.word	0x08005599
 800565c:	080055d9 	.word	0x080055d9

08005660 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005666:	4b1e      	ldr	r3, [pc, #120]	@ (80056e0 <USART2_IRQHandler+0x80>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b00      	cmp	r3, #0
 8005674:	d011      	beq.n	800569a <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8005676:	4b1b      	ldr	r3, [pc, #108]	@ (80056e4 <USART2_IRQHandler+0x84>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 030b 	and.w	r3, r3, #11
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005688:	4b17      	ldr	r3, [pc, #92]	@ (80056e8 <USART2_IRQHandler+0x88>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005690:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <USART2_IRQHandler+0x88>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	79fa      	ldrb	r2, [r7, #7]
 8005696:	4610      	mov	r0, r2
 8005698:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01a      	beq.n	80056da <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80056a4:	4b11      	ldr	r3, [pc, #68]	@ (80056ec <USART2_IRQHandler+0x8c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80056ac:	4b0f      	ldr	r3, [pc, #60]	@ (80056ec <USART2_IRQHandler+0x8c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	1dfa      	adds	r2, r7, #7
 80056b2:	4610      	mov	r0, r2
 80056b4:	4798      	blx	r3
 80056b6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80056be:	4b0c      	ldr	r3, [pc, #48]	@ (80056f0 <USART2_IRQHandler+0x90>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a0b      	ldr	r2, [pc, #44]	@ (80056f0 <USART2_IRQHandler+0x90>)
 80056c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e006      	b.n	80056da <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80056cc:	4b04      	ldr	r3, [pc, #16]	@ (80056e0 <USART2_IRQHandler+0x80>)
 80056ce:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 80056d0:	79fa      	ldrb	r2, [r7, #7]
 80056d2:	4b08      	ldr	r3, [pc, #32]	@ (80056f4 <USART2_IRQHandler+0x94>)
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e000      	b.n	80056da <USART2_IRQHandler+0x7a>
      return;
 80056d8:	bf00      	nop
    }
  }
}
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	4000441c 	.word	0x4000441c
 80056e4:	40004424 	.word	0x40004424
 80056e8:	2000d054 	.word	0x2000d054
 80056ec:	2000d058 	.word	0x2000d058
 80056f0:	40004400 	.word	0x40004400
 80056f4:	40004428 	.word	0x40004428

080056f8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a04      	ldr	r2, [pc, #16]	@ (8005714 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005706:	6013      	str	r3, [r2, #0]
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40004400 	.word	0x40004400

08005718 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //


  RCC_APB1ENR |= RCC_APB1ENR_USART2EN;        // Enable USART2 clock
 8005724:	4b2e      	ldr	r3, [pc, #184]	@ (80057e0 <HIF_UART_Init+0xc8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2d      	ldr	r2, [pc, #180]	@ (80057e0 <HIF_UART_Init+0xc8>)
 800572a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= RCC_AHB1ENR_GPIODEN;        // Enable IO port D clock
 8005730:	4b2c      	ldr	r3, [pc, #176]	@ (80057e4 <HIF_UART_Init+0xcc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2b      	ldr	r2, [pc, #172]	@ (80057e4 <HIF_UART_Init+0xcc>)
 8005736:	f043 0308 	orr.w	r3, r3, #8
 800573a:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRL;
 800573c:	4b2a      	ldr	r3, [pc, #168]	@ (80057e8 <HIF_UART_Init+0xd0>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8005748:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f043 63ee 	orr.w	r3, r3, #124780544	@ 0x7700000
 8005750:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005752:	4a25      	ldr	r2, [pc, #148]	@ (80057e8 <HIF_UART_Init+0xd0>)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005758:	4b24      	ldr	r3, [pc, #144]	@ (80057ec <HIF_UART_Init+0xd4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8005764:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800576c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800576e:	4a1f      	ldr	r2, [pc, #124]	@ (80057ec <HIF_UART_Init+0xd4>)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005774:	4b1e      	ldr	r3, [pc, #120]	@ (80057f0 <HIF_UART_Init+0xd8>)
 8005776:	f248 022d 	movw	r2, #32813	@ 0x802d
 800577a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800577c:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <HIF_UART_Init+0xdc>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
            | (0 << 12)
			| (0 << 13)							// STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005782:	4b1d      	ldr	r3, [pc, #116]	@ (80057f8 <HIF_UART_Init+0xe0>)
 8005784:	2280      	movs	r2, #128	@ 0x80
 8005786:	601a      	str	r2, [r3, #0]
  //
  // Set baudrate


  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800578e:	4a1b      	ldr	r2, [pc, #108]	@ (80057fc <HIF_UART_Init+0xe4>)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	3301      	adds	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a6:	d302      	bcc.n	80057ae <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80057a8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80057ac:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	4a11      	ldr	r2, [pc, #68]	@ (8005800 <HIF_UART_Init+0xe8>)
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80057be:	4a11      	ldr	r2, [pc, #68]	@ (8005804 <HIF_UART_Init+0xec>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80057c4:	4a10      	ldr	r2, [pc, #64]	@ (8005808 <HIF_UART_Init+0xf0>)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80057ca:	2106      	movs	r1, #6
 80057cc:	2026      	movs	r0, #38	@ 0x26
 80057ce:	f7ff fea9 	bl	8005524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80057d2:	2026      	movs	r0, #38	@ 0x26
 80057d4:	f7ff fe88 	bl	80054e8 <__NVIC_EnableIRQ>
}
 80057d8:	bf00      	nop
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40023840 	.word	0x40023840
 80057e4:	40023830 	.word	0x40023830
 80057e8:	40020c20 	.word	0x40020c20
 80057ec:	40020c00 	.word	0x40020c00
 80057f0:	40004400 	.word	0x40004400
 80057f4:	40004404 	.word	0x40004404
 80057f8:	40004408 	.word	0x40004408
 80057fc:	0501bd00 	.word	0x0501bd00
 8005800:	4000440c 	.word	0x4000440c
 8005804:	2000d054 	.word	0x2000d054
 8005808:	2000d058 	.word	0x2000d058

0800580c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005812:	f000 fb5c 	bl	8005ece <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005816:	f000 f86b 	bl	80058f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800581a:	f000 f8d3 	bl	80059c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800581e:	4b29      	ldr	r3, [pc, #164]	@ (80058c4 <main+0xb8>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	4a28      	ldr	r2, [pc, #160]	@ (80058c4 <main+0xb8>)
 8005824:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005828:	60d3      	str	r3, [r2, #12]

     DWT->LAR = 0xC5ACCE55;
 800582a:	4b27      	ldr	r3, [pc, #156]	@ (80058c8 <main+0xbc>)
 800582c:	4a27      	ldr	r2, [pc, #156]	@ (80058cc <main+0xc0>)
 800582e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0

     DWT->CYCCNT = 0;
 8005832:	4b25      	ldr	r3, [pc, #148]	@ (80058c8 <main+0xbc>)
 8005834:	2200      	movs	r2, #0
 8005836:	605a      	str	r2, [r3, #4]

     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005838:	4b23      	ldr	r3, [pc, #140]	@ (80058c8 <main+0xbc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a22      	ldr	r2, [pc, #136]	@ (80058c8 <main+0xbc>)
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	6013      	str	r3, [r2, #0]
  SEGGER_UART_init(250000);
 8005844:	4822      	ldr	r0, [pc, #136]	@ (80058d0 <main+0xc4>)
 8005846:	f7ff fef9 	bl	800563c <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 800584a:	f7fd fb33 	bl	8002eb4 <SEGGER_SYSVIEW_Conf>
  status=  xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 2,&task1_handle);
 800584e:	f107 0308 	add.w	r3, r7, #8
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	2302      	movs	r3, #2
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2300      	movs	r3, #0
 800585a:	22c8      	movs	r2, #200	@ 0xc8
 800585c:	491d      	ldr	r1, [pc, #116]	@ (80058d4 <main+0xc8>)
 800585e:	481e      	ldr	r0, [pc, #120]	@ (80058d8 <main+0xcc>)
 8005860:	f7fb fc70 	bl	8001144 <xTaskCreate>
 8005864:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d003      	beq.n	8005874 <main+0x68>
 800586c:	491b      	ldr	r1, [pc, #108]	@ (80058dc <main+0xd0>)
 800586e:	206e      	movs	r0, #110	@ 0x6e
 8005870:	f000 fa14 	bl	8005c9c <vAssertCalled>
  status=  xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 2,&task2_handle);
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	2302      	movs	r3, #2
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	2300      	movs	r3, #0
 800587e:	22c8      	movs	r2, #200	@ 0xc8
 8005880:	4917      	ldr	r1, [pc, #92]	@ (80058e0 <main+0xd4>)
 8005882:	4818      	ldr	r0, [pc, #96]	@ (80058e4 <main+0xd8>)
 8005884:	f7fb fc5e 	bl	8001144 <xTaskCreate>
 8005888:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d003      	beq.n	8005898 <main+0x8c>
 8005890:	4912      	ldr	r1, [pc, #72]	@ (80058dc <main+0xd0>)
 8005892:	2070      	movs	r0, #112	@ 0x70
 8005894:	f000 fa02 	bl	8005c9c <vAssertCalled>
  status=  xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 2,&task3_handle);
 8005898:	463b      	mov	r3, r7
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	2302      	movs	r3, #2
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	2300      	movs	r3, #0
 80058a2:	22c8      	movs	r2, #200	@ 0xc8
 80058a4:	4910      	ldr	r1, [pc, #64]	@ (80058e8 <main+0xdc>)
 80058a6:	4811      	ldr	r0, [pc, #68]	@ (80058ec <main+0xe0>)
 80058a8:	f7fb fc4c 	bl	8001144 <xTaskCreate>
 80058ac:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d003      	beq.n	80058bc <main+0xb0>
 80058b4:	4909      	ldr	r1, [pc, #36]	@ (80058dc <main+0xd0>)
 80058b6:	2072      	movs	r0, #114	@ 0x72
 80058b8:	f000 f9f0 	bl	8005c9c <vAssertCalled>
  vTaskStartScheduler();
 80058bc:	f7fb fe14 	bl	80014e8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <main+0xb4>
 80058c4:	e000edf0 	.word	0xe000edf0
 80058c8:	e0001000 	.word	0xe0001000
 80058cc:	c5acce55 	.word	0xc5acce55
 80058d0:	0003d090 	.word	0x0003d090
 80058d4:	08007800 	.word	0x08007800
 80058d8:	08005bf1 	.word	0x08005bf1
 80058dc:	08007810 	.word	0x08007810
 80058e0:	08007824 	.word	0x08007824
 80058e4:	08005c61 	.word	0x08005c61
 80058e8:	08007834 	.word	0x08007834
 80058ec:	08005c29 	.word	0x08005c29

080058f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b094      	sub	sp, #80	@ 0x50
 80058f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058f6:	f107 031c 	add.w	r3, r7, #28
 80058fa:	2234      	movs	r2, #52	@ 0x34
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 fd9e 	bl	8007440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005904:	f107 0308 	add.w	r3, r7, #8
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005914:	4b29      	ldr	r3, [pc, #164]	@ (80059bc <SystemClock_Config+0xcc>)
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	4a28      	ldr	r2, [pc, #160]	@ (80059bc <SystemClock_Config+0xcc>)
 800591a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800591e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005920:	4b26      	ldr	r3, [pc, #152]	@ (80059bc <SystemClock_Config+0xcc>)
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800592c:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <SystemClock_Config+0xd0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005934:	4a22      	ldr	r2, [pc, #136]	@ (80059c0 <SystemClock_Config+0xd0>)
 8005936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <SystemClock_Config+0xd0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005948:	2302      	movs	r3, #2
 800594a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800594c:	2301      	movs	r3, #1
 800594e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005950:	2310      	movs	r3, #16
 8005952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005954:	2302      	movs	r3, #2
 8005956:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005958:	2300      	movs	r3, #0
 800595a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800595c:	2308      	movs	r3, #8
 800595e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005960:	23a8      	movs	r3, #168	@ 0xa8
 8005962:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005964:	2302      	movs	r3, #2
 8005966:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005968:	2302      	movs	r3, #2
 800596a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800596c:	2302      	movs	r3, #2
 800596e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005970:	f107 031c 	add.w	r3, r7, #28
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fd85 	bl	8006484 <HAL_RCC_OscConfig>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005980:	f000 f99f 	bl	8005cc2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005984:	230f      	movs	r3, #15
 8005986:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005988:	2302      	movs	r3, #2
 800598a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800598c:	2300      	movs	r3, #0
 800598e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005990:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800599a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	2105      	movs	r1, #5
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 f81c 	bl	80069e0 <HAL_RCC_ClockConfig>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80059ae:	f000 f988 	bl	8005cc2 <Error_Handler>
  }
}
 80059b2:	bf00      	nop
 80059b4:	3750      	adds	r7, #80	@ 0x50
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40007000 	.word	0x40007000

080059c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08c      	sub	sp, #48	@ 0x30
 80059c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059ca:	f107 031c 	add.w	r3, r7, #28
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	609a      	str	r2, [r3, #8]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059da:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	4a7e      	ldr	r2, [pc, #504]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 80059e0:	f043 0304 	orr.w	r3, r3, #4
 80059e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80059e6:	4b7c      	ldr	r3, [pc, #496]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	61bb      	str	r3, [r7, #24]
 80059f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80059f2:	4b79      	ldr	r3, [pc, #484]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	4a78      	ldr	r2, [pc, #480]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 80059f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80059fe:	4b76      	ldr	r3, [pc, #472]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0a:	4b73      	ldr	r3, [pc, #460]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0e:	4a72      	ldr	r2, [pc, #456]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a16:	4b70      	ldr	r3, [pc, #448]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a22:	4b6d      	ldr	r3, [pc, #436]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a26:	4a6c      	ldr	r2, [pc, #432]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a3a:	4b67      	ldr	r3, [pc, #412]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3e:	4a66      	ldr	r2, [pc, #408]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a40:	f043 0308 	orr.w	r3, r3, #8
 8005a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a46:	4b64      	ldr	r3, [pc, #400]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a52:	4b61      	ldr	r3, [pc, #388]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	4a60      	ldr	r2, [pc, #384]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8005bd8 <MX_GPIO_Init+0x214>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8005a70:	485a      	ldr	r0, [pc, #360]	@ (8005bdc <MX_GPIO_Init+0x218>)
 8005a72:	f000 fcd3 	bl	800641c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005a76:	2200      	movs	r2, #0
 8005a78:	2140      	movs	r1, #64	@ 0x40
 8005a7a:	4859      	ldr	r0, [pc, #356]	@ (8005be0 <MX_GPIO_Init+0x21c>)
 8005a7c:	f000 fcce 	bl	800641c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005a90:	f107 031c 	add.w	r3, r7, #28
 8005a94:	4619      	mov	r1, r3
 8005a96:	4853      	ldr	r0, [pc, #332]	@ (8005be4 <MX_GPIO_Init+0x220>)
 8005a98:	f000 fb14 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005a9c:	2332      	movs	r3, #50	@ 0x32
 8005a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005aac:	230b      	movs	r3, #11
 8005aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ab0:	f107 031c 	add.w	r3, r7, #28
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	484b      	ldr	r0, [pc, #300]	@ (8005be4 <MX_GPIO_Init+0x220>)
 8005ab8:	f000 fb04 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005abc:	2386      	movs	r3, #134	@ 0x86
 8005abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005acc:	230b      	movs	r3, #11
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad0:	f107 031c 	add.w	r3, r7, #28
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4844      	ldr	r0, [pc, #272]	@ (8005be8 <MX_GPIO_Init+0x224>)
 8005ad8:	f000 faf4 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005adc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8005ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aea:	2300      	movs	r3, #0
 8005aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aee:	f107 031c 	add.w	r3, r7, #28
 8005af2:	4619      	mov	r1, r3
 8005af4:	4839      	ldr	r0, [pc, #228]	@ (8005bdc <MX_GPIO_Init+0x218>)
 8005af6:	f000 fae5 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005afa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b00:	2302      	movs	r3, #2
 8005b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b0c:	230b      	movs	r3, #11
 8005b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005b10:	f107 031c 	add.w	r3, r7, #28
 8005b14:	4619      	mov	r1, r3
 8005b16:	4831      	ldr	r0, [pc, #196]	@ (8005bdc <MX_GPIO_Init+0x218>)
 8005b18:	f000 fad4 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005b1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b22:	2302      	movs	r3, #2
 8005b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005b2e:	2307      	movs	r3, #7
 8005b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b32:	f107 031c 	add.w	r3, r7, #28
 8005b36:	4619      	mov	r1, r3
 8005b38:	482c      	ldr	r0, [pc, #176]	@ (8005bec <MX_GPIO_Init+0x228>)
 8005b3a:	f000 fac3 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005b3e:	2340      	movs	r3, #64	@ 0x40
 8005b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b42:	2301      	movs	r3, #1
 8005b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005b4e:	f107 031c 	add.w	r3, r7, #28
 8005b52:	4619      	mov	r1, r3
 8005b54:	4822      	ldr	r0, [pc, #136]	@ (8005be0 <MX_GPIO_Init+0x21c>)
 8005b56:	f000 fab5 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005b5a:	2380      	movs	r3, #128	@ 0x80
 8005b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005b66:	f107 031c 	add.w	r3, r7, #28
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	481c      	ldr	r0, [pc, #112]	@ (8005be0 <MX_GPIO_Init+0x21c>)
 8005b6e:	f000 faa9 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005b72:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8005b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b80:	2303      	movs	r3, #3
 8005b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005b84:	230a      	movs	r3, #10
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b88:	f107 031c 	add.w	r3, r7, #28
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4816      	ldr	r0, [pc, #88]	@ (8005be8 <MX_GPIO_Init+0x224>)
 8005b90:	f000 fa98 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005b94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005ba2:	f107 031c 	add.w	r3, r7, #28
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	480f      	ldr	r0, [pc, #60]	@ (8005be8 <MX_GPIO_Init+0x224>)
 8005baa:	f000 fa8b 	bl	80060c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005bae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bc0:	230b      	movs	r3, #11
 8005bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005bc4:	f107 031c 	add.w	r3, r7, #28
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4805      	ldr	r0, [pc, #20]	@ (8005be0 <MX_GPIO_Init+0x21c>)
 8005bcc:	f000 fa7a 	bl	80060c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005bd0:	bf00      	nop
 8005bd2:	3730      	adds	r7, #48	@ 0x30
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	40020400 	.word	0x40020400
 8005be0:	40021800 	.word	0x40021800
 8005be4:	40020800 	.word	0x40020800
 8005be8:	40020000 	.word	0x40020000
 8005bec:	40020c00 	.word	0x40020c00

08005bf0 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8005bf8:	f7fb fd7e 	bl	80016f8 <xTaskGetTickCount>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8005c00:	4807      	ldr	r0, [pc, #28]	@ (8005c20 <led_green_handler+0x30>)
 8005c02:	f7ff fbd3 	bl	80053ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN);
 8005c06:	2101      	movs	r1, #1
 8005c08:	4806      	ldr	r0, [pc, #24]	@ (8005c24 <led_green_handler+0x34>)
 8005c0a:	f000 fc20 	bl	800644e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 8005c0e:	f107 030c 	add.w	r3, r7, #12
 8005c12:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fb fbf4 	bl	8001404 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8005c1c:	bf00      	nop
 8005c1e:	e7ef      	b.n	8005c00 <led_green_handler+0x10>
 8005c20:	08007844 	.word	0x08007844
 8005c24:	40020400 	.word	0x40020400

08005c28 <led_red_handler>:

	}
}
static void led_red_handler(void* parameters)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8005c30:	f7fb fd62 	bl	80016f8 <xTaskGetTickCount>
 8005c34:	4603      	mov	r3, r0
 8005c36:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8005c38:	4807      	ldr	r0, [pc, #28]	@ (8005c58 <led_red_handler+0x30>)
 8005c3a:	f7ff fbb7 	bl	80053ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED_RED);
 8005c3e:	2180      	movs	r1, #128	@ 0x80
 8005c40:	4806      	ldr	r0, [pc, #24]	@ (8005c5c <led_red_handler+0x34>)
 8005c42:	f000 fc04 	bl	800644e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(400));
 8005c46:	f107 030c 	add.w	r3, r7, #12
 8005c4a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fb fbd8 	bl	8001404 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8005c54:	bf00      	nop
 8005c56:	e7ef      	b.n	8005c38 <led_red_handler+0x10>
 8005c58:	08007858 	.word	0x08007858
 8005c5c:	40020400 	.word	0x40020400

08005c60 <led_blue_handler>:
	}
}
static void led_blue_handler(void* parameters)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8005c68:	f7fb fd46 	bl	80016f8 <xTaskGetTickCount>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	60fb      	str	r3, [r7, #12]
	while(1)
	{	SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8005c70:	4808      	ldr	r0, [pc, #32]	@ (8005c94 <led_blue_handler+0x34>)
 8005c72:	f7ff fb9b 	bl	80053ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED_BLUE);
 8005c76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c7a:	4807      	ldr	r0, [pc, #28]	@ (8005c98 <led_blue_handler+0x38>)
 8005c7c:	f000 fbe7 	bl	800644e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(800));
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fb fbbb 	bl	8001404 <xTaskDelayUntil>
	{	SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8005c8e:	bf00      	nop
 8005c90:	e7ee      	b.n	8005c70 <led_blue_handler+0x10>
 8005c92:	bf00      	nop
 8005c94:	0800786c 	.word	0x0800786c
 8005c98:	40020400 	.word	0x40020400

08005c9c <vAssertCalled>:
	}
}
void vAssertCalled( unsigned long ulLine, const char * const pcFileName )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
//static portBASE_TYPE xPrinted = pdFALSE;
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]

    /* Parameters are not used. */
    ( void ) ulLine;
    ( void ) pcFileName;

    taskENTER_CRITICAL();
 8005caa:	f7fc fdfd 	bl	80028a8 <vPortEnterCritical>
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 1 )
 8005cae:	bf00      	nop
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d0fc      	beq.n	8005cb0 <vAssertCalled+0x14>
        {
        }
    }
    taskEXIT_CRITICAL();
 8005cb6:	f7fc fe21 	bl	80028fc <vPortExitCritical>
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005cc6:	b672      	cpsid	i
}
 8005cc8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005cca:	bf00      	nop
 8005ccc:	e7fd      	b.n	8005cca <Error_Handler+0x8>
	...

08005cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d14 <HAL_MspInit+0x44>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	4a0e      	ldr	r2, [pc, #56]	@ (8005d14 <HAL_MspInit+0x44>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <HAL_MspInit+0x44>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cee:	4b09      	ldr	r3, [pc, #36]	@ (8005d14 <HAL_MspInit+0x44>)
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	4a08      	ldr	r2, [pc, #32]	@ (8005d14 <HAL_MspInit+0x44>)
 8005cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cfa:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <HAL_MspInit+0x44>)
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8005d06:	f7fc fd59 	bl	80027bc <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40023800 	.word	0x40023800

08005d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08e      	sub	sp, #56	@ 0x38
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005d28:	4b33      	ldr	r3, [pc, #204]	@ (8005df8 <HAL_InitTick+0xe0>)
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2c:	4a32      	ldr	r2, [pc, #200]	@ (8005df8 <HAL_InitTick+0xe0>)
 8005d2e:	f043 0310 	orr.w	r3, r3, #16
 8005d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d34:	4b30      	ldr	r3, [pc, #192]	@ (8005df8 <HAL_InitTick+0xe0>)
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d40:	f107 0210 	add.w	r2, r7, #16
 8005d44:	f107 0314 	add.w	r3, r7, #20
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 f858 	bl	8006e00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005d5a:	f001 f83d 	bl	8006dd8 <HAL_RCC_GetPCLK1Freq>
 8005d5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d60:	e004      	b.n	8005d6c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005d62:	f001 f839 	bl	8006dd8 <HAL_RCC_GetPCLK1Freq>
 8005d66:	4603      	mov	r3, r0
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6e:	4a23      	ldr	r2, [pc, #140]	@ (8005dfc <HAL_InitTick+0xe4>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	0c9b      	lsrs	r3, r3, #18
 8005d76:	3b01      	subs	r3, #1
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005d7a:	4b21      	ldr	r3, [pc, #132]	@ (8005e00 <HAL_InitTick+0xe8>)
 8005d7c:	4a21      	ldr	r2, [pc, #132]	@ (8005e04 <HAL_InitTick+0xec>)
 8005d7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005d80:	4b1f      	ldr	r3, [pc, #124]	@ (8005e00 <HAL_InitTick+0xe8>)
 8005d82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005d86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005d88:	4a1d      	ldr	r2, [pc, #116]	@ (8005e00 <HAL_InitTick+0xe8>)
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e00 <HAL_InitTick+0xe8>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d94:	4b1a      	ldr	r3, [pc, #104]	@ (8005e00 <HAL_InitTick+0xe8>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d9a:	4b19      	ldr	r3, [pc, #100]	@ (8005e00 <HAL_InitTick+0xe8>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005da0:	4817      	ldr	r0, [pc, #92]	@ (8005e00 <HAL_InitTick+0xe8>)
 8005da2:	f001 f85f 	bl	8006e64 <HAL_TIM_Base_Init>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005dac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11b      	bne.n	8005dec <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005db4:	4812      	ldr	r0, [pc, #72]	@ (8005e00 <HAL_InitTick+0xe8>)
 8005db6:	f001 f8b7 	bl	8006f28 <HAL_TIM_Base_Start_IT>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d111      	bne.n	8005dec <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005dc8:	2036      	movs	r0, #54	@ 0x36
 8005dca:	f000 f96d 	bl	80060a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b0f      	cmp	r3, #15
 8005dd2:	d808      	bhi.n	8005de6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	2036      	movs	r0, #54	@ 0x36
 8005dda:	f000 f949 	bl	8006070 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005dde:	4a0a      	ldr	r2, [pc, #40]	@ (8005e08 <HAL_InitTick+0xf0>)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	e002      	b.n	8005dec <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005dec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3738      	adds	r7, #56	@ 0x38
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	431bde83 	.word	0x431bde83
 8005e00:	2000d05c 	.word	0x2000d05c
 8005e04:	40001000 	.word	0x40001000
 8005e08:	20000014 	.word	0x20000014

08005e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e10:	bf00      	nop
 8005e12:	e7fd      	b.n	8005e10 <NMI_Handler+0x4>

08005e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <HardFault_Handler+0x4>

08005e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <MemManage_Handler+0x4>

08005e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e28:	bf00      	nop
 8005e2a:	e7fd      	b.n	8005e28 <BusFault_Handler+0x4>

08005e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e30:	bf00      	nop
 8005e32:	e7fd      	b.n	8005e30 <UsageFault_Handler+0x4>

08005e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e48:	4802      	ldr	r0, [pc, #8]	@ (8005e54 <TIM6_DAC_IRQHandler+0x10>)
 8005e4a:	f001 f8e5 	bl	8007018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e4e:	bf00      	nop
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	2000d05c 	.word	0x2000d05c

08005e58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <SystemInit+0x20>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	4a05      	ldr	r2, [pc, #20]	@ (8005e78 <SystemInit+0x20>)
 8005e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e6c:	bf00      	nop
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	e000ed00 	.word	0xe000ed00

08005e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005eb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e80:	f7ff ffea 	bl	8005e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e84:	480c      	ldr	r0, [pc, #48]	@ (8005eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e86:	490d      	ldr	r1, [pc, #52]	@ (8005ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e88:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e8c:	e002      	b.n	8005e94 <LoopCopyDataInit>

08005e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e92:	3304      	adds	r3, #4

08005e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e98:	d3f9      	bcc.n	8005e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8005ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ea0:	e001      	b.n	8005ea6 <LoopFillZerobss>

08005ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ea4:	3204      	adds	r2, #4

08005ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ea8:	d3fb      	bcc.n	8005ea2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005eaa:	f001 fad1 	bl	8007450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005eae:	f7ff fcad 	bl	800580c <main>
  bx  lr    
 8005eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005eb4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ebc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8005ec0:	080078e4 	.word	0x080078e4
  ldr r2, =_sbss
 8005ec4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8005ec8:	2000d0ac 	.word	0x2000d0ac

08005ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ecc:	e7fe      	b.n	8005ecc <ADC_IRQHandler>

08005ece <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ed2:	2003      	movs	r0, #3
 8005ed4:	f000 f8c1 	bl	800605a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ed8:	200f      	movs	r0, #15
 8005eda:	f7ff ff1d 	bl	8005d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ede:	f7ff fef7 	bl	8005cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return uwTick;
 8005eec:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <HAL_GetTick+0x14>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	2000d0a8 	.word	0x2000d0a8

08005f00 <__NVIC_SetPriorityGrouping>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f10:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <__NVIC_SetPriorityGrouping+0x40>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f28:	4b06      	ldr	r3, [pc, #24]	@ (8005f44 <__NVIC_SetPriorityGrouping+0x44>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f2e:	4a04      	ldr	r2, [pc, #16]	@ (8005f40 <__NVIC_SetPriorityGrouping+0x40>)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	60d3      	str	r3, [r2, #12]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	e000ed00 	.word	0xe000ed00
 8005f44:	05fa0000 	.word	0x05fa0000

08005f48 <__NVIC_GetPriorityGrouping>:
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f4c:	4b04      	ldr	r3, [pc, #16]	@ (8005f60 <__NVIC_GetPriorityGrouping+0x18>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	0a1b      	lsrs	r3, r3, #8
 8005f52:	f003 0307 	and.w	r3, r3, #7
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	e000ed00 	.word	0xe000ed00

08005f64 <__NVIC_EnableIRQ>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	db0b      	blt.n	8005f8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	f003 021f 	and.w	r2, r3, #31
 8005f7c:	4907      	ldr	r1, [pc, #28]	@ (8005f9c <__NVIC_EnableIRQ+0x38>)
 8005f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	2001      	movs	r0, #1
 8005f86:	fa00 f202 	lsl.w	r2, r0, r2
 8005f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	e000e100 	.word	0xe000e100

08005fa0 <__NVIC_SetPriority>:
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	6039      	str	r1, [r7, #0]
 8005faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	db0a      	blt.n	8005fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	490c      	ldr	r1, [pc, #48]	@ (8005fec <__NVIC_SetPriority+0x4c>)
 8005fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbe:	0112      	lsls	r2, r2, #4
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005fc8:	e00a      	b.n	8005fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	4908      	ldr	r1, [pc, #32]	@ (8005ff0 <__NVIC_SetPriority+0x50>)
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	3b04      	subs	r3, #4
 8005fd8:	0112      	lsls	r2, r2, #4
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	440b      	add	r3, r1
 8005fde:	761a      	strb	r2, [r3, #24]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	e000e100 	.word	0xe000e100
 8005ff0:	e000ed00 	.word	0xe000ed00

08005ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b089      	sub	sp, #36	@ 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f1c3 0307 	rsb	r3, r3, #7
 800600e:	2b04      	cmp	r3, #4
 8006010:	bf28      	it	cs
 8006012:	2304      	movcs	r3, #4
 8006014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3304      	adds	r3, #4
 800601a:	2b06      	cmp	r3, #6
 800601c:	d902      	bls.n	8006024 <NVIC_EncodePriority+0x30>
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3b03      	subs	r3, #3
 8006022:	e000      	b.n	8006026 <NVIC_EncodePriority+0x32>
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006028:	f04f 32ff 	mov.w	r2, #4294967295
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43da      	mvns	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	401a      	ands	r2, r3
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800603c:	f04f 31ff 	mov.w	r1, #4294967295
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	fa01 f303 	lsl.w	r3, r1, r3
 8006046:	43d9      	mvns	r1, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800604c:	4313      	orrs	r3, r2
         );
}
 800604e:	4618      	mov	r0, r3
 8006050:	3724      	adds	r7, #36	@ 0x24
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff ff4c 	bl	8005f00 <__NVIC_SetPriorityGrouping>
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006082:	f7ff ff61 	bl	8005f48 <__NVIC_GetPriorityGrouping>
 8006086:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	6978      	ldr	r0, [r7, #20]
 800608e:	f7ff ffb1 	bl	8005ff4 <NVIC_EncodePriority>
 8006092:	4602      	mov	r2, r0
 8006094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006098:	4611      	mov	r1, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff ff80 	bl	8005fa0 <__NVIC_SetPriority>
}
 80060a0:	bf00      	nop
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff ff54 	bl	8005f64 <__NVIC_EnableIRQ>
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b089      	sub	sp, #36	@ 0x24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80060da:	2300      	movs	r3, #0
 80060dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e175      	b.n	80063d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80060e4:	2201      	movs	r2, #1
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4013      	ands	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	f040 8164 	bne.w	80063ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	2b01      	cmp	r3, #1
 800610c:	d005      	beq.n	800611a <HAL_GPIO_Init+0x56>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d130      	bne.n	800617c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	2203      	movs	r2, #3
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	43db      	mvns	r3, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4013      	ands	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4313      	orrs	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006150:	2201      	movs	r2, #1
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4013      	ands	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	091b      	lsrs	r3, r3, #4
 8006166:	f003 0201 	and.w	r2, r3, #1
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4313      	orrs	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	2b03      	cmp	r3, #3
 8006186:	d017      	beq.n	80061b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	2203      	movs	r2, #3
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	43db      	mvns	r3, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4013      	ands	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d123      	bne.n	800620c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	08da      	lsrs	r2, r3, #3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3208      	adds	r2, #8
 80061cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	220f      	movs	r2, #15
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	08da      	lsrs	r2, r3, #3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3208      	adds	r2, #8
 8006206:	69b9      	ldr	r1, [r7, #24]
 8006208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	2203      	movs	r2, #3
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	43db      	mvns	r3, r3
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	4013      	ands	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f003 0203 	and.w	r2, r3, #3
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80be 	beq.w	80063ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800624e:	4b66      	ldr	r3, [pc, #408]	@ (80063e8 <HAL_GPIO_Init+0x324>)
 8006250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006252:	4a65      	ldr	r2, [pc, #404]	@ (80063e8 <HAL_GPIO_Init+0x324>)
 8006254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006258:	6453      	str	r3, [r2, #68]	@ 0x44
 800625a:	4b63      	ldr	r3, [pc, #396]	@ (80063e8 <HAL_GPIO_Init+0x324>)
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006266:	4a61      	ldr	r2, [pc, #388]	@ (80063ec <HAL_GPIO_Init+0x328>)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	3302      	adds	r3, #2
 800626e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006272:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	220f      	movs	r2, #15
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43db      	mvns	r3, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4013      	ands	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a58      	ldr	r2, [pc, #352]	@ (80063f0 <HAL_GPIO_Init+0x32c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d037      	beq.n	8006302 <HAL_GPIO_Init+0x23e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a57      	ldr	r2, [pc, #348]	@ (80063f4 <HAL_GPIO_Init+0x330>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d031      	beq.n	80062fe <HAL_GPIO_Init+0x23a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a56      	ldr	r2, [pc, #344]	@ (80063f8 <HAL_GPIO_Init+0x334>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d02b      	beq.n	80062fa <HAL_GPIO_Init+0x236>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a55      	ldr	r2, [pc, #340]	@ (80063fc <HAL_GPIO_Init+0x338>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d025      	beq.n	80062f6 <HAL_GPIO_Init+0x232>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a54      	ldr	r2, [pc, #336]	@ (8006400 <HAL_GPIO_Init+0x33c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01f      	beq.n	80062f2 <HAL_GPIO_Init+0x22e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a53      	ldr	r2, [pc, #332]	@ (8006404 <HAL_GPIO_Init+0x340>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d019      	beq.n	80062ee <HAL_GPIO_Init+0x22a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a52      	ldr	r2, [pc, #328]	@ (8006408 <HAL_GPIO_Init+0x344>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_GPIO_Init+0x226>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a51      	ldr	r2, [pc, #324]	@ (800640c <HAL_GPIO_Init+0x348>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00d      	beq.n	80062e6 <HAL_GPIO_Init+0x222>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a50      	ldr	r2, [pc, #320]	@ (8006410 <HAL_GPIO_Init+0x34c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d007      	beq.n	80062e2 <HAL_GPIO_Init+0x21e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a4f      	ldr	r2, [pc, #316]	@ (8006414 <HAL_GPIO_Init+0x350>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d101      	bne.n	80062de <HAL_GPIO_Init+0x21a>
 80062da:	2309      	movs	r3, #9
 80062dc:	e012      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062de:	230a      	movs	r3, #10
 80062e0:	e010      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062e2:	2308      	movs	r3, #8
 80062e4:	e00e      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062e6:	2307      	movs	r3, #7
 80062e8:	e00c      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062ea:	2306      	movs	r3, #6
 80062ec:	e00a      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062ee:	2305      	movs	r3, #5
 80062f0:	e008      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062f2:	2304      	movs	r3, #4
 80062f4:	e006      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062f6:	2303      	movs	r3, #3
 80062f8:	e004      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e002      	b.n	8006304 <HAL_GPIO_Init+0x240>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <HAL_GPIO_Init+0x240>
 8006302:	2300      	movs	r3, #0
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	f002 0203 	and.w	r2, r2, #3
 800630a:	0092      	lsls	r2, r2, #2
 800630c:	4093      	lsls	r3, r2
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4313      	orrs	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006314:	4935      	ldr	r1, [pc, #212]	@ (80063ec <HAL_GPIO_Init+0x328>)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	089b      	lsrs	r3, r3, #2
 800631a:	3302      	adds	r3, #2
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006322:	4b3d      	ldr	r3, [pc, #244]	@ (8006418 <HAL_GPIO_Init+0x354>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	43db      	mvns	r3, r3
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	4013      	ands	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006346:	4a34      	ldr	r2, [pc, #208]	@ (8006418 <HAL_GPIO_Init+0x354>)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800634c:	4b32      	ldr	r3, [pc, #200]	@ (8006418 <HAL_GPIO_Init+0x354>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	43db      	mvns	r3, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4013      	ands	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006370:	4a29      	ldr	r2, [pc, #164]	@ (8006418 <HAL_GPIO_Init+0x354>)
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006376:	4b28      	ldr	r3, [pc, #160]	@ (8006418 <HAL_GPIO_Init+0x354>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800639a:	4a1f      	ldr	r2, [pc, #124]	@ (8006418 <HAL_GPIO_Init+0x354>)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006418 <HAL_GPIO_Init+0x354>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063c4:	4a14      	ldr	r2, [pc, #80]	@ (8006418 <HAL_GPIO_Init+0x354>)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3301      	adds	r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b0f      	cmp	r3, #15
 80063d4:	f67f ae86 	bls.w	80060e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3724      	adds	r7, #36	@ 0x24
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40023800 	.word	0x40023800
 80063ec:	40013800 	.word	0x40013800
 80063f0:	40020000 	.word	0x40020000
 80063f4:	40020400 	.word	0x40020400
 80063f8:	40020800 	.word	0x40020800
 80063fc:	40020c00 	.word	0x40020c00
 8006400:	40021000 	.word	0x40021000
 8006404:	40021400 	.word	0x40021400
 8006408:	40021800 	.word	0x40021800
 800640c:	40021c00 	.word	0x40021c00
 8006410:	40022000 	.word	0x40022000
 8006414:	40022400 	.word	0x40022400
 8006418:	40013c00 	.word	0x40013c00

0800641c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
 8006428:	4613      	mov	r3, r2
 800642a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800642c:	787b      	ldrb	r3, [r7, #1]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006432:	887a      	ldrh	r2, [r7, #2]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006438:	e003      	b.n	8006442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800643a:	887b      	ldrh	r3, [r7, #2]
 800643c:	041a      	lsls	r2, r3, #16
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	619a      	str	r2, [r3, #24]
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800644e:	b480      	push	{r7}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006460:	887a      	ldrh	r2, [r7, #2]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4013      	ands	r3, r2
 8006466:	041a      	lsls	r2, r3, #16
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	43d9      	mvns	r1, r3
 800646c:	887b      	ldrh	r3, [r7, #2]
 800646e:	400b      	ands	r3, r1
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	619a      	str	r2, [r3, #24]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800648c:	2300      	movs	r3, #0
 800648e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e29b      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8087 	beq.w	80065b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064a8:	4b96      	ldr	r3, [pc, #600]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 030c 	and.w	r3, r3, #12
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d00c      	beq.n	80064ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064b4:	4b93      	ldr	r3, [pc, #588]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d112      	bne.n	80064e6 <HAL_RCC_OscConfig+0x62>
 80064c0:	4b90      	ldr	r3, [pc, #576]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064cc:	d10b      	bne.n	80064e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d06c      	beq.n	80065b4 <HAL_RCC_OscConfig+0x130>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d168      	bne.n	80065b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e275      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ee:	d106      	bne.n	80064fe <HAL_RCC_OscConfig+0x7a>
 80064f0:	4b84      	ldr	r3, [pc, #528]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a83      	ldr	r2, [pc, #524]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80064f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	e02e      	b.n	800655c <HAL_RCC_OscConfig+0xd8>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10c      	bne.n	8006520 <HAL_RCC_OscConfig+0x9c>
 8006506:	4b7f      	ldr	r3, [pc, #508]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a7e      	ldr	r2, [pc, #504]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800650c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	4b7c      	ldr	r3, [pc, #496]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a7b      	ldr	r2, [pc, #492]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006518:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	e01d      	b.n	800655c <HAL_RCC_OscConfig+0xd8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006528:	d10c      	bne.n	8006544 <HAL_RCC_OscConfig+0xc0>
 800652a:	4b76      	ldr	r3, [pc, #472]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a75      	ldr	r2, [pc, #468]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4b73      	ldr	r3, [pc, #460]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a72      	ldr	r2, [pc, #456]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800653c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e00b      	b.n	800655c <HAL_RCC_OscConfig+0xd8>
 8006544:	4b6f      	ldr	r3, [pc, #444]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a6e      	ldr	r2, [pc, #440]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800654a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	4b6c      	ldr	r3, [pc, #432]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a6b      	ldr	r2, [pc, #428]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d013      	beq.n	800658c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006564:	f7ff fcc0 	bl	8005ee8 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800656c:	f7ff fcbc 	bl	8005ee8 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b64      	cmp	r3, #100	@ 0x64
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e229      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657e:	4b61      	ldr	r3, [pc, #388]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f0      	beq.n	800656c <HAL_RCC_OscConfig+0xe8>
 800658a:	e014      	b.n	80065b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7ff fcac 	bl	8005ee8 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006594:	f7ff fca8 	bl	8005ee8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b64      	cmp	r3, #100	@ 0x64
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e215      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065a6:	4b57      	ldr	r3, [pc, #348]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x110>
 80065b2:	e000      	b.n	80065b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d069      	beq.n	8006696 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065c2:	4b50      	ldr	r3, [pc, #320]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 030c 	and.w	r3, r3, #12
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d11c      	bne.n	8006614 <HAL_RCC_OscConfig+0x190>
 80065da:	4b4a      	ldr	r3, [pc, #296]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d116      	bne.n	8006614 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065e6:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <HAL_RCC_OscConfig+0x17a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d001      	beq.n	80065fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e1e9      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fe:	4b41      	ldr	r3, [pc, #260]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	493d      	ldr	r1, [pc, #244]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800660e:	4313      	orrs	r3, r2
 8006610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006612:	e040      	b.n	8006696 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d023      	beq.n	8006664 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800661c:	4b39      	ldr	r3, [pc, #228]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a38      	ldr	r2, [pc, #224]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006622:	f043 0301 	orr.w	r3, r3, #1
 8006626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7ff fc5e 	bl	8005ee8 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006630:	f7ff fc5a 	bl	8005ee8 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e1c7      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006642:	4b30      	ldr	r3, [pc, #192]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664e:	4b2d      	ldr	r3, [pc, #180]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4929      	ldr	r1, [pc, #164]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800665e:	4313      	orrs	r3, r2
 8006660:	600b      	str	r3, [r1, #0]
 8006662:	e018      	b.n	8006696 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006664:	4b27      	ldr	r3, [pc, #156]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a26      	ldr	r2, [pc, #152]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7ff fc3a 	bl	8005ee8 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006678:	f7ff fc36 	bl	8005ee8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e1a3      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800668a:	4b1e      	ldr	r3, [pc, #120]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d038      	beq.n	8006714 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d019      	beq.n	80066de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066aa:	4b16      	ldr	r3, [pc, #88]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80066ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ae:	4a15      	ldr	r2, [pc, #84]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b6:	f7ff fc17 	bl	8005ee8 <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066be:	f7ff fc13 	bl	8005ee8 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e180      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80066d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x23a>
 80066dc:	e01a      	b.n	8006714 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066de:	4b09      	ldr	r3, [pc, #36]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80066e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e2:	4a08      	ldr	r2, [pc, #32]	@ (8006704 <HAL_RCC_OscConfig+0x280>)
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ea:	f7ff fbfd 	bl	8005ee8 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f0:	e00a      	b.n	8006708 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066f2:	f7ff fbf9 	bl	8005ee8 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d903      	bls.n	8006708 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e166      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
 8006704:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006708:	4b92      	ldr	r3, [pc, #584]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 800670a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1ee      	bne.n	80066f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80a4 	beq.w	800686a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006722:	4b8c      	ldr	r3, [pc, #560]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10d      	bne.n	800674a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800672e:	4b89      	ldr	r3, [pc, #548]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	4a88      	ldr	r2, [pc, #544]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006738:	6413      	str	r3, [r2, #64]	@ 0x40
 800673a:	4b86      	ldr	r3, [pc, #536]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006742:	60bb      	str	r3, [r7, #8]
 8006744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006746:	2301      	movs	r3, #1
 8006748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800674a:	4b83      	ldr	r3, [pc, #524]	@ (8006958 <HAL_RCC_OscConfig+0x4d4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d118      	bne.n	8006788 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006756:	4b80      	ldr	r3, [pc, #512]	@ (8006958 <HAL_RCC_OscConfig+0x4d4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a7f      	ldr	r2, [pc, #508]	@ (8006958 <HAL_RCC_OscConfig+0x4d4>)
 800675c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006762:	f7ff fbc1 	bl	8005ee8 <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800676a:	f7ff fbbd 	bl	8005ee8 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b64      	cmp	r3, #100	@ 0x64
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e12a      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800677c:	4b76      	ldr	r3, [pc, #472]	@ (8006958 <HAL_RCC_OscConfig+0x4d4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d106      	bne.n	800679e <HAL_RCC_OscConfig+0x31a>
 8006790:	4b70      	ldr	r3, [pc, #448]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006794:	4a6f      	ldr	r2, [pc, #444]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006796:	f043 0301 	orr.w	r3, r3, #1
 800679a:	6713      	str	r3, [r2, #112]	@ 0x70
 800679c:	e02d      	b.n	80067fa <HAL_RCC_OscConfig+0x376>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0x33c>
 80067a6:	4b6b      	ldr	r3, [pc, #428]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067aa:	4a6a      	ldr	r2, [pc, #424]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b2:	4b68      	ldr	r3, [pc, #416]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b6:	4a67      	ldr	r2, [pc, #412]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067b8:	f023 0304 	bic.w	r3, r3, #4
 80067bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80067be:	e01c      	b.n	80067fa <HAL_RCC_OscConfig+0x376>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	2b05      	cmp	r3, #5
 80067c6:	d10c      	bne.n	80067e2 <HAL_RCC_OscConfig+0x35e>
 80067c8:	4b62      	ldr	r3, [pc, #392]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067cc:	4a61      	ldr	r2, [pc, #388]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067ce:	f043 0304 	orr.w	r3, r3, #4
 80067d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	6713      	str	r3, [r2, #112]	@ 0x70
 80067e0:	e00b      	b.n	80067fa <HAL_RCC_OscConfig+0x376>
 80067e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	4a5b      	ldr	r2, [pc, #364]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ee:	4b59      	ldr	r3, [pc, #356]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f2:	4a58      	ldr	r2, [pc, #352]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d015      	beq.n	800682e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006802:	f7ff fb71 	bl	8005ee8 <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006808:	e00a      	b.n	8006820 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800680a:	f7ff fb6d 	bl	8005ee8 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006818:	4293      	cmp	r3, r2
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e0d8      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006820:	4b4c      	ldr	r3, [pc, #304]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ee      	beq.n	800680a <HAL_RCC_OscConfig+0x386>
 800682c:	e014      	b.n	8006858 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682e:	f7ff fb5b 	bl	8005ee8 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006834:	e00a      	b.n	800684c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7ff fb57 	bl	8005ee8 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e0c2      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684c:	4b41      	ldr	r3, [pc, #260]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ee      	bne.n	8006836 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d105      	bne.n	800686a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685e:	4b3d      	ldr	r3, [pc, #244]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	4a3c      	ldr	r2, [pc, #240]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006868:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80ae 	beq.w	80069d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006874:	4b37      	ldr	r3, [pc, #220]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d06d      	beq.n	800695c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d14b      	bne.n	8006920 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006888:	4b32      	ldr	r3, [pc, #200]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a31      	ldr	r2, [pc, #196]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 800688e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006894:	f7ff fb28 	bl	8005ee8 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800689c:	f7ff fb24 	bl	8005ee8 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e091      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ae:	4b29      	ldr	r3, [pc, #164]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69da      	ldr	r2, [r3, #28]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c8:	019b      	lsls	r3, r3, #6
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	3b01      	subs	r3, #1
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	061b      	lsls	r3, r3, #24
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	071b      	lsls	r3, r3, #28
 80068e6:	491b      	ldr	r1, [pc, #108]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068ec:	4b19      	ldr	r3, [pc, #100]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a18      	ldr	r2, [pc, #96]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 80068f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7ff faf6 	bl	8005ee8 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006900:	f7ff faf2 	bl	8005ee8 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e05f      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006912:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f0      	beq.n	8006900 <HAL_RCC_OscConfig+0x47c>
 800691e:	e057      	b.n	80069d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006920:	4b0c      	ldr	r3, [pc, #48]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a0b      	ldr	r2, [pc, #44]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800692a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7ff fadc 	bl	8005ee8 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006934:	f7ff fad8 	bl	8005ee8 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e045      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006946:	4b03      	ldr	r3, [pc, #12]	@ (8006954 <HAL_RCC_OscConfig+0x4d0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x4b0>
 8006952:	e03d      	b.n	80069d0 <HAL_RCC_OscConfig+0x54c>
 8006954:	40023800 	.word	0x40023800
 8006958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800695c:	4b1f      	ldr	r3, [pc, #124]	@ (80069dc <HAL_RCC_OscConfig+0x558>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d030      	beq.n	80069cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006974:	429a      	cmp	r2, r3
 8006976:	d129      	bne.n	80069cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006982:	429a      	cmp	r2, r3
 8006984:	d122      	bne.n	80069cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800698c:	4013      	ands	r3, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006994:	4293      	cmp	r3, r2
 8006996:	d119      	bne.n	80069cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	3b01      	subs	r3, #1
 80069a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d10f      	bne.n	80069cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d001      	beq.n	80069d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40023800 	.word	0x40023800

080069e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0d0      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069f8:	4b6a      	ldr	r3, [pc, #424]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d910      	bls.n	8006a28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a06:	4b67      	ldr	r3, [pc, #412]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 020f 	bic.w	r2, r3, #15
 8006a0e:	4965      	ldr	r1, [pc, #404]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a16:	4b63      	ldr	r3, [pc, #396]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e0b8      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d020      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a40:	4b59      	ldr	r3, [pc, #356]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	4a58      	ldr	r2, [pc, #352]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a58:	4b53      	ldr	r3, [pc, #332]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	4a52      	ldr	r2, [pc, #328]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a64:	4b50      	ldr	r3, [pc, #320]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	494d      	ldr	r1, [pc, #308]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d040      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d107      	bne.n	8006a9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8a:	4b47      	ldr	r3, [pc, #284]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d115      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e07f      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d107      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa2:	4b41      	ldr	r3, [pc, #260]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e073      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e06b      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ac2:	4b39      	ldr	r3, [pc, #228]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f023 0203 	bic.w	r2, r3, #3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	4936      	ldr	r1, [pc, #216]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad4:	f7ff fa08 	bl	8005ee8 <HAL_GetTick>
 8006ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ada:	e00a      	b.n	8006af2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006adc:	f7ff fa04 	bl	8005ee8 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e053      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af2:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 020c 	and.w	r2, r3, #12
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d1eb      	bne.n	8006adc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b04:	4b27      	ldr	r3, [pc, #156]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d210      	bcs.n	8006b34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b24      	ldr	r3, [pc, #144]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 020f 	bic.w	r2, r3, #15
 8006b1a:	4922      	ldr	r1, [pc, #136]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b20      	ldr	r3, [pc, #128]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e032      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b40:	4b19      	ldr	r3, [pc, #100]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4916      	ldr	r1, [pc, #88]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b5e:	4b12      	ldr	r3, [pc, #72]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	490e      	ldr	r1, [pc, #56]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b72:	f000 f821 	bl	8006bb8 <HAL_RCC_GetSysClockFreq>
 8006b76:	4602      	mov	r2, r0
 8006b78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	490a      	ldr	r1, [pc, #40]	@ (8006bac <HAL_RCC_ClockConfig+0x1cc>)
 8006b84:	5ccb      	ldrb	r3, [r1, r3]
 8006b86:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8a:	4a09      	ldr	r2, [pc, #36]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8006b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b8e:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <HAL_RCC_ClockConfig+0x1d4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff f8c0 	bl	8005d18 <HAL_InitTick>

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40023c00 	.word	0x40023c00
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	080078bc 	.word	0x080078bc
 8006bb0:	20000010 	.word	0x20000010
 8006bb4:	20000014 	.word	0x20000014

08006bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bbc:	b094      	sub	sp, #80	@ 0x50
 8006bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc8:	2300      	movs	r3, #0
 8006bca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bd0:	4b79      	ldr	r3, [pc, #484]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 030c 	and.w	r3, r3, #12
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d00d      	beq.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	f200 80e1 	bhi.w	8006da4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_RCC_GetSysClockFreq+0x34>
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d003      	beq.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006bea:	e0db      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bec:	4b73      	ldr	r3, [pc, #460]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8006bee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bf0:	e0db      	b.n	8006daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bf2:	4b72      	ldr	r3, [pc, #456]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8006bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bf6:	e0d8      	b.n	8006daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c02:	4b6d      	ldr	r3, [pc, #436]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d063      	beq.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	099b      	lsrs	r3, r3, #6
 8006c14:	2200      	movs	r2, #0
 8006c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c22:	2300      	movs	r3, #0
 8006c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	f04f 0000 	mov.w	r0, #0
 8006c32:	f04f 0100 	mov.w	r1, #0
 8006c36:	0159      	lsls	r1, r3, #5
 8006c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c3c:	0150      	lsls	r0, r2, #5
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4621      	mov	r1, r4
 8006c44:	1a51      	subs	r1, r2, r1
 8006c46:	6139      	str	r1, [r7, #16]
 8006c48:	4629      	mov	r1, r5
 8006c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c5c:	4659      	mov	r1, fp
 8006c5e:	018b      	lsls	r3, r1, #6
 8006c60:	4651      	mov	r1, sl
 8006c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c66:	4651      	mov	r1, sl
 8006c68:	018a      	lsls	r2, r1, #6
 8006c6a:	4651      	mov	r1, sl
 8006c6c:	ebb2 0801 	subs.w	r8, r2, r1
 8006c70:	4659      	mov	r1, fp
 8006c72:	eb63 0901 	sbc.w	r9, r3, r1
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c8a:	4690      	mov	r8, r2
 8006c8c:	4699      	mov	r9, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	eb18 0303 	adds.w	r3, r8, r3
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	462b      	mov	r3, r5
 8006c98:	eb49 0303 	adc.w	r3, r9, r3
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006caa:	4629      	mov	r1, r5
 8006cac:	028b      	lsls	r3, r1, #10
 8006cae:	4621      	mov	r1, r4
 8006cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	028a      	lsls	r2, r1, #10
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cc8:	f7f9 fb04 	bl	80002d4 <__aeabi_uldivmod>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd4:	e058      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cd6:	4b38      	ldr	r3, [pc, #224]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	099b      	lsrs	r3, r3, #6
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ce6:	623b      	str	r3, [r7, #32]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	f04f 0000 	mov.w	r0, #0
 8006cf8:	f04f 0100 	mov.w	r1, #0
 8006cfc:	0159      	lsls	r1, r3, #5
 8006cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d02:	0150      	lsls	r0, r2, #5
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4641      	mov	r1, r8
 8006d0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d0e:	4649      	mov	r1, r9
 8006d10:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d28:	ebb2 040a 	subs.w	r4, r2, sl
 8006d2c:	eb63 050b 	sbc.w	r5, r3, fp
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	00eb      	lsls	r3, r5, #3
 8006d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d3e:	00e2      	lsls	r2, r4, #3
 8006d40:	4614      	mov	r4, r2
 8006d42:	461d      	mov	r5, r3
 8006d44:	4643      	mov	r3, r8
 8006d46:	18e3      	adds	r3, r4, r3
 8006d48:	603b      	str	r3, [r7, #0]
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	eb45 0303 	adc.w	r3, r5, r3
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d5e:	4629      	mov	r1, r5
 8006d60:	028b      	lsls	r3, r1, #10
 8006d62:	4621      	mov	r1, r4
 8006d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d68:	4621      	mov	r1, r4
 8006d6a:	028a      	lsls	r2, r1, #10
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d72:	2200      	movs	r2, #0
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	61fa      	str	r2, [r7, #28]
 8006d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d7c:	f7f9 faaa 	bl	80002d4 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4613      	mov	r3, r2
 8006d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	0c1b      	lsrs	r3, r3, #16
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	3301      	adds	r3, #1
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006da2:	e002      	b.n	8006daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8006da6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3750      	adds	r7, #80	@ 0x50
 8006db0:	46bd      	mov	sp, r7
 8006db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db6:	bf00      	nop
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	00f42400 	.word	0x00f42400

08006dc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dc4:	4b03      	ldr	r3, [pc, #12]	@ (8006dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000010 	.word	0x20000010

08006dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ddc:	f7ff fff0 	bl	8006dc0 <HAL_RCC_GetHCLKFreq>
 8006de0:	4602      	mov	r2, r0
 8006de2:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	0a9b      	lsrs	r3, r3, #10
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	4903      	ldr	r1, [pc, #12]	@ (8006dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dee:	5ccb      	ldrb	r3, [r1, r3]
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	080078cc 	.word	0x080078cc

08006e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	220f      	movs	r2, #15
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e10:	4b12      	ldr	r3, [pc, #72]	@ (8006e5c <HAL_RCC_GetClockConfig+0x5c>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f003 0203 	and.w	r2, r3, #3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e5c <HAL_RCC_GetClockConfig+0x5c>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006e28:	4b0c      	ldr	r3, [pc, #48]	@ (8006e5c <HAL_RCC_GetClockConfig+0x5c>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006e34:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <HAL_RCC_GetClockConfig+0x5c>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	08db      	lsrs	r3, r3, #3
 8006e3a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e42:	4b07      	ldr	r3, [pc, #28]	@ (8006e60 <HAL_RCC_GetClockConfig+0x60>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 020f 	and.w	r2, r3, #15
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	601a      	str	r2, [r3, #0]
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	40023c00 	.word	0x40023c00

08006e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e049      	b.n	8006f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f841 	bl	8006f12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f000 f9f2 	bl	800728c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d001      	beq.n	8006f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e054      	b.n	8006fea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a26      	ldr	r2, [pc, #152]	@ (8006ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d022      	beq.n	8006fa8 <HAL_TIM_Base_Start_IT+0x80>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_TIM_Base_Start_IT+0x80>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a22      	ldr	r2, [pc, #136]	@ (8006ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d018      	beq.n	8006fa8 <HAL_TIM_Base_Start_IT+0x80>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	@ (8007000 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_TIM_Base_Start_IT+0x80>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_TIM_Base_Start_IT+0x80>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007008 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_TIM_Base_Start_IT+0x80>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	@ (800700c <HAL_TIM_Base_Start_IT+0xe4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_TIM_Base_Start_IT+0x80>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8007010 <HAL_TIM_Base_Start_IT+0xe8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d115      	bne.n	8006fd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	4b19      	ldr	r3, [pc, #100]	@ (8007014 <HAL_TIM_Base_Start_IT+0xec>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b06      	cmp	r3, #6
 8006fb8:	d015      	beq.n	8006fe6 <HAL_TIM_Base_Start_IT+0xbe>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc0:	d011      	beq.n	8006fe6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd2:	e008      	b.n	8006fe6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e000      	b.n	8006fe8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40010000 	.word	0x40010000
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40000c00 	.word	0x40000c00
 8007008:	40010400 	.word	0x40010400
 800700c:	40014000 	.word	0x40014000
 8007010:	40001800 	.word	0x40001800
 8007014:	00010007 	.word	0x00010007

08007018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d020      	beq.n	800707c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01b      	beq.n	800707c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f06f 0202 	mvn.w	r2, #2
 800704c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f8f3 	bl	800724e <HAL_TIM_IC_CaptureCallback>
 8007068:	e005      	b.n	8007076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f8e5 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f8f6 	bl	8007262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d020      	beq.n	80070c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01b      	beq.n	80070c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0204 	mvn.w	r2, #4
 8007098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2202      	movs	r2, #2
 800709e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f8cd 	bl	800724e <HAL_TIM_IC_CaptureCallback>
 80070b4:	e005      	b.n	80070c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8bf 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8d0 	bl	8007262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d020      	beq.n	8007114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01b      	beq.n	8007114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0208 	mvn.w	r2, #8
 80070e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2204      	movs	r2, #4
 80070ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f8a7 	bl	800724e <HAL_TIM_IC_CaptureCallback>
 8007100:	e005      	b.n	800710e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f899 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8aa 	bl	8007262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	d020      	beq.n	8007160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01b      	beq.n	8007160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0210 	mvn.w	r2, #16
 8007130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2208      	movs	r2, #8
 8007136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f881 	bl	800724e <HAL_TIM_IC_CaptureCallback>
 800714c:	e005      	b.n	800715a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f873 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f884 	bl	8007262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0201 	mvn.w	r2, #1
 800717c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f851 	bl	8007226 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00c      	beq.n	80071b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d007      	beq.n	80071b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80071aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f923 	bl	80073f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00c      	beq.n	80071d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80071ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f91b 	bl	800740c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00c      	beq.n	80071fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80071f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f83e 	bl	8007276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00c      	beq.n	800721e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f06f 0220 	mvn.w	r2, #32
 8007216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f8e3 	bl	80073e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a46      	ldr	r2, [pc, #280]	@ (80073b8 <TIM_Base_SetConfig+0x12c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d013      	beq.n	80072cc <TIM_Base_SetConfig+0x40>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072aa:	d00f      	beq.n	80072cc <TIM_Base_SetConfig+0x40>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a43      	ldr	r2, [pc, #268]	@ (80073bc <TIM_Base_SetConfig+0x130>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d00b      	beq.n	80072cc <TIM_Base_SetConfig+0x40>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a42      	ldr	r2, [pc, #264]	@ (80073c0 <TIM_Base_SetConfig+0x134>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d007      	beq.n	80072cc <TIM_Base_SetConfig+0x40>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a41      	ldr	r2, [pc, #260]	@ (80073c4 <TIM_Base_SetConfig+0x138>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d003      	beq.n	80072cc <TIM_Base_SetConfig+0x40>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a40      	ldr	r2, [pc, #256]	@ (80073c8 <TIM_Base_SetConfig+0x13c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d108      	bne.n	80072de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4313      	orrs	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a35      	ldr	r2, [pc, #212]	@ (80073b8 <TIM_Base_SetConfig+0x12c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d02b      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ec:	d027      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a32      	ldr	r2, [pc, #200]	@ (80073bc <TIM_Base_SetConfig+0x130>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d023      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a31      	ldr	r2, [pc, #196]	@ (80073c0 <TIM_Base_SetConfig+0x134>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01f      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a30      	ldr	r2, [pc, #192]	@ (80073c4 <TIM_Base_SetConfig+0x138>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01b      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a2f      	ldr	r2, [pc, #188]	@ (80073c8 <TIM_Base_SetConfig+0x13c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d017      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a2e      	ldr	r2, [pc, #184]	@ (80073cc <TIM_Base_SetConfig+0x140>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a2d      	ldr	r2, [pc, #180]	@ (80073d0 <TIM_Base_SetConfig+0x144>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00f      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a2c      	ldr	r2, [pc, #176]	@ (80073d4 <TIM_Base_SetConfig+0x148>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00b      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a2b      	ldr	r2, [pc, #172]	@ (80073d8 <TIM_Base_SetConfig+0x14c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d007      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a2a      	ldr	r2, [pc, #168]	@ (80073dc <TIM_Base_SetConfig+0x150>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d003      	beq.n	800733e <TIM_Base_SetConfig+0xb2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a29      	ldr	r2, [pc, #164]	@ (80073e0 <TIM_Base_SetConfig+0x154>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d108      	bne.n	8007350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a10      	ldr	r2, [pc, #64]	@ (80073b8 <TIM_Base_SetConfig+0x12c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d003      	beq.n	8007384 <TIM_Base_SetConfig+0xf8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a12      	ldr	r2, [pc, #72]	@ (80073c8 <TIM_Base_SetConfig+0x13c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d103      	bne.n	800738c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	d105      	bne.n	80073aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f023 0201 	bic.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	611a      	str	r2, [r3, #16]
  }
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40000400 	.word	0x40000400
 80073c0:	40000800 	.word	0x40000800
 80073c4:	40000c00 	.word	0x40000c00
 80073c8:	40010400 	.word	0x40010400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400
 80073d4:	40014800 	.word	0x40014800
 80073d8:	40001800 	.word	0x40001800
 80073dc:	40001c00 	.word	0x40001c00
 80073e0:	40002000 	.word	0x40002000

080073e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <memcmp>:
 8007420:	b510      	push	{r4, lr}
 8007422:	3901      	subs	r1, #1
 8007424:	4402      	add	r2, r0
 8007426:	4290      	cmp	r0, r2
 8007428:	d101      	bne.n	800742e <memcmp+0xe>
 800742a:	2000      	movs	r0, #0
 800742c:	e005      	b.n	800743a <memcmp+0x1a>
 800742e:	7803      	ldrb	r3, [r0, #0]
 8007430:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007434:	42a3      	cmp	r3, r4
 8007436:	d001      	beq.n	800743c <memcmp+0x1c>
 8007438:	1b18      	subs	r0, r3, r4
 800743a:	bd10      	pop	{r4, pc}
 800743c:	3001      	adds	r0, #1
 800743e:	e7f2      	b.n	8007426 <memcmp+0x6>

08007440 <memset>:
 8007440:	4402      	add	r2, r0
 8007442:	4603      	mov	r3, r0
 8007444:	4293      	cmp	r3, r2
 8007446:	d100      	bne.n	800744a <memset+0xa>
 8007448:	4770      	bx	lr
 800744a:	f803 1b01 	strb.w	r1, [r3], #1
 800744e:	e7f9      	b.n	8007444 <memset+0x4>

08007450 <__libc_init_array>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4d0d      	ldr	r5, [pc, #52]	@ (8007488 <__libc_init_array+0x38>)
 8007454:	4c0d      	ldr	r4, [pc, #52]	@ (800748c <__libc_init_array+0x3c>)
 8007456:	1b64      	subs	r4, r4, r5
 8007458:	10a4      	asrs	r4, r4, #2
 800745a:	2600      	movs	r6, #0
 800745c:	42a6      	cmp	r6, r4
 800745e:	d109      	bne.n	8007474 <__libc_init_array+0x24>
 8007460:	4d0b      	ldr	r5, [pc, #44]	@ (8007490 <__libc_init_array+0x40>)
 8007462:	4c0c      	ldr	r4, [pc, #48]	@ (8007494 <__libc_init_array+0x44>)
 8007464:	f000 f826 	bl	80074b4 <_init>
 8007468:	1b64      	subs	r4, r4, r5
 800746a:	10a4      	asrs	r4, r4, #2
 800746c:	2600      	movs	r6, #0
 800746e:	42a6      	cmp	r6, r4
 8007470:	d105      	bne.n	800747e <__libc_init_array+0x2e>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	f855 3b04 	ldr.w	r3, [r5], #4
 8007478:	4798      	blx	r3
 800747a:	3601      	adds	r6, #1
 800747c:	e7ee      	b.n	800745c <__libc_init_array+0xc>
 800747e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007482:	4798      	blx	r3
 8007484:	3601      	adds	r6, #1
 8007486:	e7f2      	b.n	800746e <__libc_init_array+0x1e>
 8007488:	080078dc 	.word	0x080078dc
 800748c:	080078dc 	.word	0x080078dc
 8007490:	080078dc 	.word	0x080078dc
 8007494:	080078e0 	.word	0x080078e0

08007498 <memcpy>:
 8007498:	440a      	add	r2, r1
 800749a:	4291      	cmp	r1, r2
 800749c:	f100 33ff 	add.w	r3, r0, #4294967295
 80074a0:	d100      	bne.n	80074a4 <memcpy+0xc>
 80074a2:	4770      	bx	lr
 80074a4:	b510      	push	{r4, lr}
 80074a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ae:	4291      	cmp	r1, r2
 80074b0:	d1f9      	bne.n	80074a6 <memcpy+0xe>
 80074b2:	bd10      	pop	{r4, pc}

080074b4 <_init>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	bf00      	nop
 80074b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ba:	bc08      	pop	{r3}
 80074bc:	469e      	mov	lr, r3
 80074be:	4770      	bx	lr

080074c0 <_fini>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	bf00      	nop
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr
