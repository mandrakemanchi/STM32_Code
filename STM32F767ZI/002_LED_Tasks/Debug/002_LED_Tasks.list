
002_LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080073e8  080073e8  000083e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f0  080077f0  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  080077f0  080077f0  000087f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f8  080077f8  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f8  080077f8  000087f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077fc  080077fc  000087fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007800  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d094  2000001c  0800781c  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d0b0  0800781c  000090b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149a9  00000000  00000000  0000904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b1  00000000  00000000  0001d9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00020aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f83  00000000  00000000  00021ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004329  00000000  00000000  00022e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001898b  00000000  00000000  00027184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010581d  00000000  00000000  0003fb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014532c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  00145370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000101  00000000  00000000  0014a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	080073d0 	.word	0x080073d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	080073d0 	.word	0x080073d0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000ba84 	.word	0x2000ba84

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f103 0208 	add.w	r2, r3, #8
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f04f 32ff 	mov.w	r2, #4294967295
 80005dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f103 0208 	add.w	r2, r3, #8
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f103 0208 	add.w	r2, r3, #8
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d103      	bne.n	8000686 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e00c      	b.n	80006a0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3308      	adds	r3, #8
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e002      	b.n	8000694 <vListInsert+0x2e>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	429a      	cmp	r2, r3
 800069e:	d2f6      	bcs.n	800068e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	6892      	ldr	r2, [r2, #8]
 80006ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	6852      	ldr	r2, [r2, #4]
 80006f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	d103      	bne.n	800070c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d104      	bne.n	800074a <xQueueGenericReset+0x1e>
 8000740:	492a      	ldr	r1, [pc, #168]	@ (80007ec <xQueueGenericReset+0xc0>)
 8000742:	f240 100d 	movw	r0, #269	@ 0x10d
 8000746:	f005 f9f5 	bl	8005b34 <vAssertCalled>

    taskENTER_CRITICAL();
 800074a:	f002 f83d 	bl	80027c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000756:	68f9      	ldr	r1, [r7, #12]
 8000758:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800075a:	fb01 f303 	mul.w	r3, r1, r3
 800075e:	441a      	add	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2200      	movs	r2, #0
 8000768:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077a:	3b01      	subs	r3, #1
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000780:	fb01 f303 	mul.w	r3, r1, r3
 8000784:	441a      	add	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	22ff      	movs	r2, #255	@ 0xff
 800078e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	22ff      	movs	r2, #255	@ 0xff
 8000796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d114      	bne.n	80007ca <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d01a      	beq.n	80007de <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3310      	adds	r3, #16
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f8bb 	bl	8001928 <xTaskRemoveFromEventList>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <xQueueGenericReset+0xc4>)
 80007ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	e009      	b.n	80007de <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3310      	adds	r3, #16
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fef8 	bl	80005c4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3324      	adds	r3, #36	@ 0x24
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fef3 	bl	80005c4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007de:	f002 f81d 	bl	800281c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	080073e8 	.word	0x080073e8
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <xQueueGenericCreate+0x1e>
 8000808:	4921      	ldr	r1, [pc, #132]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800080a:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 800080e:	f005 f991 	bl	8005b34 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <xQueueGenericCreate+0x3c>
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d101      	bne.n	8000834 <xQueueGenericCreate+0x40>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <xQueueGenericCreate+0x42>
 8000834:	2300      	movs	r3, #0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d104      	bne.n	8000844 <xQueueGenericCreate+0x50>
 800083a:	4915      	ldr	r1, [pc, #84]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800083c:	f44f 70c7 	mov.w	r0, #398	@ 0x18e
 8000840:	f005 f978 	bl	8005b34 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800084a:	d904      	bls.n	8000856 <xQueueGenericCreate+0x62>
 800084c:	4910      	ldr	r1, [pc, #64]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800084e:	f240 1091 	movw	r0, #401	@ 0x191
 8000852:	f005 f96f 	bl	8005b34 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3350      	adds	r3, #80	@ 0x50
 800085a:	4618      	mov	r0, r3
 800085c:	f002 f8ca 	bl	80029f4 <pvPortMalloc>
 8000860:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3350      	adds	r3, #80	@ 0x50
 8000870:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4613      	mov	r3, r2
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f000 f808 	bl	8000894 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000884:	69bb      	ldr	r3, [r7, #24]
    }
 8000886:	4618      	mov	r0, r3
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	080073e8 	.word	0x080073e8

08000894 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e002      	b.n	80008b6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008c2:	2101      	movs	r1, #1
 80008c4:	69b8      	ldr	r0, [r7, #24]
 80008c6:	f7ff ff31 	bl	800072c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	2073      	movs	r0, #115	@ 0x73
 80008da:	f003 fe73 	bl	80045c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	@ 0x30
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d104      	bne.n	800090e <xQueueGenericSend+0x26>
 8000904:	497e      	ldr	r1, [pc, #504]	@ (8000b00 <xQueueGenericSend+0x218>)
 8000906:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 800090a:	f005 f913 	bl	8005b34 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <xQueueGenericSend+0x34>
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <xQueueGenericSend+0x38>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <xQueueGenericSend+0x3a>
 8000920:	2300      	movs	r3, #0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d104      	bne.n	8000930 <xQueueGenericSend+0x48>
 8000926:	4976      	ldr	r1, [pc, #472]	@ (8000b00 <xQueueGenericSend+0x218>)
 8000928:	f240 300d 	movw	r0, #781	@ 0x30d
 800092c:	f005 f902 	bl	8005b34 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d103      	bne.n	800093e <xQueueGenericSend+0x56>
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800093a:	2b01      	cmp	r3, #1
 800093c:	d101      	bne.n	8000942 <xQueueGenericSend+0x5a>
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <xQueueGenericSend+0x5c>
 8000942:	2300      	movs	r3, #0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <xQueueGenericSend+0x6a>
 8000948:	496d      	ldr	r1, [pc, #436]	@ (8000b00 <xQueueGenericSend+0x218>)
 800094a:	f240 300e 	movw	r0, #782	@ 0x30e
 800094e:	f005 f8f1 	bl	8005b34 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000952:	f001 f97b 	bl	8001c4c <xTaskGetSchedulerState>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <xQueueGenericSend+0x7a>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <xQueueGenericSend+0x7e>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <xQueueGenericSend+0x80>
 8000966:	2300      	movs	r3, #0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d104      	bne.n	8000976 <xQueueGenericSend+0x8e>
 800096c:	4964      	ldr	r1, [pc, #400]	@ (8000b00 <xQueueGenericSend+0x218>)
 800096e:	f240 3011 	movw	r0, #785	@ 0x311
 8000972:	f005 f8df 	bl	8005b34 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000976:	f001 ff27 	bl	80027c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000982:	429a      	cmp	r2, r3
 8000984:	d302      	bcc.n	800098c <xQueueGenericSend+0xa4>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d136      	bne.n	80009fa <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	4618      	mov	r0, r3
 8000990:	f004 fba6 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	460b      	mov	r3, r1
 800099e:	4601      	mov	r1, r0
 80009a0:	205a      	movs	r0, #90	@ 0x5a
 80009a2:	f003 fe85 	bl	80046b0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6a38      	ldr	r0, [r7, #32]
 80009ac:	f000 fa54 	bl	8000e58 <prvCopyDataToQueue>
 80009b0:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d010      	beq.n	80009dc <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	3324      	adds	r3, #36	@ 0x24
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 ffb2 	bl	8001928 <xTaskRemoveFromEventList>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d013      	beq.n	80009f2 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <xQueueGenericSend+0x21c>)
 80009cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	f3bf 8f4f 	dsb	sy
 80009d6:	f3bf 8f6f 	isb	sy
 80009da:	e00a      	b.n	80009f2 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009e2:	4b48      	ldr	r3, [pc, #288]	@ (8000b04 <xQueueGenericSend+0x21c>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009f2:	f001 ff13 	bl	800281c <vPortExitCritical>
                return pdPASS;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e07d      	b.n	8000af6 <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d110      	bne.n	8000a22 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a00:	f001 ff0c 	bl	800281c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fb6a 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	460b      	mov	r3, r1
 8000a16:	4601      	mov	r1, r0
 8000a18:	205a      	movs	r0, #90	@ 0x5a
 8000a1a:	f003 fe49 	bl	80046b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e069      	b.n	8000af6 <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d106      	bne.n	8000a36 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 ffdd 	bl	80019ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a36:	f001 fef1 	bl	800281c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a3a:	f000 fd41 	bl	80014c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a3e:	f001 fec3 	bl	80027c8 <vPortEnterCritical>
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4e:	d103      	bne.n	8000a58 <xQueueGenericSend+0x170>
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d103      	bne.n	8000a6e <xQueueGenericSend+0x186>
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a6e:	f001 fed5 	bl	800281c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a72:	1d3a      	adds	r2, r7, #4
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 ffcc 	bl	8001a18 <xTaskCheckForTimeOut>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d124      	bne.n	8000ad0 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a86:	6a38      	ldr	r0, [r7, #32]
 8000a88:	f000 fade 	bl	8001048 <prvIsQueueFull>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d018      	beq.n	8000ac4 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	3310      	adds	r3, #16
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fefa 	bl	8001894 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000aa0:	6a38      	ldr	r0, [r7, #32]
 8000aa2:	f000 fa69 	bl	8000f78 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aa6:	f000 fd19 	bl	80014dc <xTaskResumeAll>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f47f af62 	bne.w	8000976 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <xQueueGenericSend+0x21c>)
 8000ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	f3bf 8f4f 	dsb	sy
 8000abe:	f3bf 8f6f 	isb	sy
 8000ac2:	e758      	b.n	8000976 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ac4:	6a38      	ldr	r0, [r7, #32]
 8000ac6:	f000 fa57 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000aca:	f000 fd07 	bl	80014dc <xTaskResumeAll>
 8000ace:	e752      	b.n	8000976 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ad0:	6a38      	ldr	r0, [r7, #32]
 8000ad2:	f000 fa51 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ad6:	f000 fd01 	bl	80014dc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 faff 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	460b      	mov	r3, r1
 8000aec:	4601      	mov	r1, r0
 8000aee:	205a      	movs	r0, #90	@ 0x5a
 8000af0:	f003 fdde 	bl	80046b0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000af4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	080073e8 	.word	0x080073e8
 8000b04:	e000ed04 	.word	0xe000ed04

08000b08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8000b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d104      	bne.n	8000b2a <xQueueGenericSendFromISR+0x22>
 8000b20:	494c      	ldr	r1, [pc, #304]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b22:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8000b26:	f005 f805 	bl	8005b34 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <xQueueGenericSendFromISR+0x30>
 8000b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <xQueueGenericSendFromISR+0x34>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <xQueueGenericSendFromISR+0x36>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <xQueueGenericSendFromISR+0x44>
 8000b42:	4944      	ldr	r1, [pc, #272]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b44:	f240 30e1 	movw	r0, #993	@ 0x3e1
 8000b48:	f004 fff4 	bl	8005b34 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d103      	bne.n	8000b5a <xQueueGenericSendFromISR+0x52>
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d101      	bne.n	8000b5e <xQueueGenericSendFromISR+0x56>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <xQueueGenericSendFromISR+0x58>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <xQueueGenericSendFromISR+0x66>
 8000b64:	493b      	ldr	r1, [pc, #236]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b66:	f240 30e2 	movw	r0, #994	@ 0x3e2
 8000b6a:	f004 ffe3 	bl	8005b34 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b6e:	f001 ff0d 	bl	800298c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b72:	f3ef 8211 	mrs	r2, BASEPRI
 8000b76:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000b7a:	f383 8811 	msr	BASEPRI, r3
 8000b7e:	f3bf 8f6f 	isb	sy
 8000b82:	f3bf 8f4f 	dsb	sy
 8000b86:	61ba      	str	r2, [r7, #24]
 8000b88:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d302      	bcc.n	8000ba0 <xQueueGenericSendFromISR+0x98>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d142      	bne.n	8000c26 <xQueueGenericSendFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bae:	61fb      	str	r3, [r7, #28]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 fa94 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000bb8:	4601      	mov	r1, r0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	2060      	movs	r0, #96	@ 0x60
 8000bc0:	f003 fca6 	bl	8004510 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bca:	f000 f945 	bl	8000e58 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bce:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd6:	d112      	bne.n	8000bfe <xQueueGenericSendFromISR+0xf6>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01f      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be2:	3324      	adds	r3, #36	@ 0x24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fe9f 	bl	8001928 <xTaskRemoveFromEventList>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d017      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d014      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e010      	b.n	8000c20 <xQueueGenericSendFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000bfe:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c04:	d104      	bne.n	8000c10 <xQueueGenericSendFromISR+0x108>
 8000c06:	4913      	ldr	r1, [pc, #76]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000c08:	f240 406b 	movw	r0, #1131	@ 0x46b
 8000c0c:	f004 ff92 	bl	8005b34 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8000c24:	e00b      	b.n	8000c3e <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 fa59 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	2060      	movs	r0, #96	@ 0x60
 8000c36:	f003 fc6b 	bl	8004510 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c48:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	@ 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	080073e8 	.word	0x080073e8

08000c58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08d      	sub	sp, #52	@ 0x34
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <xQueueReceive+0x24>
 8000c72:	4977      	ldr	r1, [pc, #476]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000c74:	f240 502f 	movw	r0, #1327	@ 0x52f
 8000c78:	f004 ff5c 	bl	8005b34 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <xQueueReceive+0x32>
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <xQueueReceive+0x36>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <xQueueReceive+0x38>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <xQueueReceive+0x46>
 8000c94:	496e      	ldr	r1, [pc, #440]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000c96:	f240 5033 	movw	r0, #1331	@ 0x533
 8000c9a:	f004 ff4b 	bl	8005b34 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c9e:	f000 ffd5 	bl	8001c4c <xTaskGetSchedulerState>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <xQueueReceive+0x56>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <xQueueReceive+0x5a>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <xQueueReceive+0x5c>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <xQueueReceive+0x6a>
 8000cb8:	4965      	ldr	r1, [pc, #404]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000cba:	f44f 60a7 	mov.w	r0, #1336	@ 0x538
 8000cbe:	f004 ff39 	bl	8005b34 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000cc2:	f001 fd81 	bl	80027c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cca:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d02f      	beq.n	8000d32 <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	6a38      	ldr	r0, [r7, #32]
 8000cd6:	f000 f929 	bl	8000f2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 f9ff 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f004 f9fb 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000cea:	4602      	mov	r2, r0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	9100      	str	r1, [sp, #0]
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	205c      	movs	r0, #92	@ 0x5c
 8000cf6:	f003 fcdb 	bl	80046b0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00f      	beq.n	8000d2a <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	3310      	adds	r3, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fe0a 	bl	8001928 <xTaskRemoveFromEventList>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <xQueueReceive+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e54 <xQueueReceive+0x1fc>)
 8000d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	f3bf 8f4f 	dsb	sy
 8000d26:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d2a:	f001 fd77 	bl	800281c <vPortExitCritical>
                return pdPASS;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e08a      	b.n	8000e48 <xQueueReceive+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d113      	bne.n	8000d60 <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d38:	f001 fd70 	bl	800281c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 f9ce 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000d44:	4604      	mov	r4, r0
 8000d46:	2000      	movs	r0, #0
 8000d48:	f004 f9ca 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2101      	movs	r1, #1
 8000d52:	9100      	str	r1, [sp, #0]
 8000d54:	4621      	mov	r1, r4
 8000d56:	205c      	movs	r0, #92	@ 0x5c
 8000d58:	f003 fcaa 	bl	80046b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e073      	b.n	8000e48 <xQueueReceive+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fe3e 	bl	80019ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d74:	f001 fd52 	bl	800281c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d78:	f000 fba2 	bl	80014c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d7c:	f001 fd24 	bl	80027c8 <vPortEnterCritical>
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d103      	bne.n	8000d96 <xQueueReceive+0x13e>
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da2:	d103      	bne.n	8000dac <xQueueReceive+0x154>
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dac:	f001 fd36 	bl	800281c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000db0:	1d3a      	adds	r2, r7, #4
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fe2d 	bl	8001a18 <xTaskCheckForTimeOut>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d124      	bne.n	8000e0e <xQueueReceive+0x1b6>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f000 f929 	bl	800101c <prvIsQueueEmpty>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d018      	beq.n	8000e02 <xQueueReceive+0x1aa>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	3324      	adds	r3, #36	@ 0x24
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fd5b 	bl	8001894 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000dde:	6a38      	ldr	r0, [r7, #32]
 8000de0:	f000 f8ca 	bl	8000f78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000de4:	f000 fb7a 	bl	80014dc <xTaskResumeAll>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f47f af69 	bne.w	8000cc2 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <xQueueReceive+0x1fc>)
 8000df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	e75f      	b.n	8000cc2 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e02:	6a38      	ldr	r0, [r7, #32]
 8000e04:	f000 f8b8 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e08:	f000 fb68 	bl	80014dc <xTaskResumeAll>
 8000e0c:	e759      	b.n	8000cc2 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e0e:	6a38      	ldr	r0, [r7, #32]
 8000e10:	f000 f8b2 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e14:	f000 fb62 	bl	80014dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e18:	6a38      	ldr	r0, [r7, #32]
 8000e1a:	f000 f8ff 	bl	800101c <prvIsQueueEmpty>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f43f af4e 	beq.w	8000cc2 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 f959 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	f004 f955 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 8000e36:	4602      	mov	r2, r0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	9100      	str	r1, [sp, #0]
 8000e3e:	4621      	mov	r1, r4
 8000e40:	205c      	movs	r0, #92	@ 0x5c
 8000e42:	f003 fc35 	bl	80046b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e46:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	372c      	adds	r7, #44	@ 0x2c
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	080073e8 	.word	0x080073e8
 8000e54:	e000ed04 	.word	0xe000ed04

08000e58 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e6c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d14d      	bne.n	8000f1a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 ff00 	bl	8001c88 <xTaskPriorityDisinherit>
 8000e88:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	e043      	b.n	8000f1a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d119      	bne.n	8000ecc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6858      	ldr	r0, [r3, #4]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	f006 fa86 	bl	80073b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	441a      	add	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d32b      	bcc.n	8000f1a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	e026      	b.n	8000f1a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	68d8      	ldr	r0, [r3, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	f006 fa6c 	bl	80073b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	441a      	add	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	425b      	negs	r3, r3
 8000f02:	441a      	add	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d105      	bne.n	8000f1a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f22:	697b      	ldr	r3, [r7, #20]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d018      	beq.n	8000f70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	441a      	add	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d303      	bcc.n	8000f60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68d9      	ldr	r1, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	461a      	mov	r2, r3
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f006 fa22 	bl	80073b4 <memcpy>
    }
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f80:	f001 fc22 	bl	80027c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f8c:	e011      	b.n	8000fb2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d012      	beq.n	8000fbc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3324      	adds	r3, #36	@ 0x24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fcc4 	bl	8001928 <xTaskRemoveFromEventList>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000fa6:	f000 fd93 	bl	8001ad0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	dce9      	bgt.n	8000f8e <prvUnlockQueue+0x16>
 8000fba:	e000      	b.n	8000fbe <prvUnlockQueue+0x46>
                        break;
 8000fbc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	22ff      	movs	r2, #255	@ 0xff
 8000fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000fc6:	f001 fc29 	bl	800281c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000fca:	f001 fbfd 	bl	80027c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000fd4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fd6:	e011      	b.n	8000ffc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d012      	beq.n	8001006 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fc9f 	bl	8001928 <xTaskRemoveFromEventList>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ff0:	f000 fd6e 	bl	8001ad0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dce9      	bgt.n	8000fd8 <prvUnlockQueue+0x60>
 8001004:	e000      	b.n	8001008 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001006:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001010:	f001 fc04 	bl	800281c <vPortExitCritical>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001024:	f001 fbd0 	bl	80027c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001030:	2301      	movs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e001      	b.n	800103a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800103a:	f001 fbef 	bl	800281c <vPortExitCritical>

    return xReturn;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001050:	f001 fbba 	bl	80027c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800105c:	429a      	cmp	r2, r3
 800105e:	d102      	bne.n	8001066 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e001      	b.n	800106a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800106a:	f001 fbd7 	bl	800281c <vPortExitCritical>

    return xReturn;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e01e      	b.n	80010c6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d115      	bne.n	80010c0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001094:	4910      	ldr	r1, [pc, #64]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 f817 	bl	80050e0 <SEGGER_SYSVIEW_ShrinkId>
 80010b2:	4601      	mov	r1, r0
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	2071      	movs	r0, #113	@ 0x71
 80010ba:	f003 fa29 	bl	8004510 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80010be:	e006      	b.n	80010ce <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	d9dd      	bls.n	8001088 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000038 	.word	0x20000038

080010dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80010ec:	f001 fb6c 	bl	80027c8 <vPortEnterCritical>
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d103      	bne.n	8001106 <vQueueWaitForMessageRestricted+0x2a>
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800110c:	b25b      	sxtb	r3, r3
 800110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001112:	d103      	bne.n	800111c <vQueueWaitForMessageRestricted+0x40>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800111c:	f001 fb7e 	bl	800281c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3324      	adds	r3, #36	@ 0x24
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fbcf 	bl	80018d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff1e 	bl	8000f78 <prvUnlockQueue>
    }
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	@ 0x30
 8001148:	af04      	add	r7, sp, #16
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fc4b 	bl	80029f4 <pvPortMalloc>
 800115e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00e      	beq.n	8001184 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001166:	2058      	movs	r0, #88	@ 0x58
 8001168:	f001 fc44 	bl	80029f4 <pvPortMalloc>
 800116c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
 800117a:	e005      	b.n	8001188 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f001 fd07 	bl	8002b90 <vPortFree>
 8001182:	e001      	b.n	8001188 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	2300      	movs	r3, #0
 8001192:	9303      	str	r3, [sp, #12]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 f80f 	bl	80011c8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011aa:	69f8      	ldr	r0, [r7, #28]
 80011ac:	f000 f89e 	bl	80012ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	e002      	b.n	80011bc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80011bc:	69bb      	ldr	r3, [r7, #24]
    }
 80011be:	4618      	mov	r0, r3
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80011d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	461a      	mov	r2, r3
 80011e0:	21a5      	movs	r1, #165	@ 0xa5
 80011e2:	f006 f8bb 	bl	800735c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80011f0:	440b      	add	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f023 0307 	bic.w	r3, r3, #7
 80011fe:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <prvInitialiseNewTask+0x4c>
 800120a:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <prvInitialiseNewTask+0x120>)
 800120c:	f240 3069 	movw	r0, #873	@ 0x369
 8001210:	f004 fc90 	bl	8005b34 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01f      	beq.n	800125a <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e012      	b.n	8001246 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	4413      	add	r3, r2
 8001226:	7819      	ldrb	r1, [r3, #0]
 8001228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	4413      	add	r3, r2
 800122e:	3334      	adds	r3, #52	@ 0x34
 8001230:	460a      	mov	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d9e9      	bls.n	8001220 <prvInitialiseNewTask+0x58>
 800124c:	e000      	b.n	8001250 <prvInitialiseNewTask+0x88>
            {
                break;
 800124e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001258:	e003      	b.n	8001262 <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d901      	bls.n	800126c <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001268:	2304      	movs	r3, #4
 800126a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800126c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001274:	6a3a      	ldr	r2, [r7, #32]
 8001276:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	3304      	adds	r3, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f9be 	bl	8000604 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	3318      	adds	r3, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f9b9 	bl	8000604 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001296:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f1c3 0205 	rsb	r2, r3, #5
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80012a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012aa:	3350      	adds	r3, #80	@ 0x50
 80012ac:	2204      	movs	r2, #4
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 f853 	bl	800735c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80012b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b8:	3354      	adds	r3, #84	@ 0x54
 80012ba:	2201      	movs	r2, #1
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 f84c 	bl	800735c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	6938      	ldr	r0, [r7, #16]
 80012ca:	f001 f8e1 	bl	8002490 <pxPortInitialiseStack>
 80012ce:	4602      	mov	r2, r0
 80012d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08007454 	.word	0x08007454

080012ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012f4:	f001 fa68 	bl	80027c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012f8:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a3a      	ldr	r2, [pc, #232]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 8001300:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800130a:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001310:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d110      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001318:	f000 fbfe 	bl	8001b18 <prvInitialiseTaskLists>
 800131c:	e00d      	b.n	800133a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800131e:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <prvAddNewTaskToReadyList+0x104>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001326:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	429a      	cmp	r2, r3
 8001332:	d802      	bhi.n	800133a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001334:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a2c      	ldr	r2, [pc, #176]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 8001342:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d016      	beq.n	8001380 <prvAddNewTaskToReadyList+0x94>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fd9d 	bl	8004e94 <SEGGER_SYSVIEW_OnTaskCreate>
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	461d      	mov	r5, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461c      	mov	r4, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	1ae3      	subs	r3, r4, r3
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	462b      	mov	r3, r5
 800137c:	f001 fdcc 	bl	8002f18 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fe0a 	bl	8004f9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <prvAddNewTaskToReadyList+0x10c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	4a18      	ldr	r2, [pc, #96]	@ (80013f8 <prvAddNewTaskToReadyList+0x10c>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <prvAddNewTaskToReadyList+0x110>)
 80013a8:	441a      	add	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f7ff f934 	bl	800061e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80013b6:	f001 fa31 	bl	800281c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <prvAddNewTaskToReadyList+0x104>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00e      	beq.n	80013e0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <prvAddNewTaskToReadyList+0x114>)
 80013d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	f3bf 8f4f 	dsb	sy
 80013dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}
 80013e8:	20000150 	.word	0x20000150
 80013ec:	20000078 	.word	0x20000078
 80013f0:	2000015c 	.word	0x2000015c
 80013f4:	2000016c 	.word	0x2000016c
 80013f8:	20000158 	.word	0x20000158
 80013fc:	2000007c 	.word	0x2000007c
 8001400:	e000ed04 	.word	0xe000ed04

08001404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <vTaskStartScheduler+0x98>)
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	2282      	movs	r2, #130	@ 0x82
 8001416:	4922      	ldr	r1, [pc, #136]	@ (80014a0 <vTaskStartScheduler+0x9c>)
 8001418:	4822      	ldr	r0, [pc, #136]	@ (80014a4 <vTaskStartScheduler+0xa0>)
 800141a:	f7ff fe93 	bl	8001144 <xTaskCreate>
 800141e:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d102      	bne.n	800142c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001426:	f000 fd1d 	bl	8001e64 <xTimerCreateTimerTask>
 800142a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d124      	bne.n	800147c <vTaskStartScheduler+0x78>
        __asm volatile
 8001432:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8001436:	f383 8811 	msr	BASEPRI, r3
 800143a:	f3bf 8f6f 	isb	sy
 800143e:	f3bf 8f4f 	dsb	sy
 8001442:	603b      	str	r3, [r7, #0]
    }
 8001444:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <vTaskStartScheduler+0xa4>)
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <vTaskStartScheduler+0xa8>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <vTaskStartScheduler+0xac>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <vTaskStartScheduler+0xb0>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <vTaskStartScheduler+0x98>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d102      	bne.n	800146c <vTaskStartScheduler+0x68>
 8001466:	f003 fcf9 	bl	8004e5c <SEGGER_SYSVIEW_OnIdle>
 800146a:	e004      	b.n	8001476 <vTaskStartScheduler+0x72>
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <vTaskStartScheduler+0xb0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fd51 	bl	8004f18 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001476:	f001 f895 	bl	80025a4 <xPortStartScheduler>
 800147a:	e008      	b.n	800148e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001482:	d104      	bne.n	800148e <vTaskStartScheduler+0x8a>
 8001484:	490c      	ldr	r1, [pc, #48]	@ (80014b8 <vTaskStartScheduler+0xb4>)
 8001486:	f640 0041 	movw	r0, #2113	@ 0x841
 800148a:	f004 fb53 	bl	8005b34 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <vTaskStartScheduler+0xb8>)
 8001490:	681b      	ldr	r3, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000174 	.word	0x20000174
 80014a0:	080074c0 	.word	0x080074c0
 80014a4:	08001ae9 	.word	0x08001ae9
 80014a8:	20000170 	.word	0x20000170
 80014ac:	2000015c 	.word	0x2000015c
 80014b0:	20000154 	.word	0x20000154
 80014b4:	20000078 	.word	0x20000078
 80014b8:	08007454 	.word	0x08007454
 80014bc:	20000000 	.word	0x20000000

080014c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <vTaskSuspendAll+0x18>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a03      	ldr	r2, [pc, #12]	@ (80014d8 <vTaskSuspendAll+0x18>)
 80014cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000178 	.word	0x20000178

080014dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80014ea:	4b40      	ldr	r3, [pc, #256]	@ (80015ec <xTaskResumeAll+0x110>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d104      	bne.n	80014fc <xTaskResumeAll+0x20>
 80014f2:	493f      	ldr	r1, [pc, #252]	@ (80015f0 <xTaskResumeAll+0x114>)
 80014f4:	f640 00b4 	movw	r0, #2228	@ 0x8b4
 80014f8:	f004 fb1c 	bl	8005b34 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80014fc:	f001 f964 	bl	80027c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001500:	4b3a      	ldr	r3, [pc, #232]	@ (80015ec <xTaskResumeAll+0x110>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3b01      	subs	r3, #1
 8001506:	4a39      	ldr	r2, [pc, #228]	@ (80015ec <xTaskResumeAll+0x110>)
 8001508:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <xTaskResumeAll+0x110>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d165      	bne.n	80015de <xTaskResumeAll+0x102>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001512:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <xTaskResumeAll+0x118>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d061      	beq.n	80015de <xTaskResumeAll+0x102>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800151a:	e032      	b.n	8001582 <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800151c:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <xTaskResumeAll+0x11c>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3318      	adds	r3, #24
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f8d5 	bl	80006d8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f8d0 	bl	80006d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fd2e 	bl	8004f9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001544:	2201      	movs	r2, #1
 8001546:	409a      	lsls	r2, r3
 8001548:	4b2c      	ldr	r3, [pc, #176]	@ (80015fc <xTaskResumeAll+0x120>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	4a2b      	ldr	r2, [pc, #172]	@ (80015fc <xTaskResumeAll+0x120>)
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <xTaskResumeAll+0x124>)
 8001560:	441a      	add	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4610      	mov	r0, r2
 800156a:	f7ff f858 	bl	800061e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <xTaskResumeAll+0x128>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001578:	429a      	cmp	r2, r3
 800157a:	d302      	bcc.n	8001582 <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <xTaskResumeAll+0x12c>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <xTaskResumeAll+0x11c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1c8      	bne.n	800151c <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001590:	f000 fb40 	bl	8001c14 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <xTaskResumeAll+0x130>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d010      	beq.n	80015c2 <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80015a0:	f000 f85a 	bl	8001658 <xTaskIncrementTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <xTaskResumeAll+0x12c>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f1      	bne.n	80015a0 <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <xTaskResumeAll+0x130>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <xTaskResumeAll+0x12c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <xTaskResumeAll+0x102>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <xTaskResumeAll+0x134>)
 80015d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f3bf 8f4f 	dsb	sy
 80015da:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80015de:	f001 f91d 	bl	800281c <vPortExitCritical>

    return xAlreadyYielded;
 80015e2:	68bb      	ldr	r3, [r7, #8]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000178 	.word	0x20000178
 80015f0:	08007454 	.word	0x08007454
 80015f4:	20000150 	.word	0x20000150
 80015f8:	20000110 	.word	0x20000110
 80015fc:	20000158 	.word	0x20000158
 8001600:	2000007c 	.word	0x2000007c
 8001604:	20000078 	.word	0x20000078
 8001608:	20000164 	.word	0x20000164
 800160c:	20000160 	.word	0x20000160
 8001610:	e000ed04 	.word	0xe000ed04

08001614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <xTaskGetTickCount+0x1c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000154 	.word	0x20000154

08001634 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800163a:	f001 f9a7 	bl	800298c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001642:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <xTaskGetTickCountFromISR+0x20>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001648:	683b      	ldr	r3, [r7, #0]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000154 	.word	0x20000154

08001658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001662:	4b4d      	ldr	r3, [pc, #308]	@ (8001798 <xTaskIncrementTick+0x140>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 808c 	bne.w	8001784 <xTaskIncrementTick+0x12c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800166c:	4b4b      	ldr	r3, [pc, #300]	@ (800179c <xTaskIncrementTick+0x144>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001674:	4a49      	ldr	r2, [pc, #292]	@ (800179c <xTaskIncrementTick+0x144>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d11a      	bne.n	80016b6 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8001680:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <xTaskIncrementTick+0x148>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d004      	beq.n	8001694 <xTaskIncrementTick+0x3c>
 800168a:	4946      	ldr	r1, [pc, #280]	@ (80017a4 <xTaskIncrementTick+0x14c>)
 800168c:	f640 20c7 	movw	r0, #2759	@ 0xac7
 8001690:	f004 fa50 	bl	8005b34 <vAssertCalled>
 8001694:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <xTaskIncrementTick+0x148>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <xTaskIncrementTick+0x150>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a40      	ldr	r2, [pc, #256]	@ (80017a0 <xTaskIncrementTick+0x148>)
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4a41      	ldr	r2, [pc, #260]	@ (80017a8 <xTaskIncrementTick+0x150>)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <xTaskIncrementTick+0x154>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a3f      	ldr	r2, [pc, #252]	@ (80017ac <xTaskIncrementTick+0x154>)
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	f000 faaf 	bl	8001c14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80016b6:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <xTaskIncrementTick+0x158>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d34c      	bcc.n	800175a <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016c0:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <xTaskIncrementTick+0x148>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016ca:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <xTaskIncrementTick+0x158>)
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	601a      	str	r2, [r3, #0]
                    break;
 80016d2:	e042      	b.n	800175a <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016d4:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <xTaskIncrementTick+0x148>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d203      	bcs.n	80016f4 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80016ec:	4a30      	ldr	r2, [pc, #192]	@ (80017b0 <xTaskIncrementTick+0x158>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80016f2:	e032      	b.n	800175a <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	3304      	adds	r3, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ffed 	bl	80006d8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3318      	adds	r3, #24
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ffe4 	bl	80006d8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fc42 	bl	8004f9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	2201      	movs	r2, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <xTaskIncrementTick+0x15c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	4a23      	ldr	r2, [pc, #140]	@ (80017b4 <xTaskIncrementTick+0x15c>)
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4a20      	ldr	r2, [pc, #128]	@ (80017b8 <xTaskIncrementTick+0x160>)
 8001738:	441a      	add	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3304      	adds	r3, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4610      	mov	r0, r2
 8001742:	f7fe ff6c 	bl	800061e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <xTaskIncrementTick+0x164>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	429a      	cmp	r2, r3
 8001752:	d3b5      	bcc.n	80016c0 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001758:	e7b2      	b.n	80016c0 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800175a:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <xTaskIncrementTick+0x164>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001760:	4915      	ldr	r1, [pc, #84]	@ (80017b8 <xTaskIncrementTick+0x160>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d901      	bls.n	8001776 <xTaskIncrementTick+0x11e>
                {
                    xSwitchRequired = pdTRUE;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <xTaskIncrementTick+0x168>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <xTaskIncrementTick+0x136>
                {
                    xSwitchRequired = pdTRUE;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e004      	b.n	800178e <xTaskIncrementTick+0x136>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001784:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <xTaskIncrementTick+0x16c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <xTaskIncrementTick+0x16c>)
 800178c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800178e:	697b      	ldr	r3, [r7, #20]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000178 	.word	0x20000178
 800179c:	20000154 	.word	0x20000154
 80017a0:	20000108 	.word	0x20000108
 80017a4:	08007454 	.word	0x08007454
 80017a8:	2000010c 	.word	0x2000010c
 80017ac:	20000168 	.word	0x20000168
 80017b0:	20000170 	.word	0x20000170
 80017b4:	20000158 	.word	0x20000158
 80017b8:	2000007c 	.word	0x2000007c
 80017bc:	20000078 	.word	0x20000078
 80017c0:	20000164 	.word	0x20000164
 80017c4:	20000160 	.word	0x20000160

080017c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <vTaskSwitchContext+0xb0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017d6:	4b29      	ldr	r3, [pc, #164]	@ (800187c <vTaskSwitchContext+0xb4>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80017dc:	e047      	b.n	800186e <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 80017de:	4b27      	ldr	r3, [pc, #156]	@ (800187c <vTaskSwitchContext+0xb4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017e4:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <vTaskSwitchContext+0xb8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	f1c3 031f 	rsb	r3, r3, #31
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4922      	ldr	r1, [pc, #136]	@ (8001884 <vTaskSwitchContext+0xbc>)
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d104      	bne.n	8001818 <vTaskSwitchContext+0x50>
 800180e:	491e      	ldr	r1, [pc, #120]	@ (8001888 <vTaskSwitchContext+0xc0>)
 8001810:	f640 4002 	movw	r0, #3074	@ 0xc02
 8001814:	f004 f98e 	bl	8005b34 <vAssertCalled>
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <vTaskSwitchContext+0xbc>)
 8001824:	4413      	add	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3308      	adds	r3, #8
 800183a:	429a      	cmp	r2, r3
 800183c:	d104      	bne.n	8001848 <vTaskSwitchContext+0x80>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	4a0f      	ldr	r2, [pc, #60]	@ (800188c <vTaskSwitchContext+0xc4>)
 8001850:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <vTaskSwitchContext+0xc4>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <vTaskSwitchContext+0xc8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d102      	bne.n	8001864 <vTaskSwitchContext+0x9c>
 800185e:	f003 fafd 	bl	8004e5c <SEGGER_SYSVIEW_OnIdle>
}
 8001862:	e004      	b.n	800186e <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <vTaskSwitchContext+0xc4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fb55 	bl	8004f18 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000178 	.word	0x20000178
 800187c:	20000164 	.word	0x20000164
 8001880:	20000158 	.word	0x20000158
 8001884:	2000007c 	.word	0x2000007c
 8001888:	08007454 	.word	0x08007454
 800188c:	20000078 	.word	0x20000078
 8001890:	20000174 	.word	0x20000174

08001894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d104      	bne.n	80018ae <vTaskPlaceOnEventList+0x1a>
 80018a4:	4909      	ldr	r1, [pc, #36]	@ (80018cc <vTaskPlaceOnEventList+0x38>)
 80018a6:	f640 401c 	movw	r0, #3100	@ 0xc1c
 80018aa:	f004 f943 	bl	8005b34 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <vTaskPlaceOnEventList+0x3c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	3318      	adds	r3, #24
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe fed5 	bl	8000666 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018bc:	2101      	movs	r1, #1
 80018be:	6838      	ldr	r0, [r7, #0]
 80018c0:	f000 fa58 	bl	8001d74 <prvAddCurrentTaskToDelayedList>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	08007454 	.word	0x08007454
 80018d0:	20000078 	.word	0x20000078

080018d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d104      	bne.n	80018f0 <vTaskPlaceOnEventListRestricted+0x1c>
 80018e6:	490e      	ldr	r1, [pc, #56]	@ (8001920 <vTaskPlaceOnEventListRestricted+0x4c>)
 80018e8:	f640 404b 	movw	r0, #3147	@ 0xc4b
 80018ec:	f004 f922 	bl	8005b34 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <vTaskPlaceOnEventListRestricted+0x50>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3318      	adds	r3, #24
 80018f6:	4619      	mov	r1, r3
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7fe fe90 	bl	800061e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800190a:	2024      	movs	r0, #36	@ 0x24
 800190c:	f002 fda6 	bl	800445c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 fa2e 	bl	8001d74 <prvAddCurrentTaskToDelayedList>
    }
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08007454 	.word	0x08007454
 8001924:	20000078 	.word	0x20000078

08001928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d104      	bne.n	8001948 <xTaskRemoveFromEventList+0x20>
 800193e:	4924      	ldr	r1, [pc, #144]	@ (80019d0 <xTaskRemoveFromEventList+0xa8>)
 8001940:	f640 407b 	movw	r0, #3195	@ 0xc7b
 8001944:	f004 f8f6 	bl	8005b34 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3318      	adds	r3, #24
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fec3 	bl	80006d8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <xTaskRemoveFromEventList+0xac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d120      	bne.n	800199c <xTaskRemoveFromEventList+0x74>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3304      	adds	r3, #4
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe feba 	bl	80006d8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fb18 	bl	8004f9c <SEGGER_SYSVIEW_OnTaskStartReady>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	2201      	movs	r2, #1
 8001972:	409a      	lsls	r2, r3
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <xTaskRemoveFromEventList+0xb0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4313      	orrs	r3, r2
 800197a:	4a17      	ldr	r2, [pc, #92]	@ (80019d8 <xTaskRemoveFromEventList+0xb0>)
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <xTaskRemoveFromEventList+0xb4>)
 800198c:	441a      	add	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3304      	adds	r3, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f7fe fe42 	bl	800061e <vListInsertEnd>
 800199a:	e005      	b.n	80019a8 <xTaskRemoveFromEventList+0x80>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3318      	adds	r3, #24
 80019a0:	4619      	mov	r1, r3
 80019a2:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <xTaskRemoveFromEventList+0xb8>)
 80019a4:	f7fe fe3b 	bl	800061e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ac:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <xTaskRemoveFromEventList+0xbc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d905      	bls.n	80019c2 <xTaskRemoveFromEventList+0x9a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80019b6:	2301      	movs	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <xTaskRemoveFromEventList+0xc0>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e001      	b.n	80019c6 <xTaskRemoveFromEventList+0x9e>
    }
    else
    {
        xReturn = pdFALSE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	08007454 	.word	0x08007454
 80019d4:	20000178 	.word	0x20000178
 80019d8:	20000158 	.word	0x20000158
 80019dc:	2000007c 	.word	0x2000007c
 80019e0:	20000110 	.word	0x20000110
 80019e4:	20000078 	.word	0x20000078
 80019e8:	20000164 	.word	0x20000164

080019ec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <vTaskInternalSetTimeOutState+0x24>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <vTaskInternalSetTimeOutState+0x28>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	20000168 	.word	0x20000168
 8001a14:	20000154 	.word	0x20000154

08001a18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d104      	bne.n	8001a32 <xTaskCheckForTimeOut+0x1a>
 8001a28:	4926      	ldr	r1, [pc, #152]	@ (8001ac4 <xTaskCheckForTimeOut+0xac>)
 8001a2a:	f640 40f6 	movw	r0, #3318	@ 0xcf6
 8001a2e:	f004 f881 	bl	8005b34 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <xTaskCheckForTimeOut+0x2a>
 8001a38:	4922      	ldr	r1, [pc, #136]	@ (8001ac4 <xTaskCheckForTimeOut+0xac>)
 8001a3a:	f640 40f7 	movw	r0, #3319	@ 0xcf7
 8001a3e:	f004 f879 	bl	8005b34 <vAssertCalled>

    taskENTER_CRITICAL();
 8001a42:	f000 fec1 	bl	80027c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <xTaskCheckForTimeOut+0xb0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5e:	d102      	bne.n	8001a66 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e026      	b.n	8001ab4 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <xTaskCheckForTimeOut+0xb4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d00a      	beq.n	8001a88 <xTaskCheckForTimeOut+0x70>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d305      	bcc.n	8001a88 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e015      	b.n	8001ab4 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d20b      	bcs.n	8001aaa <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad2      	subs	r2, r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa4 	bl	80019ec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e004      	b.n	8001ab4 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001ab4:	f000 feb2 	bl	800281c <vPortExitCritical>

    return xReturn;
 8001ab8:	697b      	ldr	r3, [r7, #20]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	08007454 	.word	0x08007454
 8001ac8:	20000154 	.word	0x20000154
 8001acc:	20000168 	.word	0x20000168

08001ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <vTaskMissedYield+0x14>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20000164 	.word	0x20000164

08001ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001af0:	f000 f852 	bl	8001b98 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <prvIdleTask+0x28>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d9f9      	bls.n	8001af0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <prvIdleTask+0x2c>)
 8001afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f3bf 8f4f 	dsb	sy
 8001b08:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001b0c:	e7f0      	b.n	8001af0 <prvIdleTask+0x8>
 8001b0e:	bf00      	nop
 8001b10:	2000007c 	.word	0x2000007c
 8001b14:	e000ed04 	.word	0xe000ed04

08001b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	e00c      	b.n	8001b3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <prvInitialiseTaskLists+0x60>)
 8001b30:	4413      	add	r3, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd46 	bl	80005c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d9ef      	bls.n	8001b24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b44:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <prvInitialiseTaskLists+0x64>)
 8001b46:	f7fe fd3d 	bl	80005c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001b4a:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <prvInitialiseTaskLists+0x68>)
 8001b4c:	f7fe fd3a 	bl	80005c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <prvInitialiseTaskLists+0x6c>)
 8001b52:	f7fe fd37 	bl	80005c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001b56:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <prvInitialiseTaskLists+0x70>)
 8001b58:	f7fe fd34 	bl	80005c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001b5c:	480b      	ldr	r0, [pc, #44]	@ (8001b8c <prvInitialiseTaskLists+0x74>)
 8001b5e:	f7fe fd31 	bl	80005c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <prvInitialiseTaskLists+0x78>)
 8001b64:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <prvInitialiseTaskLists+0x64>)
 8001b66:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <prvInitialiseTaskLists+0x7c>)
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <prvInitialiseTaskLists+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000007c 	.word	0x2000007c
 8001b7c:	200000e0 	.word	0x200000e0
 8001b80:	200000f4 	.word	0x200000f4
 8001b84:	20000110 	.word	0x20000110
 8001b88:	20000124 	.word	0x20000124
 8001b8c:	2000013c 	.word	0x2000013c
 8001b90:	20000108 	.word	0x20000108
 8001b94:	2000010c 	.word	0x2000010c

08001b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b9e:	e019      	b.n	8001bd4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001ba0:	f000 fe12 	bl	80027c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ba4:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <prvCheckTasksWaitingTermination+0x50>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fd91 	bl	80006d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <prvCheckTasksWaitingTermination+0x54>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bec <prvCheckTasksWaitingTermination+0x54>)
 8001bbe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <prvCheckTasksWaitingTermination+0x58>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <prvCheckTasksWaitingTermination+0x58>)
 8001bc8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001bca:	f000 fe27 	bl	800281c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f810 	bl	8001bf4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <prvCheckTasksWaitingTermination+0x58>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e1      	bne.n	8001ba0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000124 	.word	0x20000124
 8001bec:	20000150 	.word	0x20000150
 8001bf0:	20000138 	.word	0x20000138

08001bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 ffc5 	bl	8002b90 <vPortFree>
                vPortFree( pxTCB );
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 ffc2 	bl	8002b90 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <prvResetNextTaskUnblockTime+0x30>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d104      	bne.n	8001c2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <prvResetNextTaskUnblockTime+0x34>)
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c2a:	e005      	b.n	8001c38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <prvResetNextTaskUnblockTime+0x30>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <prvResetNextTaskUnblockTime+0x34>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000108 	.word	0x20000108
 8001c48:	20000170 	.word	0x20000170

08001c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <xTaskGetSchedulerState+0x34>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	e008      	b.n	8001c72 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <xTaskGetSchedulerState+0x38>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	e001      	b.n	8001c72 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c72:	687b      	ldr	r3, [r7, #4]
    }
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	2000015c 	.word	0x2000015c
 8001c84:	20000178 	.word	0x20000178

08001c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d05c      	beq.n	8001d58 <xTaskPriorityDisinherit+0xd0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001c9e:	4b31      	ldr	r3, [pc, #196]	@ (8001d64 <xTaskPriorityDisinherit+0xdc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d004      	beq.n	8001cb2 <xTaskPriorityDisinherit+0x2a>
 8001ca8:	492f      	ldr	r1, [pc, #188]	@ (8001d68 <xTaskPriorityDisinherit+0xe0>)
 8001caa:	f241 0056 	movw	r0, #4182	@ 0x1056
 8001cae:	f003 ff41 	bl	8005b34 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d104      	bne.n	8001cc4 <xTaskPriorityDisinherit+0x3c>
 8001cba:	492b      	ldr	r1, [pc, #172]	@ (8001d68 <xTaskPriorityDisinherit+0xe0>)
 8001cbc:	f241 0057 	movw	r0, #4183	@ 0x1057
 8001cc0:	f003 ff38 	bl	8005b34 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d03e      	beq.n	8001d58 <xTaskPriorityDisinherit+0xd0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d13a      	bne.n	8001d58 <xTaskPriorityDisinherit+0xd0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fcf6 	bl	80006d8 <uxListRemove>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <xTaskPriorityDisinherit+0xe4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4013      	ands	r3, r2
 8001d04:	4a19      	ldr	r2, [pc, #100]	@ (8001d6c <xTaskPriorityDisinherit+0xe4>)
 8001d06:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	204a      	movs	r0, #74	@ 0x4a
 8001d0e:	f002 fbc3 	bl	8004498 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	f1c3 0205 	rsb	r2, r3, #5
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <xTaskPriorityDisinherit+0xe4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <xTaskPriorityDisinherit+0xe4>)
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <xTaskPriorityDisinherit+0xe8>)
 8001d46:	441a      	add	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f7fe fc65 	bl	800061e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d58:	68fb      	ldr	r3, [r7, #12]
    }
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000078 	.word	0x20000078
 8001d68:	08007454 	.word	0x08007454
 8001d6c:	20000158 	.word	0x20000158
 8001d70:	2000007c 	.word	0x2000007c

08001d74 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d7e:	4b32      	ldr	r3, [pc, #200]	@ (8001e48 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d84:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fca4 	bl	80006d8 <uxListRemove>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4013      	ands	r3, r2
 8001daa:	4a29      	ldr	r2, [pc, #164]	@ (8001e50 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001dac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d110      	bne.n	8001dd8 <prvAddCurrentTaskToDelayedList+0x64>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001dbc:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	211b      	movs	r1, #27
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 f92c 	bl	8005020 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4820      	ldr	r0, [pc, #128]	@ (8001e54 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001dd2:	f7fe fc24 	bl	800061e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001dd6:	e032      	b.n	8001e3e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d20f      	bcs.n	8001e10 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001df0:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2104      	movs	r1, #4
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f912 	bl	8005020 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dfc:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3304      	adds	r3, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	f7fe fc2c 	bl	8000666 <vListInsert>
}
 8001e0e:	e016      	b.n	8001e3e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2104      	movs	r1, #4
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 f902 	bl	8005020 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3304      	adds	r3, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4610      	mov	r0, r2
 8001e2a:	f7fe fc1c 	bl	8000666 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d202      	bcs.n	8001e3e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001e38:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	6013      	str	r3, [r2, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000154 	.word	0x20000154
 8001e4c:	20000078 	.word	0x20000078
 8001e50:	20000158 	.word	0x20000158
 8001e54:	2000013c 	.word	0x2000013c
 8001e58:	2000010c 	.word	0x2000010c
 8001e5c:	20000108 	.word	0x20000108
 8001e60:	20000170 	.word	0x20000170

08001e64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001e6e:	f000 fad9 	bl	8002424 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <xTimerCreateTimerTask+0x48>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <xTimerCreateTimerTask+0x4c>)
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	2304      	movs	r3, #4
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e88:	490a      	ldr	r1, [pc, #40]	@ (8001eb4 <xTimerCreateTimerTask+0x50>)
 8001e8a:	480b      	ldr	r0, [pc, #44]	@ (8001eb8 <xTimerCreateTimerTask+0x54>)
 8001e8c:	f7ff f95a 	bl	8001144 <xTaskCreate>
 8001e90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d104      	bne.n	8001ea2 <xTimerCreateTimerTask+0x3e>
 8001e98:	4908      	ldr	r1, [pc, #32]	@ (8001ebc <xTimerCreateTimerTask+0x58>)
 8001e9a:	f240 100d 	movw	r0, #269	@ 0x10d
 8001e9e:	f003 fe49 	bl	8005b34 <vAssertCalled>
        return xReturn;
 8001ea2:	687b      	ldr	r3, [r7, #4]
    }
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200001ac 	.word	0x200001ac
 8001eb0:	200001b0 	.word	0x200001b0
 8001eb4:	080074d8 	.word	0x080074d8
 8001eb8:	08001fe9 	.word	0x08001fe9
 8001ebc:	080074e0 	.word	0x080074e0

08001ec0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <xTimerGenericCommand+0x22>
 8001ed8:	491c      	ldr	r1, [pc, #112]	@ (8001f4c <xTimerGenericCommand+0x8c>)
 8001eda:	f44f 70c1 	mov.w	r0, #386	@ 0x182
 8001ede:	f003 fe29 	bl	8005b34 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <xTimerGenericCommand+0x90>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d02a      	beq.n	8001f40 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	dc18      	bgt.n	8001f2e <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001efc:	f7ff fea6 	bl	8001c4c <xTaskGetSchedulerState>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d109      	bne.n	8001f1a <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <xTimerGenericCommand+0x90>)
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	f107 0114 	add.w	r1, r7, #20
 8001f0e:	2300      	movs	r3, #0
 8001f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f12:	f7fe fce9 	bl	80008e8 <xQueueGenericSend>
 8001f16:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f18:	e012      	b.n	8001f40 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <xTimerGenericCommand+0x90>)
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	f107 0114 	add.w	r1, r7, #20
 8001f22:	2300      	movs	r3, #0
 8001f24:	2200      	movs	r2, #0
 8001f26:	f7fe fcdf 	bl	80008e8 <xQueueGenericSend>
 8001f2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f2c:	e008      	b.n	8001f40 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <xTimerGenericCommand+0x90>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f107 0114 	add.w	r1, r7, #20
 8001f36:	2300      	movs	r3, #0
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	f7fe fde5 	bl	8000b08 <xQueueGenericSendFromISR>
 8001f3e:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001f42:	4618      	mov	r0, r3
 8001f44:	3728      	adds	r7, #40	@ 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	080074e0 	.word	0x080074e0
 8001f50:	200001ac 	.word	0x200001ac

08001f54 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <prvProcessExpiredTimer+0x8c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fbb3 	bl	80006d8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01d      	beq.n	8001fbc <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	18d1      	adds	r1, r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f8d1 	bl	8002134 <prvInsertTimerInActiveList>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01a      	beq.n	8001fce <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff ff8c 	bl	8001ec0 <xTimerGenericCommand>
 8001fa8:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10e      	bne.n	8001fce <prvProcessExpiredTimer+0x7a>
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <prvProcessExpiredTimer+0x90>)
 8001fb2:	f44f 7005 	mov.w	r0, #532	@ 0x214
 8001fb6:	f003 fdbd 	bl	8005b34 <vAssertCalled>
 8001fba:	e008      	b.n	8001fce <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	4798      	blx	r3
    }
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200001a4 	.word	0x200001a4
 8001fe4:	080074e0 	.word	0x080074e0

08001fe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f859 	bl	80020ac <prvGetNextExpireTime>
 8001ffa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4619      	mov	r1, r3
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f805 	bl	8002010 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002006:	f000 f8d7 	bl	80021b8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800200a:	bf00      	nop
 800200c:	e7f0      	b.n	8001ff0 <prvTimerTask+0x8>
	...

08002010 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800201a:	f7ff fa51 	bl	80014c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f866 	bl	80020f4 <prvSampleTimeNow>
 8002028:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d130      	bne.n	8002092 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10a      	bne.n	800204c <prvProcessTimerOrBlockTask+0x3c>
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	429a      	cmp	r2, r3
 800203c:	d806      	bhi.n	800204c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800203e:	f7ff fa4d 	bl	80014dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff85 	bl	8001f54 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800204a:	e024      	b.n	8002096 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002052:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <prvProcessTimerOrBlockTask+0x90>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <prvProcessTimerOrBlockTask+0x50>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <prvProcessTimerOrBlockTask+0x52>
 8002060:	2300      	movs	r3, #0
 8002062:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <prvProcessTimerOrBlockTask+0x94>)
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	f7ff f833 	bl	80010dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002076:	f7ff fa31 	bl	80014dc <xTaskResumeAll>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <prvProcessTimerOrBlockTask+0x98>)
 8002082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	f3bf 8f6f 	isb	sy
    }
 8002090:	e001      	b.n	8002096 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002092:	f7ff fa23 	bl	80014dc <xTaskResumeAll>
    }
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200001a8 	.word	0x200001a8
 80020a4:	200001ac 	.word	0x200001ac
 80020a8:	e000ed04 	.word	0xe000ed04

080020ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <prvGetNextExpireTime+0x44>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <prvGetNextExpireTime+0x16>
 80020be:	2201      	movs	r2, #1
 80020c0:	e000      	b.n	80020c4 <prvGetNextExpireTime+0x18>
 80020c2:	2200      	movs	r2, #0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020d0:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <prvGetNextExpireTime+0x44>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e001      	b.n	80020e0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80020e0:	68fb      	ldr	r3, [r7, #12]
    }
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	200001a4 	.word	0x200001a4

080020f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80020fc:	f7ff fa8a 	bl	8001614 <xTaskGetTickCount>
 8002100:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <prvSampleTimeNow+0x3c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d205      	bcs.n	8002118 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800210c:	f000 f92a 	bl	8002364 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e002      	b.n	800211e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800211e:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <prvSampleTimeNow+0x3c>)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002124:	68fb      	ldr	r3, [r7, #12]
    }
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200001b4 	.word	0x200001b4

08002134 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d812      	bhi.n	8002180 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d302      	bcc.n	800216e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002168:	2301      	movs	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e01b      	b.n	80021a6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <prvInsertTimerInActiveList+0x7c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3304      	adds	r3, #4
 8002176:	4619      	mov	r1, r3
 8002178:	4610      	mov	r0, r2
 800217a:	f7fe fa74 	bl	8000666 <vListInsert>
 800217e:	e012      	b.n	80021a6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d206      	bcs.n	8002196 <prvInsertTimerInActiveList+0x62>
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d302      	bcc.n	8002196 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002190:	2301      	movs	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e007      	b.n	80021a6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <prvInsertTimerInActiveList+0x80>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3304      	adds	r3, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f7fe fa60 	bl	8000666 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80021a6:	697b      	ldr	r3, [r7, #20]
    }
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200001a8 	.word	0x200001a8
 80021b4:	200001a4 	.word	0x200001a4

080021b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80021be:	e0bb      	b.n	8002338 <prvProcessReceivedCommands+0x180>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	da13      	bge.n	80021ee <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	3304      	adds	r3, #4
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d104      	bne.n	80021de <prvProcessReceivedCommands+0x26>
 80021d4:	4961      	ldr	r1, [pc, #388]	@ (800235c <prvProcessReceivedCommands+0x1a4>)
 80021d6:	f240 20fa 	movw	r0, #762	@ 0x2fa
 80021da:	f003 fcab 	bl	8005b34 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e4:	6850      	ldr	r0, [r2, #4]
 80021e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e8:	6892      	ldr	r2, [r2, #8]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f2c0 80a1 	blt.w	8002338 <prvProcessReceivedCommands+0x180>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	3304      	adds	r3, #4
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fa66 	bl	80006d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff70 	bl	80020f4 <prvSampleTimeNow>
 8002214:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b09      	cmp	r3, #9
 800221a:	f200 808a 	bhi.w	8002332 <prvProcessReceivedCommands+0x17a>
 800221e:	a201      	add	r2, pc, #4	@ (adr r2, 8002224 <prvProcessReceivedCommands+0x6c>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	0800224d 	.word	0x0800224d
 8002228:	0800224d 	.word	0x0800224d
 800222c:	0800224d 	.word	0x0800224d
 8002230:	080022b7 	.word	0x080022b7
 8002234:	080022cb 	.word	0x080022cb
 8002238:	08002309 	.word	0x08002309
 800223c:	0800224d 	.word	0x0800224d
 8002240:	0800224d 	.word	0x0800224d
 8002244:	080022b7 	.word	0x080022b7
 8002248:	080022cb 	.word	0x080022cb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	18d1      	adds	r1, r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	6a38      	ldr	r0, [r7, #32]
 800226c:	f7ff ff62 	bl	8002134 <prvInsertTimerInActiveList>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d05f      	beq.n	8002336 <prvProcessReceivedCommands+0x17e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	6a38      	ldr	r0, [r7, #32]
 800227c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d054      	beq.n	8002336 <prvProcessReceivedCommands+0x17e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	441a      	add	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	2100      	movs	r1, #0
 800229c:	6a38      	ldr	r0, [r7, #32]
 800229e:	f7ff fe0f 	bl	8001ec0 <xTimerGenericCommand>
 80022a2:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d145      	bne.n	8002336 <prvProcessReceivedCommands+0x17e>
 80022aa:	492c      	ldr	r1, [pc, #176]	@ (800235c <prvProcessReceivedCommands+0x1a4>)
 80022ac:	f240 3036 	movw	r0, #822	@ 0x336
 80022b0:	f003 fc40 	bl	8005b34 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80022b4:	e03f      	b.n	8002336 <prvProcessReceivedCommands+0x17e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80022c8:	e036      	b.n	8002338 <prvProcessReceivedCommands+0x180>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d104      	bne.n	80022f4 <prvProcessReceivedCommands+0x13c>
 80022ea:	491c      	ldr	r1, [pc, #112]	@ (800235c <prvProcessReceivedCommands+0x1a4>)
 80022ec:	f240 304f 	movw	r0, #847	@ 0x34f
 80022f0:	f003 fc20 	bl	8005b34 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	18d1      	adds	r1, r2, r3
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	6a38      	ldr	r0, [r7, #32]
 8002302:	f7ff ff17 	bl	8002134 <prvInsertTimerInActiveList>
                        break;
 8002306:	e017      	b.n	8002338 <prvProcessReceivedCommands+0x180>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8002316:	6a38      	ldr	r0, [r7, #32]
 8002318:	f000 fc3a 	bl	8002b90 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800231c:	e00c      	b.n	8002338 <prvProcessReceivedCommands+0x180>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	b2da      	uxtb	r2, r3
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002330:	e002      	b.n	8002338 <prvProcessReceivedCommands+0x180>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002332:	bf00      	nop
 8002334:	e000      	b.n	8002338 <prvProcessReceivedCommands+0x180>
                        break;
 8002336:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <prvProcessReceivedCommands+0x1a8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f107 0108 	add.w	r1, r7, #8
 8002340:	2200      	movs	r2, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fc88 	bl	8000c58 <xQueueReceive>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	f47f af38 	bne.w	80021c0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	@ 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	080074e0 	.word	0x080074e0
 8002360:	200001ac 	.word	0x200001ac

08002364 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800236a:	e042      	b.n	80023f2 <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <prvSwitchTimerLists+0xb4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002376:	4b28      	ldr	r3, [pc, #160]	@ (8002418 <prvSwitchTimerLists+0xb4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3304      	adds	r3, #4
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f9a7 	bl	80006d8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d028      	beq.n	80023f2 <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90e      	bls.n	80023d0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <prvSwitchTimerLists+0xb4>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7fe f94c 	bl	8000666 <vListInsert>
 80023ce:	e010      	b.n	80023f2 <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80023d0:	2300      	movs	r3, #0
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2300      	movs	r3, #0
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	2100      	movs	r1, #0
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f7ff fd70 	bl	8001ec0 <xTimerGenericCommand>
 80023e0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d104      	bne.n	80023f2 <prvSwitchTimerLists+0x8e>
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <prvSwitchTimerLists+0xb8>)
 80023ea:	f240 30a9 	movw	r0, #937	@ 0x3a9
 80023ee:	f003 fba1 	bl	8005b34 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023f2:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <prvSwitchTimerLists+0xb4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1b7      	bne.n	800236c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <prvSwitchTimerLists+0xb4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002402:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <prvSwitchTimerLists+0xbc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <prvSwitchTimerLists+0xb4>)
 8002408:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800240a:	4a05      	ldr	r2, [pc, #20]	@ (8002420 <prvSwitchTimerLists+0xbc>)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	6013      	str	r3, [r2, #0]
    }
 8002410:	bf00      	nop
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200001a4 	.word	0x200001a4
 800241c:	080074e0 	.word	0x080074e0
 8002420:	200001a8 	.word	0x200001a8

08002424 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002428:	f000 f9ce 	bl	80027c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <prvCheckForValidListAndQueue+0x54>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d11d      	bne.n	8002470 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002434:	4811      	ldr	r0, [pc, #68]	@ (800247c <prvCheckForValidListAndQueue+0x58>)
 8002436:	f7fe f8c5 	bl	80005c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800243a:	4811      	ldr	r0, [pc, #68]	@ (8002480 <prvCheckForValidListAndQueue+0x5c>)
 800243c:	f7fe f8c2 	bl	80005c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002440:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <prvCheckForValidListAndQueue+0x60>)
 8002442:	4a0e      	ldr	r2, [pc, #56]	@ (800247c <prvCheckForValidListAndQueue+0x58>)
 8002444:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <prvCheckForValidListAndQueue+0x64>)
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <prvCheckForValidListAndQueue+0x5c>)
 800244a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800244c:	2200      	movs	r2, #0
 800244e:	2110      	movs	r1, #16
 8002450:	2005      	movs	r0, #5
 8002452:	f7fe f9cf 	bl	80007f4 <xQueueGenericCreate>
 8002456:	4603      	mov	r3, r0
 8002458:	4a07      	ldr	r2, [pc, #28]	@ (8002478 <prvCheckForValidListAndQueue+0x54>)
 800245a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <prvCheckForValidListAndQueue+0x54>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <prvCheckForValidListAndQueue+0x54>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4908      	ldr	r1, [pc, #32]	@ (800248c <prvCheckForValidListAndQueue+0x68>)
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fe04 	bl	8001078 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002470:	f000 f9d4 	bl	800281c <vPortExitCritical>
    }
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200001ac 	.word	0x200001ac
 800247c:	2000017c 	.word	0x2000017c
 8002480:	20000190 	.word	0x20000190
 8002484:	200001a4 	.word	0x200001a4
 8002488:	200001a8 	.word	0x200001a8
 800248c:	0800754c 	.word	0x0800754c

08002490 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3b04      	subs	r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b04      	subs	r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f023 0201 	bic.w	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3b04      	subs	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80024c0:	4a0c      	ldr	r2, [pc, #48]	@ (80024f4 <pxPortInitialiseStack+0x64>)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3b14      	subs	r3, #20
 80024ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3b04      	subs	r3, #4
 80024d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f06f 0202 	mvn.w	r2, #2
 80024de:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3b20      	subs	r3, #32
 80024e4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	080024f9 	.word	0x080024f9

080024f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <prvTaskExitError+0x44>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d003      	beq.n	8002514 <prvTaskExitError+0x1c>
 800250c:	490c      	ldr	r1, [pc, #48]	@ (8002540 <prvTaskExitError+0x48>)
 800250e:	20e6      	movs	r0, #230	@ 0xe6
 8002510:	f003 fb10 	bl	8005b34 <vAssertCalled>
        __asm volatile
 8002514:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	607b      	str	r3, [r7, #4]
    }
 8002526:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002528:	bf00      	nop
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0fc      	beq.n	800252a <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000004 	.word	0x20000004
 8002540:	08007554 	.word	0x08007554
	...

08002550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002550:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <pxCurrentTCBConst2>)
 8002552:	6819      	ldr	r1, [r3, #0]
 8002554:	6808      	ldr	r0, [r1, #0]
 8002556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800255a:	f380 8809 	msr	PSP, r0
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f380 8811 	msr	BASEPRI, r0
 800256a:	4770      	bx	lr
 800256c:	f3af 8000 	nop.w

08002570 <pxCurrentTCBConst2>:
 8002570:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop

08002578 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002578:	4808      	ldr	r0, [pc, #32]	@ (800259c <prvPortStartFirstTask+0x24>)
 800257a:	6800      	ldr	r0, [r0, #0]
 800257c:	6800      	ldr	r0, [r0, #0]
 800257e:	f380 8808 	msr	MSP, r0
 8002582:	f04f 0000 	mov.w	r0, #0
 8002586:	f380 8814 	msr	CONTROL, r0
 800258a:	b662      	cpsie	i
 800258c:	b661      	cpsie	f
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	df00      	svc	0
 8002598:	bf00      	nop
 800259a:	0000      	.short	0x0000
 800259c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop

080025a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80025aa:	4b42      	ldr	r3, [pc, #264]	@ (80026b4 <xPortStartScheduler+0x110>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a42      	ldr	r2, [pc, #264]	@ (80026b8 <xPortStartScheduler+0x114>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d104      	bne.n	80025be <xPortStartScheduler+0x1a>
 80025b4:	4941      	ldr	r1, [pc, #260]	@ (80026bc <xPortStartScheduler+0x118>)
 80025b6:	f240 102d 	movw	r0, #301	@ 0x12d
 80025ba:	f003 fabb 	bl	8005b34 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80025be:	4b3d      	ldr	r3, [pc, #244]	@ (80026b4 <xPortStartScheduler+0x110>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a3f      	ldr	r2, [pc, #252]	@ (80026c0 <xPortStartScheduler+0x11c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d104      	bne.n	80025d2 <xPortStartScheduler+0x2e>
 80025c8:	493c      	ldr	r1, [pc, #240]	@ (80026bc <xPortStartScheduler+0x118>)
 80025ca:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 80025ce:	f003 fab1 	bl	8005b34 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80025d2:	4b3c      	ldr	r3, [pc, #240]	@ (80026c4 <xPortStartScheduler+0x120>)
 80025d4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	22ff      	movs	r2, #255	@ 0xff
 80025e2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <xPortStartScheduler+0x124>)
 80025f8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025fa:	4b34      	ldr	r3, [pc, #208]	@ (80026cc <xPortStartScheduler+0x128>)
 80025fc:	2207      	movs	r2, #7
 80025fe:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002600:	e009      	b.n	8002616 <xPortStartScheduler+0x72>
            {
                ulMaxPRIGROUPValue--;
 8002602:	4b32      	ldr	r3, [pc, #200]	@ (80026cc <xPortStartScheduler+0x128>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3b01      	subs	r3, #1
 8002608:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <xPortStartScheduler+0x128>)
 800260a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261e:	2b80      	cmp	r3, #128	@ 0x80
 8002620:	d0ef      	beq.n	8002602 <xPortStartScheduler+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002622:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <xPortStartScheduler+0x128>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	d004      	beq.n	8002638 <xPortStartScheduler+0x94>
 800262e:	4923      	ldr	r1, [pc, #140]	@ (80026bc <xPortStartScheduler+0x118>)
 8002630:	f240 1057 	movw	r0, #343	@ 0x157
 8002634:	f003 fa7e 	bl	8005b34 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002638:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <xPortStartScheduler+0x128>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1c3 0307 	rsb	r3, r3, #7
 8002640:	2b04      	cmp	r3, #4
 8002642:	d004      	beq.n	800264e <xPortStartScheduler+0xaa>
 8002644:	491d      	ldr	r1, [pc, #116]	@ (80026bc <xPortStartScheduler+0x118>)
 8002646:	f44f 70b0 	mov.w	r0, #352	@ 0x160
 800264a:	f003 fa73 	bl	8005b34 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800264e:	4b1f      	ldr	r3, [pc, #124]	@ (80026cc <xPortStartScheduler+0x128>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <xPortStartScheduler+0x128>)
 8002656:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002658:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <xPortStartScheduler+0x128>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002660:	4a1a      	ldr	r2, [pc, #104]	@ (80026cc <xPortStartScheduler+0x128>)
 8002662:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800266c:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <xPortStartScheduler+0x12c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <xPortStartScheduler+0x12c>)
 8002672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002676:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002678:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <xPortStartScheduler+0x12c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <xPortStartScheduler+0x12c>)
 800267e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002682:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002684:	f000 f952 	bl	800292c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <xPortStartScheduler+0x130>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800268e:	f000 f971 	bl	8002974 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <xPortStartScheduler+0x134>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a10      	ldr	r2, [pc, #64]	@ (80026d8 <xPortStartScheduler+0x134>)
 8002698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800269c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800269e:	f7ff ff6b 	bl	8002578 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80026a2:	f7ff f891 	bl	80017c8 <vTaskSwitchContext>
    prvTaskExitError();
 80026a6:	f7ff ff27 	bl	80024f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	e000ed00 	.word	0xe000ed00
 80026b8:	410fc271 	.word	0x410fc271
 80026bc:	08007554 	.word	0x08007554
 80026c0:	410fc270 	.word	0x410fc270
 80026c4:	e000e400 	.word	0xe000e400
 80026c8:	200001b8 	.word	0x200001b8
 80026cc:	200001bc 	.word	0x200001bc
 80026d0:	e000ed20 	.word	0xe000ed20
 80026d4:	20000004 	.word	0x20000004
 80026d8:	e000ef34 	.word	0xe000ef34

080026dc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80026e2:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <vInitPrioGroupValue+0xd0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a32      	ldr	r2, [pc, #200]	@ (80027b0 <vInitPrioGroupValue+0xd4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d104      	bne.n	80026f6 <vInitPrioGroupValue+0x1a>
 80026ec:	4931      	ldr	r1, [pc, #196]	@ (80027b4 <vInitPrioGroupValue+0xd8>)
 80026ee:	f240 109b 	movw	r0, #411	@ 0x19b
 80026f2:	f003 fa1f 	bl	8005b34 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026f6:	4b2d      	ldr	r3, [pc, #180]	@ (80027ac <vInitPrioGroupValue+0xd0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2f      	ldr	r2, [pc, #188]	@ (80027b8 <vInitPrioGroupValue+0xdc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d104      	bne.n	800270a <vInitPrioGroupValue+0x2e>
 8002700:	492c      	ldr	r1, [pc, #176]	@ (80027b4 <vInitPrioGroupValue+0xd8>)
 8002702:	f44f 70ce 	mov.w	r0, #412	@ 0x19c
 8002706:	f003 fa15 	bl	8005b34 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800270a:	4b2c      	ldr	r3, [pc, #176]	@ (80027bc <vInitPrioGroupValue+0xe0>)
 800270c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	22ff      	movs	r2, #255	@ 0xff
 800271a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <vInitPrioGroupValue+0xe4>)
 8002730:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002738:	e009      	b.n	800274e <vInitPrioGroupValue+0x72>
            {
                ulMaxPRIGROUPValue--;
 800273a:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3b01      	subs	r3, #1
 8002740:	4a20      	ldr	r2, [pc, #128]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 8002742:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002756:	2b80      	cmp	r3, #128	@ 0x80
 8002758:	d0ef      	beq.n	800273a <vInitPrioGroupValue+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	d004      	beq.n	8002770 <vInitPrioGroupValue+0x94>
 8002766:	4913      	ldr	r1, [pc, #76]	@ (80027b4 <vInitPrioGroupValue+0xd8>)
 8002768:	f240 10c5 	movw	r0, #453	@ 0x1c5
 800276c:	f003 f9e2 	bl	8005b34 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002770:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1c3 0307 	rsb	r3, r3, #7
 8002778:	2b04      	cmp	r3, #4
 800277a:	d004      	beq.n	8002786 <vInitPrioGroupValue+0xaa>
 800277c:	490d      	ldr	r1, [pc, #52]	@ (80027b4 <vInitPrioGroupValue+0xd8>)
 800277e:	f44f 70e7 	mov.w	r0, #462	@ 0x1ce
 8002782:	f003 f9d7 	bl	8005b34 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002786:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 800278e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002798:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <vInitPrioGroupValue+0xe8>)
 800279a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	410fc271 	.word	0x410fc271
 80027b4:	08007554 	.word	0x08007554
 80027b8:	410fc270 	.word	0x410fc270
 80027bc:	e000e400 	.word	0xe000e400
 80027c0:	200001b8 	.word	0x200001b8
 80027c4:	200001bc 	.word	0x200001bc

080027c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
        __asm volatile
 80027ce:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	607b      	str	r3, [r7, #4]
    }
 80027e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <vPortEnterCritical+0x48>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <vPortEnterCritical+0x48>)
 80027ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <vPortEnterCritical+0x48>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d109      	bne.n	8002808 <vPortEnterCritical+0x40>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027f4:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <vPortEnterCritical+0x4c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <vPortEnterCritical+0x40>
 80027fe:	4906      	ldr	r1, [pc, #24]	@ (8002818 <vPortEnterCritical+0x50>)
 8002800:	f44f 70f9 	mov.w	r0, #498	@ 0x1f2
 8002804:	f003 f996 	bl	8005b34 <vAssertCalled>
    }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000004 	.word	0x20000004
 8002814:	e000ed04 	.word	0xe000ed04
 8002818:	08007554 	.word	0x08007554

0800281c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <vPortExitCritical+0x40>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <vPortExitCritical+0x18>
 800282a:	490d      	ldr	r1, [pc, #52]	@ (8002860 <vPortExitCritical+0x44>)
 800282c:	f240 10f9 	movw	r0, #505	@ 0x1f9
 8002830:	f003 f980 	bl	8005b34 <vAssertCalled>
    uxCriticalNesting--;
 8002834:	4b09      	ldr	r3, [pc, #36]	@ (800285c <vPortExitCritical+0x40>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3b01      	subs	r3, #1
 800283a:	4a08      	ldr	r2, [pc, #32]	@ (800285c <vPortExitCritical+0x40>)
 800283c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800283e:	4b07      	ldr	r3, [pc, #28]	@ (800285c <vPortExitCritical+0x40>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <vPortExitCritical+0x36>
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
        __asm volatile
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f383 8811 	msr	BASEPRI, r3
    }
 8002850:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000004 	.word	0x20000004
 8002860:	08007554 	.word	0x08007554
	...

08002870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002870:	f3ef 8009 	mrs	r0, PSP
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <pxCurrentTCBConst>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f01e 0f10 	tst.w	lr, #16
 8002880:	bf08      	it	eq
 8002882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800288a:	6010      	str	r0, [r2, #0]
 800288c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002890:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8002894:	f380 8811 	msr	BASEPRI, r0
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f7fe ff92 	bl	80017c8 <vTaskSwitchContext>
 80028a4:	f04f 0000 	mov.w	r0, #0
 80028a8:	f380 8811 	msr	BASEPRI, r0
 80028ac:	bc09      	pop	{r0, r3}
 80028ae:	6819      	ldr	r1, [r3, #0]
 80028b0:	6808      	ldr	r0, [r1, #0]
 80028b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b6:	f01e 0f10 	tst.w	lr, #16
 80028ba:	bf08      	it	eq
 80028bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028c0:	f380 8809 	msr	PSP, r0
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	f3af 8000 	nop.w

080028d0 <pxCurrentTCBConst>:
 80028d0:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop

080028d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
        __asm volatile
 80028de:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	607b      	str	r3, [r7, #4]
    }
 80028f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80028f2:	f002 fa39 	bl	8004d68 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80028f6:	f7fe feaf 	bl	8001658 <xTaskIncrementTick>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002900:	f002 fa90 	bl	8004e24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <SysTick_Handler+0x50>)
 8002906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e001      	b.n	8002912 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800290e:	f002 fa6d 	bl	8004dec <SEGGER_SYSVIEW_RecordExitISR>
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f383 8811 	msr	BASEPRI, r3
    }
 800291c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <vPortSetupTimerInterrupt+0x34>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <vPortSetupTimerInterrupt+0x38>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800293c:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <vPortSetupTimerInterrupt+0x3c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <vPortSetupTimerInterrupt+0x40>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <vPortSetupTimerInterrupt+0x44>)
 800294a:	3b01      	subs	r3, #1
 800294c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800294e:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <vPortSetupTimerInterrupt+0x34>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010
 8002964:	e000e018 	.word	0xe000e018
 8002968:	20000010 	.word	0x20000010
 800296c:	10624dd3 	.word	0x10624dd3
 8002970:	e000e014 	.word	0xe000e014

08002974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002984 <vPortEnableVFP+0x10>
 8002978:	6801      	ldr	r1, [r0, #0]
 800297a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800297e:	6001      	str	r1, [r0, #0]
 8002980:	4770      	bx	lr
 8002982:	0000      	.short	0x0000
 8002984:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop

0800298c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002992:	f3ef 8305 	mrs	r3, IPSR
 8002996:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	d90e      	bls.n	80029bc <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800299e:	4a10      	ldr	r2, [pc, #64]	@ (80029e0 <vPortValidateInterruptPriority+0x54>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80029a8:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <vPortValidateInterruptPriority+0x58>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d204      	bcs.n	80029bc <vPortValidateInterruptPriority+0x30>
 80029b2:	490d      	ldr	r1, [pc, #52]	@ (80029e8 <vPortValidateInterruptPriority+0x5c>)
 80029b4:	f44f 7054 	mov.w	r0, #848	@ 0x350
 80029b8:	f003 f8bc 	bl	8005b34 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <vPortValidateInterruptPriority+0x60>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029c4:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <vPortValidateInterruptPriority+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d904      	bls.n	80029d6 <vPortValidateInterruptPriority+0x4a>
 80029cc:	4906      	ldr	r1, [pc, #24]	@ (80029e8 <vPortValidateInterruptPriority+0x5c>)
 80029ce:	f44f 7058 	mov.w	r0, #864	@ 0x360
 80029d2:	f003 f8af 	bl	8005b34 <vAssertCalled>
    }
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e3f0 	.word	0xe000e3f0
 80029e4:	200001b8 	.word	0x200001b8
 80029e8:	08007554 	.word	0x08007554
 80029ec:	e000ed0c 	.word	0xe000ed0c
 80029f0:	200001bc 	.word	0x200001bc

080029f4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002a00:	f7fe fd5e 	bl	80014c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002a04:	4b5b      	ldr	r3, [pc, #364]	@ (8002b74 <pvPortMalloc+0x180>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002a0c:	f000 f918 	bl	8002c40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a10:	4b59      	ldr	r3, [pc, #356]	@ (8002b78 <pvPortMalloc+0x184>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f040 809a 	bne.w	8002b52 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d027      	beq.n	8002a74 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002a24:	2208      	movs	r2, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d221      	bcs.n	8002a74 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8002a30:	2208      	movs	r2, #8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01b      	beq.n	8002a7a <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f023 0307 	bic.w	r3, r3, #7
 8002a48:	3308      	adds	r3, #8
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d20e      	bcs.n	8002a6e <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f023 0307 	bic.w	r3, r3, #7
 8002a56:	3308      	adds	r3, #8
 8002a58:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <pvPortMalloc+0x86>
 8002a64:	4945      	ldr	r1, [pc, #276]	@ (8002b7c <pvPortMalloc+0x188>)
 8002a66:	209a      	movs	r0, #154	@ 0x9a
 8002a68:	f003 f864 	bl	8005b34 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a6c:	e005      	b.n	8002a7a <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a72:	e002      	b.n	8002a7a <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	e000      	b.n	8002a7c <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a7a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d067      	beq.n	8002b52 <pvPortMalloc+0x15e>
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <pvPortMalloc+0x18c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d862      	bhi.n	8002b52 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <pvPortMalloc+0x190>)
 8002a8e:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8002a90:	4b3c      	ldr	r3, [pc, #240]	@ (8002b84 <pvPortMalloc+0x190>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a96:	e004      	b.n	8002aa2 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d903      	bls.n	8002ab4 <pvPortMalloc+0xc0>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f1      	bne.n	8002a98 <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b74 <pvPortMalloc+0x180>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d049      	beq.n	8002b52 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	4413      	add	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	1ad2      	subs	r2, r2, r3
 8002ad8:	2308      	movs	r3, #8
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d918      	bls.n	8002b12 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <pvPortMalloc+0x106>
 8002af2:	4922      	ldr	r1, [pc, #136]	@ (8002b7c <pvPortMalloc+0x188>)
 8002af4:	20cd      	movs	r0, #205	@ 0xcd
 8002af6:	f003 f81d 	bl	8005b34 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	1ad2      	subs	r2, r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b0c:	68b8      	ldr	r0, [r7, #8]
 8002b0e:	f000 f8f9 	bl	8002d04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b12:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <pvPortMalloc+0x18c>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <pvPortMalloc+0x18c>)
 8002b1e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b20:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <pvPortMalloc+0x18c>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <pvPortMalloc+0x194>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d203      	bcs.n	8002b34 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <pvPortMalloc+0x18c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <pvPortMalloc+0x194>)
 8002b32:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <pvPortMalloc+0x184>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002b48:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <pvPortMalloc+0x198>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b8c <pvPortMalloc+0x198>)
 8002b50:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002b52:	f7fe fcc3 	bl	80014dc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <pvPortMalloc+0x176>
 8002b60:	4906      	ldr	r1, [pc, #24]	@ (8002b7c <pvPortMalloc+0x188>)
 8002b62:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002b66:	f002 ffe5 	bl	8005b34 <vAssertCalled>
    return pvReturn;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000b9c8 	.word	0x2000b9c8
 8002b78:	2000b9dc 	.word	0x2000b9dc
 8002b7c:	080075d4 	.word	0x080075d4
 8002b80:	2000b9cc 	.word	0x2000b9cc
 8002b84:	2000b9c0 	.word	0x2000b9c0
 8002b88:	2000b9d0 	.word	0x2000b9d0
 8002b8c:	2000b9d4 	.word	0x2000b9d4

08002b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d041      	beq.n	8002c26 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <vPortFree+0xa0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d104      	bne.n	8002bc8 <vPortFree+0x38>
 8002bbe:	491d      	ldr	r1, [pc, #116]	@ (8002c34 <vPortFree+0xa4>)
 8002bc0:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8002bc4:	f002 ffb6 	bl	8005b34 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <vPortFree+0x4a>
 8002bd0:	4918      	ldr	r1, [pc, #96]	@ (8002c34 <vPortFree+0xa4>)
 8002bd2:	f240 1023 	movw	r0, #291	@ 0x123
 8002bd6:	f002 ffad 	bl	8005b34 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <vPortFree+0xa0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01e      	beq.n	8002c26 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d11a      	bne.n	8002c26 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <vPortFree+0xa0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002c00:	f7fe fc5e 	bl	80014c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <vPortFree+0xa8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c38 <vPortFree+0xa8>)
 8002c10:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c12:	68b8      	ldr	r0, [r7, #8]
 8002c14:	f000 f876 	bl	8002d04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002c18:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <vPortFree+0xac>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <vPortFree+0xac>)
 8002c20:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002c22:	f7fe fc5b 	bl	80014dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	2000b9dc 	.word	0x2000b9dc
 8002c34:	080075d4 	.word	0x080075d4
 8002c38:	2000b9cc 	.word	0x2000b9cc
 8002c3c:	2000b9d8 	.word	0x2000b9d8

08002c40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c46:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 8002c4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002c4c:	4b27      	ldr	r3, [pc, #156]	@ (8002cec <prvHeapInit+0xac>)
 8002c4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3307      	adds	r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0307 	bic.w	r3, r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cec <prvHeapInit+0xac>)
 8002c70:	4413      	add	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c78:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf0 <prvHeapInit+0xb0>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <prvHeapInit+0xb0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4413      	add	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0307 	bic.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a15      	ldr	r2, [pc, #84]	@ (8002cf4 <prvHeapInit+0xb4>)
 8002ca0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <prvHeapInit+0xb4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <prvHeapInit+0xb4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	1ad2      	subs	r2, r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <prvHeapInit+0xb4>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf8 <prvHeapInit+0xb8>)
 8002cce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a09      	ldr	r2, [pc, #36]	@ (8002cfc <prvHeapInit+0xbc>)
 8002cd6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <prvHeapInit+0xc0>)
 8002cda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002cde:	601a      	str	r2, [r3, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	200001c0 	.word	0x200001c0
 8002cf0:	2000b9c0 	.word	0x2000b9c0
 8002cf4:	2000b9c8 	.word	0x2000b9c8
 8002cf8:	2000b9d0 	.word	0x2000b9d0
 8002cfc:	2000b9cc 	.word	0x2000b9cc
 8002d00:	2000b9dc 	.word	0x2000b9dc

08002d04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d0c:	4b28      	ldr	r3, [pc, #160]	@ (8002db0 <prvInsertBlockIntoFreeList+0xac>)
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e002      	b.n	8002d18 <prvInsertBlockIntoFreeList+0x14>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d8f7      	bhi.n	8002d12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d108      	bne.n	8002d46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	441a      	add	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	441a      	add	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d118      	bne.n	8002d8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <prvInsertBlockIntoFreeList+0xb0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d00d      	beq.n	8002d82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	441a      	add	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e008      	b.n	8002d94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d82:	4b0c      	ldr	r3, [pc, #48]	@ (8002db4 <prvInsertBlockIntoFreeList+0xb0>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e003      	b.n	8002d94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d002      	beq.n	8002da2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000b9c0 	.word	0x2000b9c0
 8002db4:	2000b9c8 	.word	0x2000b9c8

08002db8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002dbc:	4803      	ldr	r0, [pc, #12]	@ (8002dcc <_cbSendSystemDesc+0x14>)
 8002dbe:	f001 ff7d 	bl	8004cbc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002dc2:	4803      	ldr	r0, [pc, #12]	@ (8002dd0 <_cbSendSystemDesc+0x18>)
 8002dc4:	f001 ff7a 	bl	8004cbc <SEGGER_SYSVIEW_SendSysDesc>
}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	08007650 	.word	0x08007650
 8002dd0:	08007698 	.word	0x08007698

08002dd4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <SEGGER_SYSVIEW_Conf+0x24>)
 8002de2:	4a06      	ldr	r2, [pc, #24]	@ (8002dfc <SEGGER_SYSVIEW_Conf+0x28>)
 8002de4:	f001 fae6 	bl	80043b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002de8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002dec:	f001 fb26 	bl	800443c <SEGGER_SYSVIEW_SetRAMBase>
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000010 	.word	0x20000010
 8002df8:	08002db9 	.word	0x08002db9
 8002dfc:	0800779c 	.word	0x0800779c

08002e00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	e033      	b.n	8002e74 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002e0c:	491e      	ldr	r1, [pc, #120]	@ (8002e88 <_cbSendTaskList+0x88>)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	491a      	ldr	r1, [pc, #104]	@ (8002e88 <_cbSendTaskList+0x88>)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	4c16      	ldr	r4, [pc, #88]	@ (8002e88 <_cbSendTaskList+0x88>)
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4423      	add	r3, r4
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	681c      	ldr	r4, [r3, #0]
 8002e40:	4d11      	ldr	r5, [pc, #68]	@ (8002e88 <_cbSendTaskList+0x88>)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	442b      	add	r3, r5
 8002e4e:	330c      	adds	r3, #12
 8002e50:	681d      	ldr	r5, [r3, #0]
 8002e52:	4e0d      	ldr	r6, [pc, #52]	@ (8002e88 <_cbSendTaskList+0x88>)
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4433      	add	r3, r6
 8002e60:	3310      	adds	r3, #16
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	462b      	mov	r3, r5
 8002e68:	4622      	mov	r2, r4
 8002e6a:	f000 f8bd 	bl	8002fe8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3301      	adds	r3, #1
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <_cbSendTaskList+0x8c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d3c6      	bcc.n	8002e0c <_cbSendTaskList+0xc>
  }
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e88:	2000b9e0 	.word	0x2000b9e0
 8002e8c:	2000ba80 	.word	0x2000ba80

08002e90 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002e98:	f7fe fbcc 	bl	8001634 <xTaskGetTickCountFromISR>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	469a      	mov	sl, r3
 8002ea2:	4693      	mov	fp, r2
 8002ea4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	f04f 0a00 	mov.w	sl, #0
 8002eb4:	f04f 0b00 	mov.w	fp, #0
 8002eb8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002ebc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002ec0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002ec4:	4652      	mov	r2, sl
 8002ec6:	465b      	mov	r3, fp
 8002ec8:	1a14      	subs	r4, r2, r0
 8002eca:	eb63 0501 	sbc.w	r5, r3, r1
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	00ab      	lsls	r3, r5, #2
 8002ed8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002edc:	00a2      	lsls	r2, r4, #2
 8002ede:	4614      	mov	r4, r2
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	eb14 0800 	adds.w	r8, r4, r0
 8002ee6:	eb45 0901 	adc.w	r9, r5, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002f06:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002f18 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002f26:	2205      	movs	r2, #5
 8002f28:	492b      	ldr	r1, [pc, #172]	@ (8002fd8 <SYSVIEW_AddTask+0xc0>)
 8002f2a:	68b8      	ldr	r0, [r7, #8]
 8002f2c:	f004 fa06 	bl	800733c <memcmp>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d04b      	beq.n	8002fce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002f36:	4b29      	ldr	r3, [pc, #164]	@ (8002fdc <SYSVIEW_AddTask+0xc4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b07      	cmp	r3, #7
 8002f3c:	d903      	bls.n	8002f46 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002f3e:	4828      	ldr	r0, [pc, #160]	@ (8002fe0 <SYSVIEW_AddTask+0xc8>)
 8002f40:	f002 f9d8 	bl	80052f4 <SEGGER_SYSVIEW_Warn>
    return;
 8002f44:	e044      	b.n	8002fd0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002f46:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <SYSVIEW_AddTask+0xc4>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4926      	ldr	r1, [pc, #152]	@ (8002fe4 <SYSVIEW_AddTask+0xcc>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <SYSVIEW_AddTask+0xc4>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4921      	ldr	r1, [pc, #132]	@ (8002fe4 <SYSVIEW_AddTask+0xcc>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002f70:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <SYSVIEW_AddTask+0xc4>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	491b      	ldr	r1, [pc, #108]	@ (8002fe4 <SYSVIEW_AddTask+0xcc>)
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3308      	adds	r3, #8
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <SYSVIEW_AddTask+0xc4>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4916      	ldr	r1, [pc, #88]	@ (8002fe4 <SYSVIEW_AddTask+0xcc>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	330c      	adds	r3, #12
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <SYSVIEW_AddTask+0xc4>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4910      	ldr	r1, [pc, #64]	@ (8002fe4 <SYSVIEW_AddTask+0xcc>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3310      	adds	r3, #16
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <SYSVIEW_AddTask+0xc4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a08      	ldr	r2, [pc, #32]	@ (8002fdc <SYSVIEW_AddTask+0xc4>)
 8002fba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f80e 	bl	8002fe8 <SYSVIEW_SendTaskInfo>
 8002fcc:	e000      	b.n	8002fd0 <SYSVIEW_AddTask+0xb8>
    return;
 8002fce:	bf00      	nop

}
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	080076a8 	.word	0x080076a8
 8002fdc:	2000ba80 	.word	0x2000ba80
 8002fe0:	080076b0 	.word	0x080076b0
 8002fe4:	2000b9e0 	.word	0x2000b9e0

08002fe8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	@ 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002ff6:	f107 0310 	add.w	r3, r7, #16
 8002ffa:	2218      	movs	r2, #24
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 f9ac 	bl	800735c <memset>
  TaskInfo.TaskID     = TaskID;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003016:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	4618      	mov	r0, r3
 800301e:	f001 fd55 	bl	8004acc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003022:	bf00      	nop
 8003024:	3728      	adds	r7, #40	@ 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003032:	4b26      	ldr	r3, [pc, #152]	@ (80030cc <_DoInit+0xa0>)
 8003034:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003036:	22a8      	movs	r2, #168	@ 0xa8
 8003038:	2100      	movs	r1, #0
 800303a:	6838      	ldr	r0, [r7, #0]
 800303c:	f004 f98e 	bl	800735c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2203      	movs	r2, #3
 8003044:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2203      	movs	r2, #3
 800304a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4a20      	ldr	r2, [pc, #128]	@ (80030d0 <_DoInit+0xa4>)
 8003050:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <_DoInit+0xa8>)
 8003056:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800305e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2200      	movs	r2, #0
 800306a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4a16      	ldr	r2, [pc, #88]	@ (80030d0 <_DoInit+0xa4>)
 8003076:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <_DoInit+0xac>)
 800307c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2200      	movs	r2, #0
 800308e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003096:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	e00c      	b.n	80030ba <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f1c3 030f 	rsb	r3, r3, #15
 80030a6:	4a0d      	ldr	r2, [pc, #52]	@ (80030dc <_DoInit+0xb0>)
 80030a8:	5cd1      	ldrb	r1, [r2, r3]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	460a      	mov	r2, r1
 80030b2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3301      	adds	r3, #1
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b0f      	cmp	r3, #15
 80030be:	d9ef      	bls.n	80030a0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80030c0:	f3bf 8f5f 	dmb	sy
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	2000ba84 	.word	0x2000ba84
 80030d0:	08007700 	.word	0x08007700
 80030d4:	2000bb2c 	.word	0x2000bb2c
 80030d8:	2000bf2c 	.word	0x2000bf2c
 80030dc:	080077a4 	.word	0x080077a4

080030e0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	@ 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	429a      	cmp	r2, r3
 8003102:	d905      	bls.n	8003110 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
 800310e:	e007      	b.n	8003120 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	1acb      	subs	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	3b01      	subs	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312a:	4293      	cmp	r3, r2
 800312c:	bf28      	it	cs
 800312e:	4613      	movcs	r3, r2
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4293      	cmp	r3, r2
 8003138:	bf28      	it	cs
 800313a:	4613      	movcs	r3, r2
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f004 f931 	bl	80073b4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	4413      	add	r3, r2
 8003158:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	4413      	add	r3, r2
 8003160:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	4413      	add	r3, r2
 8003170:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	429a      	cmp	r2, r3
 800317a:	d101      	bne.n	8003180 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003180:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1b2      	bne.n	80030f6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003190:	6a3b      	ldr	r3, [r7, #32]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3728      	adds	r7, #40	@ 0x28
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800319a:	b580      	push	{r7, lr}
 800319c:	b088      	sub	sp, #32
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d911      	bls.n	80031e2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	6938      	ldr	r0, [r7, #16]
 80031ce:	f004 f8f1 	bl	80073b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80031d2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	441a      	add	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80031e0:	e01f      	b.n	8003222 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	6938      	ldr	r0, [r7, #16]
 80031f6:	f004 f8dd 	bl	80073b4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4413      	add	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4619      	mov	r1, r3
 8003212:	6938      	ldr	r0, [r7, #16]
 8003214:	f004 f8ce 	bl	80073b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003218:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	60da      	str	r2, [r3, #12]
}
 8003222:	bf00      	nop
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800322a:	b480      	push	{r7}
 800322c:	b087      	sub	sp, #28
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	429a      	cmp	r2, r3
 8003244:	d808      	bhi.n	8003258 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad2      	subs	r2, r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	3b01      	subs	r3, #1
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e004      	b.n	8003262 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003262:	697b      	ldr	r3, [r7, #20]
}
 8003264:	4618      	mov	r0, r3
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	@ 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800327c:	4b3e      	ldr	r3, [pc, #248]	@ (8003378 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b53      	cmp	r3, #83	@ 0x53
 8003288:	d001      	beq.n	800328e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800328a:	f7ff fecf 	bl	800302c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4a37      	ldr	r2, [pc, #220]	@ (8003378 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800329c:	4413      	add	r3, r2
 800329e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80032b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d92b      	bls.n	8003314 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4293      	cmp	r3, r2
 80032cc:	bf28      	it	cs
 80032ce:	4613      	movcs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d8:	4413      	add	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032e2:	f004 f867 	bl	80073b4 <memcpy>
    NumBytesRead += NumBytesRem;
 80032e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4413      	add	r3, r2
 80032ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80032ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	4413      	add	r3, r2
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80032fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	4413      	add	r3, r2
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800330c:	429a      	cmp	r2, r3
 800330e:	d101      	bne.n	8003314 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003310:	2300      	movs	r3, #0
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4293      	cmp	r3, r2
 8003322:	bf28      	it	cs
 8003324:	4613      	movcs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d019      	beq.n	8003362 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003334:	4413      	add	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	6939      	ldr	r1, [r7, #16]
 800333c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800333e:	f004 f839 	bl	80073b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4413      	add	r3, r2
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800334a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4413      	add	r3, r2
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800335a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4413      	add	r3, r2
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800336c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003370:	4618      	mov	r0, r3
 8003372:	3730      	adds	r7, #48	@ 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000ba84 	.word	0x2000ba84

0800337c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b08c      	sub	sp, #48	@ 0x30
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003388:	4b3e      	ldr	r3, [pc, #248]	@ (8003484 <SEGGER_RTT_ReadNoLock+0x108>)
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b53      	cmp	r3, #83	@ 0x53
 8003394:	d001      	beq.n	800339a <SEGGER_RTT_ReadNoLock+0x1e>
 8003396:	f7ff fe49 	bl	800302c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	3360      	adds	r3, #96	@ 0x60
 80033a6:	4a37      	ldr	r2, [pc, #220]	@ (8003484 <SEGGER_RTT_ReadNoLock+0x108>)
 80033a8:	4413      	add	r3, r2
 80033aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80033c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d92b      	bls.n	8003420 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4293      	cmp	r3, r2
 80033d8:	bf28      	it	cs
 80033da:	4613      	movcs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e4:	4413      	add	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	6939      	ldr	r1, [r7, #16]
 80033ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033ee:	f003 ffe1 	bl	80073b4 <memcpy>
    NumBytesRead += NumBytesRem;
 80033f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4413      	add	r3, r2
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80033fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4413      	add	r3, r2
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800340a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4413      	add	r3, r2
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003418:	429a      	cmp	r2, r3
 800341a:	d101      	bne.n	8003420 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4293      	cmp	r3, r2
 800342e:	bf28      	it	cs
 8003430:	4613      	movcs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d019      	beq.n	800346e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	4413      	add	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	6939      	ldr	r1, [r7, #16]
 8003448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800344a:	f003 ffb3 	bl	80073b4 <memcpy>
    NumBytesRead += NumBytesRem;
 800344e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	4413      	add	r3, r2
 8003454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	4413      	add	r3, r2
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4413      	add	r3, r2
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003478:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800347a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800347c:	4618      	mov	r0, r3
 800347e:	3730      	adds	r7, #48	@ 0x30
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	2000ba84 	.word	0x2000ba84

08003488 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	3360      	adds	r3, #96	@ 0x60
 80034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003524 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80034a6:	4413      	add	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d029      	beq.n	8003506 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d82e      	bhi.n	8003514 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d013      	beq.n	80034e6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80034be:	e029      	b.n	8003514 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80034c0:	6978      	ldr	r0, [r7, #20]
 80034c2:	f7ff feb2 	bl	800322a <_GetAvailWriteSpace>
 80034c6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d202      	bcs.n	80034d6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80034d4:	e021      	b.n	800351a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	69b9      	ldr	r1, [r7, #24]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff fe5b 	bl	800319a <_WriteNoCheck>
    break;
 80034e4:	e019      	b.n	800351a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff fe9f 	bl	800322a <_GetAvailWriteSpace>
 80034ec:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4293      	cmp	r3, r2
 80034f4:	bf28      	it	cs
 80034f6:	4613      	movcs	r3, r2
 80034f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	69b9      	ldr	r1, [r7, #24]
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff fe4b 	bl	800319a <_WriteNoCheck>
    break;
 8003504:	e009      	b.n	800351a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	69b9      	ldr	r1, [r7, #24]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff fde8 	bl	80030e0 <_WriteBlocking>
 8003510:	61f8      	str	r0, [r7, #28]
    break;
 8003512:	e002      	b.n	800351a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
    break;
 8003518:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800351a:	69fb      	ldr	r3, [r7, #28]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	2000ba84 	.word	0x2000ba84

08003528 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003534:	4b0e      	ldr	r3, [pc, #56]	@ (8003570 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b53      	cmp	r3, #83	@ 0x53
 8003540:	d001      	beq.n	8003546 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003542:	f7ff fd73 	bl	800302c <_DoInit>
  SEGGER_RTT_LOCK();
 8003546:	f3ef 8311 	mrs	r3, BASEPRI
 800354a:	f04f 0120 	mov.w	r1, #32
 800354e:	f381 8811 	msr	BASEPRI, r1
 8003552:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff ff95 	bl	8003488 <SEGGER_RTT_WriteDownBufferNoLock>
 800355e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003566:	697b      	ldr	r3, [r7, #20]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	2000ba84 	.word	0x2000ba84

08003574 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003582:	4b3d      	ldr	r3, [pc, #244]	@ (8003678 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b53      	cmp	r3, #83	@ 0x53
 800358e:	d001      	beq.n	8003594 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003590:	f7ff fd4c 	bl	800302c <_DoInit>
  SEGGER_RTT_LOCK();
 8003594:	f3ef 8311 	mrs	r3, BASEPRI
 8003598:	f04f 0120 	mov.w	r1, #32
 800359c:	f381 8811 	msr	BASEPRI, r1
 80035a0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80035a2:	4b35      	ldr	r3, [pc, #212]	@ (8003678 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80035a4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80035aa:	6939      	ldr	r1, [r7, #16]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	3304      	adds	r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3301      	adds	r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	dbeb      	blt.n	80035aa <SEGGER_RTT_AllocUpBuffer+0x36>
 80035d2:	e000      	b.n	80035d6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80035d4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	429a      	cmp	r2, r3
 80035de:	da3f      	bge.n	8003660 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80035e0:	6939      	ldr	r1, [r7, #16]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	440b      	add	r3, r1
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80035f4:	6939      	ldr	r1, [r7, #16]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	3304      	adds	r3, #4
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800360a:	6939      	ldr	r1, [r7, #16]
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3320      	adds	r3, #32
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800361e:	6939      	ldr	r1, [r7, #16]
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	3328      	adds	r3, #40	@ 0x28
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003632:	6939      	ldr	r1, [r7, #16]
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	3324      	adds	r3, #36	@ 0x24
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003646:	6939      	ldr	r1, [r7, #16]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	332c      	adds	r3, #44	@ 0x2c
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800365a:	f3bf 8f5f 	dmb	sy
 800365e:	e002      	b.n	8003666 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800366c:	69fb      	ldr	r3, [r7, #28]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000ba84 	.word	0x2000ba84

0800367c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	@ 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800368a:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b53      	cmp	r3, #83	@ 0x53
 8003696:	d001      	beq.n	800369c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003698:	f7ff fcc8 	bl	800302c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800369c:	4b1c      	ldr	r3, [pc, #112]	@ (8003710 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800369e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d82c      	bhi.n	8003700 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80036a6:	f3ef 8311 	mrs	r3, BASEPRI
 80036aa:	f04f 0120 	mov.w	r1, #32
 80036ae:	f381 8811 	msr	BASEPRI, r1
 80036b2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	3360      	adds	r3, #96	@ 0x60
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ee:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80036f0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036fe:	e002      	b.n	8003706 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003708:	4618      	mov	r0, r3
 800370a:	3728      	adds	r7, #40	@ 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	2000ba84 	.word	0x2000ba84

08003714 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	60fa      	str	r2, [r7, #12]
 800372a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b80      	cmp	r3, #128	@ 0x80
 8003730:	d90a      	bls.n	8003748 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003736:	e007      	b.n	8003748 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	1c53      	adds	r3, r2, #1
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1c59      	adds	r1, r3, #1
 8003742:	60f9      	str	r1, [r7, #12]
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1e5a      	subs	r2, r3, #1
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <_EncodeStr+0x46>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ee      	bne.n	8003738 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	b2da      	uxtb	r2, r3
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003766:	68fb      	ldr	r3, [r7, #12]
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3307      	adds	r3, #7
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003792:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <_HandleIncomingPacket+0xd8>)
 8003794:	7e1b      	ldrb	r3, [r3, #24]
 8003796:	4618      	mov	r0, r3
 8003798:	1cfb      	adds	r3, r7, #3
 800379a:	2201      	movs	r2, #1
 800379c:	4619      	mov	r1, r3
 800379e:	f7ff fded 	bl	800337c <SEGGER_RTT_ReadNoLock>
 80037a2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d057      	beq.n	800385a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	2b80      	cmp	r3, #128	@ 0x80
 80037ae:	d031      	beq.n	8003814 <_HandleIncomingPacket+0x88>
 80037b0:	2b80      	cmp	r3, #128	@ 0x80
 80037b2:	dc40      	bgt.n	8003836 <_HandleIncomingPacket+0xaa>
 80037b4:	2b07      	cmp	r3, #7
 80037b6:	dc15      	bgt.n	80037e4 <_HandleIncomingPacket+0x58>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	dd3c      	ble.n	8003836 <_HandleIncomingPacket+0xaa>
 80037bc:	3b01      	subs	r3, #1
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d839      	bhi.n	8003836 <_HandleIncomingPacket+0xaa>
 80037c2:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <_HandleIncomingPacket+0x3c>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037eb 	.word	0x080037eb
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	080037f7 	.word	0x080037f7
 80037d4:	080037fd 	.word	0x080037fd
 80037d8:	08003803 	.word	0x08003803
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800380f 	.word	0x0800380f
 80037e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80037e6:	d033      	beq.n	8003850 <_HandleIncomingPacket+0xc4>
 80037e8:	e025      	b.n	8003836 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80037ea:	f000 fff3 	bl	80047d4 <SEGGER_SYSVIEW_Start>
      break;
 80037ee:	e034      	b.n	800385a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80037f0:	f001 f8ac 	bl	800494c <SEGGER_SYSVIEW_Stop>
      break;
 80037f4:	e031      	b.n	800385a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80037f6:	f001 fa85 	bl	8004d04 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80037fa:	e02e      	b.n	800385a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80037fc:	f001 fa4a 	bl	8004c94 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003800:	e02b      	b.n	800385a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003802:	f001 f8c9 	bl	8004998 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003806:	e028      	b.n	800385a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003808:	f001 fd22 	bl	8005250 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800380c:	e025      	b.n	800385a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800380e:	f001 fd01 	bl	8005214 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003812:	e022      	b.n	800385a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003814:	4b13      	ldr	r3, [pc, #76]	@ (8003864 <_HandleIncomingPacket+0xd8>)
 8003816:	7e1b      	ldrb	r3, [r3, #24]
 8003818:	4618      	mov	r0, r3
 800381a:	1cfb      	adds	r3, r7, #3
 800381c:	2201      	movs	r2, #1
 800381e:	4619      	mov	r1, r3
 8003820:	f7ff fdac 	bl	800337c <SEGGER_RTT_ReadNoLock>
 8003824:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	4618      	mov	r0, r3
 8003830:	f001 fc66 	bl	8005100 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003834:	e00e      	b.n	8003854 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	b25b      	sxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	da0c      	bge.n	8003858 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <_HandleIncomingPacket+0xd8>)
 8003840:	7e1b      	ldrb	r3, [r3, #24]
 8003842:	4618      	mov	r0, r3
 8003844:	1cfb      	adds	r3, r7, #3
 8003846:	2201      	movs	r2, #1
 8003848:	4619      	mov	r1, r3
 800384a:	f7ff fd97 	bl	800337c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800384e:	e003      	b.n	8003858 <_HandleIncomingPacket+0xcc>
      break;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <_HandleIncomingPacket+0xce>
      break;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <_HandleIncomingPacket+0xce>
      break;
 8003858:	bf00      	nop
    }
  }
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000cf44 	.word	0x2000cf44

08003868 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	@ 0x30
 800386c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800386e:	2301      	movs	r3, #1
 8003870:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	3301      	adds	r3, #1
 8003876:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800387c:	4b32      	ldr	r3, [pc, #200]	@ (8003948 <_TrySendOverflowPacket+0xe0>)
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003882:	e00b      	b.n	800389c <_TrySendOverflowPacket+0x34>
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	b2da      	uxtb	r2, r3
 8003888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800388e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003898:	09db      	lsrs	r3, r3, #7
 800389a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	2b7f      	cmp	r3, #127	@ 0x7f
 80038a0:	d8f0      	bhi.n	8003884 <_TrySendOverflowPacket+0x1c>
 80038a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80038b2:	4b26      	ldr	r3, [pc, #152]	@ (800394c <_TrySendOverflowPacket+0xe4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80038b8:	4b23      	ldr	r3, [pc, #140]	@ (8003948 <_TrySendOverflowPacket+0xe0>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	e00b      	b.n	80038e4 <_TrySendOverflowPacket+0x7c>
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80038d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	09db      	lsrs	r3, r3, #7
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80038e8:	d8f0      	bhi.n	80038cc <_TrySendOverflowPacket+0x64>
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80038fa:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <_TrySendOverflowPacket+0xe0>)
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	4618      	mov	r0, r3
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	461a      	mov	r2, r3
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	4619      	mov	r1, r3
 800390c:	f7fc fc98 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003910:	4603      	mov	r3, r0
 8003912:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003914:	f001 fe80 	bl	8005618 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800391e:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <_TrySendOverflowPacket+0xe0>)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003924:	4b08      	ldr	r3, [pc, #32]	@ (8003948 <_TrySendOverflowPacket+0xe0>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	3b01      	subs	r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <_TrySendOverflowPacket+0xe0>)
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e004      	b.n	800393c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003932:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <_TrySendOverflowPacket+0xe0>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	3301      	adds	r3, #1
 8003938:	4a03      	ldr	r2, [pc, #12]	@ (8003948 <_TrySendOverflowPacket+0xe0>)
 800393a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800393c:	693b      	ldr	r3, [r7, #16]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3730      	adds	r7, #48	@ 0x30
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	2000cf44 	.word	0x2000cf44
 800394c:	e0001004 	.word	0xe0001004

08003950 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800395c:	4b96      	ldr	r3, [pc, #600]	@ (8003bb8 <_SendPacket+0x268>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d010      	beq.n	8003986 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003964:	4b94      	ldr	r3, [pc, #592]	@ (8003bb8 <_SendPacket+0x268>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8130 	beq.w	8003bce <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800396e:	4b92      	ldr	r3, [pc, #584]	@ (8003bb8 <_SendPacket+0x268>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d109      	bne.n	800398a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003976:	f7ff ff77 	bl	8003868 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800397a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bb8 <_SendPacket+0x268>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	f040 8127 	bne.w	8003bd2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8003984:	e001      	b.n	800398a <_SendPacket+0x3a>
    goto Send;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <_SendPacket+0x3c>
Send:
 800398a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b1f      	cmp	r3, #31
 8003990:	d809      	bhi.n	80039a6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003992:	4b89      	ldr	r3, [pc, #548]	@ (8003bb8 <_SendPacket+0x268>)
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 8118 	bne.w	8003bd6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b17      	cmp	r3, #23
 80039aa:	d807      	bhi.n	80039bc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e0c4      	b.n	8003b46 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80039c8:	d912      	bls.n	80039f0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	09da      	lsrs	r2, r3, #7
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	3a01      	subs	r2, #1
 80039e2:	60fa      	str	r2, [r7, #12]
 80039e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e006      	b.n	80039fe <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b7e      	cmp	r3, #126	@ 0x7e
 8003a02:	d807      	bhi.n	8003a14 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e098      	b.n	8003b46 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a1a:	d212      	bcs.n	8003a42 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	09da      	lsrs	r2, r3, #7
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	3a01      	subs	r2, #1
 8003a34:	60fa      	str	r2, [r7, #12]
 8003a36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e081      	b.n	8003b46 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a48:	d21d      	bcs.n	8003a86 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	0b9a      	lsrs	r2, r3, #14
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	09db      	lsrs	r3, r3, #7
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	3a01      	subs	r2, #1
 8003a64:	60fa      	str	r2, [r7, #12]
 8003a66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	3a01      	subs	r2, #1
 8003a78:	60fa      	str	r2, [r7, #12]
 8003a7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e05f      	b.n	8003b46 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a8c:	d228      	bcs.n	8003ae0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0d5a      	lsrs	r2, r3, #21
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0b9b      	lsrs	r3, r3, #14
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	60fa      	str	r2, [r7, #12]
 8003aaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	09db      	lsrs	r3, r3, #7
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	3a01      	subs	r2, #1
 8003abe:	60fa      	str	r2, [r7, #12]
 8003ac0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	60fa      	str	r2, [r7, #12]
 8003ad4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e032      	b.n	8003b46 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	0f1a      	lsrs	r2, r3, #28
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	0d5b      	lsrs	r3, r3, #21
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	3a01      	subs	r2, #1
 8003afa:	60fa      	str	r2, [r7, #12]
 8003afc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0b9b      	lsrs	r3, r3, #14
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	3a01      	subs	r2, #1
 8003b10:	60fa      	str	r2, [r7, #12]
 8003b12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	09db      	lsrs	r3, r3, #7
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	3a01      	subs	r2, #1
 8003b26:	60fa      	str	r2, [r7, #12]
 8003b28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	3a01      	subs	r2, #1
 8003b3a:	60fa      	str	r2, [r7, #12]
 8003b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b46:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <_SendPacket+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <_SendPacket+0x268>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	e00b      	b.n	8003b78 <_SendPacket+0x228>
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	6279      	str	r1, [r7, #36]	@ 0x24
 8003b6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	09db      	lsrs	r3, r3, #7
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b7c:	d8f0      	bhi.n	8003b60 <_SendPacket+0x210>
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <_SendPacket+0x268>)
 8003b90:	785b      	ldrb	r3, [r3, #1]
 8003b92:	4618      	mov	r0, r3
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	f7fc fb4f 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ba2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003ba4:	f001 fd38 	bl	8005618 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003bae:	4a02      	ldr	r2, [pc, #8]	@ (8003bb8 <_SendPacket+0x268>)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	60d3      	str	r3, [r2, #12]
 8003bb4:	e010      	b.n	8003bd8 <_SendPacket+0x288>
 8003bb6:	bf00      	nop
 8003bb8:	2000cf44 	.word	0x2000cf44
 8003bbc:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <_SendPacket+0x2d8>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <_SendPacket+0x2d8>)
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e004      	b.n	8003bd8 <_SendPacket+0x288>
    goto SendDone;
 8003bce:	bf00      	nop
 8003bd0:	e002      	b.n	8003bd8 <_SendPacket+0x288>
      goto SendDone;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <_SendPacket+0x288>
      goto SendDone;
 8003bd6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003bd8:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <_SendPacket+0x2d8>)
 8003bda:	7e1b      	ldrb	r3, [r3, #24]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4a13      	ldr	r2, [pc, #76]	@ (8003c2c <_SendPacket+0x2dc>)
 8003be0:	460b      	mov	r3, r1
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	440b      	add	r3, r1
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	336c      	adds	r3, #108	@ 0x6c
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <_SendPacket+0x2d8>)
 8003bf0:	7e1b      	ldrb	r3, [r3, #24]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	490d      	ldr	r1, [pc, #52]	@ (8003c2c <_SendPacket+0x2dc>)
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4403      	add	r3, r0
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	440b      	add	r3, r1
 8003c00:	3370      	adds	r3, #112	@ 0x70
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d00b      	beq.n	8003c20 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003c08:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <_SendPacket+0x2d8>)
 8003c0a:	789b      	ldrb	r3, [r3, #2]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <_SendPacket+0x2d8>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003c16:	f7ff fdb9 	bl	800378c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003c1a:	4b03      	ldr	r3, [pc, #12]	@ (8003c28 <_SendPacket+0x2d8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003c20:	bf00      	nop
 8003c22:	3728      	adds	r7, #40	@ 0x28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000cf44 	.word	0x2000cf44
 8003c2c:	2000ba84 	.word	0x2000ba84

08003c30 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3301      	adds	r3, #1
 8003c46:	2b80      	cmp	r3, #128	@ 0x80
 8003c48:	d80a      	bhi.n	8003c60 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	1c59      	adds	r1, r3, #1
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6051      	str	r1, [r2, #4]
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b80      	cmp	r3, #128	@ 0x80
 8003c66:	d15a      	bne.n	8003d1e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	e00b      	b.n	8003ca2 <_StoreChar+0x72>
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	1c59      	adds	r1, r3, #1
 8003c92:	6279      	str	r1, [r7, #36]	@ 0x24
 8003c94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	09db      	lsrs	r3, r3, #7
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ca6:	d8f0      	bhi.n	8003c8a <_StoreChar+0x5a>
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e00b      	b.n	8003cda <_StoreChar+0xaa>
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	1c59      	adds	r1, r3, #1
 8003cca:	61f9      	str	r1, [r7, #28]
 8003ccc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	09db      	lsrs	r3, r3, #7
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cde:	d8f0      	bhi.n	8003cc2 <_StoreChar+0x92>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	221a      	movs	r2, #26
 8003cf6:	6939      	ldr	r1, [r7, #16]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fe29 	bl	8003950 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fd36 	bl	8003774 <_PreparePacket>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	611a      	str	r2, [r3, #16]
  }
}
 8003d1e:	bf00      	nop
 8003d20:	3728      	adds	r7, #40	@ 0x28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	@ 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003d42:	e007      	b.n	8003d54 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003d44:	6a3a      	ldr	r2, [r7, #32]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	623b      	str	r3, [r7, #32]
    Width++;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3301      	adds	r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003d54:	6a3a      	ldr	r2, [r7, #32]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d2f3      	bcs.n	8003d44 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d901      	bls.n	8003d68 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d000      	beq.n	8003d74 <_PrintUnsigned+0x4c>
 8003d72:	e01f      	b.n	8003db4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8003d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01c      	beq.n	8003db4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <_PrintUnsigned+0x68>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <_PrintUnsigned+0x68>
        c = '0';
 8003d8a:	2330      	movs	r3, #48	@ 0x30
 8003d8c:	76fb      	strb	r3, [r7, #27]
 8003d8e:	e001      	b.n	8003d94 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8003d90:	2320      	movs	r3, #32
 8003d92:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003d94:	e007      	b.n	8003da6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8003d9c:	7efb      	ldrb	r3, [r7, #27]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff ff45 	bl	8003c30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <_PrintUnsigned+0x8c>
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d3f0      	bcc.n	8003d96 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d903      	bls.n	8003dc2 <_PrintUnsigned+0x9a>
      NumDigits--;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	e009      	b.n	8003dd6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d200      	bcs.n	8003dd6 <_PrintUnsigned+0xae>
        break;
 8003dd4:	e005      	b.n	8003de2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003de0:	e7e8      	b.n	8003db4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df0:	fb02 f303 	mul.w	r3, r2, r3
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003dfa:	4a15      	ldr	r2, [pc, #84]	@ (8003e50 <_PrintUnsigned+0x128>)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4413      	add	r3, r2
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff ff13 	bl	8003c30 <_StoreChar>
    Digit /= Base;
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e3      	bne.n	8003de2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d011      	beq.n	8003e48 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8003e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00e      	beq.n	8003e48 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e2a:	e006      	b.n	8003e3a <_PrintUnsigned+0x112>
        FieldWidth--;
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8003e32:	2120      	movs	r1, #32
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff fefb 	bl	8003c30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <_PrintUnsigned+0x120>
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d3f1      	bcc.n	8003e2c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3728      	adds	r7, #40	@ 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	080077c4 	.word	0x080077c4

08003e54 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bfb8      	it	lt
 8003e68:	425b      	neglt	r3, r3
 8003e6a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003e70:	e007      	b.n	8003e82 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e7a:	613b      	str	r3, [r7, #16]
    Width++;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	daf3      	bge.n	8003e72 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d901      	bls.n	8003e96 <_PrintInt+0x42>
    Width = NumDigits;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <_PrintInt+0x5e>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	db04      	blt.n	8003eac <_PrintInt+0x58>
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <_PrintInt+0x5e>
    FieldWidth--;
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <_PrintInt+0x6e>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <_PrintInt+0x9c>
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d111      	bne.n	8003ef0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00e      	beq.n	8003ef0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ed2:	e006      	b.n	8003ee2 <_PrintInt+0x8e>
        FieldWidth--;
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003eda:	2120      	movs	r1, #32
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff fea7 	bl	8003c30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <_PrintInt+0x9c>
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3f1      	bcc.n	8003ed4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da07      	bge.n	8003f06 <_PrintInt+0xb2>
    v = -v;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	425b      	negs	r3, r3
 8003efa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003efc:	212d      	movs	r1, #45	@ 0x2d
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff fe96 	bl	8003c30 <_StoreChar>
 8003f04:	e008      	b.n	8003f18 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003f10:	212b      	movs	r1, #43	@ 0x2b
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff fe8c 	bl	8003c30 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <_PrintInt+0x102>
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d114      	bne.n	8003f56 <_PrintInt+0x102>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d111      	bne.n	8003f56 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f38:	e006      	b.n	8003f48 <_PrintInt+0xf4>
        FieldWidth--;
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003f40:	2130      	movs	r1, #48	@ 0x30
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff fe74 	bl	8003c30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <_PrintInt+0x102>
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3f1      	bcc.n	8003f3a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff fedf 	bl	8003d28 <_PrintUnsigned>
}
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b098      	sub	sp, #96	@ 0x60
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f80:	f3ef 8311 	mrs	r3, BASEPRI
 8003f84:	f04f 0120 	mov.w	r1, #32
 8003f88:	f381 8811 	msr	BASEPRI, r1
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f8e:	48b7      	ldr	r0, [pc, #732]	@ (800426c <_VPrintTarget+0x2f8>)
 8003f90:	f7ff fbf0 	bl	8003774 <_PreparePacket>
 8003f94:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003f96:	4bb5      	ldr	r3, [pc, #724]	@ (800426c <_VPrintTarget+0x2f8>)
 8003f98:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003fba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 81a8 	beq.w	8004314 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8003fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fc8:	2b25      	cmp	r3, #37	@ 0x25
 8003fca:	f040 8195 	bne.w	80042f8 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8003fde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fe2:	3b23      	subs	r3, #35	@ 0x23
 8003fe4:	2b0d      	cmp	r3, #13
 8003fe6:	d83f      	bhi.n	8004068 <_VPrintTarget+0xf4>
 8003fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff0 <_VPrintTarget+0x7c>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004059 	.word	0x08004059
 8003ff4:	08004069 	.word	0x08004069
 8003ff8:	08004069 	.word	0x08004069
 8003ffc:	08004069 	.word	0x08004069
 8004000:	08004069 	.word	0x08004069
 8004004:	08004069 	.word	0x08004069
 8004008:	08004069 	.word	0x08004069
 800400c:	08004069 	.word	0x08004069
 8004010:	08004049 	.word	0x08004049
 8004014:	08004069 	.word	0x08004069
 8004018:	08004029 	.word	0x08004029
 800401c:	08004069 	.word	0x08004069
 8004020:	08004069 	.word	0x08004069
 8004024:	08004039 	.word	0x08004039
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e01a      	b.n	800406e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403a:	f043 0302 	orr.w	r3, r3, #2
 800403e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e012      	b.n	800406e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404a:	f043 0304 	orr.w	r3, r3, #4
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3301      	adds	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e00a      	b.n	800406e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800405a:	f043 0308 	orr.w	r3, r3, #8
 800405e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3301      	adds	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e002      	b.n	800406e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004068:	2300      	movs	r3, #0
 800406a:	653b      	str	r3, [r7, #80]	@ 0x50
 800406c:	bf00      	nop
        }
      } while (v);
 800406e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1b0      	bne.n	8003fd6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004074:	2300      	movs	r3, #0
 8004076:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004080:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004084:	2b2f      	cmp	r3, #47	@ 0x2f
 8004086:	d912      	bls.n	80040ae <_VPrintTarget+0x13a>
 8004088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800408c:	2b39      	cmp	r3, #57	@ 0x39
 800408e:	d80e      	bhi.n	80040ae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	461a      	mov	r2, r3
 80040a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040a6:	4413      	add	r3, r2
 80040a8:	3b30      	subs	r3, #48	@ 0x30
 80040aa:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80040ac:	e7e4      	b.n	8004078 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80040ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040be:	2b2e      	cmp	r3, #46	@ 0x2e
 80040c0:	d11d      	bne.n	80040fe <_VPrintTarget+0x18a>
        sFormat++;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3301      	adds	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80040d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80040d6:	d912      	bls.n	80040fe <_VPrintTarget+0x18a>
 80040d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040dc:	2b39      	cmp	r3, #57	@ 0x39
 80040de:	d80e      	bhi.n	80040fe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80040e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	461a      	mov	r2, r3
 80040f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040f6:	4413      	add	r3, r2
 80040f8:	3b30      	subs	r3, #48	@ 0x30
 80040fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80040fc:	e7e4      	b.n	80040c8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004106:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800410a:	2b6c      	cmp	r3, #108	@ 0x6c
 800410c:	d003      	beq.n	8004116 <_VPrintTarget+0x1a2>
 800410e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004112:	2b68      	cmp	r3, #104	@ 0x68
 8004114:	d107      	bne.n	8004126 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3301      	adds	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004124:	e7ef      	b.n	8004106 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004126:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800412a:	2b25      	cmp	r3, #37	@ 0x25
 800412c:	f000 80d8 	beq.w	80042e0 <_VPrintTarget+0x36c>
 8004130:	2b25      	cmp	r3, #37	@ 0x25
 8004132:	f2c0 80dc 	blt.w	80042ee <_VPrintTarget+0x37a>
 8004136:	2b78      	cmp	r3, #120	@ 0x78
 8004138:	f300 80d9 	bgt.w	80042ee <_VPrintTarget+0x37a>
 800413c:	2b58      	cmp	r3, #88	@ 0x58
 800413e:	f2c0 80d6 	blt.w	80042ee <_VPrintTarget+0x37a>
 8004142:	3b58      	subs	r3, #88	@ 0x58
 8004144:	2b20      	cmp	r3, #32
 8004146:	f200 80d2 	bhi.w	80042ee <_VPrintTarget+0x37a>
 800414a:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <_VPrintTarget+0x1dc>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	08004247 	.word	0x08004247
 8004154:	080042ef 	.word	0x080042ef
 8004158:	080042ef 	.word	0x080042ef
 800415c:	080042ef 	.word	0x080042ef
 8004160:	080042ef 	.word	0x080042ef
 8004164:	080042ef 	.word	0x080042ef
 8004168:	080042ef 	.word	0x080042ef
 800416c:	080042ef 	.word	0x080042ef
 8004170:	080042ef 	.word	0x080042ef
 8004174:	080042ef 	.word	0x080042ef
 8004178:	080042ef 	.word	0x080042ef
 800417c:	080041d5 	.word	0x080041d5
 8004180:	080041fb 	.word	0x080041fb
 8004184:	080042ef 	.word	0x080042ef
 8004188:	080042ef 	.word	0x080042ef
 800418c:	080042ef 	.word	0x080042ef
 8004190:	080042ef 	.word	0x080042ef
 8004194:	080042ef 	.word	0x080042ef
 8004198:	080042ef 	.word	0x080042ef
 800419c:	080042ef 	.word	0x080042ef
 80041a0:	080042ef 	.word	0x080042ef
 80041a4:	080042ef 	.word	0x080042ef
 80041a8:	080042ef 	.word	0x080042ef
 80041ac:	080042ef 	.word	0x080042ef
 80041b0:	080042bb 	.word	0x080042bb
 80041b4:	080042ef 	.word	0x080042ef
 80041b8:	080042ef 	.word	0x080042ef
 80041bc:	08004271 	.word	0x08004271
 80041c0:	080042ef 	.word	0x080042ef
 80041c4:	08004221 	.word	0x08004221
 80041c8:	080042ef 	.word	0x080042ef
 80041cc:	080042ef 	.word	0x080042ef
 80041d0:	08004247 	.word	0x08004247
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1d19      	adds	r1, r3, #4
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6011      	str	r1, [r2, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80041e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80041e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80041ec:	f107 0310 	add.w	r3, r7, #16
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fd1c 	bl	8003c30 <_StoreChar>
        break;
 80041f8:	e07a      	b.n	80042f0 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	1d19      	adds	r1, r3, #4
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6011      	str	r1, [r2, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004208:	f107 0010 	add.w	r0, r7, #16
 800420c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004216:	220a      	movs	r2, #10
 8004218:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800421a:	f7ff fe1b 	bl	8003e54 <_PrintInt>
        break;
 800421e:	e067      	b.n	80042f0 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	1d19      	adds	r1, r3, #4
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6011      	str	r1, [r2, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800422e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004230:	f107 0010 	add.w	r0, r7, #16
 8004234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800423e:	220a      	movs	r2, #10
 8004240:	f7ff fd72 	bl	8003d28 <_PrintUnsigned>
        break;
 8004244:	e054      	b.n	80042f0 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	1d19      	adds	r1, r3, #4
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6011      	str	r1, [r2, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004254:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004256:	f107 0010 	add.w	r0, r7, #16
 800425a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004264:	2210      	movs	r2, #16
 8004266:	f7ff fd5f 	bl	8003d28 <_PrintUnsigned>
        break;
 800426a:	e041      	b.n	80042f0 <_VPrintTarget+0x37c>
 800426c:	2000cf74 	.word	0x2000cf74
      case 's':
        s = va_arg(*pParamList, const char*);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	1d19      	adds	r1, r3, #4
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800427e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <_VPrintTarget+0x314>
          s = "(null)";
 8004284:	4b4a      	ldr	r3, [pc, #296]	@ (80043b0 <_VPrintTarget+0x43c>)
 8004286:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004292:	3301      	adds	r3, #1
 8004294:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004296:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800429e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80042a2:	f107 0310 	add.w	r3, r7, #16
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fcc1 	bl	8003c30 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80042b2:	d9e9      	bls.n	8004288 <_VPrintTarget+0x314>
        break;
 80042b4:	e01c      	b.n	80042f0 <_VPrintTarget+0x37c>
            break;
 80042b6:	bf00      	nop
        break;
 80042b8:	e01a      	b.n	80042f0 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	1d19      	adds	r1, r3, #4
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6011      	str	r1, [r2, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80042c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80042ca:	f107 0010 	add.w	r0, r7, #16
 80042ce:	2300      	movs	r3, #0
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	2308      	movs	r3, #8
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2308      	movs	r3, #8
 80042d8:	2210      	movs	r2, #16
 80042da:	f7ff fd25 	bl	8003d28 <_PrintUnsigned>
        break;
 80042de:	e007      	b.n	80042f0 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80042e0:	f107 0310 	add.w	r3, r7, #16
 80042e4:	2125      	movs	r1, #37	@ 0x25
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fca2 	bl	8003c30 <_StoreChar>
        break;
 80042ec:	e000      	b.n	80042f0 <_VPrintTarget+0x37c>
      default:
        break;
 80042ee:	bf00      	nop
      }
      sFormat++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e007      	b.n	8004308 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80042f8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80042fc:	f107 0310 	add.w	r3, r7, #16
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fc94 	bl	8003c30 <_StoreChar>
    }
  } while (*sFormat);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f47f ae4d 	bne.w	8003fac <_VPrintTarget+0x38>
 8004312:	e000      	b.n	8004316 <_VPrintTarget+0x3a2>
      break;
 8004314:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d041      	beq.n	80043a0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800432c:	e00b      	b.n	8004346 <_VPrintTarget+0x3d2>
 800432e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004330:	b2da      	uxtb	r2, r3
 8004332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004334:	1c59      	adds	r1, r3, #1
 8004336:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004338:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	09db      	lsrs	r3, r3, #7
 8004344:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004348:	2b7f      	cmp	r3, #127	@ 0x7f
 800434a:	d8f0      	bhi.n	800432e <_VPrintTarget+0x3ba>
 800434c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004352:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004360:	2300      	movs	r3, #0
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30
 8004364:	e00b      	b.n	800437e <_VPrintTarget+0x40a>
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	b2da      	uxtb	r2, r3
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	1c59      	adds	r1, r3, #1
 800436e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004370:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	09db      	lsrs	r3, r3, #7
 800437c:	633b      	str	r3, [r7, #48]	@ 0x30
 800437e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004380:	2b7f      	cmp	r3, #127	@ 0x7f
 8004382:	d8f0      	bhi.n	8004366 <_VPrintTarget+0x3f2>
 8004384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	637a      	str	r2, [r7, #52]	@ 0x34
 800438a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6979      	ldr	r1, [r7, #20]
 8004398:	221a      	movs	r2, #26
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fad8 	bl	8003950 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80043a6:	bf00      	nop
 80043a8:	3758      	adds	r7, #88	@ 0x58
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	0800770c 	.word	0x0800770c

080043b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80043c2:	2300      	movs	r3, #0
 80043c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043c8:	4917      	ldr	r1, [pc, #92]	@ (8004428 <SEGGER_SYSVIEW_Init+0x74>)
 80043ca:	4818      	ldr	r0, [pc, #96]	@ (800442c <SEGGER_SYSVIEW_Init+0x78>)
 80043cc:	f7ff f8d2 	bl	8003574 <SEGGER_RTT_AllocUpBuffer>
 80043d0:	4603      	mov	r3, r0
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	4b16      	ldr	r3, [pc, #88]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 80043d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80043d8:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 80043da:	785a      	ldrb	r2, [r3, #1]
 80043dc:	4b14      	ldr	r3, [pc, #80]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 80043de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80043e0:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 80043e2:	7e1b      	ldrb	r3, [r3, #24]
 80043e4:	4618      	mov	r0, r3
 80043e6:	2300      	movs	r3, #0
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2308      	movs	r3, #8
 80043ec:	4a11      	ldr	r2, [pc, #68]	@ (8004434 <SEGGER_SYSVIEW_Init+0x80>)
 80043ee:	490f      	ldr	r1, [pc, #60]	@ (800442c <SEGGER_SYSVIEW_Init+0x78>)
 80043f0:	f7ff f944 	bl	800367c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80043f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004438 <SEGGER_SYSVIEW_Init+0x84>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 8004400:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004402:	4a0b      	ldr	r2, [pc, #44]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004408:	4a09      	ldr	r2, [pc, #36]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800440e:	4a08      	ldr	r2, [pc, #32]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004414:	4a06      	ldr	r2, [pc, #24]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800441a:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <SEGGER_SYSVIEW_Init+0x7c>)
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	2000bf3c 	.word	0x2000bf3c
 800442c:	08007714 	.word	0x08007714
 8004430:	2000cf44 	.word	0x2000cf44
 8004434:	2000cf3c 	.word	0x2000cf3c
 8004438:	e0001004 	.word	0xe0001004

0800443c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004444:	4a04      	ldr	r2, [pc, #16]	@ (8004458 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6113      	str	r3, [r2, #16]
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	2000cf44 	.word	0x2000cf44

0800445c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004464:	f3ef 8311 	mrs	r3, BASEPRI
 8004468:	f04f 0120 	mov.w	r1, #32
 800446c:	f381 8811 	msr	BASEPRI, r1
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	4808      	ldr	r0, [pc, #32]	@ (8004494 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004474:	f7ff f97e 	bl	8003774 <_PreparePacket>
 8004478:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68b8      	ldr	r0, [r7, #8]
 8004480:	f7ff fa66 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f383 8811 	msr	BASEPRI, r3
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000cf74 	.word	0x2000cf74

08004498 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044a2:	f3ef 8311 	mrs	r3, BASEPRI
 80044a6:	f04f 0120 	mov.w	r1, #32
 80044aa:	f381 8811 	msr	BASEPRI, r1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	4816      	ldr	r0, [pc, #88]	@ (800450c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80044b2:	f7ff f95f 	bl	8003774 <_PreparePacket>
 80044b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e00b      	b.n	80044de <SEGGER_SYSVIEW_RecordU32+0x46>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	1c59      	adds	r1, r3, #1
 80044ce:	61f9      	str	r1, [r7, #28]
 80044d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	09db      	lsrs	r3, r3, #7
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80044e2:	d8f0      	bhi.n	80044c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	61fa      	str	r2, [r7, #28]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	6938      	ldr	r0, [r7, #16]
 80044fa:	f7ff fa29 	bl	8003950 <_SendPacket>
  RECORD_END();
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f383 8811 	msr	BASEPRI, r3
}
 8004504:	bf00      	nop
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	2000cf74 	.word	0x2000cf74

08004510 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	@ 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800451c:	f3ef 8311 	mrs	r3, BASEPRI
 8004520:	f04f 0120 	mov.w	r1, #32
 8004524:	f381 8811 	msr	BASEPRI, r1
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	4825      	ldr	r0, [pc, #148]	@ (80045c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800452c:	f7ff f922 	bl	8003774 <_PreparePacket>
 8004530:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800453e:	e00b      	b.n	8004558 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	b2da      	uxtb	r2, r3
 8004544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004546:	1c59      	adds	r1, r3, #1
 8004548:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800454a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	09db      	lsrs	r3, r3, #7
 8004556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	2b7f      	cmp	r3, #127	@ 0x7f
 800455c:	d8f0      	bhi.n	8004540 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	e00b      	b.n	8004590 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	6279      	str	r1, [r7, #36]	@ 0x24
 8004582:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	09db      	lsrs	r3, r3, #7
 800458e:	623b      	str	r3, [r7, #32]
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2b7f      	cmp	r3, #127	@ 0x7f
 8004594:	d8f0      	bhi.n	8004578 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	627a      	str	r2, [r7, #36]	@ 0x24
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	6979      	ldr	r1, [r7, #20]
 80045aa:	69b8      	ldr	r0, [r7, #24]
 80045ac:	f7ff f9d0 	bl	8003950 <_SendPacket>
  RECORD_END();
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f383 8811 	msr	BASEPRI, r3
}
 80045b6:	bf00      	nop
 80045b8:	3730      	adds	r7, #48	@ 0x30
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	2000cf74 	.word	0x2000cf74

080045c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08e      	sub	sp, #56	@ 0x38
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80045d2:	f3ef 8311 	mrs	r3, BASEPRI
 80045d6:	f04f 0120 	mov.w	r1, #32
 80045da:	f381 8811 	msr	BASEPRI, r1
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	4832      	ldr	r0, [pc, #200]	@ (80046ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80045e2:	f7ff f8c7 	bl	8003774 <_PreparePacket>
 80045e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f4:	e00b      	b.n	800460e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fc:	1c59      	adds	r1, r3, #1
 80045fe:	6379      	str	r1, [r7, #52]	@ 0x34
 8004600:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	09db      	lsrs	r3, r3, #7
 800460c:	633b      	str	r3, [r7, #48]	@ 0x30
 800460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004610:	2b7f      	cmp	r3, #127	@ 0x7f
 8004612:	d8f0      	bhi.n	80045f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	637a      	str	r2, [r7, #52]	@ 0x34
 800461a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004622:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800462c:	e00b      	b.n	8004646 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004630:	b2da      	uxtb	r2, r3
 8004632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004634:	1c59      	adds	r1, r3, #1
 8004636:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004638:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	09db      	lsrs	r3, r3, #7
 8004644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004648:	2b7f      	cmp	r3, #127	@ 0x7f
 800464a:	d8f0      	bhi.n	800462e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800464c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	e00b      	b.n	800467e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004670:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	09db      	lsrs	r3, r3, #7
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	2b7f      	cmp	r3, #127	@ 0x7f
 8004682:	d8f0      	bhi.n	8004666 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	627a      	str	r2, [r7, #36]	@ 0x24
 800468a:	6a3a      	ldr	r2, [r7, #32]
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	69b8      	ldr	r0, [r7, #24]
 800469a:	f7ff f959 	bl	8003950 <_SendPacket>
  RECORD_END();
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f383 8811 	msr	BASEPRI, r3
}
 80046a4:	bf00      	nop
 80046a6:	3738      	adds	r7, #56	@ 0x38
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	2000cf74 	.word	0x2000cf74

080046b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b090      	sub	sp, #64	@ 0x40
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046be:	f3ef 8311 	mrs	r3, BASEPRI
 80046c2:	f04f 0120 	mov.w	r1, #32
 80046c6:	f381 8811 	msr	BASEPRI, r1
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	4840      	ldr	r0, [pc, #256]	@ (80047d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80046ce:	f7ff f851 	bl	8003774 <_PreparePacket>
 80046d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e0:	e00b      	b.n	80046fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80046e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e8:	1c59      	adds	r1, r3, #1
 80046ea:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80046ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f6:	09db      	lsrs	r3, r3, #7
 80046f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80046fe:	d8f0      	bhi.n	80046e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004706:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800470e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	637b      	str	r3, [r7, #52]	@ 0x34
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	633b      	str	r3, [r7, #48]	@ 0x30
 8004718:	e00b      	b.n	8004732 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	b2da      	uxtb	r2, r3
 800471e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004720:	1c59      	adds	r1, r3, #1
 8004722:	6379      	str	r1, [r7, #52]	@ 0x34
 8004724:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472e:	09db      	lsrs	r3, r3, #7
 8004730:	633b      	str	r3, [r7, #48]	@ 0x30
 8004732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004734:	2b7f      	cmp	r3, #127	@ 0x7f
 8004736:	d8f0      	bhi.n	800471a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	637a      	str	r2, [r7, #52]	@ 0x34
 800473e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004746:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004750:	e00b      	b.n	800476a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	b2da      	uxtb	r2, r3
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004758:	1c59      	adds	r1, r3, #1
 800475a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800475c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	09db      	lsrs	r3, r3, #7
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	2b7f      	cmp	r3, #127	@ 0x7f
 800476e:	d8f0      	bhi.n	8004752 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
 8004784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	e00b      	b.n	80047a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	1c59      	adds	r1, r3, #1
 8004792:	6279      	str	r1, [r7, #36]	@ 0x24
 8004794:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	09db      	lsrs	r3, r3, #7
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80047a6:	d8f0      	bhi.n	800478a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	69b8      	ldr	r0, [r7, #24]
 80047be:	f7ff f8c7 	bl	8003950 <_SendPacket>
  RECORD_END();
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f383 8811 	msr	BASEPRI, r3
}
 80047c8:	bf00      	nop
 80047ca:	3740      	adds	r7, #64	@ 0x40
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	2000cf74 	.word	0x2000cf74

080047d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08c      	sub	sp, #48	@ 0x30
 80047d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80047da:	4b59      	ldr	r3, [pc, #356]	@ (8004940 <SEGGER_SYSVIEW_Start+0x16c>)
 80047dc:	2201      	movs	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80047e0:	f3ef 8311 	mrs	r3, BASEPRI
 80047e4:	f04f 0120 	mov.w	r1, #32
 80047e8:	f381 8811 	msr	BASEPRI, r1
 80047ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80047ee:	4b54      	ldr	r3, [pc, #336]	@ (8004940 <SEGGER_SYSVIEW_Start+0x16c>)
 80047f0:	785b      	ldrb	r3, [r3, #1]
 80047f2:	220a      	movs	r2, #10
 80047f4:	4953      	ldr	r1, [pc, #332]	@ (8004944 <SEGGER_SYSVIEW_Start+0x170>)
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fd22 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004802:	f000 ff09 	bl	8005618 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004806:	200a      	movs	r0, #10
 8004808:	f7ff fe28 	bl	800445c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800480c:	f3ef 8311 	mrs	r3, BASEPRI
 8004810:	f04f 0120 	mov.w	r1, #32
 8004814:	f381 8811 	msr	BASEPRI, r1
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	484b      	ldr	r0, [pc, #300]	@ (8004948 <SEGGER_SYSVIEW_Start+0x174>)
 800481c:	f7fe ffaa 	bl	8003774 <_PreparePacket>
 8004820:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482a:	4b45      	ldr	r3, [pc, #276]	@ (8004940 <SEGGER_SYSVIEW_Start+0x16c>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004830:	e00b      	b.n	800484a <SEGGER_SYSVIEW_Start+0x76>
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	b2da      	uxtb	r2, r3
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	1c59      	adds	r1, r3, #1
 800483a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800483c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	09db      	lsrs	r3, r3, #7
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	2b7f      	cmp	r3, #127	@ 0x7f
 800484e:	d8f0      	bhi.n	8004832 <SEGGER_SYSVIEW_Start+0x5e>
 8004850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
 8004864:	4b36      	ldr	r3, [pc, #216]	@ (8004940 <SEGGER_SYSVIEW_Start+0x16c>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	e00b      	b.n	8004884 <SEGGER_SYSVIEW_Start+0xb0>
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	1c59      	adds	r1, r3, #1
 8004874:	6279      	str	r1, [r7, #36]	@ 0x24
 8004876:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	623b      	str	r3, [r7, #32]
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2b7f      	cmp	r3, #127	@ 0x7f
 8004888:	d8f0      	bhi.n	800486c <SEGGER_SYSVIEW_Start+0x98>
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	4b28      	ldr	r3, [pc, #160]	@ (8004940 <SEGGER_SYSVIEW_Start+0x16c>)
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	e00b      	b.n	80048be <SEGGER_SYSVIEW_Start+0xea>
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	1c59      	adds	r1, r3, #1
 80048ae:	61f9      	str	r1, [r7, #28]
 80048b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	09db      	lsrs	r3, r3, #7
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048c2:	d8f0      	bhi.n	80048a6 <SEGGER_SYSVIEW_Start+0xd2>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	61fa      	str	r2, [r7, #28]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	e00b      	b.n	80048f6 <SEGGER_SYSVIEW_Start+0x122>
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1c59      	adds	r1, r3, #1
 80048e6:	6179      	str	r1, [r7, #20]
 80048e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	09db      	lsrs	r3, r3, #7
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80048fa:	d8f0      	bhi.n	80048de <SEGGER_SYSVIEW_Start+0x10a>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	617a      	str	r2, [r7, #20]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800490c:	2218      	movs	r2, #24
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff f81d 	bl	8003950 <_SendPacket>
      RECORD_END();
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800491c:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <SEGGER_SYSVIEW_Start+0x16c>)
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004924:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <SEGGER_SYSVIEW_Start+0x16c>)
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800492a:	f000 f9eb 	bl	8004d04 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800492e:	f000 f9b1 	bl	8004c94 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004932:	f000 fc8d 	bl	8005250 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004936:	bf00      	nop
 8004938:	3730      	adds	r7, #48	@ 0x30
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	2000cf44 	.word	0x2000cf44
 8004944:	080077b8 	.word	0x080077b8
 8004948:	2000cf74 	.word	0x2000cf74

0800494c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004952:	f3ef 8311 	mrs	r3, BASEPRI
 8004956:	f04f 0120 	mov.w	r1, #32
 800495a:	f381 8811 	msr	BASEPRI, r1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	480b      	ldr	r0, [pc, #44]	@ (8004990 <SEGGER_SYSVIEW_Stop+0x44>)
 8004962:	f7fe ff07 	bl	8003774 <_PreparePacket>
 8004966:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004968:	4b0a      	ldr	r3, [pc, #40]	@ (8004994 <SEGGER_SYSVIEW_Stop+0x48>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004970:	220b      	movs	r2, #11
 8004972:	6839      	ldr	r1, [r7, #0]
 8004974:	6838      	ldr	r0, [r7, #0]
 8004976:	f7fe ffeb 	bl	8003950 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800497a:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <SEGGER_SYSVIEW_Stop+0x48>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f383 8811 	msr	BASEPRI, r3
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	2000cf74 	.word	0x2000cf74
 8004994:	2000cf44 	.word	0x2000cf44

08004998 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	@ 0x30
 800499c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800499e:	f3ef 8311 	mrs	r3, BASEPRI
 80049a2:	f04f 0120 	mov.w	r1, #32
 80049a6:	f381 8811 	msr	BASEPRI, r1
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	4845      	ldr	r0, [pc, #276]	@ (8004ac4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80049ae:	f7fe fee1 	bl	8003774 <_PreparePacket>
 80049b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049bc:	4b42      	ldr	r3, [pc, #264]	@ (8004ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c2:	e00b      	b.n	80049dc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ca:	1c59      	adds	r1, r3, #1
 80049cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80049ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	09db      	lsrs	r3, r3, #7
 80049da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	2b7f      	cmp	r3, #127	@ 0x7f
 80049e0:	d8f0      	bhi.n	80049c4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80049e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f6:	4b34      	ldr	r3, [pc, #208]	@ (8004ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	623b      	str	r3, [r7, #32]
 80049fc:	e00b      	b.n	8004a16 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	1c59      	adds	r1, r3, #1
 8004a06:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	09db      	lsrs	r3, r3, #7
 8004a14:	623b      	str	r3, [r7, #32]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a1a:	d8f0      	bhi.n	80049fe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	4b25      	ldr	r3, [pc, #148]	@ (8004ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e00b      	b.n	8004a50 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	61f9      	str	r1, [r7, #28]
 8004a42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	09db      	lsrs	r3, r3, #7
 8004a4e:	61bb      	str	r3, [r7, #24]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a54:	d8f0      	bhi.n	8004a38 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	61fa      	str	r2, [r7, #28]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	e00b      	b.n	8004a88 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	1c59      	adds	r1, r3, #1
 8004a78:	6179      	str	r1, [r7, #20]
 8004a7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	09db      	lsrs	r3, r3, #7
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a8c:	d8f0      	bhi.n	8004a70 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	617a      	str	r2, [r7, #20]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a9e:	2218      	movs	r2, #24
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	68b8      	ldr	r0, [r7, #8]
 8004aa4:	f7fe ff54 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004ab6:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	4798      	blx	r3
  }
}
 8004abc:	bf00      	nop
 8004abe:	3730      	adds	r7, #48	@ 0x30
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	2000cf74 	.word	0x2000cf74
 8004ac8:	2000cf44 	.word	0x2000cf44

08004acc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b092      	sub	sp, #72	@ 0x48
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad8:	f04f 0120 	mov.w	r1, #32
 8004adc:	f381 8811 	msr	BASEPRI, r1
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	486a      	ldr	r0, [pc, #424]	@ (8004c8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004ae4:	f7fe fe46 	bl	8003774 <_PreparePacket>
 8004ae8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4b66      	ldr	r3, [pc, #408]	@ (8004c90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004afe:	e00b      	b.n	8004b18 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	6479      	str	r1, [r7, #68]	@ 0x44
 8004b0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b14:	09db      	lsrs	r3, r3, #7
 8004b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b1c:	d8f0      	bhi.n	8004b00 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b38:	e00b      	b.n	8004b52 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b40:	1c59      	adds	r1, r3, #1
 8004b42:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004b44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	09db      	lsrs	r3, r3, #7
 8004b50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b56:	d8f0      	bhi.n	8004b3a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b66:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	4619      	mov	r1, r3
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7fe fdcf 	bl	8003714 <_EncodeStr>
 8004b76:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004b78:	2209      	movs	r2, #9
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	6938      	ldr	r0, [r7, #16]
 8004b7e:	f7fe fee7 	bl	8003950 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b40      	ldr	r3, [pc, #256]	@ (8004c90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b96:	e00b      	b.n	8004bb0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9e:	1c59      	adds	r1, r3, #1
 8004ba0:	6379      	str	r1, [r7, #52]	@ 0x34
 8004ba2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	09db      	lsrs	r3, r3, #7
 8004bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bb4:	d8f0      	bhi.n	8004b98 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	637a      	str	r2, [r7, #52]	@ 0x34
 8004bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bd0:	e00b      	b.n	8004bea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004bdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	09db      	lsrs	r3, r3, #7
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bee:	d8f0      	bhi.n	8004bd2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	e00b      	b.n	8004c24 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	09db      	lsrs	r3, r3, #7
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c28:	d8f0      	bhi.n	8004c0c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	e00b      	b.n	8004c5e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	1c59      	adds	r1, r3, #1
 8004c4e:	61f9      	str	r1, [r7, #28]
 8004c50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	09db      	lsrs	r3, r3, #7
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c62:	d8f0      	bhi.n	8004c46 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	61fa      	str	r2, [r7, #28]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004c74:	2215      	movs	r2, #21
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	6938      	ldr	r0, [r7, #16]
 8004c7a:	f7fe fe69 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f383 8811 	msr	BASEPRI, r3
}
 8004c84:	bf00      	nop
 8004c86:	3748      	adds	r7, #72	@ 0x48
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	2000cf74 	.word	0x2000cf74
 8004c90:	2000cf44 	.word	0x2000cf44

08004c94 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004c98:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004caa:	4b03      	ldr	r3, [pc, #12]	@ (8004cb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4798      	blx	r3
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000cf44 	.word	0x2000cf44

08004cbc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc8:	f04f 0120 	mov.w	r1, #32
 8004ccc:	f381 8811 	msr	BASEPRI, r1
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	480b      	ldr	r0, [pc, #44]	@ (8004d00 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004cd4:	f7fe fd4e 	bl	8003774 <_PreparePacket>
 8004cd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cda:	2280      	movs	r2, #128	@ 0x80
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	6938      	ldr	r0, [r7, #16]
 8004ce0:	f7fe fd18 	bl	8003714 <_EncodeStr>
 8004ce4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004ce6:	220e      	movs	r2, #14
 8004ce8:	68f9      	ldr	r1, [r7, #12]
 8004cea:	6938      	ldr	r0, [r7, #16]
 8004cec:	f7fe fe30 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f383 8811 	msr	BASEPRI, r3
}
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	2000cf74 	.word	0x2000cf74

08004d04 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004d0a:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01a      	beq.n	8004d48 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004d12:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d015      	beq.n	8004d48 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004d1c:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4798      	blx	r3
 8004d24:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d28:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	000a      	movs	r2, r1
 8004d38:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4621      	mov	r1, r4
 8004d40:	200d      	movs	r0, #13
 8004d42:	f7ff fbe5 	bl	8004510 <SEGGER_SYSVIEW_RecordU32x2>
 8004d46:	e006      	b.n	8004d56 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004d48:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	200c      	movs	r0, #12
 8004d50:	f7ff fba2 	bl	8004498 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	2000cf44 	.word	0x2000cf44
 8004d64:	e0001004 	.word	0xe0001004

08004d68 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d72:	f04f 0120 	mov.w	r1, #32
 8004d76:	f381 8811 	msr	BASEPRI, r1
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	4819      	ldr	r0, [pc, #100]	@ (8004de4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004d7e:	f7fe fcf9 	bl	8003774 <_PreparePacket>
 8004d82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004d88:	4b17      	ldr	r3, [pc, #92]	@ (8004de8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d90:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	e00b      	b.n	8004db4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	6179      	str	r1, [r7, #20]
 8004da6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	09db      	lsrs	r3, r3, #7
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004db8:	d8f0      	bhi.n	8004d9c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	617a      	str	r2, [r7, #20]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004dca:	2202      	movs	r2, #2
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	68b8      	ldr	r0, [r7, #8]
 8004dd0:	f7fe fdbe 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f383 8811 	msr	BASEPRI, r3
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000cf74 	.word	0x2000cf74
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004df2:	f3ef 8311 	mrs	r3, BASEPRI
 8004df6:	f04f 0120 	mov.w	r1, #32
 8004dfa:	f381 8811 	msr	BASEPRI, r1
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	4807      	ldr	r0, [pc, #28]	@ (8004e20 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004e02:	f7fe fcb7 	bl	8003774 <_PreparePacket>
 8004e06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004e08:	2203      	movs	r2, #3
 8004e0a:	6839      	ldr	r1, [r7, #0]
 8004e0c:	6838      	ldr	r0, [r7, #0]
 8004e0e:	f7fe fd9f 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f383 8811 	msr	BASEPRI, r3
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	2000cf74 	.word	0x2000cf74

08004e24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e2e:	f04f 0120 	mov.w	r1, #32
 8004e32:	f381 8811 	msr	BASEPRI, r1
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	4807      	ldr	r0, [pc, #28]	@ (8004e58 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004e3a:	f7fe fc9b 	bl	8003774 <_PreparePacket>
 8004e3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004e40:	2212      	movs	r2, #18
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6838      	ldr	r0, [r7, #0]
 8004e46:	f7fe fd83 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f383 8811 	msr	BASEPRI, r3
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	2000cf74 	.word	0x2000cf74

08004e5c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e62:	f3ef 8311 	mrs	r3, BASEPRI
 8004e66:	f04f 0120 	mov.w	r1, #32
 8004e6a:	f381 8811 	msr	BASEPRI, r1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	4807      	ldr	r0, [pc, #28]	@ (8004e90 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004e72:	f7fe fc7f 	bl	8003774 <_PreparePacket>
 8004e76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004e78:	2211      	movs	r2, #17
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6838      	ldr	r0, [r7, #0]
 8004e7e:	f7fe fd67 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f383 8811 	msr	BASEPRI, r3
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	2000cf74 	.word	0x2000cf74

08004e94 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea0:	f04f 0120 	mov.w	r1, #32
 8004ea4:	f381 8811 	msr	BASEPRI, r1
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	4819      	ldr	r0, [pc, #100]	@ (8004f10 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004eac:	f7fe fc62 	bl	8003774 <_PreparePacket>
 8004eb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004eb6:	4b17      	ldr	r3, [pc, #92]	@ (8004f14 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e00b      	b.n	8004ee2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	1c59      	adds	r1, r3, #1
 8004ed2:	61f9      	str	r1, [r7, #28]
 8004ed4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	09db      	lsrs	r3, r3, #7
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ee6:	d8f0      	bhi.n	8004eca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	61fa      	str	r2, [r7, #28]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004ef8:	2208      	movs	r2, #8
 8004efa:	68f9      	ldr	r1, [r7, #12]
 8004efc:	6938      	ldr	r0, [r7, #16]
 8004efe:	f7fe fd27 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f383 8811 	msr	BASEPRI, r3
}
 8004f08:	bf00      	nop
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	2000cf74 	.word	0x2000cf74
 8004f14:	2000cf44 	.word	0x2000cf44

08004f18 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f20:	f3ef 8311 	mrs	r3, BASEPRI
 8004f24:	f04f 0120 	mov.w	r1, #32
 8004f28:	f381 8811 	msr	BASEPRI, r1
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	4819      	ldr	r0, [pc, #100]	@ (8004f94 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004f30:	f7fe fc20 	bl	8003774 <_PreparePacket>
 8004f34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f3a:	4b17      	ldr	r3, [pc, #92]	@ (8004f98 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	e00b      	b.n	8004f66 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	1c59      	adds	r1, r3, #1
 8004f56:	61f9      	str	r1, [r7, #28]
 8004f58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	09db      	lsrs	r3, r3, #7
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f6a:	d8f0      	bhi.n	8004f4e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	61fa      	str	r2, [r7, #28]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	6938      	ldr	r0, [r7, #16]
 8004f82:	f7fe fce5 	bl	8003950 <_SendPacket>
  RECORD_END();
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f383 8811 	msr	BASEPRI, r3
}
 8004f8c:	bf00      	nop
 8004f8e:	3720      	adds	r7, #32
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	2000cf74 	.word	0x2000cf74
 8004f98:	2000cf44 	.word	0x2000cf44

08004f9c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa8:	f04f 0120 	mov.w	r1, #32
 8004fac:	f381 8811 	msr	BASEPRI, r1
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	4819      	ldr	r0, [pc, #100]	@ (8005018 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004fb4:	f7fe fbde 	bl	8003774 <_PreparePacket>
 8004fb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004fbe:	4b17      	ldr	r3, [pc, #92]	@ (800501c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	e00b      	b.n	8004fea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	1c59      	adds	r1, r3, #1
 8004fda:	61f9      	str	r1, [r7, #28]
 8004fdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	09db      	lsrs	r3, r3, #7
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fee:	d8f0      	bhi.n	8004fd2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	61fa      	str	r2, [r7, #28]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005000:	2206      	movs	r2, #6
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	6938      	ldr	r0, [r7, #16]
 8005006:	f7fe fca3 	bl	8003950 <_SendPacket>
  RECORD_END();
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f383 8811 	msr	BASEPRI, r3
}
 8005010:	bf00      	nop
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	2000cf74 	.word	0x2000cf74
 800501c:	2000cf44 	.word	0x2000cf44

08005020 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	@ 0x28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800502a:	f3ef 8311 	mrs	r3, BASEPRI
 800502e:	f04f 0120 	mov.w	r1, #32
 8005032:	f381 8811 	msr	BASEPRI, r1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	4827      	ldr	r0, [pc, #156]	@ (80050d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800503a:	f7fe fb9b 	bl	8003774 <_PreparePacket>
 800503e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005044:	4b25      	ldr	r3, [pc, #148]	@ (80050dc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	e00b      	b.n	8005070 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	1c59      	adds	r1, r3, #1
 8005060:	6279      	str	r1, [r7, #36]	@ 0x24
 8005062:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	09db      	lsrs	r3, r3, #7
 800506e:	623b      	str	r3, [r7, #32]
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	2b7f      	cmp	r3, #127	@ 0x7f
 8005074:	d8f0      	bhi.n	8005058 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	627a      	str	r2, [r7, #36]	@ 0x24
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e00b      	b.n	80050a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	1c59      	adds	r1, r3, #1
 8005098:	61f9      	str	r1, [r7, #28]
 800509a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	09db      	lsrs	r3, r3, #7
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ac:	d8f0      	bhi.n	8005090 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	61fa      	str	r2, [r7, #28]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80050be:	2207      	movs	r2, #7
 80050c0:	68f9      	ldr	r1, [r7, #12]
 80050c2:	6938      	ldr	r0, [r7, #16]
 80050c4:	f7fe fc44 	bl	8003950 <_SendPacket>
  RECORD_END();
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f383 8811 	msr	BASEPRI, r3
}
 80050ce:	bf00      	nop
 80050d0:	3728      	adds	r7, #40	@ 0x28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	2000cf74 	.word	0x2000cf74
 80050dc:	2000cf44 	.word	0x2000cf44

080050e0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80050e8:	4b04      	ldr	r3, [pc, #16]	@ (80050fc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	1ad3      	subs	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	2000cf44 	.word	0x2000cf44

08005100 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b08c      	sub	sp, #48	@ 0x30
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800510a:	4b40      	ldr	r3, [pc, #256]	@ (800520c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d077      	beq.n	8005202 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005112:	4b3e      	ldr	r3, [pc, #248]	@ (800520c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005118:	2300      	movs	r3, #0
 800511a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800511c:	e008      	b.n	8005130 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800511e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800512a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512c:	3301      	adds	r3, #1
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005134:	429a      	cmp	r2, r3
 8005136:	d3f2      	bcc.n	800511e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005138:	e000      	b.n	800513c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800513a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d055      	beq.n	80051ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005142:	f3ef 8311 	mrs	r3, BASEPRI
 8005146:	f04f 0120 	mov.w	r1, #32
 800514a:	f381 8811 	msr	BASEPRI, r1
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	482f      	ldr	r0, [pc, #188]	@ (8005210 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005152:	f7fe fb0f 	bl	8003774 <_PreparePacket>
 8005156:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	e00b      	b.n	800517e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	1c59      	adds	r1, r3, #1
 800516e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005170:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	09db      	lsrs	r3, r3, #7
 800517c:	623b      	str	r3, [r7, #32]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	2b7f      	cmp	r3, #127	@ 0x7f
 8005182:	d8f0      	bhi.n	8005166 <SEGGER_SYSVIEW_SendModule+0x66>
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	627a      	str	r2, [r7, #36]	@ 0x24
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e00b      	b.n	80051b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	1c59      	adds	r1, r3, #1
 80051a8:	61f9      	str	r1, [r7, #28]
 80051aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	09db      	lsrs	r3, r3, #7
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80051bc:	d8f0      	bhi.n	80051a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	61fa      	str	r2, [r7, #28]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2280      	movs	r2, #128	@ 0x80
 80051d4:	4619      	mov	r1, r3
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7fe fa9c 	bl	8003714 <_EncodeStr>
 80051dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80051de:	2216      	movs	r2, #22
 80051e0:	68f9      	ldr	r1, [r7, #12]
 80051e2:	6938      	ldr	r0, [r7, #16]
 80051e4:	f7fe fbb4 	bl	8003950 <_SendPacket>
      RECORD_END();
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d006      	beq.n	8005202 <SEGGER_SYSVIEW_SendModule+0x102>
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80051fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4798      	blx	r3
    }
  }
}
 8005202:	bf00      	nop
 8005204:	3730      	adds	r7, #48	@ 0x30
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	2000cf6c 	.word	0x2000cf6c
 8005210:	2000cf74 	.word	0x2000cf74

08005214 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800521a:	4b0c      	ldr	r3, [pc, #48]	@ (800524c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00f      	beq.n	8005242 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005222:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f2      	bne.n	8005228 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	2000cf6c 	.word	0x2000cf6c

08005250 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005256:	f3ef 8311 	mrs	r3, BASEPRI
 800525a:	f04f 0120 	mov.w	r1, #32
 800525e:	f381 8811 	msr	BASEPRI, r1
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	4817      	ldr	r0, [pc, #92]	@ (80052c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005266:	f7fe fa85 	bl	8003774 <_PreparePacket>
 800526a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e00b      	b.n	8005294 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	1c59      	adds	r1, r3, #1
 8005284:	6179      	str	r1, [r7, #20]
 8005286:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	09db      	lsrs	r3, r3, #7
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b7f      	cmp	r3, #127	@ 0x7f
 8005298:	d8f0      	bhi.n	800527c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	617a      	str	r2, [r7, #20]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80052aa:	221b      	movs	r2, #27
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	68b8      	ldr	r0, [r7, #8]
 80052b0:	f7fe fb4e 	bl	8003950 <_SendPacket>
  RECORD_END();
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f383 8811 	msr	BASEPRI, r3
}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	2000cf74 	.word	0x2000cf74
 80052c8:	2000cf70 	.word	0x2000cf70

080052cc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80052cc:	b40f      	push	{r0, r1, r2, r3}
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80052d4:	f107 0314 	add.w	r3, r7, #20
 80052d8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80052da:	1d3b      	adds	r3, r7, #4
 80052dc:	461a      	mov	r2, r3
 80052de:	2100      	movs	r1, #0
 80052e0:	6938      	ldr	r0, [r7, #16]
 80052e2:	f7fe fe47 	bl	8003f74 <_VPrintTarget>
  va_end(ParamList);
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052f0:	b004      	add	sp, #16
 80052f2:	4770      	bx	lr

080052f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005300:	f04f 0120 	mov.w	r1, #32
 8005304:	f381 8811 	msr	BASEPRI, r1
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	4827      	ldr	r0, [pc, #156]	@ (80053a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800530c:	f7fe fa32 	bl	8003774 <_PreparePacket>
 8005310:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005312:	2280      	movs	r2, #128	@ 0x80
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	6938      	ldr	r0, [r7, #16]
 8005318:	f7fe f9fc 	bl	8003714 <_EncodeStr>
 800531c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
 8005322:	2301      	movs	r3, #1
 8005324:	623b      	str	r3, [r7, #32]
 8005326:	e00b      	b.n	8005340 <SEGGER_SYSVIEW_Warn+0x4c>
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	1c59      	adds	r1, r3, #1
 8005330:	6279      	str	r1, [r7, #36]	@ 0x24
 8005332:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	09db      	lsrs	r3, r3, #7
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	2b7f      	cmp	r3, #127	@ 0x7f
 8005344:	d8f0      	bhi.n	8005328 <SEGGER_SYSVIEW_Warn+0x34>
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	627a      	str	r2, [r7, #36]	@ 0x24
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e00b      	b.n	8005378 <SEGGER_SYSVIEW_Warn+0x84>
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	61f9      	str	r1, [r7, #28]
 800536a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	09db      	lsrs	r3, r3, #7
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b7f      	cmp	r3, #127	@ 0x7f
 800537c:	d8f0      	bhi.n	8005360 <SEGGER_SYSVIEW_Warn+0x6c>
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	61fa      	str	r2, [r7, #28]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800538e:	221a      	movs	r2, #26
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	6938      	ldr	r0, [r7, #16]
 8005394:	f7fe fadc 	bl	8003950 <_SendPacket>
  RECORD_END();
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f383 8811 	msr	BASEPRI, r3
}
 800539e:	bf00      	nop
 80053a0:	3728      	adds	r7, #40	@ 0x28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2000cf74 	.word	0x2000cf74

080053ac <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80053b0:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053b2:	7e1b      	ldrb	r3, [r3, #24]
 80053b4:	4619      	mov	r1, r3
 80053b6:	4a13      	ldr	r2, [pc, #76]	@ (8005404 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80053b8:	460b      	mov	r3, r1
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	440b      	add	r3, r1
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	336c      	adds	r3, #108	@ 0x6c
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053c8:	7e1b      	ldrb	r3, [r3, #24]
 80053ca:	4618      	mov	r0, r3
 80053cc:	490d      	ldr	r1, [pc, #52]	@ (8005404 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80053ce:	4603      	mov	r3, r0
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	4403      	add	r3, r0
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	440b      	add	r3, r1
 80053d8:	3370      	adds	r3, #112	@ 0x70
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d00b      	beq.n	80053f8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053e0:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053e2:	789b      	ldrb	r3, [r3, #2]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053e8:	4b05      	ldr	r3, [pc, #20]	@ (8005400 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053ee:	f7fe f9cd 	bl	800378c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80053f2:	4b03      	ldr	r3, [pc, #12]	@ (8005400 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80053f8:	4b01      	ldr	r3, [pc, #4]	@ (8005400 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	2000cf44 	.word	0x2000cf44
 8005404:	2000ba84 	.word	0x2000ba84

08005408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005416:	2b00      	cmp	r3, #0
 8005418:	db0b      	blt.n	8005432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	f003 021f 	and.w	r2, r3, #31
 8005420:	4907      	ldr	r1, [pc, #28]	@ (8005440 <__NVIC_EnableIRQ+0x38>)
 8005422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2001      	movs	r0, #1
 800542a:	fa00 f202 	lsl.w	r2, r0, r2
 800542e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000e100 	.word	0xe000e100

08005444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005454:	2b00      	cmp	r3, #0
 8005456:	db0a      	blt.n	800546e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	490c      	ldr	r1, [pc, #48]	@ (8005490 <__NVIC_SetPriority+0x4c>)
 800545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	440b      	add	r3, r1
 8005468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800546c:	e00a      	b.n	8005484 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	4908      	ldr	r1, [pc, #32]	@ (8005494 <__NVIC_SetPriority+0x50>)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	3b04      	subs	r3, #4
 800547c:	0112      	lsls	r2, r2, #4
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	440b      	add	r3, r1
 8005482:	761a      	strb	r2, [r3, #24]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000e100 	.word	0xe000e100
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800549e:	f7ff ff85 	bl	80053ac <SEGGER_SYSVIEW_IsStarted>
 80054a2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80054aa:	f7ff f993 	bl	80047d4 <SEGGER_SYSVIEW_Start>
  }
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80054c2:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <_cbOnUARTRx+0x3c>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d806      	bhi.n	80054d8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80054ca:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <_cbOnUARTRx+0x3c>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	3301      	adds	r3, #1
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	4b08      	ldr	r3, [pc, #32]	@ (80054f4 <_cbOnUARTRx+0x3c>)
 80054d4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80054d6:	e009      	b.n	80054ec <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80054d8:	f7ff ffde 	bl	8005498 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80054dc:	4b05      	ldr	r3, [pc, #20]	@ (80054f4 <_cbOnUARTRx+0x3c>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	1dfb      	adds	r3, r7, #7
 80054e4:	2201      	movs	r2, #1
 80054e6:	4619      	mov	r1, r3
 80054e8:	f7fe f81e 	bl	8003528 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80054ec:	bf00      	nop
}
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20000008 	.word	0x20000008

080054f8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005500:	4b14      	ldr	r3, [pc, #80]	@ (8005554 <_cbOnUARTTx+0x5c>)
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	2b03      	cmp	r3, #3
 8005506:	d80f      	bhi.n	8005528 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005508:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <_cbOnUARTTx+0x5c>)
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	461a      	mov	r2, r3
 800550e:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <_cbOnUARTTx+0x60>)
 8005510:	5c9a      	ldrb	r2, [r3, r2]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005516:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <_cbOnUARTTx+0x5c>)
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	3301      	adds	r3, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	4b0d      	ldr	r3, [pc, #52]	@ (8005554 <_cbOnUARTTx+0x5c>)
 8005520:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005522:	2301      	movs	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005526:	e00f      	b.n	8005548 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005528:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <_cbOnUARTTx+0x5c>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fd fe9d 	bl	8003270 <SEGGER_RTT_ReadUpBufferNoLock>
 8005536:	4603      	mov	r3, r0
 8005538:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da02      	bge.n	8005546 <_cbOnUARTTx+0x4e>
    r = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e000      	b.n	8005548 <_cbOnUARTTx+0x50>
  }
Done:
 8005546:	bf00      	nop
  return r;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000008 	.word	0x20000008
 8005558:	080077d4 	.word	0x080077d4

0800555c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005564:	4a04      	ldr	r2, [pc, #16]	@ (8005578 <SEGGER_UART_init+0x1c>)
 8005566:	4905      	ldr	r1, [pc, #20]	@ (800557c <SEGGER_UART_init+0x20>)
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f865 	bl	8005638 <HIF_UART_Init>
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	080054b9 	.word	0x080054b9
 800557c:	080054f9 	.word	0x080054f9

08005580 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005586:	4b1e      	ldr	r3, [pc, #120]	@ (8005600 <USART2_IRQHandler+0x80>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	d011      	beq.n	80055ba <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8005596:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <USART2_IRQHandler+0x84>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 030b 	and.w	r3, r3, #11
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d108      	bne.n	80055ba <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80055a8:	4b17      	ldr	r3, [pc, #92]	@ (8005608 <USART2_IRQHandler+0x88>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80055b0:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <USART2_IRQHandler+0x88>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	79fa      	ldrb	r2, [r7, #7]
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01a      	beq.n	80055fa <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80055c4:	4b11      	ldr	r3, [pc, #68]	@ (800560c <USART2_IRQHandler+0x8c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d015      	beq.n	80055f8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80055cc:	4b0f      	ldr	r3, [pc, #60]	@ (800560c <USART2_IRQHandler+0x8c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	1dfa      	adds	r2, r7, #7
 80055d2:	4610      	mov	r0, r2
 80055d4:	4798      	blx	r3
 80055d6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80055de:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <USART2_IRQHandler+0x90>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005610 <USART2_IRQHandler+0x90>)
 80055e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e006      	b.n	80055fa <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80055ec:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <USART2_IRQHandler+0x80>)
 80055ee:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 80055f0:	79fa      	ldrb	r2, [r7, #7]
 80055f2:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <USART2_IRQHandler+0x94>)
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e000      	b.n	80055fa <USART2_IRQHandler+0x7a>
      return;
 80055f8:	bf00      	nop
    }
  }
}
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	4000441c 	.word	0x4000441c
 8005604:	40004424 	.word	0x40004424
 8005608:	2000d058 	.word	0x2000d058
 800560c:	2000d05c 	.word	0x2000d05c
 8005610:	40004400 	.word	0x40004400
 8005614:	40004428 	.word	0x40004428

08005618 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800561c:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a04      	ldr	r2, [pc, #16]	@ (8005634 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005626:	6013      	str	r3, [r2, #0]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40004400 	.word	0x40004400

08005638 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //


  RCC_APB1ENR |= RCC_APB1ENR_USART2EN;        // Enable USART2 clock
 8005644:	4b2e      	ldr	r3, [pc, #184]	@ (8005700 <HIF_UART_Init+0xc8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2d      	ldr	r2, [pc, #180]	@ (8005700 <HIF_UART_Init+0xc8>)
 800564a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800564e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= RCC_AHB1ENR_GPIODEN;        // Enable IO port D clock
 8005650:	4b2c      	ldr	r3, [pc, #176]	@ (8005704 <HIF_UART_Init+0xcc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2b      	ldr	r2, [pc, #172]	@ (8005704 <HIF_UART_Init+0xcc>)
 8005656:	f043 0308 	orr.w	r3, r3, #8
 800565a:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRL;
 800565c:	4b2a      	ldr	r3, [pc, #168]	@ (8005708 <HIF_UART_Init+0xd0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8005668:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f043 63ee 	orr.w	r3, r3, #124780544	@ 0x7700000
 8005670:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005672:	4a25      	ldr	r2, [pc, #148]	@ (8005708 <HIF_UART_Init+0xd0>)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005678:	4b24      	ldr	r3, [pc, #144]	@ (800570c <HIF_UART_Init+0xd4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8005684:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800568c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800568e:	4a1f      	ldr	r2, [pc, #124]	@ (800570c <HIF_UART_Init+0xd4>)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005694:	4b1e      	ldr	r3, [pc, #120]	@ (8005710 <HIF_UART_Init+0xd8>)
 8005696:	f248 022d 	movw	r2, #32813	@ 0x802d
 800569a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800569c:	4b1d      	ldr	r3, [pc, #116]	@ (8005714 <HIF_UART_Init+0xdc>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
            | (0 << 12)
			| (0 << 13)							// STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80056a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005718 <HIF_UART_Init+0xe0>)
 80056a4:	2280      	movs	r2, #128	@ 0x80
 80056a6:	601a      	str	r2, [r3, #0]
  //
  // Set baudrate


  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80056ae:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <HIF_UART_Init+0xe4>)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c6:	d302      	bcc.n	80056ce <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80056c8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80056cc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	4a11      	ldr	r2, [pc, #68]	@ (8005720 <HIF_UART_Init+0xe8>)
 80056da:	b29b      	uxth	r3, r3
 80056dc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80056de:	4a11      	ldr	r2, [pc, #68]	@ (8005724 <HIF_UART_Init+0xec>)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80056e4:	4a10      	ldr	r2, [pc, #64]	@ (8005728 <HIF_UART_Init+0xf0>)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80056ea:	2106      	movs	r1, #6
 80056ec:	2026      	movs	r0, #38	@ 0x26
 80056ee:	f7ff fea9 	bl	8005444 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80056f2:	2026      	movs	r0, #38	@ 0x26
 80056f4:	f7ff fe88 	bl	8005408 <__NVIC_EnableIRQ>
}
 80056f8:	bf00      	nop
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40023840 	.word	0x40023840
 8005704:	40023830 	.word	0x40023830
 8005708:	40020c20 	.word	0x40020c20
 800570c:	40020c00 	.word	0x40020c00
 8005710:	40004400 	.word	0x40004400
 8005714:	40004404 	.word	0x40004404
 8005718:	40004408 	.word	0x40004408
 800571c:	0501bd00 	.word	0x0501bd00
 8005720:	4000440c 	.word	0x4000440c
 8005724:	2000d058 	.word	0x2000d058
 8005728:	2000d05c 	.word	0x2000d05c

0800572c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005732:	f000 fb2a 	bl	8005d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005736:	f000 f86b 	bl	8005810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800573a:	f000 f8d3 	bl	80058e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800573e:	4b29      	ldr	r3, [pc, #164]	@ (80057e4 <main+0xb8>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	4a28      	ldr	r2, [pc, #160]	@ (80057e4 <main+0xb8>)
 8005744:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005748:	60d3      	str	r3, [r2, #12]

     DWT->LAR = 0xC5ACCE55;
 800574a:	4b27      	ldr	r3, [pc, #156]	@ (80057e8 <main+0xbc>)
 800574c:	4a27      	ldr	r2, [pc, #156]	@ (80057ec <main+0xc0>)
 800574e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0

     DWT->CYCCNT = 0;
 8005752:	4b25      	ldr	r3, [pc, #148]	@ (80057e8 <main+0xbc>)
 8005754:	2200      	movs	r2, #0
 8005756:	605a      	str	r2, [r3, #4]

     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005758:	4b23      	ldr	r3, [pc, #140]	@ (80057e8 <main+0xbc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a22      	ldr	r2, [pc, #136]	@ (80057e8 <main+0xbc>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6013      	str	r3, [r2, #0]
  SEGGER_UART_init(250000);
 8005764:	4822      	ldr	r0, [pc, #136]	@ (80057f0 <main+0xc4>)
 8005766:	f7ff fef9 	bl	800555c <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 800576a:	f7fd fb33 	bl	8002dd4 <SEGGER_SYSVIEW_Conf>
  status=  xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 2,&task1_handle);
 800576e:	f107 0308 	add.w	r3, r7, #8
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	2302      	movs	r3, #2
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	2300      	movs	r3, #0
 800577a:	22c8      	movs	r2, #200	@ 0xc8
 800577c:	491d      	ldr	r1, [pc, #116]	@ (80057f4 <main+0xc8>)
 800577e:	481e      	ldr	r0, [pc, #120]	@ (80057f8 <main+0xcc>)
 8005780:	f7fb fce0 	bl	8001144 <xTaskCreate>
 8005784:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d003      	beq.n	8005794 <main+0x68>
 800578c:	491b      	ldr	r1, [pc, #108]	@ (80057fc <main+0xd0>)
 800578e:	206e      	movs	r0, #110	@ 0x6e
 8005790:	f000 f9d0 	bl	8005b34 <vAssertCalled>
  status=  xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 2,&task2_handle);
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	2302      	movs	r3, #2
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	2300      	movs	r3, #0
 800579e:	22c8      	movs	r2, #200	@ 0xc8
 80057a0:	4917      	ldr	r1, [pc, #92]	@ (8005800 <main+0xd4>)
 80057a2:	4818      	ldr	r0, [pc, #96]	@ (8005804 <main+0xd8>)
 80057a4:	f7fb fcce 	bl	8001144 <xTaskCreate>
 80057a8:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d003      	beq.n	80057b8 <main+0x8c>
 80057b0:	4912      	ldr	r1, [pc, #72]	@ (80057fc <main+0xd0>)
 80057b2:	2070      	movs	r0, #112	@ 0x70
 80057b4:	f000 f9be 	bl	8005b34 <vAssertCalled>
  status=  xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 2,&task3_handle);
 80057b8:	463b      	mov	r3, r7
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	2302      	movs	r3, #2
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	2300      	movs	r3, #0
 80057c2:	22c8      	movs	r2, #200	@ 0xc8
 80057c4:	4910      	ldr	r1, [pc, #64]	@ (8005808 <main+0xdc>)
 80057c6:	4811      	ldr	r0, [pc, #68]	@ (800580c <main+0xe0>)
 80057c8:	f7fb fcbc 	bl	8001144 <xTaskCreate>
 80057cc:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d003      	beq.n	80057dc <main+0xb0>
 80057d4:	4909      	ldr	r1, [pc, #36]	@ (80057fc <main+0xd0>)
 80057d6:	2072      	movs	r0, #114	@ 0x72
 80057d8:	f000 f9ac 	bl	8005b34 <vAssertCalled>
  vTaskStartScheduler();
 80057dc:	f7fb fe12 	bl	8001404 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <main+0xb4>
 80057e4:	e000edf0 	.word	0xe000edf0
 80057e8:	e0001000 	.word	0xe0001000
 80057ec:	c5acce55 	.word	0xc5acce55
 80057f0:	0003d090 	.word	0x0003d090
 80057f4:	0800771c 	.word	0x0800771c
 80057f8:	08005ab1 	.word	0x08005ab1
 80057fc:	0800772c 	.word	0x0800772c
 8005800:	08007740 	.word	0x08007740
 8005804:	08005b09 	.word	0x08005b09
 8005808:	08007750 	.word	0x08007750
 800580c:	08005add 	.word	0x08005add

08005810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b094      	sub	sp, #80	@ 0x50
 8005814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005816:	f107 031c 	add.w	r3, r7, #28
 800581a:	2234      	movs	r2, #52	@ 0x34
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f001 fd9c 	bl	800735c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005824:	f107 0308 	add.w	r3, r7, #8
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	609a      	str	r2, [r3, #8]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005834:	4b29      	ldr	r3, [pc, #164]	@ (80058dc <SystemClock_Config+0xcc>)
 8005836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005838:	4a28      	ldr	r2, [pc, #160]	@ (80058dc <SystemClock_Config+0xcc>)
 800583a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800583e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005840:	4b26      	ldr	r3, [pc, #152]	@ (80058dc <SystemClock_Config+0xcc>)
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800584c:	4b24      	ldr	r3, [pc, #144]	@ (80058e0 <SystemClock_Config+0xd0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005854:	4a22      	ldr	r2, [pc, #136]	@ (80058e0 <SystemClock_Config+0xd0>)
 8005856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b20      	ldr	r3, [pc, #128]	@ (80058e0 <SystemClock_Config+0xd0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005868:	2301      	movs	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800586c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005872:	2302      	movs	r3, #2
 8005874:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800587a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800587c:	2304      	movs	r3, #4
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005880:	23a8      	movs	r3, #168	@ 0xa8
 8005882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005884:	2302      	movs	r3, #2
 8005886:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005888:	2304      	movs	r3, #4
 800588a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800588c:	2302      	movs	r3, #2
 800588e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005890:	f107 031c 	add.w	r3, r7, #28
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fd8b 	bl	80063b0 <HAL_RCC_OscConfig>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80058a0:	f000 f96e 	bl	8005b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058a4:	230f      	movs	r3, #15
 80058a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058a8:	2302      	movs	r3, #2
 80058aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80058b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80058bc:	f107 0308 	add.w	r3, r7, #8
 80058c0:	2105      	movs	r1, #5
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 f822 	bl	800690c <HAL_RCC_ClockConfig>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80058ce:	f000 f957 	bl	8005b80 <Error_Handler>
  }
}
 80058d2:	bf00      	nop
 80058d4:	3750      	adds	r7, #80	@ 0x50
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800
 80058e0:	40007000 	.word	0x40007000

080058e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	@ 0x28
 80058e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ea:	f107 0314 	add.w	r3, r7, #20
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	605a      	str	r2, [r3, #4]
 80058f4:	609a      	str	r2, [r3, #8]
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058fa:	4b68      	ldr	r3, [pc, #416]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fe:	4a67      	ldr	r2, [pc, #412]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005900:	f043 0304 	orr.w	r3, r3, #4
 8005904:	6313      	str	r3, [r2, #48]	@ 0x30
 8005906:	4b65      	ldr	r3, [pc, #404]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005912:	4b62      	ldr	r3, [pc, #392]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005916:	4a61      	ldr	r2, [pc, #388]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591c:	6313      	str	r3, [r2, #48]	@ 0x30
 800591e:	4b5f      	ldr	r3, [pc, #380]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800592a:	4b5c      	ldr	r3, [pc, #368]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	6313      	str	r3, [r2, #48]	@ 0x30
 8005936:	4b59      	ldr	r3, [pc, #356]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005942:	4b56      	ldr	r3, [pc, #344]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005946:	4a55      	ldr	r2, [pc, #340]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005948:	f043 0302 	orr.w	r3, r3, #2
 800594c:	6313      	str	r3, [r2, #48]	@ 0x30
 800594e:	4b53      	ldr	r3, [pc, #332]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800595a:	4b50      	ldr	r3, [pc, #320]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	4a4f      	ldr	r2, [pc, #316]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005964:	6313      	str	r3, [r2, #48]	@ 0x30
 8005966:	4b4d      	ldr	r3, [pc, #308]	@ (8005a9c <MX_GPIO_Init+0x1b8>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005972:	2200      	movs	r2, #0
 8005974:	f244 0181 	movw	r1, #16513	@ 0x4081
 8005978:	4849      	ldr	r0, [pc, #292]	@ (8005aa0 <MX_GPIO_Init+0x1bc>)
 800597a:	f000 fce5 	bl	8006348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800597e:	2200      	movs	r2, #0
 8005980:	2140      	movs	r1, #64	@ 0x40
 8005982:	4848      	ldr	r0, [pc, #288]	@ (8005aa4 <MX_GPIO_Init+0x1c0>)
 8005984:	f000 fce0 	bl	8006348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800598c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800598e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005998:	f107 0314 	add.w	r3, r7, #20
 800599c:	4619      	mov	r1, r3
 800599e:	4842      	ldr	r0, [pc, #264]	@ (8005aa8 <MX_GPIO_Init+0x1c4>)
 80059a0:	f000 fb26 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80059a4:	2332      	movs	r3, #50	@ 0x32
 80059a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a8:	2302      	movs	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b0:	2303      	movs	r3, #3
 80059b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80059b4:	230b      	movs	r3, #11
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	4619      	mov	r1, r3
 80059be:	483a      	ldr	r0, [pc, #232]	@ (8005aa8 <MX_GPIO_Init+0x1c4>)
 80059c0:	f000 fb16 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80059c4:	2386      	movs	r3, #134	@ 0x86
 80059c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c8:	2302      	movs	r3, #2
 80059ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d0:	2303      	movs	r3, #3
 80059d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80059d4:	230b      	movs	r3, #11
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059d8:	f107 0314 	add.w	r3, r7, #20
 80059dc:	4619      	mov	r1, r3
 80059de:	4833      	ldr	r0, [pc, #204]	@ (8005aac <MX_GPIO_Init+0x1c8>)
 80059e0:	f000 fb06 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80059e4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80059e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ea:	2301      	movs	r3, #1
 80059ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f2:	2300      	movs	r3, #0
 80059f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f6:	f107 0314 	add.w	r3, r7, #20
 80059fa:	4619      	mov	r1, r3
 80059fc:	4828      	ldr	r0, [pc, #160]	@ (8005aa0 <MX_GPIO_Init+0x1bc>)
 80059fe:	f000 faf7 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a10:	2303      	movs	r3, #3
 8005a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a14:	230b      	movs	r3, #11
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005a18:	f107 0314 	add.w	r3, r7, #20
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4820      	ldr	r0, [pc, #128]	@ (8005aa0 <MX_GPIO_Init+0x1bc>)
 8005a20:	f000 fae6 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005a24:	2340      	movs	r3, #64	@ 0x40
 8005a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a30:	2300      	movs	r3, #0
 8005a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	4619      	mov	r1, r3
 8005a3a:	481a      	ldr	r0, [pc, #104]	@ (8005aa4 <MX_GPIO_Init+0x1c0>)
 8005a3c:	f000 fad8 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005a40:	2380      	movs	r3, #128	@ 0x80
 8005a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	4619      	mov	r1, r3
 8005a52:	4814      	ldr	r0, [pc, #80]	@ (8005aa4 <MX_GPIO_Init+0x1c0>)
 8005a54:	f000 facc 	bl	8005ff0 <HAL_GPIO_Init>



  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005a58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005a66:	f107 0314 	add.w	r3, r7, #20
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	480f      	ldr	r0, [pc, #60]	@ (8005aac <MX_GPIO_Init+0x1c8>)
 8005a6e:	f000 fabf 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005a72:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a80:	2303      	movs	r3, #3
 8005a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a84:	230b      	movs	r3, #11
 8005a86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a88:	f107 0314 	add.w	r3, r7, #20
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4805      	ldr	r0, [pc, #20]	@ (8005aa4 <MX_GPIO_Init+0x1c0>)
 8005a90:	f000 faae 	bl	8005ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005a94:	bf00      	nop
 8005a96:	3728      	adds	r7, #40	@ 0x28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40020400 	.word	0x40020400
 8005aa4:	40021800 	.word	0x40021800
 8005aa8:	40020800 	.word	0x40020800
 8005aac:	40020000 	.word	0x40020000

08005ab0 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8005ab8:	4806      	ldr	r0, [pc, #24]	@ (8005ad4 <led_green_handler+0x24>)
 8005aba:	f7ff fc07 	bl	80052cc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN);
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4805      	ldr	r0, [pc, #20]	@ (8005ad8 <led_green_handler+0x28>)
 8005ac2:	f000 fc5a 	bl	800637a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8005ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005aca:	f000 f98b 	bl	8005de4 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8005ace:	bf00      	nop
 8005ad0:	e7f2      	b.n	8005ab8 <led_green_handler+0x8>
 8005ad2:	bf00      	nop
 8005ad4:	08007760 	.word	0x08007760
 8005ad8:	40020400 	.word	0x40020400

08005adc <led_red_handler>:
	}
}
static void led_red_handler(void* parameters)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8005ae4:	4806      	ldr	r0, [pc, #24]	@ (8005b00 <led_red_handler+0x24>)
 8005ae6:	f7ff fbf1 	bl	80052cc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED_RED);
 8005aea:	2180      	movs	r1, #128	@ 0x80
 8005aec:	4805      	ldr	r0, [pc, #20]	@ (8005b04 <led_red_handler+0x28>)
 8005aee:	f000 fc44 	bl	800637a <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8005af2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8005af6:	f000 f975 	bl	8005de4 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8005afa:	bf00      	nop
 8005afc:	e7f2      	b.n	8005ae4 <led_red_handler+0x8>
 8005afe:	bf00      	nop
 8005b00:	08007774 	.word	0x08007774
 8005b04:	40020400 	.word	0x40020400

08005b08 <led_blue_handler>:
	}
}
static void led_blue_handler(void* parameters)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	while(1)
	{	SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8005b10:	4806      	ldr	r0, [pc, #24]	@ (8005b2c <led_blue_handler+0x24>)
 8005b12:	f7ff fbdb 	bl	80052cc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED_BLUE);
 8005b16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005b1a:	4805      	ldr	r0, [pc, #20]	@ (8005b30 <led_blue_handler+0x28>)
 8005b1c:	f000 fc2d 	bl	800637a <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8005b20:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8005b24:	f000 f95e 	bl	8005de4 <HAL_Delay>
	{	SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8005b28:	bf00      	nop
 8005b2a:	e7f1      	b.n	8005b10 <led_blue_handler+0x8>
 8005b2c:	08007788 	.word	0x08007788
 8005b30:	40020400 	.word	0x40020400

08005b34 <vAssertCalled>:
	}
}
void vAssertCalled( unsigned long ulLine, const char * const pcFileName )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
//static portBASE_TYPE xPrinted = pdFALSE;
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]

    /* Parameters are not used. */
    ( void ) ulLine;
    ( void ) pcFileName;

    taskENTER_CRITICAL();
 8005b42:	f7fc fe41 	bl	80027c8 <vPortEnterCritical>
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 1 )
 8005b46:	bf00      	nop
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d0fc      	beq.n	8005b48 <vAssertCalled+0x14>
        {
        }
    }
    taskEXIT_CRITICAL();
 8005b4e:	f7fc fe65 	bl	800281c <vPortExitCritical>
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a04      	ldr	r2, [pc, #16]	@ (8005b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005b6e:	f000 f919 	bl	8005da4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40001000 	.word	0x40001000

08005b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b84:	b672      	cpsid	i
}
 8005b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b88:	bf00      	nop
 8005b8a:	e7fd      	b.n	8005b88 <Error_Handler+0x8>

08005b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b92:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <HAL_MspInit+0x44>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd0 <HAL_MspInit+0x44>)
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <HAL_MspInit+0x44>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005baa:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <HAL_MspInit+0x44>)
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	4a08      	ldr	r2, [pc, #32]	@ (8005bd0 <HAL_MspInit+0x44>)
 8005bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bb6:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <HAL_MspInit+0x44>)
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8005bc2:	f7fc fd8b 	bl	80026dc <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40023800 	.word	0x40023800

08005bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	@ 0x38
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005be4:	4b33      	ldr	r3, [pc, #204]	@ (8005cb4 <HAL_InitTick+0xe0>)
 8005be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be8:	4a32      	ldr	r2, [pc, #200]	@ (8005cb4 <HAL_InitTick+0xe0>)
 8005bea:	f043 0310 	orr.w	r3, r3, #16
 8005bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bf0:	4b30      	ldr	r3, [pc, #192]	@ (8005cb4 <HAL_InitTick+0xe0>)
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005bfc:	f107 0210 	add.w	r2, r7, #16
 8005c00:	f107 0314 	add.w	r3, r7, #20
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 f892 	bl	8006d30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005c16:	f001 f877 	bl	8006d08 <HAL_RCC_GetPCLK1Freq>
 8005c1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c1c:	e004      	b.n	8005c28 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005c1e:	f001 f873 	bl	8006d08 <HAL_RCC_GetPCLK1Freq>
 8005c22:	4603      	mov	r3, r0
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2a:	4a23      	ldr	r2, [pc, #140]	@ (8005cb8 <HAL_InitTick+0xe4>)
 8005c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c30:	0c9b      	lsrs	r3, r3, #18
 8005c32:	3b01      	subs	r3, #1
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005c36:	4b21      	ldr	r3, [pc, #132]	@ (8005cbc <HAL_InitTick+0xe8>)
 8005c38:	4a21      	ldr	r2, [pc, #132]	@ (8005cc0 <HAL_InitTick+0xec>)
 8005c3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cbc <HAL_InitTick+0xe8>)
 8005c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005c42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005c44:	4a1d      	ldr	r2, [pc, #116]	@ (8005cbc <HAL_InitTick+0xe8>)
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005cbc <HAL_InitTick+0xe8>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c50:	4b1a      	ldr	r3, [pc, #104]	@ (8005cbc <HAL_InitTick+0xe8>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c56:	4b19      	ldr	r3, [pc, #100]	@ (8005cbc <HAL_InitTick+0xe8>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005c5c:	4817      	ldr	r0, [pc, #92]	@ (8005cbc <HAL_InitTick+0xe8>)
 8005c5e:	f001 f899 	bl	8006d94 <HAL_TIM_Base_Init>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005c70:	4812      	ldr	r0, [pc, #72]	@ (8005cbc <HAL_InitTick+0xe8>)
 8005c72:	f001 f8f1 	bl	8006e58 <HAL_TIM_Base_Start_IT>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d111      	bne.n	8005ca8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c84:	2036      	movs	r0, #54	@ 0x36
 8005c86:	f000 f9a5 	bl	8005fd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d808      	bhi.n	8005ca2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005c90:	2200      	movs	r2, #0
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	2036      	movs	r0, #54	@ 0x36
 8005c96:	f000 f981 	bl	8005f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc4 <HAL_InitTick+0xf0>)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e002      	b.n	8005ca8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3738      	adds	r7, #56	@ 0x38
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	431bde83 	.word	0x431bde83
 8005cbc:	2000d060 	.word	0x2000d060
 8005cc0:	40001000 	.word	0x40001000
 8005cc4:	20000014 	.word	0x20000014

08005cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <NMI_Handler+0x4>

08005cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <HardFault_Handler+0x4>

08005cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <MemManage_Handler+0x4>

08005ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ce4:	bf00      	nop
 8005ce6:	e7fd      	b.n	8005ce4 <BusFault_Handler+0x4>

08005ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <UsageFault_Handler+0x4>

08005cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005d04:	4802      	ldr	r0, [pc, #8]	@ (8005d10 <TIM6_DAC_IRQHandler+0x10>)
 8005d06:	f001 f91f 	bl	8006f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005d0a:	bf00      	nop
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	2000d060 	.word	0x2000d060

08005d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d18:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <SystemInit+0x20>)
 8005d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1e:	4a05      	ldr	r2, [pc, #20]	@ (8005d34 <SystemInit+0x20>)
 8005d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	e000ed00 	.word	0xe000ed00

08005d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005d3c:	f7ff ffea 	bl	8005d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d40:	480c      	ldr	r0, [pc, #48]	@ (8005d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d42:	490d      	ldr	r1, [pc, #52]	@ (8005d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d44:	4a0d      	ldr	r2, [pc, #52]	@ (8005d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d48:	e002      	b.n	8005d50 <LoopCopyDataInit>

08005d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d4e:	3304      	adds	r3, #4

08005d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d54:	d3f9      	bcc.n	8005d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d56:	4a0a      	ldr	r2, [pc, #40]	@ (8005d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005d58:	4c0a      	ldr	r4, [pc, #40]	@ (8005d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d5c:	e001      	b.n	8005d62 <LoopFillZerobss>

08005d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d60:	3204      	adds	r2, #4

08005d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d64:	d3fb      	bcc.n	8005d5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005d66:	f001 fb01 	bl	800736c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d6a:	f7ff fcdf 	bl	800572c <main>
  bx  lr    
 8005d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d78:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8005d7c:	08007800 	.word	0x08007800
  ldr r2, =_sbss
 8005d80:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8005d84:	2000d0b0 	.word	0x2000d0b0

08005d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d88:	e7fe      	b.n	8005d88 <ADC_IRQHandler>

08005d8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d8e:	2003      	movs	r0, #3
 8005d90:	f000 f8f9 	bl	8005f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d94:	200f      	movs	r0, #15
 8005d96:	f7ff ff1d 	bl	8005bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d9a:	f7ff fef7 	bl	8005b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005da8:	4b06      	ldr	r3, [pc, #24]	@ (8005dc4 <HAL_IncTick+0x20>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <HAL_IncTick+0x24>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4413      	add	r3, r2
 8005db4:	4a04      	ldr	r2, [pc, #16]	@ (8005dc8 <HAL_IncTick+0x24>)
 8005db6:	6013      	str	r3, [r2, #0]
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000018 	.word	0x20000018
 8005dc8:	2000d0ac 	.word	0x2000d0ac

08005dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return uwTick;
 8005dd0:	4b03      	ldr	r3, [pc, #12]	@ (8005de0 <HAL_GetTick+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	2000d0ac 	.word	0x2000d0ac

08005de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005dec:	f7ff ffee 	bl	8005dcc <HAL_GetTick>
 8005df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d005      	beq.n	8005e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <HAL_Delay+0x44>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e0a:	bf00      	nop
 8005e0c:	f7ff ffde 	bl	8005dcc <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d8f7      	bhi.n	8005e0c <HAL_Delay+0x28>
  {
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000018 	.word	0x20000018

08005e2c <__NVIC_SetPriorityGrouping>:
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e6c <__NVIC_SetPriorityGrouping+0x40>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e54:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <__NVIC_SetPriorityGrouping+0x44>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e5a:	4a04      	ldr	r2, [pc, #16]	@ (8005e6c <__NVIC_SetPriorityGrouping+0x40>)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	60d3      	str	r3, [r2, #12]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	e000ed00 	.word	0xe000ed00
 8005e70:	05fa0000 	.word	0x05fa0000

08005e74 <__NVIC_GetPriorityGrouping>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e78:	4b04      	ldr	r3, [pc, #16]	@ (8005e8c <__NVIC_GetPriorityGrouping+0x18>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	0a1b      	lsrs	r3, r3, #8
 8005e7e:	f003 0307 	and.w	r3, r3, #7
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	e000ed00 	.word	0xe000ed00

08005e90 <__NVIC_EnableIRQ>:
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	db0b      	blt.n	8005eba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	f003 021f 	and.w	r2, r3, #31
 8005ea8:	4907      	ldr	r1, [pc, #28]	@ (8005ec8 <__NVIC_EnableIRQ+0x38>)
 8005eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8005eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	e000e100 	.word	0xe000e100

08005ecc <__NVIC_SetPriority>:
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	6039      	str	r1, [r7, #0]
 8005ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	db0a      	blt.n	8005ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	490c      	ldr	r1, [pc, #48]	@ (8005f18 <__NVIC_SetPriority+0x4c>)
 8005ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eea:	0112      	lsls	r2, r2, #4
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	440b      	add	r3, r1
 8005ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ef4:	e00a      	b.n	8005f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	4908      	ldr	r1, [pc, #32]	@ (8005f1c <__NVIC_SetPriority+0x50>)
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	3b04      	subs	r3, #4
 8005f04:	0112      	lsls	r2, r2, #4
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	440b      	add	r3, r1
 8005f0a:	761a      	strb	r2, [r3, #24]
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	e000e100 	.word	0xe000e100
 8005f1c:	e000ed00 	.word	0xe000ed00

08005f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b089      	sub	sp, #36	@ 0x24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f1c3 0307 	rsb	r3, r3, #7
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	bf28      	it	cs
 8005f3e:	2304      	movcs	r3, #4
 8005f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3304      	adds	r3, #4
 8005f46:	2b06      	cmp	r3, #6
 8005f48:	d902      	bls.n	8005f50 <NVIC_EncodePriority+0x30>
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	3b03      	subs	r3, #3
 8005f4e:	e000      	b.n	8005f52 <NVIC_EncodePriority+0x32>
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f54:	f04f 32ff 	mov.w	r2, #4294967295
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	43da      	mvns	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	401a      	ands	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f68:	f04f 31ff 	mov.w	r1, #4294967295
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f72:	43d9      	mvns	r1, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f78:	4313      	orrs	r3, r2
         );
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3724      	adds	r7, #36	@ 0x24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ff4c 	bl	8005e2c <__NVIC_SetPriorityGrouping>
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fae:	f7ff ff61 	bl	8005e74 <__NVIC_GetPriorityGrouping>
 8005fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	6978      	ldr	r0, [r7, #20]
 8005fba:	f7ff ffb1 	bl	8005f20 <NVIC_EncodePriority>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff ff80 	bl	8005ecc <__NVIC_SetPriority>
}
 8005fcc:	bf00      	nop
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff ff54 	bl	8005e90 <__NVIC_EnableIRQ>
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	@ 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006006:	2300      	movs	r3, #0
 8006008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	e175      	b.n	80062fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006010:	2201      	movs	r2, #1
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4013      	ands	r3, r2
 8006022:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	429a      	cmp	r2, r3
 800602a:	f040 8164 	bne.w	80062f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b01      	cmp	r3, #1
 8006038:	d005      	beq.n	8006046 <HAL_GPIO_Init+0x56>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d130      	bne.n	80060a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	2203      	movs	r2, #3
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800607c:	2201      	movs	r2, #1
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	43db      	mvns	r3, r3
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4013      	ands	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	091b      	lsrs	r3, r3, #4
 8006092:	f003 0201 	and.w	r2, r3, #1
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d017      	beq.n	80060e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	2203      	movs	r2, #3
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	43db      	mvns	r3, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4013      	ands	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4313      	orrs	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d123      	bne.n	8006138 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	08da      	lsrs	r2, r3, #3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3208      	adds	r2, #8
 80060f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	220f      	movs	r2, #15
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4013      	ands	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	08da      	lsrs	r2, r3, #3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3208      	adds	r2, #8
 8006132:	69b9      	ldr	r1, [r7, #24]
 8006134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	2203      	movs	r2, #3
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4013      	ands	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f003 0203 	and.w	r2, r3, #3
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80be 	beq.w	80062f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617a:	4b66      	ldr	r3, [pc, #408]	@ (8006314 <HAL_GPIO_Init+0x324>)
 800617c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617e:	4a65      	ldr	r2, [pc, #404]	@ (8006314 <HAL_GPIO_Init+0x324>)
 8006180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006184:	6453      	str	r3, [r2, #68]	@ 0x44
 8006186:	4b63      	ldr	r3, [pc, #396]	@ (8006314 <HAL_GPIO_Init+0x324>)
 8006188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006192:	4a61      	ldr	r2, [pc, #388]	@ (8006318 <HAL_GPIO_Init+0x328>)
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	089b      	lsrs	r3, r3, #2
 8006198:	3302      	adds	r3, #2
 800619a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	220f      	movs	r2, #15
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	4013      	ands	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a58      	ldr	r2, [pc, #352]	@ (800631c <HAL_GPIO_Init+0x32c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d037      	beq.n	800622e <HAL_GPIO_Init+0x23e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a57      	ldr	r2, [pc, #348]	@ (8006320 <HAL_GPIO_Init+0x330>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d031      	beq.n	800622a <HAL_GPIO_Init+0x23a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a56      	ldr	r2, [pc, #344]	@ (8006324 <HAL_GPIO_Init+0x334>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02b      	beq.n	8006226 <HAL_GPIO_Init+0x236>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a55      	ldr	r2, [pc, #340]	@ (8006328 <HAL_GPIO_Init+0x338>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d025      	beq.n	8006222 <HAL_GPIO_Init+0x232>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a54      	ldr	r2, [pc, #336]	@ (800632c <HAL_GPIO_Init+0x33c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01f      	beq.n	800621e <HAL_GPIO_Init+0x22e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a53      	ldr	r2, [pc, #332]	@ (8006330 <HAL_GPIO_Init+0x340>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d019      	beq.n	800621a <HAL_GPIO_Init+0x22a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a52      	ldr	r2, [pc, #328]	@ (8006334 <HAL_GPIO_Init+0x344>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d013      	beq.n	8006216 <HAL_GPIO_Init+0x226>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a51      	ldr	r2, [pc, #324]	@ (8006338 <HAL_GPIO_Init+0x348>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00d      	beq.n	8006212 <HAL_GPIO_Init+0x222>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a50      	ldr	r2, [pc, #320]	@ (800633c <HAL_GPIO_Init+0x34c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d007      	beq.n	800620e <HAL_GPIO_Init+0x21e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a4f      	ldr	r2, [pc, #316]	@ (8006340 <HAL_GPIO_Init+0x350>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d101      	bne.n	800620a <HAL_GPIO_Init+0x21a>
 8006206:	2309      	movs	r3, #9
 8006208:	e012      	b.n	8006230 <HAL_GPIO_Init+0x240>
 800620a:	230a      	movs	r3, #10
 800620c:	e010      	b.n	8006230 <HAL_GPIO_Init+0x240>
 800620e:	2308      	movs	r3, #8
 8006210:	e00e      	b.n	8006230 <HAL_GPIO_Init+0x240>
 8006212:	2307      	movs	r3, #7
 8006214:	e00c      	b.n	8006230 <HAL_GPIO_Init+0x240>
 8006216:	2306      	movs	r3, #6
 8006218:	e00a      	b.n	8006230 <HAL_GPIO_Init+0x240>
 800621a:	2305      	movs	r3, #5
 800621c:	e008      	b.n	8006230 <HAL_GPIO_Init+0x240>
 800621e:	2304      	movs	r3, #4
 8006220:	e006      	b.n	8006230 <HAL_GPIO_Init+0x240>
 8006222:	2303      	movs	r3, #3
 8006224:	e004      	b.n	8006230 <HAL_GPIO_Init+0x240>
 8006226:	2302      	movs	r3, #2
 8006228:	e002      	b.n	8006230 <HAL_GPIO_Init+0x240>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <HAL_GPIO_Init+0x240>
 800622e:	2300      	movs	r3, #0
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	f002 0203 	and.w	r2, r2, #3
 8006236:	0092      	lsls	r2, r2, #2
 8006238:	4093      	lsls	r3, r2
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4313      	orrs	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006240:	4935      	ldr	r1, [pc, #212]	@ (8006318 <HAL_GPIO_Init+0x328>)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	089b      	lsrs	r3, r3, #2
 8006246:	3302      	adds	r3, #2
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800624e:	4b3d      	ldr	r3, [pc, #244]	@ (8006344 <HAL_GPIO_Init+0x354>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006272:	4a34      	ldr	r2, [pc, #208]	@ (8006344 <HAL_GPIO_Init+0x354>)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006278:	4b32      	ldr	r3, [pc, #200]	@ (8006344 <HAL_GPIO_Init+0x354>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800629c:	4a29      	ldr	r2, [pc, #164]	@ (8006344 <HAL_GPIO_Init+0x354>)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062a2:	4b28      	ldr	r3, [pc, #160]	@ (8006344 <HAL_GPIO_Init+0x354>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4013      	ands	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_GPIO_Init+0x354>)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006344 <HAL_GPIO_Init+0x354>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062f0:	4a14      	ldr	r2, [pc, #80]	@ (8006344 <HAL_GPIO_Init+0x354>)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	3301      	adds	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	f67f ae86 	bls.w	8006010 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	3724      	adds	r7, #36	@ 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800
 8006318:	40013800 	.word	0x40013800
 800631c:	40020000 	.word	0x40020000
 8006320:	40020400 	.word	0x40020400
 8006324:	40020800 	.word	0x40020800
 8006328:	40020c00 	.word	0x40020c00
 800632c:	40021000 	.word	0x40021000
 8006330:	40021400 	.word	0x40021400
 8006334:	40021800 	.word	0x40021800
 8006338:	40021c00 	.word	0x40021c00
 800633c:	40022000 	.word	0x40022000
 8006340:	40022400 	.word	0x40022400
 8006344:	40013c00 	.word	0x40013c00

08006348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	807b      	strh	r3, [r7, #2]
 8006354:	4613      	mov	r3, r2
 8006356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006358:	787b      	ldrb	r3, [r7, #1]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800635e:	887a      	ldrh	r2, [r7, #2]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006364:	e003      	b.n	800636e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006366:	887b      	ldrh	r3, [r7, #2]
 8006368:	041a      	lsls	r2, r3, #16
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	619a      	str	r2, [r3, #24]
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800638c:	887a      	ldrh	r2, [r7, #2]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4013      	ands	r3, r2
 8006392:	041a      	lsls	r2, r3, #16
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	43d9      	mvns	r1, r3
 8006398:	887b      	ldrh	r3, [r7, #2]
 800639a:	400b      	ands	r3, r1
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	619a      	str	r2, [r3, #24]
}
 80063a2:	bf00      	nop
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80063b8:	2300      	movs	r3, #0
 80063ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e29b      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8087 	beq.w	80064e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063d4:	4b96      	ldr	r3, [pc, #600]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 030c 	and.w	r3, r3, #12
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d00c      	beq.n	80063fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063e0:	4b93      	ldr	r3, [pc, #588]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 030c 	and.w	r3, r3, #12
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d112      	bne.n	8006412 <HAL_RCC_OscConfig+0x62>
 80063ec:	4b90      	ldr	r3, [pc, #576]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063f8:	d10b      	bne.n	8006412 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d06c      	beq.n	80064e0 <HAL_RCC_OscConfig+0x130>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d168      	bne.n	80064e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e275      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800641a:	d106      	bne.n	800642a <HAL_RCC_OscConfig+0x7a>
 800641c:	4b84      	ldr	r3, [pc, #528]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a83      	ldr	r2, [pc, #524]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	e02e      	b.n	8006488 <HAL_RCC_OscConfig+0xd8>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10c      	bne.n	800644c <HAL_RCC_OscConfig+0x9c>
 8006432:	4b7f      	ldr	r3, [pc, #508]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a7e      	ldr	r2, [pc, #504]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	4b7c      	ldr	r3, [pc, #496]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a7b      	ldr	r2, [pc, #492]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006444:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e01d      	b.n	8006488 <HAL_RCC_OscConfig+0xd8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0xc0>
 8006456:	4b76      	ldr	r3, [pc, #472]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a75      	ldr	r2, [pc, #468]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800645c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4b73      	ldr	r3, [pc, #460]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a72      	ldr	r2, [pc, #456]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0xd8>
 8006470:	4b6f      	ldr	r3, [pc, #444]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a6e      	ldr	r2, [pc, #440]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b6c      	ldr	r3, [pc, #432]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a6b      	ldr	r2, [pc, #428]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7ff fc9c 	bl	8005dcc <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006498:	f7ff fc98 	bl	8005dcc <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b64      	cmp	r3, #100	@ 0x64
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e229      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064aa:	4b61      	ldr	r3, [pc, #388]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0xe8>
 80064b6:	e014      	b.n	80064e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7ff fc88 	bl	8005dcc <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c0:	f7ff fc84 	bl	8005dcc <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	@ 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e215      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d2:	4b57      	ldr	r3, [pc, #348]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f0      	bne.n	80064c0 <HAL_RCC_OscConfig+0x110>
 80064de:	e000      	b.n	80064e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d069      	beq.n	80065c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064ee:	4b50      	ldr	r3, [pc, #320]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 030c 	and.w	r3, r3, #12
 8006502:	2b08      	cmp	r3, #8
 8006504:	d11c      	bne.n	8006540 <HAL_RCC_OscConfig+0x190>
 8006506:	4b4a      	ldr	r3, [pc, #296]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d116      	bne.n	8006540 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006512:	4b47      	ldr	r3, [pc, #284]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_RCC_OscConfig+0x17a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d001      	beq.n	800652a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e1e9      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	4b41      	ldr	r3, [pc, #260]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	493d      	ldr	r1, [pc, #244]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653e:	e040      	b.n	80065c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d023      	beq.n	8006590 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006548:	4b39      	ldr	r3, [pc, #228]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a38      	ldr	r2, [pc, #224]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7ff fc3a 	bl	8005dcc <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655c:	f7ff fc36 	bl	8005dcc <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e1c7      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656e:	4b30      	ldr	r3, [pc, #192]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800657a:	4b2d      	ldr	r3, [pc, #180]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4929      	ldr	r1, [pc, #164]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800658a:	4313      	orrs	r3, r2
 800658c:	600b      	str	r3, [r1, #0]
 800658e:	e018      	b.n	80065c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006590:	4b27      	ldr	r3, [pc, #156]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a26      	ldr	r2, [pc, #152]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7ff fc16 	bl	8005dcc <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a4:	f7ff fc12 	bl	8005dcc <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e1a3      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d038      	beq.n	8006640 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d019      	beq.n	800660a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065d6:	4b16      	ldr	r3, [pc, #88]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80065d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065da:	4a15      	ldr	r2, [pc, #84]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e2:	f7ff fbf3 	bl	8005dcc <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065ea:	f7ff fbef 	bl	8005dcc <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e180      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 80065fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x23a>
 8006608:	e01a      	b.n	8006640 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800660a:	4b09      	ldr	r3, [pc, #36]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 800660c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800660e:	4a08      	ldr	r2, [pc, #32]	@ (8006630 <HAL_RCC_OscConfig+0x280>)
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006616:	f7ff fbd9 	bl	8005dcc <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800661e:	f7ff fbd5 	bl	8005dcc <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d903      	bls.n	8006634 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e166      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
 8006630:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006634:	4b92      	ldr	r3, [pc, #584]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ee      	bne.n	800661e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80a4 	beq.w	8006796 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800664e:	4b8c      	ldr	r3, [pc, #560]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10d      	bne.n	8006676 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	4b89      	ldr	r3, [pc, #548]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	4a88      	ldr	r2, [pc, #544]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006664:	6413      	str	r3, [r2, #64]	@ 0x40
 8006666:	4b86      	ldr	r3, [pc, #536]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800666e:	60bb      	str	r3, [r7, #8]
 8006670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006672:	2301      	movs	r3, #1
 8006674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006676:	4b83      	ldr	r3, [pc, #524]	@ (8006884 <HAL_RCC_OscConfig+0x4d4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d118      	bne.n	80066b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006682:	4b80      	ldr	r3, [pc, #512]	@ (8006884 <HAL_RCC_OscConfig+0x4d4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a7f      	ldr	r2, [pc, #508]	@ (8006884 <HAL_RCC_OscConfig+0x4d4>)
 8006688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800668c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668e:	f7ff fb9d 	bl	8005dcc <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006696:	f7ff fb99 	bl	8005dcc <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b64      	cmp	r3, #100	@ 0x64
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e12a      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a8:	4b76      	ldr	r3, [pc, #472]	@ (8006884 <HAL_RCC_OscConfig+0x4d4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d106      	bne.n	80066ca <HAL_RCC_OscConfig+0x31a>
 80066bc:	4b70      	ldr	r3, [pc, #448]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80066be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c0:	4a6f      	ldr	r2, [pc, #444]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c8:	e02d      	b.n	8006726 <HAL_RCC_OscConfig+0x376>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10c      	bne.n	80066ec <HAL_RCC_OscConfig+0x33c>
 80066d2:	4b6b      	ldr	r3, [pc, #428]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d6:	4a6a      	ldr	r2, [pc, #424]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80066de:	4b68      	ldr	r3, [pc, #416]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	4a67      	ldr	r2, [pc, #412]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ea:	e01c      	b.n	8006726 <HAL_RCC_OscConfig+0x376>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d10c      	bne.n	800670e <HAL_RCC_OscConfig+0x35e>
 80066f4:	4b62      	ldr	r3, [pc, #392]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80066f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f8:	4a61      	ldr	r2, [pc, #388]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006700:	4b5f      	ldr	r3, [pc, #380]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006704:	4a5e      	ldr	r2, [pc, #376]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	6713      	str	r3, [r2, #112]	@ 0x70
 800670c:	e00b      	b.n	8006726 <HAL_RCC_OscConfig+0x376>
 800670e:	4b5c      	ldr	r3, [pc, #368]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006712:	4a5b      	ldr	r2, [pc, #364]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6713      	str	r3, [r2, #112]	@ 0x70
 800671a:	4b59      	ldr	r3, [pc, #356]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671e:	4a58      	ldr	r2, [pc, #352]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d015      	beq.n	800675a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672e:	f7ff fb4d 	bl	8005dcc <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006734:	e00a      	b.n	800674c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f7ff fb49 	bl	8005dcc <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006744:	4293      	cmp	r3, r2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e0d8      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674c:	4b4c      	ldr	r3, [pc, #304]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 800674e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ee      	beq.n	8006736 <HAL_RCC_OscConfig+0x386>
 8006758:	e014      	b.n	8006784 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675a:	f7ff fb37 	bl	8005dcc <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006760:	e00a      	b.n	8006778 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006762:	f7ff fb33 	bl	8005dcc <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006770:	4293      	cmp	r3, r2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e0c2      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006778:	4b41      	ldr	r3, [pc, #260]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ee      	bne.n	8006762 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d105      	bne.n	8006796 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800678a:	4b3d      	ldr	r3, [pc, #244]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	4a3c      	ldr	r2, [pc, #240]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006794:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80ae 	beq.w	80068fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067a0:	4b37      	ldr	r3, [pc, #220]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 030c 	and.w	r3, r3, #12
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d06d      	beq.n	8006888 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d14b      	bne.n	800684c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b4:	4b32      	ldr	r3, [pc, #200]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a31      	ldr	r2, [pc, #196]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80067ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7ff fb04 	bl	8005dcc <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c8:	f7ff fb00 	bl	8005dcc <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e091      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067da:	4b29      	ldr	r3, [pc, #164]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69da      	ldr	r2, [r3, #28]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	019b      	lsls	r3, r3, #6
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	3b01      	subs	r3, #1
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	061b      	lsls	r3, r3, #24
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006810:	071b      	lsls	r3, r3, #28
 8006812:	491b      	ldr	r1, [pc, #108]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006818:	4b19      	ldr	r3, [pc, #100]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a18      	ldr	r2, [pc, #96]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 800681e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7ff fad2 	bl	8005dcc <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800682c:	f7ff face 	bl	8005dcc <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e05f      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683e:	4b10      	ldr	r3, [pc, #64]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0x47c>
 800684a:	e057      	b.n	80068fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800684c:	4b0c      	ldr	r3, [pc, #48]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0b      	ldr	r2, [pc, #44]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006858:	f7ff fab8 	bl	8005dcc <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006860:	f7ff fab4 	bl	8005dcc <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e045      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006872:	4b03      	ldr	r3, [pc, #12]	@ (8006880 <HAL_RCC_OscConfig+0x4d0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f0      	bne.n	8006860 <HAL_RCC_OscConfig+0x4b0>
 800687e:	e03d      	b.n	80068fc <HAL_RCC_OscConfig+0x54c>
 8006880:	40023800 	.word	0x40023800
 8006884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006888:	4b1f      	ldr	r3, [pc, #124]	@ (8006908 <HAL_RCC_OscConfig+0x558>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d030      	beq.n	80068f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d129      	bne.n	80068f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d122      	bne.n	80068f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80068b8:	4013      	ands	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d119      	bne.n	80068f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	3b01      	subs	r3, #1
 80068d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d10f      	bne.n	80068f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d107      	bne.n	80068f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d001      	beq.n	80068fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800

0800690c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0d0      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006924:	4b6a      	ldr	r3, [pc, #424]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d910      	bls.n	8006954 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b67      	ldr	r3, [pc, #412]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 020f 	bic.w	r2, r3, #15
 800693a:	4965      	ldr	r1, [pc, #404]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006942:	4b63      	ldr	r3, [pc, #396]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d001      	beq.n	8006954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0b8      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d020      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800696c:	4b59      	ldr	r3, [pc, #356]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	4a58      	ldr	r2, [pc, #352]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006972:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006976:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006984:	4b53      	ldr	r3, [pc, #332]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	4a52      	ldr	r2, [pc, #328]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800698a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800698e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006990:	4b50      	ldr	r3, [pc, #320]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	494d      	ldr	r1, [pc, #308]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d040      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d107      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b6:	4b47      	ldr	r3, [pc, #284]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d115      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e07f      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ce:	4b41      	ldr	r3, [pc, #260]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e073      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069de:	4b3d      	ldr	r3, [pc, #244]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e06b      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ee:	4b39      	ldr	r3, [pc, #228]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f023 0203 	bic.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4936      	ldr	r1, [pc, #216]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a00:	f7ff f9e4 	bl	8005dcc <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a08:	f7ff f9e0 	bl	8005dcc <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e053      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 020c 	and.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d1eb      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a30:	4b27      	ldr	r3, [pc, #156]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d210      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3e:	4b24      	ldr	r3, [pc, #144]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f023 020f 	bic.w	r2, r3, #15
 8006a46:	4922      	ldr	r1, [pc, #136]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a4e:	4b20      	ldr	r3, [pc, #128]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d001      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e032      	b.n	8006ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a6c:	4b19      	ldr	r3, [pc, #100]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4916      	ldr	r1, [pc, #88]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a8a:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	490e      	ldr	r1, [pc, #56]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a9e:	f000 f821 	bl	8006ae4 <HAL_RCC_GetSysClockFreq>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	091b      	lsrs	r3, r3, #4
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	490a      	ldr	r1, [pc, #40]	@ (8006ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8006ab0:	5ccb      	ldrb	r3, [r1, r3]
 8006ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab6:	4a09      	ldr	r2, [pc, #36]	@ (8006adc <HAL_RCC_ClockConfig+0x1d0>)
 8006ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006aba:	4b09      	ldr	r3, [pc, #36]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1d4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff f888 	bl	8005bd4 <HAL_InitTick>

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023c00 	.word	0x40023c00
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	080077d8 	.word	0x080077d8
 8006adc:	20000010 	.word	0x20000010
 8006ae0:	20000014 	.word	0x20000014

08006ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ae8:	b094      	sub	sp, #80	@ 0x50
 8006aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af0:	2300      	movs	r3, #0
 8006af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af4:	2300      	movs	r3, #0
 8006af6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006afc:	4b79      	ldr	r3, [pc, #484]	@ (8006ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 030c 	and.w	r3, r3, #12
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d00d      	beq.n	8006b24 <HAL_RCC_GetSysClockFreq+0x40>
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	f200 80e1 	bhi.w	8006cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <HAL_RCC_GetSysClockFreq+0x34>
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d003      	beq.n	8006b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8006b16:	e0db      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b18:	4b73      	ldr	r3, [pc, #460]	@ (8006ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b1c:	e0db      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b1e:	4b73      	ldr	r3, [pc, #460]	@ (8006cec <HAL_RCC_GetSysClockFreq+0x208>)
 8006b20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b22:	e0d8      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b24:	4b6f      	ldr	r3, [pc, #444]	@ (8006ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d063      	beq.n	8006c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	099b      	lsrs	r3, r3, #6
 8006b40:	2200      	movs	r2, #0
 8006b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b4e:	2300      	movs	r3, #0
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	f04f 0000 	mov.w	r0, #0
 8006b5e:	f04f 0100 	mov.w	r1, #0
 8006b62:	0159      	lsls	r1, r3, #5
 8006b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b68:	0150      	lsls	r0, r2, #5
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4621      	mov	r1, r4
 8006b70:	1a51      	subs	r1, r2, r1
 8006b72:	6139      	str	r1, [r7, #16]
 8006b74:	4629      	mov	r1, r5
 8006b76:	eb63 0301 	sbc.w	r3, r3, r1
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b88:	4659      	mov	r1, fp
 8006b8a:	018b      	lsls	r3, r1, #6
 8006b8c:	4651      	mov	r1, sl
 8006b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b92:	4651      	mov	r1, sl
 8006b94:	018a      	lsls	r2, r1, #6
 8006b96:	4651      	mov	r1, sl
 8006b98:	ebb2 0801 	subs.w	r8, r2, r1
 8006b9c:	4659      	mov	r1, fp
 8006b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	f04f 0300 	mov.w	r3, #0
 8006baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bb6:	4690      	mov	r8, r2
 8006bb8:	4699      	mov	r9, r3
 8006bba:	4623      	mov	r3, r4
 8006bbc:	eb18 0303 	adds.w	r3, r8, r3
 8006bc0:	60bb      	str	r3, [r7, #8]
 8006bc2:	462b      	mov	r3, r5
 8006bc4:	eb49 0303 	adc.w	r3, r9, r3
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	024b      	lsls	r3, r1, #9
 8006bda:	4621      	mov	r1, r4
 8006bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006be0:	4621      	mov	r1, r4
 8006be2:	024a      	lsls	r2, r1, #9
 8006be4:	4610      	mov	r0, r2
 8006be6:	4619      	mov	r1, r3
 8006be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bea:	2200      	movs	r2, #0
 8006bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bf4:	f7f9 fb6e 	bl	80002d4 <__aeabi_uldivmod>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c00:	e058      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c02:	4b38      	ldr	r3, [pc, #224]	@ (8006ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	099b      	lsrs	r3, r3, #6
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c12:	623b      	str	r3, [r7, #32]
 8006c14:	2300      	movs	r3, #0
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	f04f 0000 	mov.w	r0, #0
 8006c24:	f04f 0100 	mov.w	r1, #0
 8006c28:	0159      	lsls	r1, r3, #5
 8006c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c2e:	0150      	lsls	r0, r2, #5
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4641      	mov	r1, r8
 8006c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c54:	ebb2 040a 	subs.w	r4, r2, sl
 8006c58:	eb63 050b 	sbc.w	r5, r3, fp
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	00eb      	lsls	r3, r5, #3
 8006c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c6a:	00e2      	lsls	r2, r4, #3
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	461d      	mov	r5, r3
 8006c70:	4643      	mov	r3, r8
 8006c72:	18e3      	adds	r3, r4, r3
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	464b      	mov	r3, r9
 8006c78:	eb45 0303 	adc.w	r3, r5, r3
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	028b      	lsls	r3, r1, #10
 8006c8e:	4621      	mov	r1, r4
 8006c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c94:	4621      	mov	r1, r4
 8006c96:	028a      	lsls	r2, r1, #10
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	61fa      	str	r2, [r7, #28]
 8006ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ca8:	f7f9 fb14 	bl	80002d4 <__aeabi_uldivmod>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	0c1b      	lsrs	r3, r3, #16
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cce:	e002      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cd0:	4b05      	ldr	r3, [pc, #20]	@ (8006ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3750      	adds	r7, #80	@ 0x50
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40023800 	.word	0x40023800
 8006ce8:	00f42400 	.word	0x00f42400
 8006cec:	007a1200 	.word	0x007a1200

08006cf0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cf4:	4b03      	ldr	r3, [pc, #12]	@ (8006d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20000010 	.word	0x20000010

08006d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d0c:	f7ff fff0 	bl	8006cf0 <HAL_RCC_GetHCLKFreq>
 8006d10:	4602      	mov	r2, r0
 8006d12:	4b05      	ldr	r3, [pc, #20]	@ (8006d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	0a9b      	lsrs	r3, r3, #10
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	4903      	ldr	r1, [pc, #12]	@ (8006d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d1e:	5ccb      	ldrb	r3, [r1, r3]
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	080077e8 	.word	0x080077e8

08006d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	220f      	movs	r2, #15
 8006d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d40:	4b12      	ldr	r3, [pc, #72]	@ (8006d8c <HAL_RCC_GetClockConfig+0x5c>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 0203 	and.w	r2, r3, #3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d8c <HAL_RCC_GetClockConfig+0x5c>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d58:	4b0c      	ldr	r3, [pc, #48]	@ (8006d8c <HAL_RCC_GetClockConfig+0x5c>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006d64:	4b09      	ldr	r3, [pc, #36]	@ (8006d8c <HAL_RCC_GetClockConfig+0x5c>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	08db      	lsrs	r3, r3, #3
 8006d6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d72:	4b07      	ldr	r3, [pc, #28]	@ (8006d90 <HAL_RCC_GetClockConfig+0x60>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 020f 	and.w	r2, r3, #15
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	601a      	str	r2, [r3, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	40023c00 	.word	0x40023c00

08006d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e049      	b.n	8006e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f841 	bl	8006e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	f000 f9e8 	bl	80071a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d001      	beq.n	8006e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e054      	b.n	8006f1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a26      	ldr	r2, [pc, #152]	@ (8006f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d022      	beq.n	8006ed8 <HAL_TIM_Base_Start_IT+0x80>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e9a:	d01d      	beq.n	8006ed8 <HAL_TIM_Base_Start_IT+0x80>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a22      	ldr	r2, [pc, #136]	@ (8006f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d018      	beq.n	8006ed8 <HAL_TIM_Base_Start_IT+0x80>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a21      	ldr	r2, [pc, #132]	@ (8006f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <HAL_TIM_Base_Start_IT+0x80>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8006f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_TIM_Base_Start_IT+0x80>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8006f38 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <HAL_TIM_Base_Start_IT+0x80>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f3c <HAL_TIM_Base_Start_IT+0xe4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <HAL_TIM_Base_Start_IT+0x80>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8006f40 <HAL_TIM_Base_Start_IT+0xe8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d115      	bne.n	8006f04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	4b19      	ldr	r3, [pc, #100]	@ (8006f44 <HAL_TIM_Base_Start_IT+0xec>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b06      	cmp	r3, #6
 8006ee8:	d015      	beq.n	8006f16 <HAL_TIM_Base_Start_IT+0xbe>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef0:	d011      	beq.n	8006f16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0201 	orr.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f02:	e008      	b.n	8006f16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e000      	b.n	8006f18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40010000 	.word	0x40010000
 8006f2c:	40000400 	.word	0x40000400
 8006f30:	40000800 	.word	0x40000800
 8006f34:	40000c00 	.word	0x40000c00
 8006f38:	40010400 	.word	0x40010400
 8006f3c:	40014000 	.word	0x40014000
 8006f40:	40001800 	.word	0x40001800
 8006f44:	00010007 	.word	0x00010007

08006f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d020      	beq.n	8006fac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01b      	beq.n	8006fac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0202 	mvn.w	r2, #2
 8006f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f8e9 	bl	800716a <HAL_TIM_IC_CaptureCallback>
 8006f98:	e005      	b.n	8006fa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f8db 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f8ec 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d020      	beq.n	8006ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01b      	beq.n	8006ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0204 	mvn.w	r2, #4
 8006fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8c3 	bl	800716a <HAL_TIM_IC_CaptureCallback>
 8006fe4:	e005      	b.n	8006ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f8b5 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f8c6 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d020      	beq.n	8007044 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01b      	beq.n	8007044 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0208 	mvn.w	r2, #8
 8007014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2204      	movs	r2, #4
 800701a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f89d 	bl	800716a <HAL_TIM_IC_CaptureCallback>
 8007030:	e005      	b.n	800703e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f88f 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f8a0 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b00      	cmp	r3, #0
 800704c:	d020      	beq.n	8007090 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01b      	beq.n	8007090 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0210 	mvn.w	r2, #16
 8007060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2208      	movs	r2, #8
 8007066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f877 	bl	800716a <HAL_TIM_IC_CaptureCallback>
 800707c:	e005      	b.n	800708a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f869 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f87a 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00c      	beq.n	80070b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0201 	mvn.w	r2, #1
 80070ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fe fd54 	bl	8005b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d104      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00c      	beq.n	80070e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80070da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f919 	bl	8007314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00c      	beq.n	8007106 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d007      	beq.n	8007106 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f911 	bl	8007328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00c      	beq.n	800712a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f834 	bl	8007192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00c      	beq.n	800714e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0220 	mvn.w	r2, #32
 8007146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f8d9 	bl	8007300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a46      	ldr	r2, [pc, #280]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c6:	d00f      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a43      	ldr	r2, [pc, #268]	@ (80072d8 <TIM_Base_SetConfig+0x130>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a42      	ldr	r2, [pc, #264]	@ (80072dc <TIM_Base_SetConfig+0x134>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d007      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a41      	ldr	r2, [pc, #260]	@ (80072e0 <TIM_Base_SetConfig+0x138>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a40      	ldr	r2, [pc, #256]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d108      	bne.n	80071fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a35      	ldr	r2, [pc, #212]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d02b      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007208:	d027      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a32      	ldr	r2, [pc, #200]	@ (80072d8 <TIM_Base_SetConfig+0x130>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d023      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a31      	ldr	r2, [pc, #196]	@ (80072dc <TIM_Base_SetConfig+0x134>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01f      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a30      	ldr	r2, [pc, #192]	@ (80072e0 <TIM_Base_SetConfig+0x138>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d01b      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2f      	ldr	r2, [pc, #188]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d017      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a2e      	ldr	r2, [pc, #184]	@ (80072e8 <TIM_Base_SetConfig+0x140>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d013      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a2d      	ldr	r2, [pc, #180]	@ (80072ec <TIM_Base_SetConfig+0x144>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00f      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2c      	ldr	r2, [pc, #176]	@ (80072f0 <TIM_Base_SetConfig+0x148>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00b      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2b      	ldr	r2, [pc, #172]	@ (80072f4 <TIM_Base_SetConfig+0x14c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d007      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a2a      	ldr	r2, [pc, #168]	@ (80072f8 <TIM_Base_SetConfig+0x150>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d003      	beq.n	800725a <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a29      	ldr	r2, [pc, #164]	@ (80072fc <TIM_Base_SetConfig+0x154>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d108      	bne.n	800726c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a10      	ldr	r2, [pc, #64]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a12      	ldr	r2, [pc, #72]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d103      	bne.n	80072a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d105      	bne.n	80072c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f023 0201 	bic.w	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	611a      	str	r2, [r3, #16]
  }
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40010000 	.word	0x40010000
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40010400 	.word	0x40010400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40014400 	.word	0x40014400
 80072f0:	40014800 	.word	0x40014800
 80072f4:	40001800 	.word	0x40001800
 80072f8:	40001c00 	.word	0x40001c00
 80072fc:	40002000 	.word	0x40002000

08007300 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <memcmp>:
 800733c:	b510      	push	{r4, lr}
 800733e:	3901      	subs	r1, #1
 8007340:	4402      	add	r2, r0
 8007342:	4290      	cmp	r0, r2
 8007344:	d101      	bne.n	800734a <memcmp+0xe>
 8007346:	2000      	movs	r0, #0
 8007348:	e005      	b.n	8007356 <memcmp+0x1a>
 800734a:	7803      	ldrb	r3, [r0, #0]
 800734c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007350:	42a3      	cmp	r3, r4
 8007352:	d001      	beq.n	8007358 <memcmp+0x1c>
 8007354:	1b18      	subs	r0, r3, r4
 8007356:	bd10      	pop	{r4, pc}
 8007358:	3001      	adds	r0, #1
 800735a:	e7f2      	b.n	8007342 <memcmp+0x6>

0800735c <memset>:
 800735c:	4402      	add	r2, r0
 800735e:	4603      	mov	r3, r0
 8007360:	4293      	cmp	r3, r2
 8007362:	d100      	bne.n	8007366 <memset+0xa>
 8007364:	4770      	bx	lr
 8007366:	f803 1b01 	strb.w	r1, [r3], #1
 800736a:	e7f9      	b.n	8007360 <memset+0x4>

0800736c <__libc_init_array>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4d0d      	ldr	r5, [pc, #52]	@ (80073a4 <__libc_init_array+0x38>)
 8007370:	4c0d      	ldr	r4, [pc, #52]	@ (80073a8 <__libc_init_array+0x3c>)
 8007372:	1b64      	subs	r4, r4, r5
 8007374:	10a4      	asrs	r4, r4, #2
 8007376:	2600      	movs	r6, #0
 8007378:	42a6      	cmp	r6, r4
 800737a:	d109      	bne.n	8007390 <__libc_init_array+0x24>
 800737c:	4d0b      	ldr	r5, [pc, #44]	@ (80073ac <__libc_init_array+0x40>)
 800737e:	4c0c      	ldr	r4, [pc, #48]	@ (80073b0 <__libc_init_array+0x44>)
 8007380:	f000 f826 	bl	80073d0 <_init>
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	2600      	movs	r6, #0
 800738a:	42a6      	cmp	r6, r4
 800738c:	d105      	bne.n	800739a <__libc_init_array+0x2e>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	f855 3b04 	ldr.w	r3, [r5], #4
 8007394:	4798      	blx	r3
 8007396:	3601      	adds	r6, #1
 8007398:	e7ee      	b.n	8007378 <__libc_init_array+0xc>
 800739a:	f855 3b04 	ldr.w	r3, [r5], #4
 800739e:	4798      	blx	r3
 80073a0:	3601      	adds	r6, #1
 80073a2:	e7f2      	b.n	800738a <__libc_init_array+0x1e>
 80073a4:	080077f8 	.word	0x080077f8
 80073a8:	080077f8 	.word	0x080077f8
 80073ac:	080077f8 	.word	0x080077f8
 80073b0:	080077fc 	.word	0x080077fc

080073b4 <memcpy>:
 80073b4:	440a      	add	r2, r1
 80073b6:	4291      	cmp	r1, r2
 80073b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073bc:	d100      	bne.n	80073c0 <memcpy+0xc>
 80073be:	4770      	bx	lr
 80073c0:	b510      	push	{r4, lr}
 80073c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ca:	4291      	cmp	r1, r2
 80073cc:	d1f9      	bne.n	80073c2 <memcpy+0xe>
 80073ce:	bd10      	pop	{r4, pc}

080073d0 <_init>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr

080073dc <_fini>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr
