
005_LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007918  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08007b18  08007b18  00008b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f74  08007f74  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  08007f74  08007f74  00008f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f7c  08007f7c  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f7c  08007f7c  00008f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f80  08007f80  00008f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08007f84  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d0a8  20000018  08007f9c  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d0c0  08007f9c  000090c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014532  00000000  00000000  00009046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cb  00000000  00000000  0001d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00020648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f84  00000000  00000000  00021a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004341  00000000  00000000  000229fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189e7  00000000  00000000  00026d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001058c8  00000000  00000000  0003f724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144fec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  00145030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000107  00000000  00000000  0014a47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000018 	.word	0x20000018
 800021c:	00000000 	.word	0x00000000
 8000220:	08007b00 	.word	0x08007b00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000001c 	.word	0x2000001c
 800023c:	08007b00 	.word	0x08007b00

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000ba80 	.word	0x2000ba80

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f103 0208 	add.w	r2, r3, #8
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f04f 32ff 	mov.w	r2, #4294967295
 80005dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f103 0208 	add.w	r2, r3, #8
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f103 0208 	add.w	r2, r3, #8
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d103      	bne.n	8000686 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e00c      	b.n	80006a0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3308      	adds	r3, #8
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e002      	b.n	8000694 <vListInsert+0x2e>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	429a      	cmp	r2, r3
 800069e:	d2f6      	bcs.n	800068e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	6892      	ldr	r2, [r2, #8]
 80006ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	6852      	ldr	r2, [r2, #4]
 80006f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	d103      	bne.n	800070c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d104      	bne.n	800074a <xQueueGenericReset+0x1e>
 8000740:	492a      	ldr	r1, [pc, #168]	@ (80007ec <xQueueGenericReset+0xc0>)
 8000742:	f240 100d 	movw	r0, #269	@ 0x10d
 8000746:	f005 fdb7 	bl	80062b8 <vAssertCalled>

    taskENTER_CRITICAL();
 800074a:	f002 fb05 	bl	8002d58 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000756:	68f9      	ldr	r1, [r7, #12]
 8000758:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800075a:	fb01 f303 	mul.w	r3, r1, r3
 800075e:	441a      	add	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2200      	movs	r2, #0
 8000768:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077a:	3b01      	subs	r3, #1
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000780:	fb01 f303 	mul.w	r3, r1, r3
 8000784:	441a      	add	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	22ff      	movs	r2, #255	@ 0xff
 800078e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	22ff      	movs	r2, #255	@ 0xff
 8000796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d114      	bne.n	80007ca <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d01a      	beq.n	80007de <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3310      	adds	r3, #16
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fa2b 	bl	8001c08 <xTaskRemoveFromEventList>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <xQueueGenericReset+0xc4>)
 80007ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	e009      	b.n	80007de <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3310      	adds	r3, #16
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fef8 	bl	80005c4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3324      	adds	r3, #36	@ 0x24
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fef3 	bl	80005c4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007de:	f002 fae5 	bl	8002dac <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08007b18 	.word	0x08007b18
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <xQueueGenericCreate+0x1e>
 8000808:	4921      	ldr	r1, [pc, #132]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800080a:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 800080e:	f005 fd53 	bl	80062b8 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <xQueueGenericCreate+0x3c>
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d101      	bne.n	8000834 <xQueueGenericCreate+0x40>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <xQueueGenericCreate+0x42>
 8000834:	2300      	movs	r3, #0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d104      	bne.n	8000844 <xQueueGenericCreate+0x50>
 800083a:	4915      	ldr	r1, [pc, #84]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800083c:	f44f 70c7 	mov.w	r0, #398	@ 0x18e
 8000840:	f005 fd3a 	bl	80062b8 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800084a:	d904      	bls.n	8000856 <xQueueGenericCreate+0x62>
 800084c:	4910      	ldr	r1, [pc, #64]	@ (8000890 <xQueueGenericCreate+0x9c>)
 800084e:	f240 1091 	movw	r0, #401	@ 0x191
 8000852:	f005 fd31 	bl	80062b8 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3350      	adds	r3, #80	@ 0x50
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fb92 	bl	8002f84 <pvPortMalloc>
 8000860:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3350      	adds	r3, #80	@ 0x50
 8000870:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4613      	mov	r3, r2
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f000 f808 	bl	8000894 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000884:	69bb      	ldr	r3, [r7, #24]
    }
 8000886:	4618      	mov	r0, r3
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	08007b18 	.word	0x08007b18

08000894 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e002      	b.n	80008b6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008c2:	2101      	movs	r1, #1
 80008c4:	69b8      	ldr	r0, [r7, #24]
 80008c6:	f7ff ff31 	bl	800072c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	2073      	movs	r0, #115	@ 0x73
 80008da:	f004 f93b 	bl	8004b54 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	@ 0x30
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d104      	bne.n	800090e <xQueueGenericSend+0x26>
 8000904:	497e      	ldr	r1, [pc, #504]	@ (8000b00 <xQueueGenericSend+0x218>)
 8000906:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 800090a:	f005 fcd5 	bl	80062b8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <xQueueGenericSend+0x34>
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <xQueueGenericSend+0x38>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <xQueueGenericSend+0x3a>
 8000920:	2300      	movs	r3, #0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d104      	bne.n	8000930 <xQueueGenericSend+0x48>
 8000926:	4976      	ldr	r1, [pc, #472]	@ (8000b00 <xQueueGenericSend+0x218>)
 8000928:	f240 300d 	movw	r0, #781	@ 0x30d
 800092c:	f005 fcc4 	bl	80062b8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d103      	bne.n	800093e <xQueueGenericSend+0x56>
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800093a:	2b01      	cmp	r3, #1
 800093c:	d101      	bne.n	8000942 <xQueueGenericSend+0x5a>
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <xQueueGenericSend+0x5c>
 8000942:	2300      	movs	r3, #0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <xQueueGenericSend+0x6a>
 8000948:	496d      	ldr	r1, [pc, #436]	@ (8000b00 <xQueueGenericSend+0x218>)
 800094a:	f240 300e 	movw	r0, #782	@ 0x30e
 800094e:	f005 fcb3 	bl	80062b8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000952:	f001 faeb 	bl	8001f2c <xTaskGetSchedulerState>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <xQueueGenericSend+0x7a>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <xQueueGenericSend+0x7e>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <xQueueGenericSend+0x80>
 8000966:	2300      	movs	r3, #0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d104      	bne.n	8000976 <xQueueGenericSend+0x8e>
 800096c:	4964      	ldr	r1, [pc, #400]	@ (8000b00 <xQueueGenericSend+0x218>)
 800096e:	f240 3011 	movw	r0, #785	@ 0x311
 8000972:	f005 fca1 	bl	80062b8 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000976:	f002 f9ef 	bl	8002d58 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000982:	429a      	cmp	r2, r3
 8000984:	d302      	bcc.n	800098c <xQueueGenericSend+0xa4>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d136      	bne.n	80009fa <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	4618      	mov	r0, r3
 8000990:	f004 fe6e 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	460b      	mov	r3, r1
 800099e:	4601      	mov	r1, r0
 80009a0:	205a      	movs	r0, #90	@ 0x5a
 80009a2:	f004 f94d 	bl	8004c40 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6a38      	ldr	r0, [r7, #32]
 80009ac:	f000 fa54 	bl	8000e58 <prvCopyDataToQueue>
 80009b0:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d010      	beq.n	80009dc <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	3324      	adds	r3, #36	@ 0x24
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 f922 	bl	8001c08 <xTaskRemoveFromEventList>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d013      	beq.n	80009f2 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <xQueueGenericSend+0x21c>)
 80009cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	f3bf 8f4f 	dsb	sy
 80009d6:	f3bf 8f6f 	isb	sy
 80009da:	e00a      	b.n	80009f2 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009e2:	4b48      	ldr	r3, [pc, #288]	@ (8000b04 <xQueueGenericSend+0x21c>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009f2:	f002 f9db 	bl	8002dac <vPortExitCritical>
                return pdPASS;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e07d      	b.n	8000af6 <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d110      	bne.n	8000a22 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a00:	f002 f9d4 	bl	8002dac <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fe32 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	460b      	mov	r3, r1
 8000a16:	4601      	mov	r1, r0
 8000a18:	205a      	movs	r0, #90	@ 0x5a
 8000a1a:	f004 f911 	bl	8004c40 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e069      	b.n	8000af6 <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d106      	bne.n	8000a36 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 f94d 	bl	8001ccc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a36:	f002 f9b9 	bl	8002dac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a3a:	f000 feb1 	bl	80017a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a3e:	f002 f98b 	bl	8002d58 <vPortEnterCritical>
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4e:	d103      	bne.n	8000a58 <xQueueGenericSend+0x170>
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d103      	bne.n	8000a6e <xQueueGenericSend+0x186>
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a6e:	f002 f99d 	bl	8002dac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a72:	1d3a      	adds	r2, r7, #4
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f93c 	bl	8001cf8 <xTaskCheckForTimeOut>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d124      	bne.n	8000ad0 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a86:	6a38      	ldr	r0, [r7, #32]
 8000a88:	f000 fade 	bl	8001048 <prvIsQueueFull>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d018      	beq.n	8000ac4 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	3310      	adds	r3, #16
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f86a 	bl	8001b74 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000aa0:	6a38      	ldr	r0, [r7, #32]
 8000aa2:	f000 fa69 	bl	8000f78 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aa6:	f000 fe89 	bl	80017bc <xTaskResumeAll>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f47f af62 	bne.w	8000976 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <xQueueGenericSend+0x21c>)
 8000ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	f3bf 8f4f 	dsb	sy
 8000abe:	f3bf 8f6f 	isb	sy
 8000ac2:	e758      	b.n	8000976 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ac4:	6a38      	ldr	r0, [r7, #32]
 8000ac6:	f000 fa57 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000aca:	f000 fe77 	bl	80017bc <xTaskResumeAll>
 8000ace:	e752      	b.n	8000976 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ad0:	6a38      	ldr	r0, [r7, #32]
 8000ad2:	f000 fa51 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ad6:	f000 fe71 	bl	80017bc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fdc7 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	460b      	mov	r3, r1
 8000aec:	4601      	mov	r1, r0
 8000aee:	205a      	movs	r0, #90	@ 0x5a
 8000af0:	f004 f8a6 	bl	8004c40 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000af4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08007b18 	.word	0x08007b18
 8000b04:	e000ed04 	.word	0xe000ed04

08000b08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8000b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d104      	bne.n	8000b2a <xQueueGenericSendFromISR+0x22>
 8000b20:	494c      	ldr	r1, [pc, #304]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b22:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8000b26:	f005 fbc7 	bl	80062b8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <xQueueGenericSendFromISR+0x30>
 8000b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <xQueueGenericSendFromISR+0x34>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <xQueueGenericSendFromISR+0x36>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <xQueueGenericSendFromISR+0x44>
 8000b42:	4944      	ldr	r1, [pc, #272]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b44:	f240 30e1 	movw	r0, #993	@ 0x3e1
 8000b48:	f005 fbb6 	bl	80062b8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d103      	bne.n	8000b5a <xQueueGenericSendFromISR+0x52>
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d101      	bne.n	8000b5e <xQueueGenericSendFromISR+0x56>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <xQueueGenericSendFromISR+0x58>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <xQueueGenericSendFromISR+0x66>
 8000b64:	493b      	ldr	r1, [pc, #236]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000b66:	f240 30e2 	movw	r0, #994	@ 0x3e2
 8000b6a:	f005 fba5 	bl	80062b8 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b6e:	f002 f9d5 	bl	8002f1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b72:	f3ef 8211 	mrs	r2, BASEPRI
 8000b76:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000b7a:	f383 8811 	msr	BASEPRI, r3
 8000b7e:	f3bf 8f6f 	isb	sy
 8000b82:	f3bf 8f4f 	dsb	sy
 8000b86:	61ba      	str	r2, [r7, #24]
 8000b88:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d302      	bcc.n	8000ba0 <xQueueGenericSendFromISR+0x98>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d142      	bne.n	8000c26 <xQueueGenericSendFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bae:	61fb      	str	r3, [r7, #28]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 fd5c 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000bb8:	4601      	mov	r1, r0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	2060      	movs	r0, #96	@ 0x60
 8000bc0:	f003 ff6e 	bl	8004aa0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bca:	f000 f945 	bl	8000e58 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bce:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd6:	d112      	bne.n	8000bfe <xQueueGenericSendFromISR+0xf6>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01f      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be2:	3324      	adds	r3, #36	@ 0x24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 f80f 	bl	8001c08 <xTaskRemoveFromEventList>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d017      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d014      	beq.n	8000c20 <xQueueGenericSendFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e010      	b.n	8000c20 <xQueueGenericSendFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000bfe:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c04:	d104      	bne.n	8000c10 <xQueueGenericSendFromISR+0x108>
 8000c06:	4913      	ldr	r1, [pc, #76]	@ (8000c54 <xQueueGenericSendFromISR+0x14c>)
 8000c08:	f240 406b 	movw	r0, #1131	@ 0x46b
 8000c0c:	f005 fb54 	bl	80062b8 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8000c24:	e00b      	b.n	8000c3e <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 fd21 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	2060      	movs	r0, #96	@ 0x60
 8000c36:	f003 ff33 	bl	8004aa0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c48:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	@ 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08007b18 	.word	0x08007b18

08000c58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08d      	sub	sp, #52	@ 0x34
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <xQueueReceive+0x24>
 8000c72:	4977      	ldr	r1, [pc, #476]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000c74:	f240 502f 	movw	r0, #1327	@ 0x52f
 8000c78:	f005 fb1e 	bl	80062b8 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <xQueueReceive+0x32>
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <xQueueReceive+0x36>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <xQueueReceive+0x38>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <xQueueReceive+0x46>
 8000c94:	496e      	ldr	r1, [pc, #440]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000c96:	f240 5033 	movw	r0, #1331	@ 0x533
 8000c9a:	f005 fb0d 	bl	80062b8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c9e:	f001 f945 	bl	8001f2c <xTaskGetSchedulerState>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <xQueueReceive+0x56>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <xQueueReceive+0x5a>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <xQueueReceive+0x5c>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <xQueueReceive+0x6a>
 8000cb8:	4965      	ldr	r1, [pc, #404]	@ (8000e50 <xQueueReceive+0x1f8>)
 8000cba:	f44f 60a7 	mov.w	r0, #1336	@ 0x538
 8000cbe:	f005 fafb 	bl	80062b8 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000cc2:	f002 f849 	bl	8002d58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cca:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d02f      	beq.n	8000d32 <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	6a38      	ldr	r0, [r7, #32]
 8000cd6:	f000 f929 	bl	8000f2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 fcc7 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f004 fcc3 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000cea:	4602      	mov	r2, r0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	9100      	str	r1, [sp, #0]
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	205c      	movs	r0, #92	@ 0x5c
 8000cf6:	f003 ffa3 	bl	8004c40 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00f      	beq.n	8000d2a <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	3310      	adds	r3, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 ff7a 	bl	8001c08 <xTaskRemoveFromEventList>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <xQueueReceive+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e54 <xQueueReceive+0x1fc>)
 8000d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	f3bf 8f4f 	dsb	sy
 8000d26:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d2a:	f002 f83f 	bl	8002dac <vPortExitCritical>
                return pdPASS;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e08a      	b.n	8000e48 <xQueueReceive+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d113      	bne.n	8000d60 <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d38:	f002 f838 	bl	8002dac <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fc96 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000d44:	4604      	mov	r4, r0
 8000d46:	2000      	movs	r0, #0
 8000d48:	f004 fc92 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2101      	movs	r1, #1
 8000d52:	9100      	str	r1, [sp, #0]
 8000d54:	4621      	mov	r1, r4
 8000d56:	205c      	movs	r0, #92	@ 0x5c
 8000d58:	f003 ff72 	bl	8004c40 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e073      	b.n	8000e48 <xQueueReceive+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 ffae 	bl	8001ccc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d74:	f002 f81a 	bl	8002dac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d78:	f000 fd12 	bl	80017a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d7c:	f001 ffec 	bl	8002d58 <vPortEnterCritical>
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d103      	bne.n	8000d96 <xQueueReceive+0x13e>
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da2:	d103      	bne.n	8000dac <xQueueReceive+0x154>
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dac:	f001 fffe 	bl	8002dac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000db0:	1d3a      	adds	r2, r7, #4
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 ff9d 	bl	8001cf8 <xTaskCheckForTimeOut>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d124      	bne.n	8000e0e <xQueueReceive+0x1b6>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f000 f929 	bl	800101c <prvIsQueueEmpty>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d018      	beq.n	8000e02 <xQueueReceive+0x1aa>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	3324      	adds	r3, #36	@ 0x24
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fecb 	bl	8001b74 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000dde:	6a38      	ldr	r0, [r7, #32]
 8000de0:	f000 f8ca 	bl	8000f78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000de4:	f000 fcea 	bl	80017bc <xTaskResumeAll>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f47f af69 	bne.w	8000cc2 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <xQueueReceive+0x1fc>)
 8000df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	e75f      	b.n	8000cc2 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e02:	6a38      	ldr	r0, [r7, #32]
 8000e04:	f000 f8b8 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e08:	f000 fcd8 	bl	80017bc <xTaskResumeAll>
 8000e0c:	e759      	b.n	8000cc2 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e0e:	6a38      	ldr	r0, [r7, #32]
 8000e10:	f000 f8b2 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e14:	f000 fcd2 	bl	80017bc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e18:	6a38      	ldr	r0, [r7, #32]
 8000e1a:	f000 f8ff 	bl	800101c <prvIsQueueEmpty>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f43f af4e 	beq.w	8000cc2 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fc21 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	f004 fc1d 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8000e36:	4602      	mov	r2, r0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	9100      	str	r1, [sp, #0]
 8000e3e:	4621      	mov	r1, r4
 8000e40:	205c      	movs	r0, #92	@ 0x5c
 8000e42:	f003 fefd 	bl	8004c40 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e46:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	372c      	adds	r7, #44	@ 0x2c
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	08007b18 	.word	0x08007b18
 8000e54:	e000ed04 	.word	0xe000ed04

08000e58 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e6c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d14d      	bne.n	8000f1a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 f870 	bl	8001f68 <xTaskPriorityDisinherit>
 8000e88:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	e043      	b.n	8000f1a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d119      	bne.n	8000ecc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6858      	ldr	r0, [r3, #4]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	f006 fe1e 	bl	8007ae4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	441a      	add	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d32b      	bcc.n	8000f1a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	e026      	b.n	8000f1a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	68d8      	ldr	r0, [r3, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	f006 fe04 	bl	8007ae4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	441a      	add	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	425b      	negs	r3, r3
 8000f02:	441a      	add	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d105      	bne.n	8000f1a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f22:	697b      	ldr	r3, [r7, #20]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d018      	beq.n	8000f70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	441a      	add	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d303      	bcc.n	8000f60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68d9      	ldr	r1, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	461a      	mov	r2, r3
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f006 fdba 	bl	8007ae4 <memcpy>
    }
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f80:	f001 feea 	bl	8002d58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f8c:	e011      	b.n	8000fb2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d012      	beq.n	8000fbc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3324      	adds	r3, #36	@ 0x24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fe34 	bl	8001c08 <xTaskRemoveFromEventList>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000fa6:	f000 ff03 	bl	8001db0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	dce9      	bgt.n	8000f8e <prvUnlockQueue+0x16>
 8000fba:	e000      	b.n	8000fbe <prvUnlockQueue+0x46>
                        break;
 8000fbc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	22ff      	movs	r2, #255	@ 0xff
 8000fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000fc6:	f001 fef1 	bl	8002dac <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000fca:	f001 fec5 	bl	8002d58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000fd4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fd6:	e011      	b.n	8000ffc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d012      	beq.n	8001006 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fe0f 	bl	8001c08 <xTaskRemoveFromEventList>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ff0:	f000 fede 	bl	8001db0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dce9      	bgt.n	8000fd8 <prvUnlockQueue+0x60>
 8001004:	e000      	b.n	8001008 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001006:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001010:	f001 fecc 	bl	8002dac <vPortExitCritical>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001024:	f001 fe98 	bl	8002d58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001030:	2301      	movs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e001      	b.n	800103a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800103a:	f001 feb7 	bl	8002dac <vPortExitCritical>

    return xReturn;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001050:	f001 fe82 	bl	8002d58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800105c:	429a      	cmp	r2, r3
 800105e:	d102      	bne.n	8001066 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e001      	b.n	800106a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800106a:	f001 fe9f 	bl	8002dac <vPortExitCritical>

    return xReturn;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e01e      	b.n	80010c6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d115      	bne.n	80010c0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001094:	4910      	ldr	r1, [pc, #64]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <vQueueAddToRegistry+0x60>)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fadf 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 80010b2:	4601      	mov	r1, r0
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	2071      	movs	r0, #113	@ 0x71
 80010ba:	f003 fcf1 	bl	8004aa0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80010be:	e006      	b.n	80010ce <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	d9dd      	bls.n	8001088 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000034 	.word	0x20000034

080010dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80010ec:	f001 fe34 	bl	8002d58 <vPortEnterCritical>
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d103      	bne.n	8001106 <vQueueWaitForMessageRestricted+0x2a>
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800110c:	b25b      	sxtb	r3, r3
 800110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001112:	d103      	bne.n	800111c <vQueueWaitForMessageRestricted+0x40>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800111c:	f001 fe46 	bl	8002dac <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3324      	adds	r3, #36	@ 0x24
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fd3f 	bl	8001bb4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff1e 	bl	8000f78 <prvUnlockQueue>
    }
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	@ 0x30
 8001148:	af04      	add	r7, sp, #16
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f001 ff13 	bl	8002f84 <pvPortMalloc>
 800115e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00e      	beq.n	8001184 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001166:	2058      	movs	r0, #88	@ 0x58
 8001168:	f001 ff0c 	bl	8002f84 <pvPortMalloc>
 800116c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
 800117a:	e005      	b.n	8001188 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f001 ffcf 	bl	8003120 <vPortFree>
 8001182:	e001      	b.n	8001188 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	2300      	movs	r3, #0
 8001192:	9303      	str	r3, [sp, #12]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 f80f 	bl	80011c8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011aa:	69f8      	ldr	r0, [r7, #28]
 80011ac:	f000 f89e 	bl	80012ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	e002      	b.n	80011bc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80011bc:	69bb      	ldr	r3, [r7, #24]
    }
 80011be:	4618      	mov	r0, r3
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80011d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	461a      	mov	r2, r3
 80011e0:	21a5      	movs	r1, #165	@ 0xa5
 80011e2:	f006 fc53 	bl	8007a8c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80011f0:	440b      	add	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f023 0307 	bic.w	r3, r3, #7
 80011fe:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <prvInitialiseNewTask+0x4c>
 800120a:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <prvInitialiseNewTask+0x120>)
 800120c:	f240 3069 	movw	r0, #873	@ 0x369
 8001210:	f005 f852 	bl	80062b8 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01f      	beq.n	800125a <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e012      	b.n	8001246 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	4413      	add	r3, r2
 8001226:	7819      	ldrb	r1, [r3, #0]
 8001228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	4413      	add	r3, r2
 800122e:	3334      	adds	r3, #52	@ 0x34
 8001230:	460a      	mov	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d9e9      	bls.n	8001220 <prvInitialiseNewTask+0x58>
 800124c:	e000      	b.n	8001250 <prvInitialiseNewTask+0x88>
            {
                break;
 800124e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001258:	e003      	b.n	8001262 <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d901      	bls.n	800126c <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001268:	2304      	movs	r3, #4
 800126a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800126c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001274:	6a3a      	ldr	r2, [r7, #32]
 8001276:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	3304      	adds	r3, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f9be 	bl	8000604 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	3318      	adds	r3, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f9b9 	bl	8000604 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001296:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f1c3 0205 	rsb	r2, r3, #5
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80012a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012aa:	3350      	adds	r3, #80	@ 0x50
 80012ac:	2204      	movs	r2, #4
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 fbeb 	bl	8007a8c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80012b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b8:	3354      	adds	r3, #84	@ 0x54
 80012ba:	2201      	movs	r2, #1
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fbe4 	bl	8007a8c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	6938      	ldr	r0, [r7, #16]
 80012ca:	f001 fbaf 	bl	8002a2c <pxPortInitialiseStack>
 80012ce:	4602      	mov	r2, r0
 80012d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08007b84 	.word	0x08007b84

080012ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012f4:	f001 fd30 	bl	8002d58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012f8:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a3a      	ldr	r2, [pc, #232]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 8001300:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800130a:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001310:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <prvAddNewTaskToReadyList+0xfc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d110      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001318:	f000 fd6e 	bl	8001df8 <prvInitialiseTaskLists>
 800131c:	e00d      	b.n	800133a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800131e:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <prvAddNewTaskToReadyList+0x104>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001326:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	429a      	cmp	r2, r3
 8001332:	d802      	bhi.n	800133a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001334:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a2c      	ldr	r2, [pc, #176]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 8001342:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <prvAddNewTaskToReadyList+0x108>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d016      	beq.n	8001380 <prvAddNewTaskToReadyList+0x94>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f004 f865 	bl	8005424 <SEGGER_SYSVIEW_OnTaskCreate>
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	461d      	mov	r5, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461c      	mov	r4, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	1ae3      	subs	r3, r4, r3
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	462b      	mov	r3, r5
 800137c:	f002 f894 	bl	80034a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	f004 f8d2 	bl	800552c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <prvAddNewTaskToReadyList+0x10c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	4a18      	ldr	r2, [pc, #96]	@ (80013f8 <prvAddNewTaskToReadyList+0x10c>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <prvAddNewTaskToReadyList+0x110>)
 80013a8:	441a      	add	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f7ff f934 	bl	800061e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80013b6:	f001 fcf9 	bl	8002dac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <prvAddNewTaskToReadyList+0x104>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00e      	beq.n	80013e0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <prvAddNewTaskToReadyList+0x100>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <prvAddNewTaskToReadyList+0x114>)
 80013d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	f3bf 8f4f 	dsb	sy
 80013dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}
 80013e8:	2000014c 	.word	0x2000014c
 80013ec:	20000074 	.word	0x20000074
 80013f0:	20000158 	.word	0x20000158
 80013f4:	20000168 	.word	0x20000168
 80013f8:	20000154 	.word	0x20000154
 80013fc:	20000078 	.word	0x20000078
 8001400:	e000ed04 	.word	0xe000ed04

08001404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d015      	beq.n	8001442 <vTaskDelay+0x3e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001416:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <vTaskDelay+0x5c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <vTaskDelay+0x24>
 800141e:	4911      	ldr	r1, [pc, #68]	@ (8001464 <vTaskDelay+0x60>)
 8001420:	f240 504a 	movw	r0, #1354	@ 0x54a
 8001424:	f004 ff48 	bl	80062b8 <vAssertCalled>
            vTaskSuspendAll();
 8001428:	f000 f9ba 	bl	80017a0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	2023      	movs	r0, #35	@ 0x23
 8001430:	f003 fafa 	bl	8004a28 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001434:	2100      	movs	r1, #0
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 ff6a 	bl	8002310 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800143c:	f000 f9be 	bl	80017bc <xTaskResumeAll>
 8001440:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d107      	bne.n	8001458 <vTaskDelay+0x54>
        {
            portYIELD_WITHIN_API();
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <vTaskDelay+0x64>)
 800144a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	f3bf 8f4f 	dsb	sy
 8001454:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000174 	.word	0x20000174
 8001464:	08007b84 	.word	0x08007b84
 8001468:	e000ed04 	.word	0xe000ed04

0800146c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8001474:	f001 fc70 	bl	8002d58 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <vTaskSuspend+0x18>
 800147e:	4b47      	ldr	r3, [pc, #284]	@ (800159c <vTaskSuspend+0x130>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	e000      	b.n	8001486 <vTaskSuspend+0x1a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4618      	mov	r0, r3
 800148c:	f004 f8f0 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8001490:	4603      	mov	r3, r0
 8001492:	4619      	mov	r1, r3
 8001494:	2029      	movs	r0, #41	@ 0x29
 8001496:	f003 fac7 	bl	8004a28 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3304      	adds	r3, #4
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f91a 	bl	80006d8 <uxListRemove>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d115      	bne.n	80014d6 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ae:	493c      	ldr	r1, [pc, #240]	@ (80015a0 <vTaskSuspend+0x134>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10a      	bne.n	80014d6 <vTaskSuspend+0x6a>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	2201      	movs	r2, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <vTaskSuspend+0x138>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4013      	ands	r3, r2
 80014d2:	4a34      	ldr	r2, [pc, #208]	@ (80015a4 <vTaskSuspend+0x138>)
 80014d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3318      	adds	r3, #24
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f8f8 	bl	80006d8 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	211b      	movs	r1, #27
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 f85f 	bl	80055b0 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3304      	adds	r3, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	482b      	ldr	r0, [pc, #172]	@ (80015a8 <vTaskSuspend+0x13c>)
 80014fa:	f7ff f890 	bl	800061e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e010      	b.n	8001526 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	3354      	adds	r3, #84	@ 0x54
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	3354      	adds	r3, #84	@ 0x54
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3301      	adds	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	ddeb      	ble.n	8001504 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800152c:	f001 fc3e 	bl	8002dac <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001530:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <vTaskSuspend+0x140>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8001538:	f001 fc0e 	bl	8002d58 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800153c:	f000 fcda 	bl	8001ef4 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8001540:	f001 fc34 	bl	8002dac <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <vTaskSuspend+0x130>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	429a      	cmp	r2, r3
 800154c:	d121      	bne.n	8001592 <vTaskSuspend+0x126>
        {
            if( xSchedulerRunning != pdFALSE )
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <vTaskSuspend+0x140>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d011      	beq.n	800157a <vTaskSuspend+0x10e>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <vTaskSuspend+0x144>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <vTaskSuspend+0xfc>
 800155e:	4915      	ldr	r1, [pc, #84]	@ (80015b4 <vTaskSuspend+0x148>)
 8001560:	f240 60fe 	movw	r0, #1790	@ 0x6fe
 8001564:	f004 fea8 	bl	80062b8 <vAssertCalled>
                portYIELD_WITHIN_API();
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <vTaskSuspend+0x14c>)
 800156a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001578:	e00b      	b.n	8001592 <vTaskSuspend+0x126>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <vTaskSuspend+0x13c>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <vTaskSuspend+0x150>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d103      	bne.n	800158e <vTaskSuspend+0x122>
                    pxCurrentTCB = NULL;
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <vTaskSuspend+0x130>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
    }
 800158c:	e001      	b.n	8001592 <vTaskSuspend+0x126>
                    vTaskSwitchContext();
 800158e:	f000 fa8b 	bl	8001aa8 <vTaskSwitchContext>
    }
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000074 	.word	0x20000074
 80015a0:	20000078 	.word	0x20000078
 80015a4:	20000154 	.word	0x20000154
 80015a8:	20000138 	.word	0x20000138
 80015ac:	20000158 	.word	0x20000158
 80015b0:	20000174 	.word	0x20000174
 80015b4:	08007b84 	.word	0x08007b84
 80015b8:	e000ed04 	.word	0xe000ed04
 80015bc:	2000014c 	.word	0x2000014c

080015c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	60bb      	str	r3, [r7, #8]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <prvTaskIsTaskSuspended+0x20>
 80015d6:	490d      	ldr	r1, [pc, #52]	@ (800160c <prvTaskIsTaskSuspended+0x4c>)
 80015d8:	f44f 60e5 	mov.w	r0, #1832	@ 0x728
 80015dc:	f004 fe6c 	bl	80062b8 <vAssertCalled>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <prvTaskIsTaskSuspended+0x50>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10a      	bne.n	8001600 <prvTaskIsTaskSuspended+0x40>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <prvTaskIsTaskSuspended+0x54>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d005      	beq.n	8001600 <prvTaskIsTaskSuspended+0x40>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <prvTaskIsTaskSuspended+0x40>
                {
                    xReturn = pdTRUE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001600:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	08007b84 	.word	0x08007b84
 8001610:	20000138 	.word	0x20000138
 8001614:	2000010c 	.word	0x2000010c

08001618 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d104      	bne.n	8001634 <vTaskResume+0x1c>
 800162a:	4929      	ldr	r1, [pc, #164]	@ (80016d0 <vTaskResume+0xb8>)
 800162c:	f240 7052 	movw	r0, #1874	@ 0x752
 8001630:	f004 fe42 	bl	80062b8 <vAssertCalled>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <vTaskResume+0xbc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	429a      	cmp	r2, r3
 800163c:	d044      	beq.n	80016c8 <vTaskResume+0xb0>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d041      	beq.n	80016c8 <vTaskResume+0xb0>
        {
            taskENTER_CRITICAL();
 8001644:	f001 fb88 	bl	8002d58 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ffb9 	bl	80015c0 <prvTaskIsTaskSuspended>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d037      	beq.n	80016c4 <vTaskResume+0xac>
                {
                    traceTASK_RESUME( pxTCB );
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4618      	mov	r0, r3
 8001658:	f004 f80a 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 800165c:	4603      	mov	r3, r0
 800165e:	4619      	mov	r1, r3
 8001660:	202a      	movs	r0, #42	@ 0x2a
 8001662:	f003 f9e1 	bl	8004a28 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3304      	adds	r3, #4
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f834 	bl	80006d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 ff5a 	bl	800552c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167c:	2201      	movs	r2, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <vTaskResume+0xc0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4313      	orrs	r3, r2
 8001686:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <vTaskResume+0xc0>)
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <vTaskResume+0xc4>)
 8001698:	441a      	add	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3304      	adds	r3, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7fe ffbc 	bl	800061e <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <vTaskResume+0xbc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d307      	bcc.n	80016c4 <vTaskResume+0xac>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <vTaskResume+0xc8>)
 80016b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f3bf 8f4f 	dsb	sy
 80016c0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80016c4:	f001 fb72 	bl	8002dac <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08007b84 	.word	0x08007b84
 80016d4:	20000074 	.word	0x20000074
 80016d8:	20000154 	.word	0x20000154
 80016dc:	20000078 	.word	0x20000078
 80016e0:	e000ed04 	.word	0xe000ed04

080016e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80016ea:	4b24      	ldr	r3, [pc, #144]	@ (800177c <vTaskStartScheduler+0x98>)
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	2282      	movs	r2, #130	@ 0x82
 80016f6:	4922      	ldr	r1, [pc, #136]	@ (8001780 <vTaskStartScheduler+0x9c>)
 80016f8:	4822      	ldr	r0, [pc, #136]	@ (8001784 <vTaskStartScheduler+0xa0>)
 80016fa:	f7ff fd23 	bl	8001144 <xTaskCreate>
 80016fe:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001706:	f000 fe7b 	bl	8002400 <xTimerCreateTimerTask>
 800170a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d124      	bne.n	800175c <vTaskStartScheduler+0x78>
        __asm volatile
 8001712:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8001716:	f383 8811 	msr	BASEPRI, r3
 800171a:	f3bf 8f6f 	isb	sy
 800171e:	f3bf 8f4f 	dsb	sy
 8001722:	603b      	str	r3, [r7, #0]
    }
 8001724:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <vTaskStartScheduler+0xa4>)
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800172e:	4b17      	ldr	r3, [pc, #92]	@ (800178c <vTaskStartScheduler+0xa8>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <vTaskStartScheduler+0xac>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <vTaskStartScheduler+0xb0>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <vTaskStartScheduler+0x98>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d102      	bne.n	800174c <vTaskStartScheduler+0x68>
 8001746:	f003 fe51 	bl	80053ec <SEGGER_SYSVIEW_OnIdle>
 800174a:	e004      	b.n	8001756 <vTaskStartScheduler+0x72>
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <vTaskStartScheduler+0xb0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f003 fea9 	bl	80054a8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001756:	f001 f9ed 	bl	8002b34 <xPortStartScheduler>
 800175a:	e008      	b.n	800176e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001762:	d104      	bne.n	800176e <vTaskStartScheduler+0x8a>
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <vTaskStartScheduler+0xb4>)
 8001766:	f640 0041 	movw	r0, #2113	@ 0x841
 800176a:	f004 fda5 	bl	80062b8 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <vTaskStartScheduler+0xb8>)
 8001770:	681b      	ldr	r3, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000170 	.word	0x20000170
 8001780:	08007bf0 	.word	0x08007bf0
 8001784:	08001dc9 	.word	0x08001dc9
 8001788:	2000016c 	.word	0x2000016c
 800178c:	20000158 	.word	0x20000158
 8001790:	20000150 	.word	0x20000150
 8001794:	20000074 	.word	0x20000074
 8001798:	08007b84 	.word	0x08007b84
 800179c:	20000000 	.word	0x20000000

080017a0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <vTaskSuspendAll+0x18>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a03      	ldr	r2, [pc, #12]	@ (80017b8 <vTaskSuspendAll+0x18>)
 80017ac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20000174 	.word	0x20000174

080017bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80017ca:	4b40      	ldr	r3, [pc, #256]	@ (80018cc <xTaskResumeAll+0x110>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d104      	bne.n	80017dc <xTaskResumeAll+0x20>
 80017d2:	493f      	ldr	r1, [pc, #252]	@ (80018d0 <xTaskResumeAll+0x114>)
 80017d4:	f640 00b4 	movw	r0, #2228	@ 0x8b4
 80017d8:	f004 fd6e 	bl	80062b8 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80017dc:	f001 fabc 	bl	8002d58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80017e0:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <xTaskResumeAll+0x110>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	4a39      	ldr	r2, [pc, #228]	@ (80018cc <xTaskResumeAll+0x110>)
 80017e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017ea:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <xTaskResumeAll+0x110>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d165      	bne.n	80018be <xTaskResumeAll+0x102>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <xTaskResumeAll+0x118>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d061      	beq.n	80018be <xTaskResumeAll+0x102>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80017fa:	e032      	b.n	8001862 <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017fc:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <xTaskResumeAll+0x11c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3318      	adds	r3, #24
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe ff65 	bl	80006d8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3304      	adds	r3, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe ff60 	bl	80006d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fe86 	bl	800552c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	2201      	movs	r2, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <xTaskResumeAll+0x120>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4313      	orrs	r3, r2
 800182e:	4a2b      	ldr	r2, [pc, #172]	@ (80018dc <xTaskResumeAll+0x120>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4a28      	ldr	r2, [pc, #160]	@ (80018e0 <xTaskResumeAll+0x124>)
 8001840:	441a      	add	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4610      	mov	r0, r2
 800184a:	f7fe fee8 	bl	800061e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <xTaskResumeAll+0x128>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	429a      	cmp	r2, r3
 800185a:	d302      	bcc.n	8001862 <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 800185c:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <xTaskResumeAll+0x12c>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001862:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <xTaskResumeAll+0x11c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1c8      	bne.n	80017fc <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001870:	f000 fb40 	bl	8001ef4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <xTaskResumeAll+0x130>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d010      	beq.n	80018a2 <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001880:	f000 f85a 	bl	8001938 <xTaskIncrementTick>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 800188a:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <xTaskResumeAll+0x12c>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f1      	bne.n	8001880 <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <xTaskResumeAll+0x130>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <xTaskResumeAll+0x12c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <xTaskResumeAll+0x102>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80018aa:	2301      	movs	r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <xTaskResumeAll+0x134>)
 80018b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80018be:	f001 fa75 	bl	8002dac <vPortExitCritical>

    return xAlreadyYielded;
 80018c2:	68bb      	ldr	r3, [r7, #8]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000174 	.word	0x20000174
 80018d0:	08007b84 	.word	0x08007b84
 80018d4:	2000014c 	.word	0x2000014c
 80018d8:	2000010c 	.word	0x2000010c
 80018dc:	20000154 	.word	0x20000154
 80018e0:	20000078 	.word	0x20000078
 80018e4:	20000074 	.word	0x20000074
 80018e8:	20000160 	.word	0x20000160
 80018ec:	2000015c 	.word	0x2000015c
 80018f0:	e000ed04 	.word	0xe000ed04

080018f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80018fa:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <xTaskGetTickCount+0x1c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000150 	.word	0x20000150

08001914 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800191a:	f001 faff 	bl	8002f1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001922:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <xTaskGetTickCountFromISR+0x20>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001928:	683b      	ldr	r3, [r7, #0]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000150 	.word	0x20000150

08001938 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001942:	4b4d      	ldr	r3, [pc, #308]	@ (8001a78 <xTaskIncrementTick+0x140>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 808c 	bne.w	8001a64 <xTaskIncrementTick+0x12c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800194c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a7c <xTaskIncrementTick+0x144>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001954:	4a49      	ldr	r2, [pc, #292]	@ (8001a7c <xTaskIncrementTick+0x144>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11a      	bne.n	8001996 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8001960:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <xTaskIncrementTick+0x148>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <xTaskIncrementTick+0x3c>
 800196a:	4946      	ldr	r1, [pc, #280]	@ (8001a84 <xTaskIncrementTick+0x14c>)
 800196c:	f640 20c7 	movw	r0, #2759	@ 0xac7
 8001970:	f004 fca2 	bl	80062b8 <vAssertCalled>
 8001974:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <xTaskIncrementTick+0x148>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b43      	ldr	r3, [pc, #268]	@ (8001a88 <xTaskIncrementTick+0x150>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a40      	ldr	r2, [pc, #256]	@ (8001a80 <xTaskIncrementTick+0x148>)
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4a41      	ldr	r2, [pc, #260]	@ (8001a88 <xTaskIncrementTick+0x150>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b40      	ldr	r3, [pc, #256]	@ (8001a8c <xTaskIncrementTick+0x154>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a8c <xTaskIncrementTick+0x154>)
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	f000 faaf 	bl	8001ef4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001996:	4b3e      	ldr	r3, [pc, #248]	@ (8001a90 <xTaskIncrementTick+0x158>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d34c      	bcc.n	8001a3a <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019a0:	4b37      	ldr	r3, [pc, #220]	@ (8001a80 <xTaskIncrementTick+0x148>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019aa:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <xTaskIncrementTick+0x158>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	601a      	str	r2, [r3, #0]
                    break;
 80019b2:	e042      	b.n	8001a3a <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019b4:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <xTaskIncrementTick+0x148>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d203      	bcs.n	80019d4 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80019cc:	4a30      	ldr	r2, [pc, #192]	@ (8001a90 <xTaskIncrementTick+0x158>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80019d2:	e032      	b.n	8001a3a <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3304      	adds	r3, #4
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fe7d 	bl	80006d8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3318      	adds	r3, #24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fe74 	bl	80006d8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fd9a 	bl	800552c <SEGGER_SYSVIEW_OnTaskStartReady>
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fc:	2201      	movs	r2, #1
 80019fe:	409a      	lsls	r2, r3
 8001a00:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <xTaskIncrementTick+0x15c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <xTaskIncrementTick+0x15c>)
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <xTaskIncrementTick+0x160>)
 8001a18:	441a      	add	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4610      	mov	r0, r2
 8001a22:	f7fe fdfc 	bl	800061e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <xTaskIncrementTick+0x164>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3b5      	bcc.n	80019a0 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8001a34:	2301      	movs	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a38:	e7b2      	b.n	80019a0 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <xTaskIncrementTick+0x164>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a40:	4915      	ldr	r1, [pc, #84]	@ (8001a98 <xTaskIncrementTick+0x160>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d901      	bls.n	8001a56 <xTaskIncrementTick+0x11e>
                {
                    xSwitchRequired = pdTRUE;
 8001a52:	2301      	movs	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <xTaskIncrementTick+0x168>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <xTaskIncrementTick+0x136>
                {
                    xSwitchRequired = pdTRUE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e004      	b.n	8001a6e <xTaskIncrementTick+0x136>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <xTaskIncrementTick+0x16c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <xTaskIncrementTick+0x16c>)
 8001a6c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001a6e:	697b      	ldr	r3, [r7, #20]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000174 	.word	0x20000174
 8001a7c:	20000150 	.word	0x20000150
 8001a80:	20000104 	.word	0x20000104
 8001a84:	08007b84 	.word	0x08007b84
 8001a88:	20000108 	.word	0x20000108
 8001a8c:	20000164 	.word	0x20000164
 8001a90:	2000016c 	.word	0x2000016c
 8001a94:	20000154 	.word	0x20000154
 8001a98:	20000078 	.word	0x20000078
 8001a9c:	20000074 	.word	0x20000074
 8001aa0:	20000160 	.word	0x20000160
 8001aa4:	2000015c 	.word	0x2000015c

08001aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001aae:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <vTaskSwitchContext+0xb0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001ab6:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <vTaskSwitchContext+0xb4>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001abc:	e047      	b.n	8001b4e <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 8001abe:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <vTaskSwitchContext+0xb4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <vTaskSwitchContext+0xb8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f1c3 031f 	rsb	r3, r3, #31
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <vTaskSwitchContext+0xbc>)
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d104      	bne.n	8001af8 <vTaskSwitchContext+0x50>
 8001aee:	491e      	ldr	r1, [pc, #120]	@ (8001b68 <vTaskSwitchContext+0xc0>)
 8001af0:	f640 4002 	movw	r0, #3074	@ 0xc02
 8001af4:	f004 fbe0 	bl	80062b8 <vAssertCalled>
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <vTaskSwitchContext+0xbc>)
 8001b04:	4413      	add	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3308      	adds	r3, #8
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d104      	bne.n	8001b28 <vTaskSwitchContext+0x80>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b6c <vTaskSwitchContext+0xc4>)
 8001b30:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <vTaskSwitchContext+0xc4>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <vTaskSwitchContext+0xc8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d102      	bne.n	8001b44 <vTaskSwitchContext+0x9c>
 8001b3e:	f003 fc55 	bl	80053ec <SEGGER_SYSVIEW_OnIdle>
}
 8001b42:	e004      	b.n	8001b4e <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <vTaskSwitchContext+0xc4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fcad 	bl	80054a8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000174 	.word	0x20000174
 8001b5c:	20000160 	.word	0x20000160
 8001b60:	20000154 	.word	0x20000154
 8001b64:	20000078 	.word	0x20000078
 8001b68:	08007b84 	.word	0x08007b84
 8001b6c:	20000074 	.word	0x20000074
 8001b70:	20000170 	.word	0x20000170

08001b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <vTaskPlaceOnEventList+0x1a>
 8001b84:	4909      	ldr	r1, [pc, #36]	@ (8001bac <vTaskPlaceOnEventList+0x38>)
 8001b86:	f640 401c 	movw	r0, #3100	@ 0xc1c
 8001b8a:	f004 fb95 	bl	80062b8 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b8e:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <vTaskPlaceOnEventList+0x3c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3318      	adds	r3, #24
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fd65 	bl	8000666 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f000 fbb6 	bl	8002310 <prvAddCurrentTaskToDelayedList>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	08007b84 	.word	0x08007b84
 8001bb0:	20000074 	.word	0x20000074

08001bb4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d104      	bne.n	8001bd0 <vTaskPlaceOnEventListRestricted+0x1c>
 8001bc6:	490e      	ldr	r1, [pc, #56]	@ (8001c00 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001bc8:	f640 404b 	movw	r0, #3147	@ 0xc4b
 8001bcc:	f004 fb74 	bl	80062b8 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <vTaskPlaceOnEventListRestricted+0x50>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7fe fd20 	bl	800061e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
 8001be8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001bea:	2024      	movs	r0, #36	@ 0x24
 8001bec:	f002 fefe 	bl	80049ec <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	68b8      	ldr	r0, [r7, #8]
 8001bf4:	f000 fb8c 	bl	8002310 <prvAddCurrentTaskToDelayedList>
    }
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08007b84 	.word	0x08007b84
 8001c04:	20000074 	.word	0x20000074

08001c08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d104      	bne.n	8001c28 <xTaskRemoveFromEventList+0x20>
 8001c1e:	4924      	ldr	r1, [pc, #144]	@ (8001cb0 <xTaskRemoveFromEventList+0xa8>)
 8001c20:	f640 407b 	movw	r0, #3195	@ 0xc7b
 8001c24:	f004 fb48 	bl	80062b8 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3318      	adds	r3, #24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fd53 	bl	80006d8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c32:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <xTaskRemoveFromEventList+0xac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d120      	bne.n	8001c7c <xTaskRemoveFromEventList+0x74>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fd4a 	bl	80006d8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fc70 	bl	800552c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	2201      	movs	r2, #1
 8001c52:	409a      	lsls	r2, r3
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <xTaskRemoveFromEventList+0xb0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <xTaskRemoveFromEventList+0xb0>)
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4a14      	ldr	r2, [pc, #80]	@ (8001cbc <xTaskRemoveFromEventList+0xb4>)
 8001c6c:	441a      	add	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3304      	adds	r3, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f7fe fcd2 	bl	800061e <vListInsertEnd>
 8001c7a:	e005      	b.n	8001c88 <xTaskRemoveFromEventList+0x80>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3318      	adds	r3, #24
 8001c80:	4619      	mov	r1, r3
 8001c82:	480f      	ldr	r0, [pc, #60]	@ (8001cc0 <xTaskRemoveFromEventList+0xb8>)
 8001c84:	f7fe fccb 	bl	800061e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <xTaskRemoveFromEventList+0xbc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d905      	bls.n	8001ca2 <xTaskRemoveFromEventList+0x9a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <xTaskRemoveFromEventList+0xc0>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e001      	b.n	8001ca6 <xTaskRemoveFromEventList+0x9e>
    }
    else
    {
        xReturn = pdFALSE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	08007b84 	.word	0x08007b84
 8001cb4:	20000174 	.word	0x20000174
 8001cb8:	20000154 	.word	0x20000154
 8001cbc:	20000078 	.word	0x20000078
 8001cc0:	2000010c 	.word	0x2000010c
 8001cc4:	20000074 	.word	0x20000074
 8001cc8:	20000160 	.word	0x20000160

08001ccc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <vTaskInternalSetTimeOutState+0x24>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <vTaskInternalSetTimeOutState+0x28>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	20000164 	.word	0x20000164
 8001cf4:	20000150 	.word	0x20000150

08001cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d104      	bne.n	8001d12 <xTaskCheckForTimeOut+0x1a>
 8001d08:	4926      	ldr	r1, [pc, #152]	@ (8001da4 <xTaskCheckForTimeOut+0xac>)
 8001d0a:	f640 40f6 	movw	r0, #3318	@ 0xcf6
 8001d0e:	f004 fad3 	bl	80062b8 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d104      	bne.n	8001d22 <xTaskCheckForTimeOut+0x2a>
 8001d18:	4922      	ldr	r1, [pc, #136]	@ (8001da4 <xTaskCheckForTimeOut+0xac>)
 8001d1a:	f640 40f7 	movw	r0, #3319	@ 0xcf7
 8001d1e:	f004 facb 	bl	80062b8 <vAssertCalled>

    taskENTER_CRITICAL();
 8001d22:	f001 f819 	bl	8002d58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001d26:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <xTaskCheckForTimeOut+0xb0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3e:	d102      	bne.n	8001d46 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e026      	b.n	8001d94 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <xTaskCheckForTimeOut+0xb4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d00a      	beq.n	8001d68 <xTaskCheckForTimeOut+0x70>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d305      	bcc.n	8001d68 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e015      	b.n	8001d94 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d20b      	bcs.n	8001d8a <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad2      	subs	r2, r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa4 	bl	8001ccc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e004      	b.n	8001d94 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001d94:	f001 f80a 	bl	8002dac <vPortExitCritical>

    return xReturn;
 8001d98:	697b      	ldr	r3, [r7, #20]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	08007b84 	.word	0x08007b84
 8001da8:	20000150 	.word	0x20000150
 8001dac:	20000164 	.word	0x20000164

08001db0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <vTaskMissedYield+0x14>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	20000160 	.word	0x20000160

08001dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001dd0:	f000 f852 	bl	8001e78 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <prvIdleTask+0x28>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d9f9      	bls.n	8001dd0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <prvIdleTask+0x2c>)
 8001dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001dec:	e7f0      	b.n	8001dd0 <prvIdleTask+0x8>
 8001dee:	bf00      	nop
 8001df0:	20000078 	.word	0x20000078
 8001df4:	e000ed04 	.word	0xe000ed04

08001df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	e00c      	b.n	8001e1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <prvInitialiseTaskLists+0x60>)
 8001e10:	4413      	add	r3, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fbd6 	bl	80005c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d9ef      	bls.n	8001e04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001e24:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <prvInitialiseTaskLists+0x64>)
 8001e26:	f7fe fbcd 	bl	80005c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001e2a:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <prvInitialiseTaskLists+0x68>)
 8001e2c:	f7fe fbca 	bl	80005c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001e30:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <prvInitialiseTaskLists+0x6c>)
 8001e32:	f7fe fbc7 	bl	80005c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001e36:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <prvInitialiseTaskLists+0x70>)
 8001e38:	f7fe fbc4 	bl	80005c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001e3c:	480b      	ldr	r0, [pc, #44]	@ (8001e6c <prvInitialiseTaskLists+0x74>)
 8001e3e:	f7fe fbc1 	bl	80005c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <prvInitialiseTaskLists+0x78>)
 8001e44:	4a05      	ldr	r2, [pc, #20]	@ (8001e5c <prvInitialiseTaskLists+0x64>)
 8001e46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <prvInitialiseTaskLists+0x7c>)
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <prvInitialiseTaskLists+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000078 	.word	0x20000078
 8001e5c:	200000dc 	.word	0x200000dc
 8001e60:	200000f0 	.word	0x200000f0
 8001e64:	2000010c 	.word	0x2000010c
 8001e68:	20000120 	.word	0x20000120
 8001e6c:	20000138 	.word	0x20000138
 8001e70:	20000104 	.word	0x20000104
 8001e74:	20000108 	.word	0x20000108

08001e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e7e:	e019      	b.n	8001eb4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001e80:	f000 ff6a 	bl	8002d58 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e84:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <prvCheckTasksWaitingTermination+0x50>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fc21 	bl	80006d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <prvCheckTasksWaitingTermination+0x54>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ecc <prvCheckTasksWaitingTermination+0x54>)
 8001e9e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <prvCheckTasksWaitingTermination+0x58>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <prvCheckTasksWaitingTermination+0x58>)
 8001ea8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001eaa:	f000 ff7f 	bl	8002dac <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f810 	bl	8001ed4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <prvCheckTasksWaitingTermination+0x58>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e1      	bne.n	8001e80 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000120 	.word	0x20000120
 8001ecc:	2000014c 	.word	0x2000014c
 8001ed0:	20000134 	.word	0x20000134

08001ed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 f91d 	bl	8003120 <vPortFree>
                vPortFree( pxTCB );
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f001 f91a 	bl	8003120 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <prvResetNextTaskUnblockTime+0x30>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <prvResetNextTaskUnblockTime+0x34>)
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001f0a:	e005      	b.n	8001f18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <prvResetNextTaskUnblockTime+0x30>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <prvResetNextTaskUnblockTime+0x34>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000104 	.word	0x20000104
 8001f28:	2000016c 	.word	0x2000016c

08001f2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <xTaskGetSchedulerState+0x34>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	e008      	b.n	8001f52 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <xTaskGetSchedulerState+0x38>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	e001      	b.n	8001f52 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001f52:	687b      	ldr	r3, [r7, #4]
    }
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	20000158 	.word	0x20000158
 8001f64:	20000174 	.word	0x20000174

08001f68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d05c      	beq.n	8002038 <xTaskPriorityDisinherit+0xd0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001f7e:	4b31      	ldr	r3, [pc, #196]	@ (8002044 <xTaskPriorityDisinherit+0xdc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d004      	beq.n	8001f92 <xTaskPriorityDisinherit+0x2a>
 8001f88:	492f      	ldr	r1, [pc, #188]	@ (8002048 <xTaskPriorityDisinherit+0xe0>)
 8001f8a:	f241 0056 	movw	r0, #4182	@ 0x1056
 8001f8e:	f004 f993 	bl	80062b8 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d104      	bne.n	8001fa4 <xTaskPriorityDisinherit+0x3c>
 8001f9a:	492b      	ldr	r1, [pc, #172]	@ (8002048 <xTaskPriorityDisinherit+0xe0>)
 8001f9c:	f241 0057 	movw	r0, #4183	@ 0x1057
 8001fa0:	f004 f98a 	bl	80062b8 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d03e      	beq.n	8002038 <xTaskPriorityDisinherit+0xd0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d13a      	bne.n	8002038 <xTaskPriorityDisinherit+0xd0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fb86 	bl	80006d8 <uxListRemove>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10a      	bne.n	8001fe8 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43da      	mvns	r2, r3
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <xTaskPriorityDisinherit+0xe4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <xTaskPriorityDisinherit+0xe4>)
 8001fe6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4619      	mov	r1, r3
 8001fec:	204a      	movs	r0, #74	@ 0x4a
 8001fee:	f002 fd1b 	bl	8004a28 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	f1c3 0205 	rsb	r2, r3, #5
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	2201      	movs	r2, #1
 800200c:	409a      	lsls	r2, r3
 800200e:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <xTaskPriorityDisinherit+0xe4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <xTaskPriorityDisinherit+0xe4>)
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <xTaskPriorityDisinherit+0xe8>)
 8002026:	441a      	add	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f7fe faf5 	bl	800061e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002034:	2301      	movs	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002038:	68fb      	ldr	r3, [r7, #12]
    }
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000074 	.word	0x20000074
 8002048:	08007b84 	.word	0x08007b84
 800204c:	20000154 	.word	0x20000154
 8002050:	20000078 	.word	0x20000078

08002054 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <xTaskGenericNotifyWait+0x1e>
 8002068:	4939      	ldr	r1, [pc, #228]	@ (8002150 <xTaskGenericNotifyWait+0xfc>)
 800206a:	f241 20b5 	movw	r0, #4789	@ 0x12b5
 800206e:	f004 f923 	bl	80062b8 <vAssertCalled>

        taskENTER_CRITICAL();
 8002072:	f000 fe71 	bl	8002d58 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002076:	4b37      	ldr	r3, [pc, #220]	@ (8002154 <xTaskGenericNotifyWait+0x100>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	3354      	adds	r3, #84	@ 0x54
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d022      	beq.n	80020ce <xTaskGenericNotifyWait+0x7a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002088:	4b32      	ldr	r3, [pc, #200]	@ (8002154 <xTaskGenericNotifyWait+0x100>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	3214      	adds	r2, #20
 8002090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	43d2      	mvns	r2, r2
 8002098:	4011      	ands	r1, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	3214      	adds	r2, #20
 800209e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80020a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002154 <xTaskGenericNotifyWait+0x100>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	3354      	adds	r3, #84	@ 0x54
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <xTaskGenericNotifyWait+0x7a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020b6:	2101      	movs	r1, #1
 80020b8:	6a38      	ldr	r0, [r7, #32]
 80020ba:	f000 f929 	bl	8002310 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80020be:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <xTaskGenericNotifyWait+0x104>)
 80020c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80020ce:	f000 fe6d 	bl	8002dac <vPortExitCritical>

        taskENTER_CRITICAL();
 80020d2:	f000 fe41 	bl	8002d58 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	2040      	movs	r0, #64	@ 0x40
 80020e4:	f002 fdac 	bl	8004c40 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80020ee:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <xTaskGenericNotifyWait+0x100>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	3214      	adds	r2, #20
 80020f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <xTaskGenericNotifyWait+0x100>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	3354      	adds	r3, #84	@ 0x54
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d002      	beq.n	8002116 <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e00e      	b.n	8002134 <xTaskGenericNotifyWait+0xe0>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002116:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <xTaskGenericNotifyWait+0x100>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	3214      	adds	r2, #20
 800211e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	43d2      	mvns	r2, r2
 8002126:	4011      	ands	r1, r2
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	3214      	adds	r2, #20
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002130:	2301      	movs	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002134:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <xTaskGenericNotifyWait+0x100>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	3354      	adds	r3, #84	@ 0x54
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002142:	f000 fe33 	bl	8002dac <vPortExitCritical>

        return xReturn;
 8002146:	697b      	ldr	r3, [r7, #20]
    }
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	08007b84 	.word	0x08007b84
 8002154:	20000074 	.word	0x20000074
 8002158:	e000ed04 	.word	0xe000ed04

0800215c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	@ 0x28
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800216a:	2301      	movs	r3, #1
 800216c:	61fb      	str	r3, [r7, #28]
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d004      	beq.n	800217e <xTaskGenericNotify+0x22>
 8002174:	4960      	ldr	r1, [pc, #384]	@ (80022f8 <xTaskGenericNotify+0x19c>)
 8002176:	f241 300d 	movw	r0, #4877	@ 0x130d
 800217a:	f004 f89d 	bl	80062b8 <vAssertCalled>
        configASSERT( xTaskToNotify );
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <xTaskGenericNotify+0x32>
 8002184:	495c      	ldr	r1, [pc, #368]	@ (80022f8 <xTaskGenericNotify+0x19c>)
 8002186:	f241 300e 	movw	r0, #4878	@ 0x130e
 800218a:	f004 f895 	bl	80062b8 <vAssertCalled>
        pxTCB = xTaskToNotify;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	61bb      	str	r3, [r7, #24]

        taskENTER_CRITICAL();
 8002192:	f000 fde1 	bl	8002d58 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <xTaskGenericNotify+0x4e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	3214      	adds	r2, #20
 80021a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4413      	add	r3, r2
 80021b0:	3354      	adds	r3, #84	@ 0x54
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	75fb      	strb	r3, [r7, #23]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4413      	add	r3, r2
 80021bc:	3354      	adds	r3, #84	@ 0x54
 80021be:	2202      	movs	r2, #2
 80021c0:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d83b      	bhi.n	8002240 <xTaskGenericNotify+0xe4>
 80021c8:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <xTaskGenericNotify+0x74>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	08002255 	.word	0x08002255
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	08002201 	.word	0x08002201
 80021dc:	08002219 	.word	0x08002219
 80021e0:	08002227 	.word	0x08002227
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	3214      	adds	r2, #20
 80021ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	ea42 0103 	orr.w	r1, r2, r3
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	3214      	adds	r2, #20
 80021fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021fe:	e02c      	b.n	800225a <xTaskGenericNotify+0xfe>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	3214      	adds	r2, #20
 8002206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	3214      	adds	r2, #20
 8002212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002216:	e020      	b.n	800225a <xTaskGenericNotify+0xfe>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	3214      	adds	r2, #20
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002224:	e019      	b.n	800225a <xTaskGenericNotify+0xfe>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d006      	beq.n	800223a <xTaskGenericNotify+0xde>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	3214      	adds	r2, #20
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002238:	e00f      	b.n	800225a <xTaskGenericNotify+0xfe>
                        xReturn = pdFAIL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
                    break;
 800223e:	e00c      	b.n	800225a <xTaskGenericNotify+0xfe>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002240:	4b2e      	ldr	r3, [pc, #184]	@ (80022fc <xTaskGenericNotify+0x1a0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <xTaskGenericNotify+0xfc>
 8002248:	492b      	ldr	r1, [pc, #172]	@ (80022f8 <xTaskGenericNotify+0x19c>)
 800224a:	f241 3043 	movw	r0, #4931	@ 0x1343
 800224e:	f004 f833 	bl	80062b8 <vAssertCalled>

                    break;
 8002252:	e001      	b.n	8002258 <xTaskGenericNotify+0xfc>
                    break;
 8002254:	bf00      	nop
 8002256:	e000      	b.n	800225a <xTaskGenericNotify+0xfe>
                    break;
 8002258:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fa07 	bl	8005670 <SEGGER_SYSVIEW_ShrinkId>
 8002262:	4601      	mov	r1, r0
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	4613      	mov	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	203e      	movs	r0, #62	@ 0x3e
 8002270:	f002 fce6 	bl	8004c40 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d137      	bne.n	80022ea <xTaskGenericNotify+0x18e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	3304      	adds	r3, #4
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fa2a 	bl	80006d8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4618      	mov	r0, r3
 8002288:	f003 f950 	bl	800552c <SEGGER_SYSVIEW_OnTaskStartReady>
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	2201      	movs	r2, #1
 8002292:	409a      	lsls	r2, r3
 8002294:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <xTaskGenericNotify+0x1a4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <xTaskGenericNotify+0x1a4>)
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <xTaskGenericNotify+0x1a8>)
 80022ac:	441a      	add	r2, r3
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	3304      	adds	r3, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7fe f9b2 	bl	800061e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <xTaskGenericNotify+0x170>
 80022c2:	490d      	ldr	r1, [pc, #52]	@ (80022f8 <xTaskGenericNotify+0x19c>)
 80022c4:	f241 3052 	movw	r0, #4946	@ 0x1352
 80022c8:	f003 fff6 	bl	80062b8 <vAssertCalled>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <xTaskGenericNotify+0x1ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d907      	bls.n	80022ea <xTaskGenericNotify+0x18e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80022da:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <xTaskGenericNotify+0x1b0>)
 80022dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80022ea:	f000 fd5f 	bl	8002dac <vPortExitCritical>

        return xReturn;
 80022ee:	69fb      	ldr	r3, [r7, #28]
    }
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	08007b84 	.word	0x08007b84
 80022fc:	20000150 	.word	0x20000150
 8002300:	20000154 	.word	0x20000154
 8002304:	20000078 	.word	0x20000078
 8002308:	20000074 	.word	0x20000074
 800230c:	e000ed04 	.word	0xe000ed04

08002310 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800231a:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002320:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3304      	adds	r3, #4
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f9d6 	bl	80006d8 <uxListRemove>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002332:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	2201      	movs	r2, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4013      	ands	r3, r2
 8002346:	4a29      	ldr	r2, [pc, #164]	@ (80023ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8002348:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d110      	bne.n	8002374 <prvAddCurrentTaskToDelayedList+0x64>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002358:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	211b      	movs	r1, #27
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f926 	bl	80055b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002364:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3304      	adds	r3, #4
 800236a:	4619      	mov	r1, r3
 800236c:	4820      	ldr	r0, [pc, #128]	@ (80023f0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800236e:	f7fe f956 	bl	800061e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002372:	e032      	b.n	80023da <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d20f      	bcs.n	80023ac <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800238c:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2104      	movs	r1, #4
 8002392:	4618      	mov	r0, r3
 8002394:	f003 f90c 	bl	80055b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002398:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3304      	adds	r3, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f7fe f95e 	bl	8000666 <vListInsert>
}
 80023aa:	e016      	b.n	80023da <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80023ac:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2104      	movs	r1, #4
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 f8fc 	bl	80055b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3304      	adds	r3, #4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7fe f94e 	bl	8000666 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80023ca:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <prvAddCurrentTaskToDelayedList+0xec>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d202      	bcs.n	80023da <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80023d4:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <prvAddCurrentTaskToDelayedList+0xec>)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000150 	.word	0x20000150
 80023e8:	20000074 	.word	0x20000074
 80023ec:	20000154 	.word	0x20000154
 80023f0:	20000138 	.word	0x20000138
 80023f4:	20000108 	.word	0x20000108
 80023f8:	20000104 	.word	0x20000104
 80023fc:	2000016c 	.word	0x2000016c

08002400 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800240a:	f000 fad9 	bl	80029c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <xTimerCreateTimerTask+0x48>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <xTimerCreateTimerTask+0x4c>)
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	2304      	movs	r3, #4
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002424:	490a      	ldr	r1, [pc, #40]	@ (8002450 <xTimerCreateTimerTask+0x50>)
 8002426:	480b      	ldr	r0, [pc, #44]	@ (8002454 <xTimerCreateTimerTask+0x54>)
 8002428:	f7fe fe8c 	bl	8001144 <xTaskCreate>
 800242c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d104      	bne.n	800243e <xTimerCreateTimerTask+0x3e>
 8002434:	4908      	ldr	r1, [pc, #32]	@ (8002458 <xTimerCreateTimerTask+0x58>)
 8002436:	f240 100d 	movw	r0, #269	@ 0x10d
 800243a:	f003 ff3d 	bl	80062b8 <vAssertCalled>
        return xReturn;
 800243e:	687b      	ldr	r3, [r7, #4]
    }
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200001a8 	.word	0x200001a8
 800244c:	200001ac 	.word	0x200001ac
 8002450:	08007c08 	.word	0x08007c08
 8002454:	08002585 	.word	0x08002585
 8002458:	08007c10 	.word	0x08007c10

0800245c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	@ 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <xTimerGenericCommand+0x22>
 8002474:	491c      	ldr	r1, [pc, #112]	@ (80024e8 <xTimerGenericCommand+0x8c>)
 8002476:	f44f 70c1 	mov.w	r0, #386	@ 0x182
 800247a:	f003 ff1d 	bl	80062b8 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <xTimerGenericCommand+0x90>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02a      	beq.n	80024dc <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b05      	cmp	r3, #5
 8002496:	dc18      	bgt.n	80024ca <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002498:	f7ff fd48 	bl	8001f2c <xTaskGetSchedulerState>
 800249c:	4603      	mov	r3, r0
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d109      	bne.n	80024b6 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <xTimerGenericCommand+0x90>)
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	f107 0114 	add.w	r1, r7, #20
 80024aa:	2300      	movs	r3, #0
 80024ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ae:	f7fe fa1b 	bl	80008e8 <xQueueGenericSend>
 80024b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80024b4:	e012      	b.n	80024dc <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <xTimerGenericCommand+0x90>)
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	f107 0114 	add.w	r1, r7, #20
 80024be:	2300      	movs	r3, #0
 80024c0:	2200      	movs	r2, #0
 80024c2:	f7fe fa11 	bl	80008e8 <xQueueGenericSend>
 80024c6:	6278      	str	r0, [r7, #36]	@ 0x24
 80024c8:	e008      	b.n	80024dc <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <xTimerGenericCommand+0x90>)
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	f107 0114 	add.w	r1, r7, #20
 80024d2:	2300      	movs	r3, #0
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	f7fe fb17 	bl	8000b08 <xQueueGenericSendFromISR>
 80024da:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80024de:	4618      	mov	r0, r3
 80024e0:	3728      	adds	r7, #40	@ 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	08007c10 	.word	0x08007c10
 80024ec:	200001a8 	.word	0x200001a8

080024f0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <prvProcessExpiredTimer+0x8c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3304      	adds	r3, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f8e5 	bl	80006d8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01d      	beq.n	8002558 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	18d1      	adds	r1, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f8d1 	bl	80026d0 <prvInsertTimerInActiveList>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01a      	beq.n	800256a <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	2100      	movs	r1, #0
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7ff ff8c 	bl	800245c <xTimerGenericCommand>
 8002544:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10e      	bne.n	800256a <prvProcessExpiredTimer+0x7a>
 800254c:	490c      	ldr	r1, [pc, #48]	@ (8002580 <prvProcessExpiredTimer+0x90>)
 800254e:	f44f 7005 	mov.w	r0, #532	@ 0x214
 8002552:	f003 feb1 	bl	80062b8 <vAssertCalled>
 8002556:	e008      	b.n	800256a <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	4798      	blx	r3
    }
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200001a0 	.word	0x200001a0
 8002580:	08007c10 	.word	0x08007c10

08002584 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f859 	bl	8002648 <prvGetNextExpireTime>
 8002596:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4619      	mov	r1, r3
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f805 	bl	80025ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80025a2:	f000 f8d7 	bl	8002754 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80025a6:	bf00      	nop
 80025a8:	e7f0      	b.n	800258c <prvTimerTask+0x8>
	...

080025ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80025b6:	f7ff f8f3 	bl	80017a0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f866 	bl	8002690 <prvSampleTimeNow>
 80025c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d130      	bne.n	800262e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <prvProcessTimerOrBlockTask+0x3c>
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d806      	bhi.n	80025e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80025da:	f7ff f8ef 	bl	80017bc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff85 	bl	80024f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80025e6:	e024      	b.n	8002632 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <prvProcessTimerOrBlockTask+0x90>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <prvProcessTimerOrBlockTask+0x50>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <prvProcessTimerOrBlockTask+0x52>
 80025fc:	2300      	movs	r3, #0
 80025fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002600:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <prvProcessTimerOrBlockTask+0x94>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fd65 	bl	80010dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002612:	f7ff f8d3 	bl	80017bc <xTaskResumeAll>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <prvProcessTimerOrBlockTask+0x98>)
 800261e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	f3bf 8f6f 	isb	sy
    }
 800262c:	e001      	b.n	8002632 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800262e:	f7ff f8c5 	bl	80017bc <xTaskResumeAll>
    }
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200001a4 	.word	0x200001a4
 8002640:	200001a8 	.word	0x200001a8
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002650:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <prvGetNextExpireTime+0x44>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <prvGetNextExpireTime+0x16>
 800265a:	2201      	movs	r2, #1
 800265c:	e000      	b.n	8002660 <prvGetNextExpireTime+0x18>
 800265e:	2200      	movs	r2, #0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800266c:	4b07      	ldr	r3, [pc, #28]	@ (800268c <prvGetNextExpireTime+0x44>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e001      	b.n	800267c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800267c:	68fb      	ldr	r3, [r7, #12]
    }
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200001a0 	.word	0x200001a0

08002690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002698:	f7ff f92c 	bl	80018f4 <xTaskGetTickCount>
 800269c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800269e:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <prvSampleTimeNow+0x3c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d205      	bcs.n	80026b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80026a8:	f000 f92a 	bl	8002900 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e002      	b.n	80026ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80026ba:	4a04      	ldr	r2, [pc, #16]	@ (80026cc <prvSampleTimeNow+0x3c>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80026c0:	68fb      	ldr	r3, [r7, #12]
    }
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200001b0 	.word	0x200001b0

080026d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d812      	bhi.n	800271c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	429a      	cmp	r2, r3
 8002702:	d302      	bcc.n	800270a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002704:	2301      	movs	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e01b      	b.n	8002742 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <prvInsertTimerInActiveList+0x7c>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3304      	adds	r3, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f7fd ffa6 	bl	8000666 <vListInsert>
 800271a:	e012      	b.n	8002742 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d206      	bcs.n	8002732 <prvInsertTimerInActiveList+0x62>
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d302      	bcc.n	8002732 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800272c:	2301      	movs	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e007      	b.n	8002742 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <prvInsertTimerInActiveList+0x80>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3304      	adds	r3, #4
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f7fd ff92 	bl	8000666 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002742:	697b      	ldr	r3, [r7, #20]
    }
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200001a4 	.word	0x200001a4
 8002750:	200001a0 	.word	0x200001a0

08002754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	@ 0x30
 8002758:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800275a:	e0bb      	b.n	80028d4 <prvProcessReceivedCommands+0x180>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	da13      	bge.n	800278a <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	3304      	adds	r3, #4
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <prvProcessReceivedCommands+0x26>
 8002770:	4961      	ldr	r1, [pc, #388]	@ (80028f8 <prvProcessReceivedCommands+0x1a4>)
 8002772:	f240 20fa 	movw	r0, #762	@ 0x2fa
 8002776:	f003 fd9f 	bl	80062b8 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002780:	6850      	ldr	r0, [r2, #4]
 8002782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002784:	6892      	ldr	r2, [r2, #8]
 8002786:	4611      	mov	r1, r2
 8002788:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f2c0 80a1 	blt.w	80028d4 <prvProcessReceivedCommands+0x180>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d004      	beq.n	80027a8 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	3304      	adds	r3, #4
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd ff98 	bl	80006d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff70 	bl	8002690 <prvSampleTimeNow>
 80027b0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	f200 808a 	bhi.w	80028ce <prvProcessReceivedCommands+0x17a>
 80027ba:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <prvProcessReceivedCommands+0x6c>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	080027e9 	.word	0x080027e9
 80027c8:	080027e9 	.word	0x080027e9
 80027cc:	08002853 	.word	0x08002853
 80027d0:	08002867 	.word	0x08002867
 80027d4:	080028a5 	.word	0x080028a5
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027e9 	.word	0x080027e9
 80027e0:	08002853 	.word	0x08002853
 80027e4:	08002867 	.word	0x08002867
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	18d1      	adds	r1, r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	6a38      	ldr	r0, [r7, #32]
 8002808:	f7ff ff62 	bl	80026d0 <prvInsertTimerInActiveList>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d05f      	beq.n	80028d2 <prvProcessReceivedCommands+0x17e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	6a38      	ldr	r0, [r7, #32]
 8002818:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d054      	beq.n	80028d2 <prvProcessReceivedCommands+0x17e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	441a      	add	r2, r3
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2300      	movs	r3, #0
 8002836:	2100      	movs	r1, #0
 8002838:	6a38      	ldr	r0, [r7, #32]
 800283a:	f7ff fe0f 	bl	800245c <xTimerGenericCommand>
 800283e:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d145      	bne.n	80028d2 <prvProcessReceivedCommands+0x17e>
 8002846:	492c      	ldr	r1, [pc, #176]	@ (80028f8 <prvProcessReceivedCommands+0x1a4>)
 8002848:	f240 3036 	movw	r0, #822	@ 0x336
 800284c:	f003 fd34 	bl	80062b8 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002850:	e03f      	b.n	80028d2 <prvProcessReceivedCommands+0x17e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002864:	e036      	b.n	80028d4 <prvProcessReceivedCommands+0x180>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <prvProcessReceivedCommands+0x13c>
 8002886:	491c      	ldr	r1, [pc, #112]	@ (80028f8 <prvProcessReceivedCommands+0x1a4>)
 8002888:	f240 304f 	movw	r0, #847	@ 0x34f
 800288c:	f003 fd14 	bl	80062b8 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	18d1      	adds	r1, r2, r3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	6a38      	ldr	r0, [r7, #32]
 800289e:	f7ff ff17 	bl	80026d0 <prvInsertTimerInActiveList>
                        break;
 80028a2:	e017      	b.n	80028d4 <prvProcessReceivedCommands+0x180>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 80028b2:	6a38      	ldr	r0, [r7, #32]
 80028b4:	f000 fc34 	bl	8003120 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80028b8:	e00c      	b.n	80028d4 <prvProcessReceivedCommands+0x180>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80028cc:	e002      	b.n	80028d4 <prvProcessReceivedCommands+0x180>

                    default:
                        /* Don't expect to get here. */
                        break;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <prvProcessReceivedCommands+0x180>
                        break;
 80028d2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <prvProcessReceivedCommands+0x1a8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f107 0108 	add.w	r1, r7, #8
 80028dc:	2200      	movs	r2, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe f9ba 	bl	8000c58 <xQueueReceive>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f47f af38 	bne.w	800275c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	@ 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08007c10 	.word	0x08007c10
 80028fc:	200001a8 	.word	0x200001a8

08002900 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002906:	e042      	b.n	800298e <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002908:	4b2a      	ldr	r3, [pc, #168]	@ (80029b4 <prvSwitchTimerLists+0xb4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002912:	4b28      	ldr	r3, [pc, #160]	@ (80029b4 <prvSwitchTimerLists+0xb4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3304      	adds	r3, #4
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fed9 	bl	80006d8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d028      	beq.n	800298e <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	429a      	cmp	r2, r3
 800294c:	d90e      	bls.n	800296c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <prvSwitchTimerLists+0xb4>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7fd fe7e 	bl	8000666 <vListInsert>
 800296a:	e010      	b.n	800298e <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	2100      	movs	r1, #0
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff fd70 	bl	800245c <xTimerGenericCommand>
 800297c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <prvSwitchTimerLists+0x8e>
 8002984:	490c      	ldr	r1, [pc, #48]	@ (80029b8 <prvSwitchTimerLists+0xb8>)
 8002986:	f240 30a9 	movw	r0, #937	@ 0x3a9
 800298a:	f003 fc95 	bl	80062b8 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <prvSwitchTimerLists+0xb4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1b7      	bne.n	8002908 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <prvSwitchTimerLists+0xb4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800299e:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <prvSwitchTimerLists+0xbc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <prvSwitchTimerLists+0xb4>)
 80029a4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80029a6:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <prvSwitchTimerLists+0xbc>)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	6013      	str	r3, [r2, #0]
    }
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200001a0 	.word	0x200001a0
 80029b8:	08007c10 	.word	0x08007c10
 80029bc:	200001a4 	.word	0x200001a4

080029c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80029c4:	f000 f9c8 	bl	8002d58 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80029c8:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d11d      	bne.n	8002a0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80029d0:	4811      	ldr	r0, [pc, #68]	@ (8002a18 <prvCheckForValidListAndQueue+0x58>)
 80029d2:	f7fd fdf7 	bl	80005c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80029d6:	4811      	ldr	r0, [pc, #68]	@ (8002a1c <prvCheckForValidListAndQueue+0x5c>)
 80029d8:	f7fd fdf4 	bl	80005c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80029dc:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <prvCheckForValidListAndQueue+0x60>)
 80029de:	4a0e      	ldr	r2, [pc, #56]	@ (8002a18 <prvCheckForValidListAndQueue+0x58>)
 80029e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80029e2:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <prvCheckForValidListAndQueue+0x64>)
 80029e4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a1c <prvCheckForValidListAndQueue+0x5c>)
 80029e6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80029e8:	2200      	movs	r2, #0
 80029ea:	2110      	movs	r1, #16
 80029ec:	2005      	movs	r0, #5
 80029ee:	f7fd ff01 	bl	80007f4 <xQueueGenericCreate>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4a07      	ldr	r2, [pc, #28]	@ (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029f6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a00:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <prvCheckForValidListAndQueue+0x54>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4908      	ldr	r1, [pc, #32]	@ (8002a28 <prvCheckForValidListAndQueue+0x68>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fb36 	bl	8001078 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a0c:	f000 f9ce 	bl	8002dac <vPortExitCritical>
    }
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	200001a8 	.word	0x200001a8
 8002a18:	20000178 	.word	0x20000178
 8002a1c:	2000018c 	.word	0x2000018c
 8002a20:	200001a0 	.word	0x200001a0
 8002a24:	200001a4 	.word	0x200001a4
 8002a28:	08007c7c 	.word	0x08007c7c

08002a2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3b04      	subs	r3, #4
 8002a4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f023 0201 	bic.w	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b04      	subs	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a90 <pxPortInitialiseStack+0x64>)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b14      	subs	r3, #20
 8002a66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b04      	subs	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f06f 0202 	mvn.w	r2, #2
 8002a7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3b20      	subs	r3, #32
 8002a80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	08002a95 	.word	0x08002a95

08002a94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <prvTaskExitError+0x44>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa6:	d003      	beq.n	8002ab0 <prvTaskExitError+0x1c>
 8002aa8:	490c      	ldr	r1, [pc, #48]	@ (8002adc <prvTaskExitError+0x48>)
 8002aaa:	20e6      	movs	r0, #230	@ 0xe6
 8002aac:	f003 fc04 	bl	80062b8 <vAssertCalled>
        __asm volatile
 8002ab0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	607b      	str	r3, [r7, #4]
    }
 8002ac2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ac4:	bf00      	nop
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0fc      	beq.n	8002ac6 <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000004 	.word	0x20000004
 8002adc:	08007c84 	.word	0x08007c84

08002ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ae0:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <pxCurrentTCBConst2>)
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	6808      	ldr	r0, [r1, #0]
 8002ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aea:	f380 8809 	msr	PSP, r0
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8811 	msr	BASEPRI, r0
 8002afa:	4770      	bx	lr
 8002afc:	f3af 8000 	nop.w

08002b00 <pxCurrentTCBConst2>:
 8002b00:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop

08002b08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002b08:	4808      	ldr	r0, [pc, #32]	@ (8002b2c <prvPortStartFirstTask+0x24>)
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	6800      	ldr	r0, [r0, #0]
 8002b0e:	f380 8808 	msr	MSP, r0
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f380 8814 	msr	CONTROL, r0
 8002b1a:	b662      	cpsie	i
 8002b1c:	b661      	cpsie	f
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	df00      	svc	0
 8002b28:	bf00      	nop
 8002b2a:	0000      	.short	0x0000
 8002b2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop

08002b34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b3a:	4b42      	ldr	r3, [pc, #264]	@ (8002c44 <xPortStartScheduler+0x110>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a42      	ldr	r2, [pc, #264]	@ (8002c48 <xPortStartScheduler+0x114>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d104      	bne.n	8002b4e <xPortStartScheduler+0x1a>
 8002b44:	4941      	ldr	r1, [pc, #260]	@ (8002c4c <xPortStartScheduler+0x118>)
 8002b46:	f240 102d 	movw	r0, #301	@ 0x12d
 8002b4a:	f003 fbb5 	bl	80062b8 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c44 <xPortStartScheduler+0x110>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3f      	ldr	r2, [pc, #252]	@ (8002c50 <xPortStartScheduler+0x11c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d104      	bne.n	8002b62 <xPortStartScheduler+0x2e>
 8002b58:	493c      	ldr	r1, [pc, #240]	@ (8002c4c <xPortStartScheduler+0x118>)
 8002b5a:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 8002b5e:	f003 fbab 	bl	80062b8 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b62:	4b3c      	ldr	r3, [pc, #240]	@ (8002c54 <xPortStartScheduler+0x120>)
 8002b64:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	22ff      	movs	r2, #255	@ 0xff
 8002b72:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b34      	ldr	r3, [pc, #208]	@ (8002c58 <xPortStartScheduler+0x124>)
 8002b88:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b8a:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b90:	e009      	b.n	8002ba6 <xPortStartScheduler+0x72>
            {
                ulMaxPRIGROUPValue--;
 8002b92:	4b32      	ldr	r3, [pc, #200]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	4a30      	ldr	r2, [pc, #192]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002b9a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	2b80      	cmp	r3, #128	@ 0x80
 8002bb0:	d0ef      	beq.n	8002b92 <xPortStartScheduler+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d004      	beq.n	8002bc8 <xPortStartScheduler+0x94>
 8002bbe:	4923      	ldr	r1, [pc, #140]	@ (8002c4c <xPortStartScheduler+0x118>)
 8002bc0:	f240 1057 	movw	r0, #343	@ 0x157
 8002bc4:	f003 fb78 	bl	80062b8 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bc8:	4b24      	ldr	r3, [pc, #144]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1c3 0307 	rsb	r3, r3, #7
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d004      	beq.n	8002bde <xPortStartScheduler+0xaa>
 8002bd4:	491d      	ldr	r1, [pc, #116]	@ (8002c4c <xPortStartScheduler+0x118>)
 8002bd6:	f44f 70b0 	mov.w	r0, #352	@ 0x160
 8002bda:	f003 fb6d 	bl	80062b8 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bde:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002be6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002be8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c5c <xPortStartScheduler+0x128>)
 8002bf2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bfc:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <xPortStartScheduler+0x12c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a17      	ldr	r2, [pc, #92]	@ (8002c60 <xPortStartScheduler+0x12c>)
 8002c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c06:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <xPortStartScheduler+0x12c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <xPortStartScheduler+0x12c>)
 8002c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002c12:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c14:	f000 f952 	bl	8002ebc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <xPortStartScheduler+0x130>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c1e:	f000 f971 	bl	8002f04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c22:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <xPortStartScheduler+0x134>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a10      	ldr	r2, [pc, #64]	@ (8002c68 <xPortStartScheduler+0x134>)
 8002c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002c2c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c2e:	f7ff ff6b 	bl	8002b08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c32:	f7fe ff39 	bl	8001aa8 <vTaskSwitchContext>
    prvTaskExitError();
 8002c36:	f7ff ff2d 	bl	8002a94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	e000ed00 	.word	0xe000ed00
 8002c48:	410fc271 	.word	0x410fc271
 8002c4c:	08007c84 	.word	0x08007c84
 8002c50:	410fc270 	.word	0x410fc270
 8002c54:	e000e400 	.word	0xe000e400
 8002c58:	200001b4 	.word	0x200001b4
 8002c5c:	200001b8 	.word	0x200001b8
 8002c60:	e000ed20 	.word	0xe000ed20
 8002c64:	20000004 	.word	0x20000004
 8002c68:	e000ef34 	.word	0xe000ef34

08002c6c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c72:	4b32      	ldr	r3, [pc, #200]	@ (8002d3c <vInitPrioGroupValue+0xd0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a32      	ldr	r2, [pc, #200]	@ (8002d40 <vInitPrioGroupValue+0xd4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d104      	bne.n	8002c86 <vInitPrioGroupValue+0x1a>
 8002c7c:	4931      	ldr	r1, [pc, #196]	@ (8002d44 <vInitPrioGroupValue+0xd8>)
 8002c7e:	f240 109b 	movw	r0, #411	@ 0x19b
 8002c82:	f003 fb19 	bl	80062b8 <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <vInitPrioGroupValue+0xd0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d48 <vInitPrioGroupValue+0xdc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d104      	bne.n	8002c9a <vInitPrioGroupValue+0x2e>
 8002c90:	492c      	ldr	r1, [pc, #176]	@ (8002d44 <vInitPrioGroupValue+0xd8>)
 8002c92:	f44f 70ce 	mov.w	r0, #412	@ 0x19c
 8002c96:	f003 fb0f 	bl	80062b8 <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <vInitPrioGroupValue+0xe0>)
 8002c9c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	22ff      	movs	r2, #255	@ 0xff
 8002caa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b24      	ldr	r3, [pc, #144]	@ (8002d50 <vInitPrioGroupValue+0xe4>)
 8002cc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cc2:	4b24      	ldr	r3, [pc, #144]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cc8:	e009      	b.n	8002cde <vInitPrioGroupValue+0x72>
            {
                ulMaxPRIGROUPValue--;
 8002cca:	4b22      	ldr	r3, [pc, #136]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	4a20      	ldr	r2, [pc, #128]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002cd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce6:	2b80      	cmp	r3, #128	@ 0x80
 8002ce8:	d0ef      	beq.n	8002cca <vInitPrioGroupValue+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002cea:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d004      	beq.n	8002d00 <vInitPrioGroupValue+0x94>
 8002cf6:	4913      	ldr	r1, [pc, #76]	@ (8002d44 <vInitPrioGroupValue+0xd8>)
 8002cf8:	f240 10c5 	movw	r0, #453	@ 0x1c5
 8002cfc:	f003 fadc 	bl	80062b8 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1c3 0307 	rsb	r3, r3, #7
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d004      	beq.n	8002d16 <vInitPrioGroupValue+0xaa>
 8002d0c:	490d      	ldr	r1, [pc, #52]	@ (8002d44 <vInitPrioGroupValue+0xd8>)
 8002d0e:	f44f 70e7 	mov.w	r0, #462	@ 0x1ce
 8002d12:	f003 fad1 	bl	80062b8 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d16:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002d1e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d28:	4a0a      	ldr	r2, [pc, #40]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002d2a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	e000ed00 	.word	0xe000ed00
 8002d40:	410fc271 	.word	0x410fc271
 8002d44:	08007c84 	.word	0x08007c84
 8002d48:	410fc270 	.word	0x410fc270
 8002d4c:	e000e400 	.word	0xe000e400
 8002d50:	200001b4 	.word	0x200001b4
 8002d54:	200001b8 	.word	0x200001b8

08002d58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d5e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	607b      	str	r3, [r7, #4]
    }
 8002d70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d72:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <vPortEnterCritical+0x48>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	4a09      	ldr	r2, [pc, #36]	@ (8002da0 <vPortEnterCritical+0x48>)
 8002d7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d7c:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <vPortEnterCritical+0x48>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d109      	bne.n	8002d98 <vPortEnterCritical+0x40>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d84:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <vPortEnterCritical+0x4c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <vPortEnterCritical+0x40>
 8002d8e:	4906      	ldr	r1, [pc, #24]	@ (8002da8 <vPortEnterCritical+0x50>)
 8002d90:	f44f 70f9 	mov.w	r0, #498	@ 0x1f2
 8002d94:	f003 fa90 	bl	80062b8 <vAssertCalled>
    }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000004 	.word	0x20000004
 8002da4:	e000ed04 	.word	0xe000ed04
 8002da8:	08007c84 	.word	0x08007c84

08002dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <vPortExitCritical+0x40>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <vPortExitCritical+0x18>
 8002dba:	490d      	ldr	r1, [pc, #52]	@ (8002df0 <vPortExitCritical+0x44>)
 8002dbc:	f240 10f9 	movw	r0, #505	@ 0x1f9
 8002dc0:	f003 fa7a 	bl	80062b8 <vAssertCalled>
    uxCriticalNesting--;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <vPortExitCritical+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	4a08      	ldr	r2, [pc, #32]	@ (8002dec <vPortExitCritical+0x40>)
 8002dcc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <vPortExitCritical+0x40>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <vPortExitCritical+0x36>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
        __asm volatile
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f383 8811 	msr	BASEPRI, r3
    }
 8002de0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000004 	.word	0x20000004
 8002df0:	08007c84 	.word	0x08007c84
	...

08002e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e00:	f3ef 8009 	mrs	r0, PSP
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <pxCurrentTCBConst>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f01e 0f10 	tst.w	lr, #16
 8002e10:	bf08      	it	eq
 8002e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1a:	6010      	str	r0, [r2, #0]
 8002e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e20:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8002e24:	f380 8811 	msr	BASEPRI, r0
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f7fe fe3a 	bl	8001aa8 <vTaskSwitchContext>
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f380 8811 	msr	BASEPRI, r0
 8002e3c:	bc09      	pop	{r0, r3}
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	6808      	ldr	r0, [r1, #0]
 8002e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e46:	f01e 0f10 	tst.w	lr, #16
 8002e4a:	bf08      	it	eq
 8002e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e50:	f380 8809 	msr	PSP, r0
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	f3af 8000 	nop.w

08002e60 <pxCurrentTCBConst>:
 8002e60:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop

08002e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e6e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	607b      	str	r3, [r7, #4]
    }
 8002e80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e82:	f002 fa39 	bl	80052f8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e86:	f7fe fd57 	bl	8001938 <xTaskIncrementTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e90:	f002 fa90 	bl	80053b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <SysTick_Handler+0x50>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e001      	b.n	8002ea2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002e9e:	f002 fa6d 	bl	800537c <SEGGER_SYSVIEW_RecordExitISR>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f383 8811 	msr	BASEPRI, r3
    }
 8002eac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <vPortSetupTimerInterrupt+0x34>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <vPortSetupTimerInterrupt+0x38>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <vPortSetupTimerInterrupt+0x3c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <vPortSetupTimerInterrupt+0x40>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	4a09      	ldr	r2, [pc, #36]	@ (8002f00 <vPortSetupTimerInterrupt+0x44>)
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ede:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <vPortSetupTimerInterrupt+0x34>)
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e010 	.word	0xe000e010
 8002ef4:	e000e018 	.word	0xe000e018
 8002ef8:	20000010 	.word	0x20000010
 8002efc:	10624dd3 	.word	0x10624dd3
 8002f00:	e000e014 	.word	0xe000e014

08002f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002f14 <vPortEnableVFP+0x10>
 8002f08:	6801      	ldr	r1, [r0, #0]
 8002f0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002f0e:	6001      	str	r1, [r0, #0]
 8002f10:	4770      	bx	lr
 8002f12:	0000      	.short	0x0000
 8002f14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop

08002f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f22:	f3ef 8305 	mrs	r3, IPSR
 8002f26:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	d90e      	bls.n	8002f4c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f2e:	4a10      	ldr	r2, [pc, #64]	@ (8002f70 <vPortValidateInterruptPriority+0x54>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f38:	4b0e      	ldr	r3, [pc, #56]	@ (8002f74 <vPortValidateInterruptPriority+0x58>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d204      	bcs.n	8002f4c <vPortValidateInterruptPriority+0x30>
 8002f42:	490d      	ldr	r1, [pc, #52]	@ (8002f78 <vPortValidateInterruptPriority+0x5c>)
 8002f44:	f44f 7054 	mov.w	r0, #848	@ 0x350
 8002f48:	f003 f9b6 	bl	80062b8 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <vPortValidateInterruptPriority+0x60>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f54:	4b0a      	ldr	r3, [pc, #40]	@ (8002f80 <vPortValidateInterruptPriority+0x64>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d904      	bls.n	8002f66 <vPortValidateInterruptPriority+0x4a>
 8002f5c:	4906      	ldr	r1, [pc, #24]	@ (8002f78 <vPortValidateInterruptPriority+0x5c>)
 8002f5e:	f44f 7058 	mov.w	r0, #864	@ 0x360
 8002f62:	f003 f9a9 	bl	80062b8 <vAssertCalled>
    }
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	e000e3f0 	.word	0xe000e3f0
 8002f74:	200001b4 	.word	0x200001b4
 8002f78:	08007c84 	.word	0x08007c84
 8002f7c:	e000ed0c 	.word	0xe000ed0c
 8002f80:	200001b8 	.word	0x200001b8

08002f84 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002f90:	f7fe fc06 	bl	80017a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f94:	4b5b      	ldr	r3, [pc, #364]	@ (8003104 <pvPortMalloc+0x180>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f9c:	f000 f918 	bl	80031d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fa0:	4b59      	ldr	r3, [pc, #356]	@ (8003108 <pvPortMalloc+0x184>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 809a 	bne.w	80030e2 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d027      	beq.n	8003004 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d221      	bcs.n	8003004 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01b      	beq.n	800300a <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f023 0307 	bic.w	r3, r3, #7
 8002fd8:	3308      	adds	r3, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d20e      	bcs.n	8002ffe <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f023 0307 	bic.w	r3, r3, #7
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <pvPortMalloc+0x86>
 8002ff4:	4945      	ldr	r1, [pc, #276]	@ (800310c <pvPortMalloc+0x188>)
 8002ff6:	209a      	movs	r0, #154	@ 0x9a
 8002ff8:	f003 f95e 	bl	80062b8 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ffc:	e005      	b.n	800300a <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003002:	e002      	b.n	800300a <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	e000      	b.n	800300c <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800300a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d067      	beq.n	80030e2 <pvPortMalloc+0x15e>
 8003012:	4b3f      	ldr	r3, [pc, #252]	@ (8003110 <pvPortMalloc+0x18c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d862      	bhi.n	80030e2 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800301c:	4b3d      	ldr	r3, [pc, #244]	@ (8003114 <pvPortMalloc+0x190>)
 800301e:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8003020:	4b3c      	ldr	r3, [pc, #240]	@ (8003114 <pvPortMalloc+0x190>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003026:	e004      	b.n	8003032 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d903      	bls.n	8003044 <pvPortMalloc+0xc0>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f1      	bne.n	8003028 <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003044:	4b2f      	ldr	r3, [pc, #188]	@ (8003104 <pvPortMalloc+0x180>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d049      	beq.n	80030e2 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2208      	movs	r2, #8
 8003054:	4413      	add	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad2      	subs	r2, r2, r3
 8003068:	2308      	movs	r3, #8
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	429a      	cmp	r2, r3
 800306e:	d918      	bls.n	80030a2 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <pvPortMalloc+0x106>
 8003082:	4922      	ldr	r1, [pc, #136]	@ (800310c <pvPortMalloc+0x188>)
 8003084:	20cd      	movs	r0, #205	@ 0xcd
 8003086:	f003 f917 	bl	80062b8 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	1ad2      	subs	r2, r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800309c:	68b8      	ldr	r0, [r7, #8]
 800309e:	f000 f8f9 	bl	8003294 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <pvPortMalloc+0x18c>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <pvPortMalloc+0x18c>)
 80030ae:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030b0:	4b17      	ldr	r3, [pc, #92]	@ (8003110 <pvPortMalloc+0x18c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b18      	ldr	r3, [pc, #96]	@ (8003118 <pvPortMalloc+0x194>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d203      	bcs.n	80030c4 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030bc:	4b14      	ldr	r3, [pc, #80]	@ (8003110 <pvPortMalloc+0x18c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a15      	ldr	r2, [pc, #84]	@ (8003118 <pvPortMalloc+0x194>)
 80030c2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <pvPortMalloc+0x184>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030d8:	4b10      	ldr	r3, [pc, #64]	@ (800311c <pvPortMalloc+0x198>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a0f      	ldr	r2, [pc, #60]	@ (800311c <pvPortMalloc+0x198>)
 80030e0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030e2:	f7fe fb6b 	bl	80017bc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <pvPortMalloc+0x176>
 80030f0:	4906      	ldr	r1, [pc, #24]	@ (800310c <pvPortMalloc+0x188>)
 80030f2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80030f6:	f003 f8df 	bl	80062b8 <vAssertCalled>
    return pvReturn;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000b9c4 	.word	0x2000b9c4
 8003108:	2000b9d8 	.word	0x2000b9d8
 800310c:	08007d04 	.word	0x08007d04
 8003110:	2000b9c8 	.word	0x2000b9c8
 8003114:	2000b9bc 	.word	0x2000b9bc
 8003118:	2000b9cc 	.word	0x2000b9cc
 800311c:	2000b9d0 	.word	0x2000b9d0

08003120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d041      	beq.n	80031b6 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003132:	2308      	movs	r3, #8
 8003134:	425b      	negs	r3, r3
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4413      	add	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4b1e      	ldr	r3, [pc, #120]	@ (80031c0 <vPortFree+0xa0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <vPortFree+0x38>
 800314e:	491d      	ldr	r1, [pc, #116]	@ (80031c4 <vPortFree+0xa4>)
 8003150:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8003154:	f003 f8b0 	bl	80062b8 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <vPortFree+0x4a>
 8003160:	4918      	ldr	r1, [pc, #96]	@ (80031c4 <vPortFree+0xa4>)
 8003162:	f240 1023 	movw	r0, #291	@ 0x123
 8003166:	f003 f8a7 	bl	80062b8 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <vPortFree+0xa0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01e      	beq.n	80031b6 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d11a      	bne.n	80031b6 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <vPortFree+0xa0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003190:	f7fe fb06 	bl	80017a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <vPortFree+0xa8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4413      	add	r3, r2
 800319e:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <vPortFree+0xa8>)
 80031a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031a2:	68b8      	ldr	r0, [r7, #8]
 80031a4:	f000 f876 	bl	8003294 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031a8:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <vPortFree+0xac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	4a07      	ldr	r2, [pc, #28]	@ (80031cc <vPortFree+0xac>)
 80031b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031b2:	f7fe fb03 	bl	80017bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	2000b9d8 	.word	0x2000b9d8
 80031c4:	08007d04 	.word	0x08007d04
 80031c8:	2000b9c8 	.word	0x2000b9c8
 80031cc:	2000b9d4 	.word	0x2000b9d4

080031d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031d6:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80031da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80031dc:	4b27      	ldr	r3, [pc, #156]	@ (800327c <prvHeapInit+0xac>)
 80031de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3307      	adds	r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0307 	bic.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	4a1f      	ldr	r2, [pc, #124]	@ (800327c <prvHeapInit+0xac>)
 8003200:	4413      	add	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003208:	4a1d      	ldr	r2, [pc, #116]	@ (8003280 <prvHeapInit+0xb0>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800320e:	4b1c      	ldr	r3, [pc, #112]	@ (8003280 <prvHeapInit+0xb0>)
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	4413      	add	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800321c:	2208      	movs	r2, #8
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <prvHeapInit+0xb4>)
 8003230:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003232:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <prvHeapInit+0xb4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800323a:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <prvHeapInit+0xb4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <prvHeapInit+0xb4>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <prvHeapInit+0xb8>)
 800325e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a09      	ldr	r2, [pc, #36]	@ (800328c <prvHeapInit+0xbc>)
 8003266:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <prvHeapInit+0xc0>)
 800326a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	200001bc 	.word	0x200001bc
 8003280:	2000b9bc 	.word	0x2000b9bc
 8003284:	2000b9c4 	.word	0x2000b9c4
 8003288:	2000b9cc 	.word	0x2000b9cc
 800328c:	2000b9c8 	.word	0x2000b9c8
 8003290:	2000b9d8 	.word	0x2000b9d8

08003294 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800329c:	4b28      	ldr	r3, [pc, #160]	@ (8003340 <prvInsertBlockIntoFreeList+0xac>)
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e002      	b.n	80032a8 <prvInsertBlockIntoFreeList+0x14>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d8f7      	bhi.n	80032a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	4413      	add	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d108      	bne.n	80032d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	441a      	add	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	441a      	add	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d118      	bne.n	800331c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <prvInsertBlockIntoFreeList+0xb0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d00d      	beq.n	8003312 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e008      	b.n	8003324 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003312:	4b0c      	ldr	r3, [pc, #48]	@ (8003344 <prvInsertBlockIntoFreeList+0xb0>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e003      	b.n	8003324 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d002      	beq.n	8003332 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000b9bc 	.word	0x2000b9bc
 8003344:	2000b9c4 	.word	0x2000b9c4

08003348 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800334c:	4803      	ldr	r0, [pc, #12]	@ (800335c <_cbSendSystemDesc+0x14>)
 800334e:	f001 ff7d 	bl	800524c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003352:	4803      	ldr	r0, [pc, #12]	@ (8003360 <_cbSendSystemDesc+0x18>)
 8003354:	f001 ff7a 	bl	800524c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	08007d80 	.word	0x08007d80
 8003360:	08007dc8 	.word	0x08007dc8

08003364 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <SEGGER_SYSVIEW_Conf+0x20>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <SEGGER_SYSVIEW_Conf+0x20>)
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <SEGGER_SYSVIEW_Conf+0x24>)
 8003372:	4a06      	ldr	r2, [pc, #24]	@ (800338c <SEGGER_SYSVIEW_Conf+0x28>)
 8003374:	f001 fae6 	bl	8004944 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003378:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800337c:	f001 fb26 	bl	80049cc <SEGGER_SYSVIEW_SetRAMBase>
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000010 	.word	0x20000010
 8003388:	08003349 	.word	0x08003349
 800338c:	08007f20 	.word	0x08007f20

08003390 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003392:	b085      	sub	sp, #20
 8003394:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	e033      	b.n	8003404 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800339c:	491e      	ldr	r1, [pc, #120]	@ (8003418 <_cbSendTaskList+0x88>)
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	491a      	ldr	r1, [pc, #104]	@ (8003418 <_cbSendTaskList+0x88>)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3304      	adds	r3, #4
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	4c16      	ldr	r4, [pc, #88]	@ (8003418 <_cbSendTaskList+0x88>)
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4423      	add	r3, r4
 80033cc:	3308      	adds	r3, #8
 80033ce:	681c      	ldr	r4, [r3, #0]
 80033d0:	4d11      	ldr	r5, [pc, #68]	@ (8003418 <_cbSendTaskList+0x88>)
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	442b      	add	r3, r5
 80033de:	330c      	adds	r3, #12
 80033e0:	681d      	ldr	r5, [r3, #0]
 80033e2:	4e0d      	ldr	r6, [pc, #52]	@ (8003418 <_cbSendTaskList+0x88>)
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4433      	add	r3, r6
 80033f0:	3310      	adds	r3, #16
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	462b      	mov	r3, r5
 80033f8:	4622      	mov	r2, r4
 80033fa:	f000 f8bd 	bl	8003578 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3301      	adds	r3, #1
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	4b05      	ldr	r3, [pc, #20]	@ (800341c <_cbSendTaskList+0x8c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	429a      	cmp	r2, r3
 800340c:	d3c6      	bcc.n	800339c <_cbSendTaskList+0xc>
  }
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003418:	2000b9dc 	.word	0x2000b9dc
 800341c:	2000ba7c 	.word	0x2000ba7c

08003420 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003428:	f7fe fa74 	bl	8001914 <xTaskGetTickCountFromISR>
 800342c:	4603      	mov	r3, r0
 800342e:	2200      	movs	r2, #0
 8003430:	469a      	mov	sl, r3
 8003432:	4693      	mov	fp, r2
 8003434:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	f04f 0a00 	mov.w	sl, #0
 8003444:	f04f 0b00 	mov.w	fp, #0
 8003448:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800344c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003450:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003454:	4652      	mov	r2, sl
 8003456:	465b      	mov	r3, fp
 8003458:	1a14      	subs	r4, r2, r0
 800345a:	eb63 0501 	sbc.w	r5, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	00ab      	lsls	r3, r5, #2
 8003468:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800346c:	00a2      	lsls	r2, r4, #2
 800346e:	4614      	mov	r4, r2
 8003470:	461d      	mov	r5, r3
 8003472:	eb14 0800 	adds.w	r8, r4, r0
 8003476:	eb45 0901 	adc.w	r9, r5, r1
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800348e:	4690      	mov	r8, r2
 8003490:	4699      	mov	r9, r3
 8003492:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003496:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080034a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80034b6:	2205      	movs	r2, #5
 80034b8:	492b      	ldr	r1, [pc, #172]	@ (8003568 <SYSVIEW_AddTask+0xc0>)
 80034ba:	68b8      	ldr	r0, [r7, #8]
 80034bc:	f004 fad6 	bl	8007a6c <memcmp>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d04b      	beq.n	800355e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80034c6:	4b29      	ldr	r3, [pc, #164]	@ (800356c <SYSVIEW_AddTask+0xc4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b07      	cmp	r3, #7
 80034cc:	d903      	bls.n	80034d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80034ce:	4828      	ldr	r0, [pc, #160]	@ (8003570 <SYSVIEW_AddTask+0xc8>)
 80034d0:	f002 f9d8 	bl	8005884 <SEGGER_SYSVIEW_Warn>
    return;
 80034d4:	e044      	b.n	8003560 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80034d6:	4b25      	ldr	r3, [pc, #148]	@ (800356c <SYSVIEW_AddTask+0xc4>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4926      	ldr	r1, [pc, #152]	@ (8003574 <SYSVIEW_AddTask+0xcc>)
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80034ea:	4b20      	ldr	r3, [pc, #128]	@ (800356c <SYSVIEW_AddTask+0xc4>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4921      	ldr	r1, [pc, #132]	@ (8003574 <SYSVIEW_AddTask+0xcc>)
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3304      	adds	r3, #4
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003500:	4b1a      	ldr	r3, [pc, #104]	@ (800356c <SYSVIEW_AddTask+0xc4>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	491b      	ldr	r1, [pc, #108]	@ (8003574 <SYSVIEW_AddTask+0xcc>)
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	3308      	adds	r3, #8
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <SYSVIEW_AddTask+0xc4>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4916      	ldr	r1, [pc, #88]	@ (8003574 <SYSVIEW_AddTask+0xcc>)
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	330c      	adds	r3, #12
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800352c:	4b0f      	ldr	r3, [pc, #60]	@ (800356c <SYSVIEW_AddTask+0xc4>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4910      	ldr	r1, [pc, #64]	@ (8003574 <SYSVIEW_AddTask+0xcc>)
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3310      	adds	r3, #16
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <SYSVIEW_AddTask+0xc4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3301      	adds	r3, #1
 8003548:	4a08      	ldr	r2, [pc, #32]	@ (800356c <SYSVIEW_AddTask+0xc4>)
 800354a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f80e 	bl	8003578 <SYSVIEW_SendTaskInfo>
 800355c:	e000      	b.n	8003560 <SYSVIEW_AddTask+0xb8>
    return;
 800355e:	bf00      	nop

}
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	08007dd8 	.word	0x08007dd8
 800356c:	2000ba7c 	.word	0x2000ba7c
 8003570:	08007de0 	.word	0x08007de0
 8003574:	2000b9dc 	.word	0x2000b9dc

08003578 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003586:	f107 0310 	add.w	r3, r7, #16
 800358a:	2218      	movs	r2, #24
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f004 fa7c 	bl	8007a8c <memset>
  TaskInfo.TaskID     = TaskID;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fd55 	bl	800505c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80035b2:	bf00      	nop
 80035b4:	3728      	adds	r7, #40	@ 0x28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80035c2:	4b26      	ldr	r3, [pc, #152]	@ (800365c <_DoInit+0xa0>)
 80035c4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80035c6:	22a8      	movs	r2, #168	@ 0xa8
 80035c8:	2100      	movs	r1, #0
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	f004 fa5e 	bl	8007a8c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2203      	movs	r2, #3
 80035d4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2203      	movs	r2, #3
 80035da:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4a20      	ldr	r2, [pc, #128]	@ (8003660 <_DoInit+0xa4>)
 80035e0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <_DoInit+0xa8>)
 80035e6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2200      	movs	r2, #0
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	4a16      	ldr	r2, [pc, #88]	@ (8003660 <_DoInit+0xa4>)
 8003606:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4a17      	ldr	r2, [pc, #92]	@ (8003668 <_DoInit+0xac>)
 800360c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2210      	movs	r2, #16
 8003612:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2200      	movs	r2, #0
 8003618:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2200      	movs	r2, #0
 8003624:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003626:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800362a:	2300      	movs	r3, #0
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	e00c      	b.n	800364a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1c3 030f 	rsb	r3, r3, #15
 8003636:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <_DoInit+0xb0>)
 8003638:	5cd1      	ldrb	r1, [r2, r3]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	460a      	mov	r2, r1
 8003642:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3301      	adds	r3, #1
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b0f      	cmp	r3, #15
 800364e:	d9ef      	bls.n	8003630 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003650:	f3bf 8f5f 	dmb	sy
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	2000ba80 	.word	0x2000ba80
 8003660:	08007e30 	.word	0x08007e30
 8003664:	2000bb28 	.word	0x2000bb28
 8003668:	2000bf28 	.word	0x2000bf28
 800366c:	08007f28 	.word	0x08007f28

08003670 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	@ 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800367c:	2300      	movs	r3, #0
 800367e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	429a      	cmp	r2, r3
 8003692:	d905      	bls.n	80036a0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
 800369e:	e007      	b.n	80036b0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	1acb      	subs	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3b01      	subs	r3, #1
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ba:	4293      	cmp	r3, r2
 80036bc:	bf28      	it	cs
 80036be:	4613      	movcs	r3, r2
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80036c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4293      	cmp	r3, r2
 80036c8:	bf28      	it	cs
 80036ca:	4613      	movcs	r3, r2
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80036d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	6978      	ldr	r0, [r7, #20]
 80036de:	f004 fa01 	bl	8007ae4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	4413      	add	r3, r2
 80036e8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	4413      	add	r3, r2
 80036f0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	4413      	add	r3, r2
 8003700:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d101      	bne.n	8003710 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003710:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1b2      	bne.n	8003686 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003720:	6a3b      	ldr	r3, [r7, #32]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3728      	adds	r7, #40	@ 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800372a:	b580      	push	{r7, lr}
 800372c:	b088      	sub	sp, #32
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	d911      	bls.n	8003772 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	6938      	ldr	r0, [r7, #16]
 800375e:	f004 f9c1 	bl	8007ae4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003762:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	441a      	add	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003770:	e01f      	b.n	80037b2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	6938      	ldr	r0, [r7, #16]
 8003786:	f004 f9ad 	bl	8007ae4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4413      	add	r3, r2
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4619      	mov	r1, r3
 80037a2:	6938      	ldr	r0, [r7, #16]
 80037a4:	f004 f99e 	bl	8007ae4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80037a8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	60da      	str	r2, [r3, #12]
}
 80037b2:	bf00      	nop
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80037ba:	b480      	push	{r7}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d808      	bhi.n	80037e8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad2      	subs	r2, r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	3b01      	subs	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e004      	b.n	80037f2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80037f2:	697b      	ldr	r3, [r7, #20]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	@ 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800380c:	4b3e      	ldr	r3, [pc, #248]	@ (8003908 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b53      	cmp	r3, #83	@ 0x53
 8003818:	d001      	beq.n	800381e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800381a:	f7ff fecf 	bl	80035bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4a37      	ldr	r2, [pc, #220]	@ (8003908 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800382c:	4413      	add	r3, r2
 800382e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	429a      	cmp	r2, r3
 800384a:	d92b      	bls.n	80038a4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4293      	cmp	r3, r2
 800385c:	bf28      	it	cs
 800385e:	4613      	movcs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003868:	4413      	add	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	6939      	ldr	r1, [r7, #16]
 8003870:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003872:	f004 f937 	bl	8007ae4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4413      	add	r3, r2
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800387e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	4413      	add	r3, r2
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800388e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4413      	add	r3, r2
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800389c:	429a      	cmp	r2, r3
 800389e:	d101      	bne.n	80038a4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4293      	cmp	r3, r2
 80038b2:	bf28      	it	cs
 80038b4:	4613      	movcs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d019      	beq.n	80038f2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	4413      	add	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	6939      	ldr	r1, [r7, #16]
 80038cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038ce:	f004 f909 	bl	8007ae4 <memcpy>
    NumBytesRead += NumBytesRem;
 80038d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4413      	add	r3, r2
 80038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80038da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4413      	add	r3, r2
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80038ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	4413      	add	r3, r2
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80038f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80038fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003900:	4618      	mov	r0, r3
 8003902:	3730      	adds	r7, #48	@ 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	2000ba80 	.word	0x2000ba80

0800390c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	@ 0x30
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003918:	4b3e      	ldr	r3, [pc, #248]	@ (8003a14 <SEGGER_RTT_ReadNoLock+0x108>)
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b53      	cmp	r3, #83	@ 0x53
 8003924:	d001      	beq.n	800392a <SEGGER_RTT_ReadNoLock+0x1e>
 8003926:	f7ff fe49 	bl	80035bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	3360      	adds	r3, #96	@ 0x60
 8003936:	4a37      	ldr	r2, [pc, #220]	@ (8003a14 <SEGGER_RTT_ReadNoLock+0x108>)
 8003938:	4413      	add	r3, r2
 800393a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800394c:	2300      	movs	r3, #0
 800394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	429a      	cmp	r2, r3
 8003956:	d92b      	bls.n	80039b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4293      	cmp	r3, r2
 8003968:	bf28      	it	cs
 800396a:	4613      	movcs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	4413      	add	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	6939      	ldr	r1, [r7, #16]
 800397c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800397e:	f004 f8b1 	bl	8007ae4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	4413      	add	r3, r2
 8003988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800398a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4413      	add	r3, r2
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800399a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4413      	add	r3, r2
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d101      	bne.n	80039b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4293      	cmp	r3, r2
 80039be:	bf28      	it	cs
 80039c0:	4613      	movcs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d019      	beq.n	80039fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	4413      	add	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	6939      	ldr	r1, [r7, #16]
 80039d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039da:	f004 f883 	bl	8007ae4 <memcpy>
    NumBytesRead += NumBytesRem;
 80039de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80039e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4413      	add	r3, r2
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4413      	add	r3, r2
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80039fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a08:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3730      	adds	r7, #48	@ 0x30
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	2000ba80 	.word	0x2000ba80

08003a18 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	3360      	adds	r3, #96	@ 0x60
 8003a34:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003a36:	4413      	add	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d029      	beq.n	8003a96 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d82e      	bhi.n	8003aa4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d013      	beq.n	8003a76 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003a4e:	e029      	b.n	8003aa4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003a50:	6978      	ldr	r0, [r7, #20]
 8003a52:	f7ff feb2 	bl	80037ba <_GetAvailWriteSpace>
 8003a56:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d202      	bcs.n	8003a66 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003a64:	e021      	b.n	8003aaa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	6978      	ldr	r0, [r7, #20]
 8003a70:	f7ff fe5b 	bl	800372a <_WriteNoCheck>
    break;
 8003a74:	e019      	b.n	8003aaa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f7ff fe9f 	bl	80037ba <_GetAvailWriteSpace>
 8003a7c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4293      	cmp	r3, r2
 8003a84:	bf28      	it	cs
 8003a86:	4613      	movcs	r3, r2
 8003a88:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	69b9      	ldr	r1, [r7, #24]
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7ff fe4b 	bl	800372a <_WriteNoCheck>
    break;
 8003a94:	e009      	b.n	8003aaa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff fde8 	bl	8003670 <_WriteBlocking>
 8003aa0:	61f8      	str	r0, [r7, #28]
    break;
 8003aa2:	e002      	b.n	8003aaa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
    break;
 8003aa8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	2000ba80 	.word	0x2000ba80

08003ab8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b00 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b53      	cmp	r3, #83	@ 0x53
 8003ad0:	d001      	beq.n	8003ad6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003ad2:	f7ff fd73 	bl	80035bc <_DoInit>
  SEGGER_RTT_LOCK();
 8003ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8003ada:	f04f 0120 	mov.w	r1, #32
 8003ade:	f381 8811 	msr	BASEPRI, r1
 8003ae2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ff95 	bl	8003a18 <SEGGER_RTT_WriteDownBufferNoLock>
 8003aee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003af6:	697b      	ldr	r3, [r7, #20]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	2000ba80 	.word	0x2000ba80

08003b04 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003b12:	4b3d      	ldr	r3, [pc, #244]	@ (8003c08 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b53      	cmp	r3, #83	@ 0x53
 8003b1e:	d001      	beq.n	8003b24 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003b20:	f7ff fd4c 	bl	80035bc <_DoInit>
  SEGGER_RTT_LOCK();
 8003b24:	f3ef 8311 	mrs	r3, BASEPRI
 8003b28:	f04f 0120 	mov.w	r1, #32
 8003b2c:	f381 8811 	msr	BASEPRI, r1
 8003b30:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b32:	4b35      	ldr	r3, [pc, #212]	@ (8003c08 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003b34:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003b3a:	6939      	ldr	r1, [r7, #16]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dbeb      	blt.n	8003b3a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003b62:	e000      	b.n	8003b66 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003b64:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	da3f      	bge.n	8003bf0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003b70:	6939      	ldr	r1, [r7, #16]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	440b      	add	r3, r1
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003b84:	6939      	ldr	r1, [r7, #16]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	3304      	adds	r3, #4
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003b9a:	6939      	ldr	r1, [r7, #16]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3320      	adds	r3, #32
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003bae:	6939      	ldr	r1, [r7, #16]
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	440b      	add	r3, r1
 8003bbc:	3328      	adds	r3, #40	@ 0x28
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003bc2:	6939      	ldr	r1, [r7, #16]
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	440b      	add	r3, r1
 8003bd0:	3324      	adds	r3, #36	@ 0x24
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003bd6:	6939      	ldr	r1, [r7, #16]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	332c      	adds	r3, #44	@ 0x2c
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003bea:	f3bf 8f5f 	dmb	sy
 8003bee:	e002      	b.n	8003bf6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2000ba80 	.word	0x2000ba80

08003c0c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	@ 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003c1a:	4b21      	ldr	r3, [pc, #132]	@ (8003ca0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003c1c:	623b      	str	r3, [r7, #32]
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b53      	cmp	r3, #83	@ 0x53
 8003c26:	d001      	beq.n	8003c2c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003c28:	f7ff fcc8 	bl	80035bc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003c2e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d82c      	bhi.n	8003c90 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003c36:	f3ef 8311 	mrs	r3, BASEPRI
 8003c3a:	f04f 0120 	mov.w	r1, #32
 8003c3e:	f381 8811 	msr	BASEPRI, r1
 8003c42:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	3360      	adds	r3, #96	@ 0x60
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2200      	movs	r2, #0
 8003c72:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c80:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8e:	e002      	b.n	8003c96 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3728      	adds	r7, #40	@ 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	2000ba80 	.word	0x2000ba80

08003ca4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	60fa      	str	r2, [r7, #12]
 8003cba:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b80      	cmp	r3, #128	@ 0x80
 8003cc0:	d90a      	bls.n	8003cd8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003cc6:	e007      	b.n	8003cd8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	1c53      	adds	r3, r2, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	60f9      	str	r1, [r7, #12]
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1e5a      	subs	r2, r3, #1
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <_EncodeStr+0x46>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ee      	bne.n	8003cc8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3307      	adds	r3, #7
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d22:	4b34      	ldr	r3, [pc, #208]	@ (8003df4 <_HandleIncomingPacket+0xd8>)
 8003d24:	7e1b      	ldrb	r3, [r3, #24]
 8003d26:	4618      	mov	r0, r3
 8003d28:	1cfb      	adds	r3, r7, #3
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7ff fded 	bl	800390c <SEGGER_RTT_ReadNoLock>
 8003d32:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d057      	beq.n	8003dea <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	2b80      	cmp	r3, #128	@ 0x80
 8003d3e:	d031      	beq.n	8003da4 <_HandleIncomingPacket+0x88>
 8003d40:	2b80      	cmp	r3, #128	@ 0x80
 8003d42:	dc40      	bgt.n	8003dc6 <_HandleIncomingPacket+0xaa>
 8003d44:	2b07      	cmp	r3, #7
 8003d46:	dc15      	bgt.n	8003d74 <_HandleIncomingPacket+0x58>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dd3c      	ble.n	8003dc6 <_HandleIncomingPacket+0xaa>
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d839      	bhi.n	8003dc6 <_HandleIncomingPacket+0xaa>
 8003d52:	a201      	add	r2, pc, #4	@ (adr r2, 8003d58 <_HandleIncomingPacket+0x3c>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d7b 	.word	0x08003d7b
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d87 	.word	0x08003d87
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d93 	.word	0x08003d93
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d76:	d033      	beq.n	8003de0 <_HandleIncomingPacket+0xc4>
 8003d78:	e025      	b.n	8003dc6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003d7a:	f000 fff3 	bl	8004d64 <SEGGER_SYSVIEW_Start>
      break;
 8003d7e:	e034      	b.n	8003dea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003d80:	f001 f8ac 	bl	8004edc <SEGGER_SYSVIEW_Stop>
      break;
 8003d84:	e031      	b.n	8003dea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003d86:	f001 fa85 	bl	8005294 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003d8a:	e02e      	b.n	8003dea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003d8c:	f001 fa4a 	bl	8005224 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003d90:	e02b      	b.n	8003dea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003d92:	f001 f8c9 	bl	8004f28 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003d96:	e028      	b.n	8003dea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003d98:	f001 fd22 	bl	80057e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003d9c:	e025      	b.n	8003dea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003d9e:	f001 fd01 	bl	80057a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003da2:	e022      	b.n	8003dea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003da4:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <_HandleIncomingPacket+0xd8>)
 8003da6:	7e1b      	ldrb	r3, [r3, #24]
 8003da8:	4618      	mov	r0, r3
 8003daa:	1cfb      	adds	r3, r7, #3
 8003dac:	2201      	movs	r2, #1
 8003dae:	4619      	mov	r1, r3
 8003db0:	f7ff fdac 	bl	800390c <SEGGER_RTT_ReadNoLock>
 8003db4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 fc66 	bl	8005690 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003dc4:	e00e      	b.n	8003de4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	b25b      	sxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da0c      	bge.n	8003de8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003dce:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <_HandleIncomingPacket+0xd8>)
 8003dd0:	7e1b      	ldrb	r3, [r3, #24]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	1cfb      	adds	r3, r7, #3
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f7ff fd97 	bl	800390c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003dde:	e003      	b.n	8003de8 <_HandleIncomingPacket+0xcc>
      break;
 8003de0:	bf00      	nop
 8003de2:	e002      	b.n	8003dea <_HandleIncomingPacket+0xce>
      break;
 8003de4:	bf00      	nop
 8003de6:	e000      	b.n	8003dea <_HandleIncomingPacket+0xce>
      break;
 8003de8:	bf00      	nop
    }
  }
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	2000cf40 	.word	0x2000cf40

08003df8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	@ 0x30
 8003dfc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003dfe:	2301      	movs	r3, #1
 8003e00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	3301      	adds	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0c:	4b32      	ldr	r3, [pc, #200]	@ (8003ed8 <_TrySendOverflowPacket+0xe0>)
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e12:	e00b      	b.n	8003e2c <_TrySendOverflowPacket+0x34>
 8003e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003e1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	09db      	lsrs	r3, r3, #7
 8003e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e30:	d8f0      	bhi.n	8003e14 <_TrySendOverflowPacket+0x1c>
 8003e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003e42:	4b26      	ldr	r3, [pc, #152]	@ (8003edc <_TrySendOverflowPacket+0xe4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003e48:	4b23      	ldr	r3, [pc, #140]	@ (8003ed8 <_TrySendOverflowPacket+0xe0>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	e00b      	b.n	8003e74 <_TrySendOverflowPacket+0x7c>
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	1c59      	adds	r1, r3, #1
 8003e64:	6279      	str	r1, [r7, #36]	@ 0x24
 8003e66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	09db      	lsrs	r3, r3, #7
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e78:	d8f0      	bhi.n	8003e5c <_TrySendOverflowPacket+0x64>
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003e8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ed8 <_TrySendOverflowPacket+0xe0>)
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f7fc f9d0 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003ea4:	f001 fe80 	bl	8005ba8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003eae:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed8 <_TrySendOverflowPacket+0xe0>)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003eb4:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <_TrySendOverflowPacket+0xe0>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <_TrySendOverflowPacket+0xe0>)
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e004      	b.n	8003ecc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003ec2:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <_TrySendOverflowPacket+0xe0>)
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	4a03      	ldr	r2, [pc, #12]	@ (8003ed8 <_TrySendOverflowPacket+0xe0>)
 8003eca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003ecc:	693b      	ldr	r3, [r7, #16]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3730      	adds	r7, #48	@ 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000cf40 	.word	0x2000cf40
 8003edc:	e0001004 	.word	0xe0001004

08003ee0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	@ 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003eec:	4b96      	ldr	r3, [pc, #600]	@ (8004148 <_SendPacket+0x268>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d010      	beq.n	8003f16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003ef4:	4b94      	ldr	r3, [pc, #592]	@ (8004148 <_SendPacket+0x268>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8130 	beq.w	800415e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003efe:	4b92      	ldr	r3, [pc, #584]	@ (8004148 <_SendPacket+0x268>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d109      	bne.n	8003f1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003f06:	f7ff ff77 	bl	8003df8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003f0a:	4b8f      	ldr	r3, [pc, #572]	@ (8004148 <_SendPacket+0x268>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	f040 8127 	bne.w	8004162 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8003f14:	e001      	b.n	8003f1a <_SendPacket+0x3a>
    goto Send;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <_SendPacket+0x3c>
Send:
 8003f1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b1f      	cmp	r3, #31
 8003f20:	d809      	bhi.n	8003f36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003f22:	4b89      	ldr	r3, [pc, #548]	@ (8004148 <_SendPacket+0x268>)
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 8118 	bne.w	8004166 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b17      	cmp	r3, #23
 8003f3a:	d807      	bhi.n	8003f4c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e0c4      	b.n	80040d6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f58:	d912      	bls.n	8003f80 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	09da      	lsrs	r2, r3, #7
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	3a01      	subs	r2, #1
 8003f72:	60fa      	str	r2, [r7, #12]
 8003f74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e006      	b.n	8003f8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b7e      	cmp	r3, #126	@ 0x7e
 8003f92:	d807      	bhi.n	8003fa4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e098      	b.n	80040d6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003faa:	d212      	bcs.n	8003fd2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	09da      	lsrs	r2, r3, #7
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	3a01      	subs	r2, #1
 8003fc4:	60fa      	str	r2, [r7, #12]
 8003fc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e081      	b.n	80040d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fd8:	d21d      	bcs.n	8004016 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0b9a      	lsrs	r2, r3, #14
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	09db      	lsrs	r3, r3, #7
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	60fa      	str	r2, [r7, #12]
 8003ff6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	3a01      	subs	r2, #1
 8004008:	60fa      	str	r2, [r7, #12]
 800400a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e05f      	b.n	80040d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800401c:	d228      	bcs.n	8004070 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0d5a      	lsrs	r2, r3, #21
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b01      	subs	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0b9b      	lsrs	r3, r3, #14
 8004032:	b2db      	uxtb	r3, r3
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	3a01      	subs	r2, #1
 8004038:	60fa      	str	r2, [r7, #12]
 800403a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	09db      	lsrs	r3, r3, #7
 8004048:	b2db      	uxtb	r3, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	3a01      	subs	r2, #1
 800404e:	60fa      	str	r2, [r7, #12]
 8004050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	3a01      	subs	r2, #1
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e032      	b.n	80040d6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0f1a      	lsrs	r2, r3, #28
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3b01      	subs	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	0d5b      	lsrs	r3, r3, #21
 8004084:	b2db      	uxtb	r3, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	3a01      	subs	r2, #1
 800408a:	60fa      	str	r2, [r7, #12]
 800408c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0b9b      	lsrs	r3, r3, #14
 800409a:	b2db      	uxtb	r3, r3
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	3a01      	subs	r2, #1
 80040a0:	60fa      	str	r2, [r7, #12]
 80040a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	09db      	lsrs	r3, r3, #7
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	3a01      	subs	r2, #1
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	3a01      	subs	r2, #1
 80040ca:	60fa      	str	r2, [r7, #12]
 80040cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80040d6:	4b1d      	ldr	r3, [pc, #116]	@ (800414c <_SendPacket+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80040dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <_SendPacket+0x268>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	623b      	str	r3, [r7, #32]
 80040ee:	e00b      	b.n	8004108 <_SendPacket+0x228>
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	1c59      	adds	r1, r3, #1
 80040f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80040fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	09db      	lsrs	r3, r3, #7
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	2b7f      	cmp	r3, #127	@ 0x7f
 800410c:	d8f0      	bhi.n	80040f0 <_SendPacket+0x210>
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	627a      	str	r2, [r7, #36]	@ 0x24
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800411e:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <_SendPacket+0x268>)
 8004120:	785b      	ldrb	r3, [r3, #1]
 8004122:	4618      	mov	r0, r3
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	461a      	mov	r2, r3
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	f7fc f887 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004132:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004134:	f001 fd38 	bl	8005ba8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800413e:	4a02      	ldr	r2, [pc, #8]	@ (8004148 <_SendPacket+0x268>)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	60d3      	str	r3, [r2, #12]
 8004144:	e010      	b.n	8004168 <_SendPacket+0x288>
 8004146:	bf00      	nop
 8004148:	2000cf40 	.word	0x2000cf40
 800414c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004150:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <_SendPacket+0x2d8>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <_SendPacket+0x2d8>)
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e004      	b.n	8004168 <_SendPacket+0x288>
    goto SendDone;
 800415e:	bf00      	nop
 8004160:	e002      	b.n	8004168 <_SendPacket+0x288>
      goto SendDone;
 8004162:	bf00      	nop
 8004164:	e000      	b.n	8004168 <_SendPacket+0x288>
      goto SendDone;
 8004166:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004168:	4b13      	ldr	r3, [pc, #76]	@ (80041b8 <_SendPacket+0x2d8>)
 800416a:	7e1b      	ldrb	r3, [r3, #24]
 800416c:	4619      	mov	r1, r3
 800416e:	4a13      	ldr	r2, [pc, #76]	@ (80041bc <_SendPacket+0x2dc>)
 8004170:	460b      	mov	r3, r1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	440b      	add	r3, r1
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	336c      	adds	r3, #108	@ 0x6c
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <_SendPacket+0x2d8>)
 8004180:	7e1b      	ldrb	r3, [r3, #24]
 8004182:	4618      	mov	r0, r3
 8004184:	490d      	ldr	r1, [pc, #52]	@ (80041bc <_SendPacket+0x2dc>)
 8004186:	4603      	mov	r3, r0
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4403      	add	r3, r0
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	3370      	adds	r3, #112	@ 0x70
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d00b      	beq.n	80041b0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004198:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <_SendPacket+0x2d8>)
 800419a:	789b      	ldrb	r3, [r3, #2]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <_SendPacket+0x2d8>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80041a6:	f7ff fdb9 	bl	8003d1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80041aa:	4b03      	ldr	r3, [pc, #12]	@ (80041b8 <_SendPacket+0x2d8>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80041b0:	bf00      	nop
 80041b2:	3728      	adds	r7, #40	@ 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	2000cf40 	.word	0x2000cf40
 80041bc:	2000ba80 	.word	0x2000ba80

080041c0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	@ 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3301      	adds	r3, #1
 80041d6:	2b80      	cmp	r3, #128	@ 0x80
 80041d8:	d80a      	bhi.n	80041f0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6051      	str	r1, [r2, #4]
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b80      	cmp	r3, #128	@ 0x80
 80041f6:	d15a      	bne.n	80042ae <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	e00b      	b.n	8004232 <_StoreChar+0x72>
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	1c59      	adds	r1, r3, #1
 8004222:	6279      	str	r1, [r7, #36]	@ 0x24
 8004224:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	09db      	lsrs	r3, r3, #7
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	2b7f      	cmp	r3, #127	@ 0x7f
 8004236:	d8f0      	bhi.n	800421a <_StoreChar+0x5a>
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	627a      	str	r2, [r7, #36]	@ 0x24
 800423e:	6a3a      	ldr	r2, [r7, #32]
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	e00b      	b.n	800426a <_StoreChar+0xaa>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	1c59      	adds	r1, r3, #1
 800425a:	61f9      	str	r1, [r7, #28]
 800425c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	09db      	lsrs	r3, r3, #7
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b7f      	cmp	r3, #127	@ 0x7f
 800426e:	d8f0      	bhi.n	8004252 <_StoreChar+0x92>
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	61fa      	str	r2, [r7, #28]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	221a      	movs	r2, #26
 8004286:	6939      	ldr	r1, [r7, #16]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fe29 	bl	8003ee0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fd36 	bl	8003d04 <_PreparePacket>
 8004298:	4602      	mov	r2, r0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
  }
}
 80042ae:	bf00      	nop
 80042b0:	3728      	adds	r7, #40	@ 0x28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	@ 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80042ca:	2301      	movs	r3, #1
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80042d2:	e007      	b.n	80042e4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	623b      	str	r3, [r7, #32]
    Width++;
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3301      	adds	r3, #1
 80042e2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80042e4:	6a3a      	ldr	r2, [r7, #32]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d2f3      	bcs.n	80042d4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d901      	bls.n	80042f8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80042f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d000      	beq.n	8004304 <_PrintUnsigned+0x4c>
 8004302:	e01f      	b.n	8004344 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01c      	beq.n	8004344 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800430a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <_PrintUnsigned+0x68>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d102      	bne.n	8004320 <_PrintUnsigned+0x68>
        c = '0';
 800431a:	2330      	movs	r3, #48	@ 0x30
 800431c:	76fb      	strb	r3, [r7, #27]
 800431e:	e001      	b.n	8004324 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004320:	2320      	movs	r3, #32
 8004322:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004324:	e007      	b.n	8004336 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	3b01      	subs	r3, #1
 800432a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800432c:	7efb      	ldrb	r3, [r7, #27]
 800432e:	4619      	mov	r1, r3
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff ff45 	bl	80041c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <_PrintUnsigned+0x8c>
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	429a      	cmp	r2, r3
 8004342:	d3f0      	bcc.n	8004326 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d903      	bls.n	8004352 <_PrintUnsigned+0x9a>
      NumDigits--;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	3b01      	subs	r3, #1
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	e009      	b.n	8004366 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	fbb2 f3f3 	udiv	r3, r2, r3
 800435a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	429a      	cmp	r2, r3
 8004362:	d200      	bcs.n	8004366 <_PrintUnsigned+0xae>
        break;
 8004364:	e005      	b.n	8004372 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004370:	e7e8      	b.n	8004344 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800438a:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <_PrintUnsigned+0x128>)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	4413      	add	r3, r2
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff ff13 	bl	80041c0 <_StoreChar>
    Digit /= Base;
 800439a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e3      	bne.n	8004372 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80043aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d011      	beq.n	80043d8 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00e      	beq.n	80043d8 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80043ba:	e006      	b.n	80043ca <_PrintUnsigned+0x112>
        FieldWidth--;
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	3b01      	subs	r3, #1
 80043c0:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80043c2:	2120      	movs	r1, #32
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7ff fefb 	bl	80041c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <_PrintUnsigned+0x120>
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d3f1      	bcc.n	80043bc <_PrintUnsigned+0x104>
      }
    }
  }
}
 80043d8:	bf00      	nop
 80043da:	3728      	adds	r7, #40	@ 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	08007f48 	.word	0x08007f48

080043e4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bfb8      	it	lt
 80043f8:	425b      	neglt	r3, r3
 80043fa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80043fc:	2301      	movs	r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004400:	e007      	b.n	8004412 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	fb92 f3f3 	sdiv	r3, r2, r3
 800440a:	613b      	str	r3, [r7, #16]
    Width++;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	3301      	adds	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	429a      	cmp	r2, r3
 8004418:	daf3      	bge.n	8004402 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	429a      	cmp	r2, r3
 8004420:	d901      	bls.n	8004426 <_PrintInt+0x42>
    Width = NumDigits;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <_PrintInt+0x5e>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	db04      	blt.n	800443c <_PrintInt+0x58>
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <_PrintInt+0x5e>
    FieldWidth--;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	3b01      	subs	r3, #1
 8004440:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <_PrintInt+0x6e>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d016      	beq.n	8004480 <_PrintInt+0x9c>
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d111      	bne.n	8004480 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00e      	beq.n	8004480 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004462:	e006      	b.n	8004472 <_PrintInt+0x8e>
        FieldWidth--;
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	3b01      	subs	r3, #1
 8004468:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800446a:	2120      	movs	r1, #32
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff fea7 	bl	80041c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <_PrintInt+0x9c>
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	429a      	cmp	r2, r3
 800447e:	d3f1      	bcc.n	8004464 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da07      	bge.n	8004496 <_PrintInt+0xb2>
    v = -v;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	425b      	negs	r3, r3
 800448a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800448c:	212d      	movs	r1, #45	@ 0x2d
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff fe96 	bl	80041c0 <_StoreChar>
 8004494:	e008      	b.n	80044a8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80044a0:	212b      	movs	r1, #43	@ 0x2b
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff fe8c 	bl	80041c0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d019      	beq.n	80044e6 <_PrintInt+0x102>
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d114      	bne.n	80044e6 <_PrintInt+0x102>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d111      	bne.n	80044e6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044c8:	e006      	b.n	80044d8 <_PrintInt+0xf4>
        FieldWidth--;
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80044d0:	2130      	movs	r1, #48	@ 0x30
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff fe74 	bl	80041c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <_PrintInt+0x102>
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3f1      	bcc.n	80044ca <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff fedf 	bl	80042b8 <_PrintUnsigned>
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b098      	sub	sp, #96	@ 0x60
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004510:	f3ef 8311 	mrs	r3, BASEPRI
 8004514:	f04f 0120 	mov.w	r1, #32
 8004518:	f381 8811 	msr	BASEPRI, r1
 800451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451e:	48b7      	ldr	r0, [pc, #732]	@ (80047fc <_VPrintTarget+0x2f8>)
 8004520:	f7ff fbf0 	bl	8003d04 <_PreparePacket>
 8004524:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004526:	4bb5      	ldr	r3, [pc, #724]	@ (80047fc <_VPrintTarget+0x2f8>)
 8004528:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800452a:	2300      	movs	r3, #0
 800452c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004530:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	3301      	adds	r3, #1
 8004536:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3301      	adds	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800454a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 81a8 	beq.w	80048a4 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004554:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004558:	2b25      	cmp	r3, #37	@ 0x25
 800455a:	f040 8195 	bne.w	8004888 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800455e:	2300      	movs	r3, #0
 8004560:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8004562:	2301      	movs	r3, #1
 8004564:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800456e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004572:	3b23      	subs	r3, #35	@ 0x23
 8004574:	2b0d      	cmp	r3, #13
 8004576:	d83f      	bhi.n	80045f8 <_VPrintTarget+0xf4>
 8004578:	a201      	add	r2, pc, #4	@ (adr r2, 8004580 <_VPrintTarget+0x7c>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045e9 	.word	0x080045e9
 8004584:	080045f9 	.word	0x080045f9
 8004588:	080045f9 	.word	0x080045f9
 800458c:	080045f9 	.word	0x080045f9
 8004590:	080045f9 	.word	0x080045f9
 8004594:	080045f9 	.word	0x080045f9
 8004598:	080045f9 	.word	0x080045f9
 800459c:	080045f9 	.word	0x080045f9
 80045a0:	080045d9 	.word	0x080045d9
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045f9 	.word	0x080045f9
 80045b0:	080045f9 	.word	0x080045f9
 80045b4:	080045c9 	.word	0x080045c9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80045b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	e01a      	b.n	80045fe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80045c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ca:	f043 0302 	orr.w	r3, r3, #2
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e012      	b.n	80045fe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80045d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045da:	f043 0304 	orr.w	r3, r3, #4
 80045de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e00a      	b.n	80045fe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80045e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ea:	f043 0308 	orr.w	r3, r3, #8
 80045ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e002      	b.n	80045fe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80045f8:	2300      	movs	r3, #0
 80045fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80045fc:	bf00      	nop
        }
      } while (v);
 80045fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1b0      	bne.n	8004566 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004604:	2300      	movs	r3, #0
 8004606:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004610:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004614:	2b2f      	cmp	r3, #47	@ 0x2f
 8004616:	d912      	bls.n	800463e <_VPrintTarget+0x13a>
 8004618:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800461c:	2b39      	cmp	r3, #57	@ 0x39
 800461e:	d80e      	bhi.n	800463e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	461a      	mov	r2, r3
 8004632:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004636:	4413      	add	r3, r2
 8004638:	3b30      	subs	r3, #48	@ 0x30
 800463a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 800463c:	e7e4      	b.n	8004608 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800463e:	2300      	movs	r3, #0
 8004640:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800464a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800464e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004650:	d11d      	bne.n	800468e <_VPrintTarget+0x18a>
        sFormat++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004660:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004664:	2b2f      	cmp	r3, #47	@ 0x2f
 8004666:	d912      	bls.n	800468e <_VPrintTarget+0x18a>
 8004668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800466c:	2b39      	cmp	r3, #57	@ 0x39
 800466e:	d80e      	bhi.n	800468e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	461a      	mov	r2, r3
 8004682:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004686:	4413      	add	r3, r2
 8004688:	3b30      	subs	r3, #48	@ 0x30
 800468a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800468c:	e7e4      	b.n	8004658 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004696:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800469a:	2b6c      	cmp	r3, #108	@ 0x6c
 800469c:	d003      	beq.n	80046a6 <_VPrintTarget+0x1a2>
 800469e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046a2:	2b68      	cmp	r3, #104	@ 0x68
 80046a4:	d107      	bne.n	80046b6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80046b4:	e7ef      	b.n	8004696 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80046b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046ba:	2b25      	cmp	r3, #37	@ 0x25
 80046bc:	f000 80d8 	beq.w	8004870 <_VPrintTarget+0x36c>
 80046c0:	2b25      	cmp	r3, #37	@ 0x25
 80046c2:	f2c0 80dc 	blt.w	800487e <_VPrintTarget+0x37a>
 80046c6:	2b78      	cmp	r3, #120	@ 0x78
 80046c8:	f300 80d9 	bgt.w	800487e <_VPrintTarget+0x37a>
 80046cc:	2b58      	cmp	r3, #88	@ 0x58
 80046ce:	f2c0 80d6 	blt.w	800487e <_VPrintTarget+0x37a>
 80046d2:	3b58      	subs	r3, #88	@ 0x58
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	f200 80d2 	bhi.w	800487e <_VPrintTarget+0x37a>
 80046da:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <_VPrintTarget+0x1dc>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080047d7 	.word	0x080047d7
 80046e4:	0800487f 	.word	0x0800487f
 80046e8:	0800487f 	.word	0x0800487f
 80046ec:	0800487f 	.word	0x0800487f
 80046f0:	0800487f 	.word	0x0800487f
 80046f4:	0800487f 	.word	0x0800487f
 80046f8:	0800487f 	.word	0x0800487f
 80046fc:	0800487f 	.word	0x0800487f
 8004700:	0800487f 	.word	0x0800487f
 8004704:	0800487f 	.word	0x0800487f
 8004708:	0800487f 	.word	0x0800487f
 800470c:	08004765 	.word	0x08004765
 8004710:	0800478b 	.word	0x0800478b
 8004714:	0800487f 	.word	0x0800487f
 8004718:	0800487f 	.word	0x0800487f
 800471c:	0800487f 	.word	0x0800487f
 8004720:	0800487f 	.word	0x0800487f
 8004724:	0800487f 	.word	0x0800487f
 8004728:	0800487f 	.word	0x0800487f
 800472c:	0800487f 	.word	0x0800487f
 8004730:	0800487f 	.word	0x0800487f
 8004734:	0800487f 	.word	0x0800487f
 8004738:	0800487f 	.word	0x0800487f
 800473c:	0800487f 	.word	0x0800487f
 8004740:	0800484b 	.word	0x0800484b
 8004744:	0800487f 	.word	0x0800487f
 8004748:	0800487f 	.word	0x0800487f
 800474c:	08004801 	.word	0x08004801
 8004750:	0800487f 	.word	0x0800487f
 8004754:	080047b1 	.word	0x080047b1
 8004758:	0800487f 	.word	0x0800487f
 800475c:	0800487f 	.word	0x0800487f
 8004760:	080047d7 	.word	0x080047d7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	1d19      	adds	r1, r3, #4
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6011      	str	r1, [r2, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004778:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fd1c 	bl	80041c0 <_StoreChar>
        break;
 8004788:	e07a      	b.n	8004880 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	1d19      	adds	r1, r3, #4
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6011      	str	r1, [r2, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004798:	f107 0010 	add.w	r0, r7, #16
 800479c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047a6:	220a      	movs	r2, #10
 80047a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047aa:	f7ff fe1b 	bl	80043e4 <_PrintInt>
        break;
 80047ae:	e067      	b.n	8004880 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	1d19      	adds	r1, r3, #4
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80047be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047c0:	f107 0010 	add.w	r0, r7, #16
 80047c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ce:	220a      	movs	r2, #10
 80047d0:	f7ff fd72 	bl	80042b8 <_PrintUnsigned>
        break;
 80047d4:	e054      	b.n	8004880 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1d19      	adds	r1, r3, #4
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6011      	str	r1, [r2, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80047e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047e6:	f107 0010 	add.w	r0, r7, #16
 80047ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f4:	2210      	movs	r2, #16
 80047f6:	f7ff fd5f 	bl	80042b8 <_PrintUnsigned>
        break;
 80047fa:	e041      	b.n	8004880 <_VPrintTarget+0x37c>
 80047fc:	2000cf70 	.word	0x2000cf70
      case 's':
        s = va_arg(*pParamList, const char*);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1d19      	adds	r1, r3, #4
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6011      	str	r1, [r2, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800480e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <_VPrintTarget+0x314>
          s = "(null)";
 8004814:	4b4a      	ldr	r3, [pc, #296]	@ (8004940 <_VPrintTarget+0x43c>)
 8004816:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004822:	3301      	adds	r3, #1
 8004824:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004826:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800482e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fcc1 	bl	80041c0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	2b7f      	cmp	r3, #127	@ 0x7f
 8004842:	d9e9      	bls.n	8004818 <_VPrintTarget+0x314>
        break;
 8004844:	e01c      	b.n	8004880 <_VPrintTarget+0x37c>
            break;
 8004846:	bf00      	nop
        break;
 8004848:	e01a      	b.n	8004880 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	1d19      	adds	r1, r3, #4
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6011      	str	r1, [r2, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004858:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800485a:	f107 0010 	add.w	r0, r7, #16
 800485e:	2300      	movs	r3, #0
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	2308      	movs	r3, #8
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2308      	movs	r3, #8
 8004868:	2210      	movs	r2, #16
 800486a:	f7ff fd25 	bl	80042b8 <_PrintUnsigned>
        break;
 800486e:	e007      	b.n	8004880 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	2125      	movs	r1, #37	@ 0x25
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fca2 	bl	80041c0 <_StoreChar>
        break;
 800487c:	e000      	b.n	8004880 <_VPrintTarget+0x37c>
      default:
        break;
 800487e:	bf00      	nop
      }
      sFormat++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e007      	b.n	8004898 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004888:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fc94 	bl	80041c0 <_StoreChar>
    }
  } while (*sFormat);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f ae4d 	bne.w	800453c <_VPrintTarget+0x38>
 80048a2:	e000      	b.n	80048a6 <_VPrintTarget+0x3a2>
      break;
 80048a4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d041      	beq.n	8004930 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048bc:	e00b      	b.n	80048d6 <_VPrintTarget+0x3d2>
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80048c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d2:	09db      	lsrs	r3, r3, #7
 80048d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80048da:	d8f0      	bhi.n	80048be <_VPrintTarget+0x3ba>
 80048dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ea:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f0:	2300      	movs	r3, #0
 80048f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f4:	e00b      	b.n	800490e <_VPrintTarget+0x40a>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fc:	1c59      	adds	r1, r3, #1
 80048fe:	6379      	str	r1, [r7, #52]	@ 0x34
 8004900:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	09db      	lsrs	r3, r3, #7
 800490c:	633b      	str	r3, [r7, #48]	@ 0x30
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	2b7f      	cmp	r3, #127	@ 0x7f
 8004912:	d8f0      	bhi.n	80048f6 <_VPrintTarget+0x3f2>
 8004914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	637a      	str	r2, [r7, #52]	@ 0x34
 800491a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004922:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	6979      	ldr	r1, [r7, #20]
 8004928:	221a      	movs	r2, #26
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fad8 	bl	8003ee0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004932:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004936:	bf00      	nop
 8004938:	3758      	adds	r7, #88	@ 0x58
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	08007e3c 	.word	0x08007e3c

08004944 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004952:	2300      	movs	r3, #0
 8004954:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004958:	4917      	ldr	r1, [pc, #92]	@ (80049b8 <SEGGER_SYSVIEW_Init+0x74>)
 800495a:	4818      	ldr	r0, [pc, #96]	@ (80049bc <SEGGER_SYSVIEW_Init+0x78>)
 800495c:	f7ff f8d2 	bl	8003b04 <SEGGER_RTT_AllocUpBuffer>
 8004960:	4603      	mov	r3, r0
 8004962:	b2da      	uxtb	r2, r3
 8004964:	4b16      	ldr	r3, [pc, #88]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004966:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800496a:	785a      	ldrb	r2, [r3, #1]
 800496c:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800496e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004970:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004972:	7e1b      	ldrb	r3, [r3, #24]
 8004974:	4618      	mov	r0, r3
 8004976:	2300      	movs	r3, #0
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2308      	movs	r3, #8
 800497c:	4a11      	ldr	r2, [pc, #68]	@ (80049c4 <SEGGER_SYSVIEW_Init+0x80>)
 800497e:	490f      	ldr	r1, [pc, #60]	@ (80049bc <SEGGER_SYSVIEW_Init+0x78>)
 8004980:	f7ff f944 	bl	8003c0c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004984:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800498a:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <SEGGER_SYSVIEW_Init+0x84>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a0c      	ldr	r2, [pc, #48]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004990:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004992:	4a0b      	ldr	r2, [pc, #44]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004998:	4a09      	ldr	r2, [pc, #36]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800499e:	4a08      	ldr	r2, [pc, #32]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80049a4:	4a06      	ldr	r2, [pc, #24]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2000bf38 	.word	0x2000bf38
 80049bc:	08007e44 	.word	0x08007e44
 80049c0:	2000cf40 	.word	0x2000cf40
 80049c4:	2000cf38 	.word	0x2000cf38
 80049c8:	e0001004 	.word	0xe0001004

080049cc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80049d4:	4a04      	ldr	r2, [pc, #16]	@ (80049e8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6113      	str	r3, [r2, #16]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2000cf40 	.word	0x2000cf40

080049ec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049f4:	f3ef 8311 	mrs	r3, BASEPRI
 80049f8:	f04f 0120 	mov.w	r1, #32
 80049fc:	f381 8811 	msr	BASEPRI, r1
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4808      	ldr	r0, [pc, #32]	@ (8004a24 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004a04:	f7ff f97e 	bl	8003d04 <_PreparePacket>
 8004a08:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68b8      	ldr	r0, [r7, #8]
 8004a10:	f7ff fa66 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f383 8811 	msr	BASEPRI, r3
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	2000cf70 	.word	0x2000cf70

08004a28 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a32:	f3ef 8311 	mrs	r3, BASEPRI
 8004a36:	f04f 0120 	mov.w	r1, #32
 8004a3a:	f381 8811 	msr	BASEPRI, r1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	4816      	ldr	r0, [pc, #88]	@ (8004a9c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004a42:	f7ff f95f 	bl	8003d04 <_PreparePacket>
 8004a46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e00b      	b.n	8004a6e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	1c59      	adds	r1, r3, #1
 8004a5e:	61f9      	str	r1, [r7, #28]
 8004a60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	09db      	lsrs	r3, r3, #7
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a72:	d8f0      	bhi.n	8004a56 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	61fa      	str	r2, [r7, #28]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68f9      	ldr	r1, [r7, #12]
 8004a88:	6938      	ldr	r0, [r7, #16]
 8004a8a:	f7ff fa29 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f383 8811 	msr	BASEPRI, r3
}
 8004a94:	bf00      	nop
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	2000cf70 	.word	0x2000cf70

08004aa0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08c      	sub	sp, #48	@ 0x30
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004aac:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab0:	f04f 0120 	mov.w	r1, #32
 8004ab4:	f381 8811 	msr	BASEPRI, r1
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	4825      	ldr	r0, [pc, #148]	@ (8004b50 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004abc:	f7ff f922 	bl	8003d04 <_PreparePacket>
 8004ac0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ace:	e00b      	b.n	8004ae8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ada:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	09db      	lsrs	r3, r3, #7
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aea:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aec:	d8f0      	bhi.n	8004ad0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	623b      	str	r3, [r7, #32]
 8004b06:	e00b      	b.n	8004b20 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b24:	d8f0      	bhi.n	8004b08 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	6979      	ldr	r1, [r7, #20]
 8004b3a:	69b8      	ldr	r0, [r7, #24]
 8004b3c:	f7ff f9d0 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f383 8811 	msr	BASEPRI, r3
}
 8004b46:	bf00      	nop
 8004b48:	3730      	adds	r7, #48	@ 0x30
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2000cf70 	.word	0x2000cf70

08004b54 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	@ 0x38
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b62:	f3ef 8311 	mrs	r3, BASEPRI
 8004b66:	f04f 0120 	mov.w	r1, #32
 8004b6a:	f381 8811 	msr	BASEPRI, r1
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	4832      	ldr	r0, [pc, #200]	@ (8004c3c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004b72:	f7ff f8c7 	bl	8003d04 <_PreparePacket>
 8004b76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b84:	e00b      	b.n	8004b9e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8c:	1c59      	adds	r1, r3, #1
 8004b8e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004b90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	09db      	lsrs	r3, r3, #7
 8004b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ba2:	d8f0      	bhi.n	8004b86 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	637a      	str	r2, [r7, #52]	@ 0x34
 8004baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bbc:	e00b      	b.n	8004bd6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc4:	1c59      	adds	r1, r3, #1
 8004bc6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004bc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	09db      	lsrs	r3, r3, #7
 8004bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bda:	d8f0      	bhi.n	8004bbe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	e00b      	b.n	8004c0e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	1c59      	adds	r1, r3, #1
 8004bfe:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	09db      	lsrs	r3, r3, #7
 8004c0c:	623b      	str	r3, [r7, #32]
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c12:	d8f0      	bhi.n	8004bf6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c1a:	6a3a      	ldr	r2, [r7, #32]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	6979      	ldr	r1, [r7, #20]
 8004c28:	69b8      	ldr	r0, [r7, #24]
 8004c2a:	f7ff f959 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f383 8811 	msr	BASEPRI, r3
}
 8004c34:	bf00      	nop
 8004c36:	3738      	adds	r7, #56	@ 0x38
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	2000cf70 	.word	0x2000cf70

08004c40 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b090      	sub	sp, #64	@ 0x40
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c52:	f04f 0120 	mov.w	r1, #32
 8004c56:	f381 8811 	msr	BASEPRI, r1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	4840      	ldr	r0, [pc, #256]	@ (8004d60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004c5e:	f7ff f851 	bl	8003d04 <_PreparePacket>
 8004c62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c70:	e00b      	b.n	8004c8a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c78:	1c59      	adds	r1, r3, #1
 8004c7a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004c7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c86:	09db      	lsrs	r3, r3, #7
 8004c88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c8e:	d8f0      	bhi.n	8004c72 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca8:	e00b      	b.n	8004cc2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb0:	1c59      	adds	r1, r3, #1
 8004cb2:	6379      	str	r1, [r7, #52]	@ 0x34
 8004cb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	09db      	lsrs	r3, r3, #7
 8004cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cc6:	d8f0      	bhi.n	8004caa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	637a      	str	r2, [r7, #52]	@ 0x34
 8004cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ce0:	e00b      	b.n	8004cfa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	1c59      	adds	r1, r3, #1
 8004cea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004cec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf6:	09db      	lsrs	r3, r3, #7
 8004cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cfe:	d8f0      	bhi.n	8004ce2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d16:	623b      	str	r3, [r7, #32]
 8004d18:	e00b      	b.n	8004d32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	1c59      	adds	r1, r3, #1
 8004d22:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	09db      	lsrs	r3, r3, #7
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d36:	d8f0      	bhi.n	8004d1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	6979      	ldr	r1, [r7, #20]
 8004d4c:	69b8      	ldr	r0, [r7, #24]
 8004d4e:	f7ff f8c7 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f383 8811 	msr	BASEPRI, r3
}
 8004d58:	bf00      	nop
 8004d5a:	3740      	adds	r7, #64	@ 0x40
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	2000cf70 	.word	0x2000cf70

08004d64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	@ 0x30
 8004d68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004d6a:	4b59      	ldr	r3, [pc, #356]	@ (8004ed0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004d70:	f3ef 8311 	mrs	r3, BASEPRI
 8004d74:	f04f 0120 	mov.w	r1, #32
 8004d78:	f381 8811 	msr	BASEPRI, r1
 8004d7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004d7e:	4b54      	ldr	r3, [pc, #336]	@ (8004ed0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	220a      	movs	r2, #10
 8004d84:	4953      	ldr	r1, [pc, #332]	@ (8004ed4 <SEGGER_SYSVIEW_Start+0x170>)
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fb fa5a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004d92:	f000 ff09 	bl	8005ba8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004d96:	200a      	movs	r0, #10
 8004d98:	f7ff fe28 	bl	80049ec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004da0:	f04f 0120 	mov.w	r1, #32
 8004da4:	f381 8811 	msr	BASEPRI, r1
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	484b      	ldr	r0, [pc, #300]	@ (8004ed8 <SEGGER_SYSVIEW_Start+0x174>)
 8004dac:	f7fe ffaa 	bl	8003d04 <_PreparePacket>
 8004db0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dba:	4b45      	ldr	r3, [pc, #276]	@ (8004ed0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc0:	e00b      	b.n	8004dda <SEGGER_SYSVIEW_Start+0x76>
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004dcc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	09db      	lsrs	r3, r3, #7
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dde:	d8f0      	bhi.n	8004dc2 <SEGGER_SYSVIEW_Start+0x5e>
 8004de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df4:	4b36      	ldr	r3, [pc, #216]	@ (8004ed0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	e00b      	b.n	8004e14 <SEGGER_SYSVIEW_Start+0xb0>
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	1c59      	adds	r1, r3, #1
 8004e04:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	09db      	lsrs	r3, r3, #7
 8004e12:	623b      	str	r3, [r7, #32]
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e18:	d8f0      	bhi.n	8004dfc <SEGGER_SYSVIEW_Start+0x98>
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	4b28      	ldr	r3, [pc, #160]	@ (8004ed0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e00b      	b.n	8004e4e <SEGGER_SYSVIEW_Start+0xea>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	61f9      	str	r1, [r7, #28]
 8004e40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	09db      	lsrs	r3, r3, #7
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e52:	d8f0      	bhi.n	8004e36 <SEGGER_SYSVIEW_Start+0xd2>
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	61fa      	str	r2, [r7, #28]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	e00b      	b.n	8004e86 <SEGGER_SYSVIEW_Start+0x122>
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	6179      	str	r1, [r7, #20]
 8004e78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	09db      	lsrs	r3, r3, #7
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e8a:	d8f0      	bhi.n	8004e6e <SEGGER_SYSVIEW_Start+0x10a>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	617a      	str	r2, [r7, #20]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e9c:	2218      	movs	r2, #24
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff f81d 	bl	8003ee0 <_SendPacket>
      RECORD_END();
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004eb4:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004eba:	f000 f9eb 	bl	8005294 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004ebe:	f000 f9b1 	bl	8005224 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004ec2:	f000 fc8d 	bl	80057e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004ec6:	bf00      	nop
 8004ec8:	3730      	adds	r7, #48	@ 0x30
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	2000cf40 	.word	0x2000cf40
 8004ed4:	08007f3c 	.word	0x08007f3c
 8004ed8:	2000cf70 	.word	0x2000cf70

08004edc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee6:	f04f 0120 	mov.w	r1, #32
 8004eea:	f381 8811 	msr	BASEPRI, r1
 8004eee:	607b      	str	r3, [r7, #4]
 8004ef0:	480b      	ldr	r0, [pc, #44]	@ (8004f20 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ef2:	f7fe ff07 	bl	8003d04 <_PreparePacket>
 8004ef6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <SEGGER_SYSVIEW_Stop+0x48>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f00:	220b      	movs	r2, #11
 8004f02:	6839      	ldr	r1, [r7, #0]
 8004f04:	6838      	ldr	r0, [r7, #0]
 8004f06:	f7fe ffeb 	bl	8003ee0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004f0a:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f383 8811 	msr	BASEPRI, r3
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	2000cf70 	.word	0x2000cf70
 8004f24:	2000cf40 	.word	0x2000cf40

08004f28 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	@ 0x30
 8004f2c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f32:	f04f 0120 	mov.w	r1, #32
 8004f36:	f381 8811 	msr	BASEPRI, r1
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	4845      	ldr	r0, [pc, #276]	@ (8005054 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f3e:	f7fe fee1 	bl	8003d04 <_PreparePacket>
 8004f42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f4c:	4b42      	ldr	r3, [pc, #264]	@ (8005058 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f52:	e00b      	b.n	8004f6c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004f5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f70:	d8f0      	bhi.n	8004f54 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f86:	4b34      	ldr	r3, [pc, #208]	@ (8005058 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	e00b      	b.n	8004fa6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	1c59      	adds	r1, r3, #1
 8004f96:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	09db      	lsrs	r3, r3, #7
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004faa:	d8f0      	bhi.n	8004f8e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fb2:	6a3a      	ldr	r2, [r7, #32]
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	4b25      	ldr	r3, [pc, #148]	@ (8005058 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	e00b      	b.n	8004fe0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	61f9      	str	r1, [r7, #28]
 8004fd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	09db      	lsrs	r3, r3, #7
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fe4:	d8f0      	bhi.n	8004fc8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	61fa      	str	r2, [r7, #28]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e00b      	b.n	8005018 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	6179      	str	r1, [r7, #20]
 800500a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	09db      	lsrs	r3, r3, #7
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b7f      	cmp	r3, #127	@ 0x7f
 800501c:	d8f0      	bhi.n	8005000 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	617a      	str	r2, [r7, #20]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800502e:	2218      	movs	r2, #24
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	68b8      	ldr	r0, [r7, #8]
 8005034:	f7fe ff54 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800503e:	4b06      	ldr	r3, [pc, #24]	@ (8005058 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005046:	4b04      	ldr	r3, [pc, #16]	@ (8005058 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	4798      	blx	r3
  }
}
 800504c:	bf00      	nop
 800504e:	3730      	adds	r7, #48	@ 0x30
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	2000cf70 	.word	0x2000cf70
 8005058:	2000cf40 	.word	0x2000cf40

0800505c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b092      	sub	sp, #72	@ 0x48
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005064:	f3ef 8311 	mrs	r3, BASEPRI
 8005068:	f04f 0120 	mov.w	r1, #32
 800506c:	f381 8811 	msr	BASEPRI, r1
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	486a      	ldr	r0, [pc, #424]	@ (800521c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005074:	f7fe fe46 	bl	8003d04 <_PreparePacket>
 8005078:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	647b      	str	r3, [r7, #68]	@ 0x44
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b66      	ldr	r3, [pc, #408]	@ (8005220 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	643b      	str	r3, [r7, #64]	@ 0x40
 800508e:	e00b      	b.n	80050a8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005092:	b2da      	uxtb	r2, r3
 8005094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005096:	1c59      	adds	r1, r3, #1
 8005098:	6479      	str	r1, [r7, #68]	@ 0x44
 800509a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050a4:	09db      	lsrs	r3, r3, #7
 80050a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ac:	d8f0      	bhi.n	8005090 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80050ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050c8:	e00b      	b.n	80050e2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d0:	1c59      	adds	r1, r3, #1
 80050d2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80050d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050de:	09db      	lsrs	r3, r3, #7
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80050e6:	d8f0      	bhi.n	80050ca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80050e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	4619      	mov	r1, r3
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f7fe fdcf 	bl	8003ca4 <_EncodeStr>
 8005106:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005108:	2209      	movs	r2, #9
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	6938      	ldr	r0, [r7, #16]
 800510e:	f7fe fee7 	bl	8003ee0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	637b      	str	r3, [r7, #52]	@ 0x34
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b40      	ldr	r3, [pc, #256]	@ (8005220 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
 8005126:	e00b      	b.n	8005140 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	b2da      	uxtb	r2, r3
 800512c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512e:	1c59      	adds	r1, r3, #1
 8005130:	6379      	str	r1, [r7, #52]	@ 0x34
 8005132:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	09db      	lsrs	r3, r3, #7
 800513e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005142:	2b7f      	cmp	r3, #127	@ 0x7f
 8005144:	d8f0      	bhi.n	8005128 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	637a      	str	r2, [r7, #52]	@ 0x34
 800514c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005154:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005160:	e00b      	b.n	800517a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	b2da      	uxtb	r2, r3
 8005166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800516c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005176:	09db      	lsrs	r3, r3, #7
 8005178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517c:	2b7f      	cmp	r3, #127	@ 0x7f
 800517e:	d8f0      	bhi.n	8005162 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	623b      	str	r3, [r7, #32]
 800519a:	e00b      	b.n	80051b4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	1c59      	adds	r1, r3, #1
 80051a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80051a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	09db      	lsrs	r3, r3, #7
 80051b2:	623b      	str	r3, [r7, #32]
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80051b8:	d8f0      	bhi.n	800519c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	627a      	str	r2, [r7, #36]	@ 0x24
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e00b      	b.n	80051ee <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	1c59      	adds	r1, r3, #1
 80051de:	61f9      	str	r1, [r7, #28]
 80051e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80051f2:	d8f0      	bhi.n	80051d6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	61fa      	str	r2, [r7, #28]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005204:	2215      	movs	r2, #21
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	6938      	ldr	r0, [r7, #16]
 800520a:	f7fe fe69 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f383 8811 	msr	BASEPRI, r3
}
 8005214:	bf00      	nop
 8005216:	3748      	adds	r7, #72	@ 0x48
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	2000cf70 	.word	0x2000cf70
 8005220:	2000cf40 	.word	0x2000cf40

08005224 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005228:	4b07      	ldr	r3, [pc, #28]	@ (8005248 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005230:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800523a:	4b03      	ldr	r3, [pc, #12]	@ (8005248 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4798      	blx	r3
  }
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	2000cf40 	.word	0x2000cf40

0800524c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005254:	f3ef 8311 	mrs	r3, BASEPRI
 8005258:	f04f 0120 	mov.w	r1, #32
 800525c:	f381 8811 	msr	BASEPRI, r1
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	480b      	ldr	r0, [pc, #44]	@ (8005290 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005264:	f7fe fd4e 	bl	8003d04 <_PreparePacket>
 8005268:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800526a:	2280      	movs	r2, #128	@ 0x80
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	6938      	ldr	r0, [r7, #16]
 8005270:	f7fe fd18 	bl	8003ca4 <_EncodeStr>
 8005274:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005276:	220e      	movs	r2, #14
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	6938      	ldr	r0, [r7, #16]
 800527c:	f7fe fe30 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f383 8811 	msr	BASEPRI, r3
}
 8005286:	bf00      	nop
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	2000cf70 	.word	0x2000cf70

08005294 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800529a:	4b15      	ldr	r3, [pc, #84]	@ (80052f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01a      	beq.n	80052d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80052a2:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80052ac:	4b10      	ldr	r3, [pc, #64]	@ (80052f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4798      	blx	r3
 80052b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80052ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	000a      	movs	r2, r1
 80052c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052ca:	4613      	mov	r3, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4621      	mov	r1, r4
 80052d0:	200d      	movs	r0, #13
 80052d2:	f7ff fbe5 	bl	8004aa0 <SEGGER_SYSVIEW_RecordU32x2>
 80052d6:	e006      	b.n	80052e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80052d8:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4619      	mov	r1, r3
 80052de:	200c      	movs	r0, #12
 80052e0:	f7ff fba2 	bl	8004a28 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd90      	pop	{r4, r7, pc}
 80052ee:	bf00      	nop
 80052f0:	2000cf40 	.word	0x2000cf40
 80052f4:	e0001004 	.word	0xe0001004

080052f8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005302:	f04f 0120 	mov.w	r1, #32
 8005306:	f381 8811 	msr	BASEPRI, r1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	4819      	ldr	r0, [pc, #100]	@ (8005374 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800530e:	f7fe fcf9 	bl	8003d04 <_PreparePacket>
 8005312:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005318:	4b17      	ldr	r3, [pc, #92]	@ (8005378 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005320:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e00b      	b.n	8005344 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	6179      	str	r1, [r7, #20]
 8005336:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	09db      	lsrs	r3, r3, #7
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b7f      	cmp	r3, #127	@ 0x7f
 8005348:	d8f0      	bhi.n	800532c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	617a      	str	r2, [r7, #20]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800535a:	2202      	movs	r2, #2
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	68b8      	ldr	r0, [r7, #8]
 8005360:	f7fe fdbe 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f383 8811 	msr	BASEPRI, r3
}
 800536a:	bf00      	nop
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	2000cf70 	.word	0x2000cf70
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005382:	f3ef 8311 	mrs	r3, BASEPRI
 8005386:	f04f 0120 	mov.w	r1, #32
 800538a:	f381 8811 	msr	BASEPRI, r1
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	4807      	ldr	r0, [pc, #28]	@ (80053b0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005392:	f7fe fcb7 	bl	8003d04 <_PreparePacket>
 8005396:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005398:	2203      	movs	r2, #3
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	6838      	ldr	r0, [r7, #0]
 800539e:	f7fe fd9f 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f383 8811 	msr	BASEPRI, r3
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	2000cf70 	.word	0x2000cf70

080053b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053ba:	f3ef 8311 	mrs	r3, BASEPRI
 80053be:	f04f 0120 	mov.w	r1, #32
 80053c2:	f381 8811 	msr	BASEPRI, r1
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	4807      	ldr	r0, [pc, #28]	@ (80053e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80053ca:	f7fe fc9b 	bl	8003d04 <_PreparePacket>
 80053ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80053d0:	2212      	movs	r2, #18
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6838      	ldr	r0, [r7, #0]
 80053d6:	f7fe fd83 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f383 8811 	msr	BASEPRI, r3
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	2000cf70 	.word	0x2000cf70

080053ec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053f2:	f3ef 8311 	mrs	r3, BASEPRI
 80053f6:	f04f 0120 	mov.w	r1, #32
 80053fa:	f381 8811 	msr	BASEPRI, r1
 80053fe:	607b      	str	r3, [r7, #4]
 8005400:	4807      	ldr	r0, [pc, #28]	@ (8005420 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005402:	f7fe fc7f 	bl	8003d04 <_PreparePacket>
 8005406:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005408:	2211      	movs	r2, #17
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6838      	ldr	r0, [r7, #0]
 800540e:	f7fe fd67 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f383 8811 	msr	BASEPRI, r3
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	2000cf70 	.word	0x2000cf70

08005424 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800542c:	f3ef 8311 	mrs	r3, BASEPRI
 8005430:	f04f 0120 	mov.w	r1, #32
 8005434:	f381 8811 	msr	BASEPRI, r1
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	4819      	ldr	r0, [pc, #100]	@ (80054a0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800543c:	f7fe fc62 	bl	8003d04 <_PreparePacket>
 8005440:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005446:	4b17      	ldr	r3, [pc, #92]	@ (80054a4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	e00b      	b.n	8005472 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	b2da      	uxtb	r2, r3
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	1c59      	adds	r1, r3, #1
 8005462:	61f9      	str	r1, [r7, #28]
 8005464:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	09db      	lsrs	r3, r3, #7
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b7f      	cmp	r3, #127	@ 0x7f
 8005476:	d8f0      	bhi.n	800545a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	61fa      	str	r2, [r7, #28]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005488:	2208      	movs	r2, #8
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	6938      	ldr	r0, [r7, #16]
 800548e:	f7fe fd27 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f383 8811 	msr	BASEPRI, r3
}
 8005498:	bf00      	nop
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	2000cf70 	.word	0x2000cf70
 80054a4:	2000cf40 	.word	0x2000cf40

080054a8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054b0:	f3ef 8311 	mrs	r3, BASEPRI
 80054b4:	f04f 0120 	mov.w	r1, #32
 80054b8:	f381 8811 	msr	BASEPRI, r1
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	4819      	ldr	r0, [pc, #100]	@ (8005524 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80054c0:	f7fe fc20 	bl	8003d04 <_PreparePacket>
 80054c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054ca:	4b17      	ldr	r3, [pc, #92]	@ (8005528 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	e00b      	b.n	80054f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	1c59      	adds	r1, r3, #1
 80054e6:	61f9      	str	r1, [r7, #28]
 80054e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	09db      	lsrs	r3, r3, #7
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054fa:	d8f0      	bhi.n	80054de <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	61fa      	str	r2, [r7, #28]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800550c:	2204      	movs	r2, #4
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	6938      	ldr	r0, [r7, #16]
 8005512:	f7fe fce5 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f383 8811 	msr	BASEPRI, r3
}
 800551c:	bf00      	nop
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	2000cf70 	.word	0x2000cf70
 8005528:	2000cf40 	.word	0x2000cf40

0800552c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005534:	f3ef 8311 	mrs	r3, BASEPRI
 8005538:	f04f 0120 	mov.w	r1, #32
 800553c:	f381 8811 	msr	BASEPRI, r1
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	4819      	ldr	r0, [pc, #100]	@ (80055a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005544:	f7fe fbde 	bl	8003d04 <_PreparePacket>
 8005548:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800554e:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e00b      	b.n	800557a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	61f9      	str	r1, [r7, #28]
 800556c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	09db      	lsrs	r3, r3, #7
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b7f      	cmp	r3, #127	@ 0x7f
 800557e:	d8f0      	bhi.n	8005562 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	61fa      	str	r2, [r7, #28]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005590:	2206      	movs	r2, #6
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	6938      	ldr	r0, [r7, #16]
 8005596:	f7fe fca3 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f383 8811 	msr	BASEPRI, r3
}
 80055a0:	bf00      	nop
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2000cf70 	.word	0x2000cf70
 80055ac:	2000cf40 	.word	0x2000cf40

080055b0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	@ 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80055ba:	f3ef 8311 	mrs	r3, BASEPRI
 80055be:	f04f 0120 	mov.w	r1, #32
 80055c2:	f381 8811 	msr	BASEPRI, r1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	4827      	ldr	r0, [pc, #156]	@ (8005668 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80055ca:	f7fe fb9b 	bl	8003d04 <_PreparePacket>
 80055ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055d4:	4b25      	ldr	r3, [pc, #148]	@ (800566c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	623b      	str	r3, [r7, #32]
 80055e6:	e00b      	b.n	8005600 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80055f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	09db      	lsrs	r3, r3, #7
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	2b7f      	cmp	r3, #127	@ 0x7f
 8005604:	d8f0      	bhi.n	80055e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	627a      	str	r2, [r7, #36]	@ 0x24
 800560c:	6a3a      	ldr	r2, [r7, #32]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	e00b      	b.n	8005638 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	61f9      	str	r1, [r7, #28]
 800562a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	09db      	lsrs	r3, r3, #7
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b7f      	cmp	r3, #127	@ 0x7f
 800563c:	d8f0      	bhi.n	8005620 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	61fa      	str	r2, [r7, #28]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800564e:	2207      	movs	r2, #7
 8005650:	68f9      	ldr	r1, [r7, #12]
 8005652:	6938      	ldr	r0, [r7, #16]
 8005654:	f7fe fc44 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f383 8811 	msr	BASEPRI, r3
}
 800565e:	bf00      	nop
 8005660:	3728      	adds	r7, #40	@ 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	2000cf70 	.word	0x2000cf70
 800566c:	2000cf40 	.word	0x2000cf40

08005670 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005678:	4b04      	ldr	r3, [pc, #16]	@ (800568c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	1ad3      	subs	r3, r2, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	2000cf40 	.word	0x2000cf40

08005690 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b08c      	sub	sp, #48	@ 0x30
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800569a:	4b40      	ldr	r3, [pc, #256]	@ (800579c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d077      	beq.n	8005792 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80056a2:	4b3e      	ldr	r3, [pc, #248]	@ (800579c <SEGGER_SYSVIEW_SendModule+0x10c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80056a8:	2300      	movs	r3, #0
 80056aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ac:	e008      	b.n	80056c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80056ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80056b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	3301      	adds	r3, #1
 80056be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d3f2      	bcc.n	80056ae <SEGGER_SYSVIEW_SendModule+0x1e>
 80056c8:	e000      	b.n	80056cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80056ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80056cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d055      	beq.n	800577e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056d2:	f3ef 8311 	mrs	r3, BASEPRI
 80056d6:	f04f 0120 	mov.w	r1, #32
 80056da:	f381 8811 	msr	BASEPRI, r1
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	482f      	ldr	r0, [pc, #188]	@ (80057a0 <SEGGER_SYSVIEW_SendModule+0x110>)
 80056e2:	f7fe fb0f 	bl	8003d04 <_PreparePacket>
 80056e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	623b      	str	r3, [r7, #32]
 80056f4:	e00b      	b.n	800570e <SEGGER_SYSVIEW_SendModule+0x7e>
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8005700:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	2b7f      	cmp	r3, #127	@ 0x7f
 8005712:	d8f0      	bhi.n	80056f6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	627a      	str	r2, [r7, #36]	@ 0x24
 800571a:	6a3a      	ldr	r2, [r7, #32]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	e00b      	b.n	8005748 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	61f9      	str	r1, [r7, #28]
 800573a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	09db      	lsrs	r3, r3, #7
 8005746:	61bb      	str	r3, [r7, #24]
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b7f      	cmp	r3, #127	@ 0x7f
 800574c:	d8f0      	bhi.n	8005730 <SEGGER_SYSVIEW_SendModule+0xa0>
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	61fa      	str	r2, [r7, #28]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800575e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2280      	movs	r2, #128	@ 0x80
 8005764:	4619      	mov	r1, r3
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7fe fa9c 	bl	8003ca4 <_EncodeStr>
 800576c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800576e:	2216      	movs	r2, #22
 8005770:	68f9      	ldr	r1, [r7, #12]
 8005772:	6938      	ldr	r0, [r7, #16]
 8005774:	f7fe fbb4 	bl	8003ee0 <_SendPacket>
      RECORD_END();
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800577e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <SEGGER_SYSVIEW_SendModule+0x102>
 8005784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800578c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4798      	blx	r3
    }
  }
}
 8005792:	bf00      	nop
 8005794:	3730      	adds	r7, #48	@ 0x30
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	2000cf68 	.word	0x2000cf68
 80057a0:	2000cf70 	.word	0x2000cf70

080057a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80057aa:	4b0c      	ldr	r3, [pc, #48]	@ (80057dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00f      	beq.n	80057d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80057b2:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f2      	bne.n	80057b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	2000cf68 	.word	0x2000cf68

080057e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80057e6:	f3ef 8311 	mrs	r3, BASEPRI
 80057ea:	f04f 0120 	mov.w	r1, #32
 80057ee:	f381 8811 	msr	BASEPRI, r1
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	4817      	ldr	r0, [pc, #92]	@ (8005854 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80057f6:	f7fe fa85 	bl	8003d04 <_PreparePacket>
 80057fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	e00b      	b.n	8005824 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1c59      	adds	r1, r3, #1
 8005814:	6179      	str	r1, [r7, #20]
 8005816:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b7f      	cmp	r3, #127	@ 0x7f
 8005828:	d8f0      	bhi.n	800580c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	617a      	str	r2, [r7, #20]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800583a:	221b      	movs	r2, #27
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	68b8      	ldr	r0, [r7, #8]
 8005840:	f7fe fb4e 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f383 8811 	msr	BASEPRI, r3
}
 800584a:	bf00      	nop
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	2000cf70 	.word	0x2000cf70
 8005858:	2000cf6c 	.word	0x2000cf6c

0800585c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800585c:	b40f      	push	{r0, r1, r2, r3}
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005864:	f107 0314 	add.w	r3, r7, #20
 8005868:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	461a      	mov	r2, r3
 800586e:	2100      	movs	r1, #0
 8005870:	6938      	ldr	r0, [r7, #16]
 8005872:	f7fe fe47 	bl	8004504 <_VPrintTarget>
  va_end(ParamList);
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005880:	b004      	add	sp, #16
 8005882:	4770      	bx	lr

08005884 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	@ 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800588c:	f3ef 8311 	mrs	r3, BASEPRI
 8005890:	f04f 0120 	mov.w	r1, #32
 8005894:	f381 8811 	msr	BASEPRI, r1
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	4827      	ldr	r0, [pc, #156]	@ (8005938 <SEGGER_SYSVIEW_Warn+0xb4>)
 800589c:	f7fe fa32 	bl	8003d04 <_PreparePacket>
 80058a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058a2:	2280      	movs	r2, #128	@ 0x80
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	6938      	ldr	r0, [r7, #16]
 80058a8:	f7fe f9fc 	bl	8003ca4 <_EncodeStr>
 80058ac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b2:	2301      	movs	r3, #1
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	e00b      	b.n	80058d0 <SEGGER_SYSVIEW_Warn+0x4c>
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80058c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	09db      	lsrs	r3, r3, #7
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058d4:	d8f0      	bhi.n	80058b8 <SEGGER_SYSVIEW_Warn+0x34>
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	627a      	str	r2, [r7, #36]	@ 0x24
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	2300      	movs	r3, #0
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	e00b      	b.n	8005908 <SEGGER_SYSVIEW_Warn+0x84>
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	1c59      	adds	r1, r3, #1
 80058f8:	61f9      	str	r1, [r7, #28]
 80058fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	09db      	lsrs	r3, r3, #7
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b7f      	cmp	r3, #127	@ 0x7f
 800590c:	d8f0      	bhi.n	80058f0 <SEGGER_SYSVIEW_Warn+0x6c>
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	61fa      	str	r2, [r7, #28]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800591e:	221a      	movs	r2, #26
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	6938      	ldr	r0, [r7, #16]
 8005924:	f7fe fadc 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f383 8811 	msr	BASEPRI, r3
}
 800592e:	bf00      	nop
 8005930:	3728      	adds	r7, #40	@ 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	2000cf70 	.word	0x2000cf70

0800593c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005940:	4b13      	ldr	r3, [pc, #76]	@ (8005990 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005942:	7e1b      	ldrb	r3, [r3, #24]
 8005944:	4619      	mov	r1, r3
 8005946:	4a13      	ldr	r2, [pc, #76]	@ (8005994 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005948:	460b      	mov	r3, r1
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	440b      	add	r3, r1
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	4413      	add	r3, r2
 8005952:	336c      	adds	r3, #108	@ 0x6c
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b0e      	ldr	r3, [pc, #56]	@ (8005990 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005958:	7e1b      	ldrb	r3, [r3, #24]
 800595a:	4618      	mov	r0, r3
 800595c:	490d      	ldr	r1, [pc, #52]	@ (8005994 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800595e:	4603      	mov	r3, r0
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	4403      	add	r3, r0
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	440b      	add	r3, r1
 8005968:	3370      	adds	r3, #112	@ 0x70
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d00b      	beq.n	8005988 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005970:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005972:	789b      	ldrb	r3, [r3, #2]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005978:	4b05      	ldr	r3, [pc, #20]	@ (8005990 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800597a:	2201      	movs	r2, #1
 800597c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800597e:	f7fe f9cd 	bl	8003d1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005982:	4b03      	ldr	r3, [pc, #12]	@ (8005990 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005984:	2200      	movs	r2, #0
 8005986:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005988:	4b01      	ldr	r3, [pc, #4]	@ (8005990 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800598a:	781b      	ldrb	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}
 8005990:	2000cf40 	.word	0x2000cf40
 8005994:	2000ba80 	.word	0x2000ba80

08005998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	db0b      	blt.n	80059c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	f003 021f 	and.w	r2, r3, #31
 80059b0:	4907      	ldr	r1, [pc, #28]	@ (80059d0 <__NVIC_EnableIRQ+0x38>)
 80059b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	2001      	movs	r0, #1
 80059ba:	fa00 f202 	lsl.w	r2, r0, r2
 80059be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	e000e100 	.word	0xe000e100

080059d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	6039      	str	r1, [r7, #0]
 80059de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	db0a      	blt.n	80059fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	490c      	ldr	r1, [pc, #48]	@ (8005a20 <__NVIC_SetPriority+0x4c>)
 80059ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f2:	0112      	lsls	r2, r2, #4
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	440b      	add	r3, r1
 80059f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059fc:	e00a      	b.n	8005a14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	4908      	ldr	r1, [pc, #32]	@ (8005a24 <__NVIC_SetPriority+0x50>)
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	3b04      	subs	r3, #4
 8005a0c:	0112      	lsls	r2, r2, #4
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	440b      	add	r3, r1
 8005a12:	761a      	strb	r2, [r3, #24]
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	e000e100 	.word	0xe000e100
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005a2e:	f7ff ff85 	bl	800593c <SEGGER_SYSVIEW_IsStarted>
 8005a32:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005a3a:	f7ff f993 	bl	8004d64 <SEGGER_SYSVIEW_Start>
  }
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005a52:	4b0c      	ldr	r3, [pc, #48]	@ (8005a84 <_cbOnUARTRx+0x3c>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d806      	bhi.n	8005a68 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <_cbOnUARTRx+0x3c>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	4b08      	ldr	r3, [pc, #32]	@ (8005a84 <_cbOnUARTRx+0x3c>)
 8005a64:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005a66:	e009      	b.n	8005a7c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005a68:	f7ff ffde 	bl	8005a28 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005a6c:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <_cbOnUARTRx+0x3c>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4618      	mov	r0, r3
 8005a72:	1dfb      	adds	r3, r7, #7
 8005a74:	2201      	movs	r2, #1
 8005a76:	4619      	mov	r1, r3
 8005a78:	f7fe f81e 	bl	8003ab8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005a7c:	bf00      	nop
}
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000008 	.word	0x20000008

08005a88 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005a90:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <_cbOnUARTTx+0x5c>)
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d80f      	bhi.n	8005ab8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005a98:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <_cbOnUARTTx+0x5c>)
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ae8 <_cbOnUARTTx+0x60>)
 8005aa0:	5c9a      	ldrb	r2, [r3, r2]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae4 <_cbOnUARTTx+0x5c>)
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <_cbOnUARTTx+0x5c>)
 8005ab0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005ab6:	e00f      	b.n	8005ad8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae4 <_cbOnUARTTx+0x5c>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fd fe9d 	bl	8003800 <SEGGER_RTT_ReadUpBufferNoLock>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da02      	bge.n	8005ad6 <_cbOnUARTTx+0x4e>
    r = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e000      	b.n	8005ad8 <_cbOnUARTTx+0x50>
  }
Done:
 8005ad6:	bf00      	nop
  return r;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000008 	.word	0x20000008
 8005ae8:	08007f58 	.word	0x08007f58

08005aec <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005af4:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <SEGGER_UART_init+0x1c>)
 8005af6:	4905      	ldr	r1, [pc, #20]	@ (8005b0c <SEGGER_UART_init+0x20>)
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f865 	bl	8005bc8 <HIF_UART_Init>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	08005a49 	.word	0x08005a49
 8005b0c:	08005a89 	.word	0x08005a89

08005b10 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005b16:	4b1e      	ldr	r3, [pc, #120]	@ (8005b90 <USART2_IRQHandler+0x80>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d011      	beq.n	8005b4a <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8005b26:	4b1b      	ldr	r3, [pc, #108]	@ (8005b94 <USART2_IRQHandler+0x84>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 030b 	and.w	r3, r3, #11
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d108      	bne.n	8005b4a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005b38:	4b17      	ldr	r3, [pc, #92]	@ (8005b98 <USART2_IRQHandler+0x88>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005b40:	4b15      	ldr	r3, [pc, #84]	@ (8005b98 <USART2_IRQHandler+0x88>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	79fa      	ldrb	r2, [r7, #7]
 8005b46:	4610      	mov	r0, r2
 8005b48:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01a      	beq.n	8005b8a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005b54:	4b11      	ldr	r3, [pc, #68]	@ (8005b9c <USART2_IRQHandler+0x8c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b9c <USART2_IRQHandler+0x8c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	1dfa      	adds	r2, r7, #7
 8005b62:	4610      	mov	r0, r2
 8005b64:	4798      	blx	r3
 8005b66:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <USART2_IRQHandler+0x90>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a0b      	ldr	r2, [pc, #44]	@ (8005ba0 <USART2_IRQHandler+0x90>)
 8005b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e006      	b.n	8005b8a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005b7c:	4b04      	ldr	r3, [pc, #16]	@ (8005b90 <USART2_IRQHandler+0x80>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8005b80:	79fa      	ldrb	r2, [r7, #7]
 8005b82:	4b08      	ldr	r3, [pc, #32]	@ (8005ba4 <USART2_IRQHandler+0x94>)
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e000      	b.n	8005b8a <USART2_IRQHandler+0x7a>
      return;
 8005b88:	bf00      	nop
    }
  }
}
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	4000441c 	.word	0x4000441c
 8005b94:	40004424 	.word	0x40004424
 8005b98:	2000d054 	.word	0x2000d054
 8005b9c:	2000d058 	.word	0x2000d058
 8005ba0:	40004400 	.word	0x40004400
 8005ba4:	40004428 	.word	0x40004428

08005ba8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a04      	ldr	r2, [pc, #16]	@ (8005bc4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb6:	6013      	str	r3, [r2, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40004400 	.word	0x40004400

08005bc8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //


  RCC_APB1ENR |= RCC_APB1ENR_USART2EN;        // Enable USART2 clock
 8005bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005c90 <HIF_UART_Init+0xc8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005c90 <HIF_UART_Init+0xc8>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bde:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= RCC_AHB1ENR_GPIODEN;        // Enable IO port D clock
 8005be0:	4b2c      	ldr	r3, [pc, #176]	@ (8005c94 <HIF_UART_Init+0xcc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c94 <HIF_UART_Init+0xcc>)
 8005be6:	f043 0308 	orr.w	r3, r3, #8
 8005bea:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRL;
 8005bec:	4b2a      	ldr	r3, [pc, #168]	@ (8005c98 <HIF_UART_Init+0xd0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8005bf8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f043 63ee 	orr.w	r3, r3, #124780544	@ 0x7700000
 8005c00:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005c02:	4a25      	ldr	r2, [pc, #148]	@ (8005c98 <HIF_UART_Init+0xd0>)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005c08:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <HIF_UART_Init+0xd4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8005c14:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005c1c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c9c <HIF_UART_Init+0xd4>)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005c24:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca0 <HIF_UART_Init+0xd8>)
 8005c26:	f248 022d 	movw	r2, #32813	@ 0x802d
 8005c2a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca4 <HIF_UART_Init+0xdc>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
            | (0 << 12)
			| (0 << 13)							// STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005c32:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca8 <HIF_UART_Init+0xe0>)
 8005c34:	2280      	movs	r2, #128	@ 0x80
 8005c36:	601a      	str	r2, [r3, #0]
  //
  // Set baudrate


  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cac <HIF_UART_Init+0xe4>)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	3301      	adds	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c56:	d302      	bcc.n	8005c5e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005c58:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005c5c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <HIF_UART_Init+0xe8>)
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005c6e:	4a11      	ldr	r2, [pc, #68]	@ (8005cb4 <HIF_UART_Init+0xec>)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005c74:	4a10      	ldr	r2, [pc, #64]	@ (8005cb8 <HIF_UART_Init+0xf0>)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005c7a:	2106      	movs	r1, #6
 8005c7c:	2026      	movs	r0, #38	@ 0x26
 8005c7e:	f7ff fea9 	bl	80059d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005c82:	2026      	movs	r0, #38	@ 0x26
 8005c84:	f7ff fe88 	bl	8005998 <__NVIC_EnableIRQ>
}
 8005c88:	bf00      	nop
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40023840 	.word	0x40023840
 8005c94:	40023830 	.word	0x40023830
 8005c98:	40020c20 	.word	0x40020c20
 8005c9c:	40020c00 	.word	0x40020c00
 8005ca0:	40004400 	.word	0x40004400
 8005ca4:	40004404 	.word	0x40004404
 8005ca8:	40004408 	.word	0x40004408
 8005cac:	0501bd00 	.word	0x0501bd00
 8005cb0:	4000440c 	.word	0x4000440c
 8005cb4:	2000d054 	.word	0x2000d054
 8005cb8:	2000d058 	.word	0x2000d058

08005cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005cc2:	f000 fc12 	bl	80064ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005cc6:	f000 f88f 	bl	8005de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005cca:	f000 f8f7 	bl	8005ebc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005cce:	4b34      	ldr	r3, [pc, #208]	@ (8005da0 <main+0xe4>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4a33      	ldr	r2, [pc, #204]	@ (8005da0 <main+0xe4>)
 8005cd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cd8:	60d3      	str	r3, [r2, #12]

     DWT->LAR = 0xC5ACCE55;
 8005cda:	4b32      	ldr	r3, [pc, #200]	@ (8005da4 <main+0xe8>)
 8005cdc:	4a32      	ldr	r2, [pc, #200]	@ (8005da8 <main+0xec>)
 8005cde:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0

     DWT->CYCCNT = 0;
 8005ce2:	4b30      	ldr	r3, [pc, #192]	@ (8005da4 <main+0xe8>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	605a      	str	r2, [r3, #4]

     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8005da4 <main+0xe8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a2d      	ldr	r2, [pc, #180]	@ (8005da4 <main+0xe8>)
 8005cee:	f043 0301 	orr.w	r3, r3, #1
 8005cf2:	6013      	str	r3, [r2, #0]
  SEGGER_UART_init(250000);
 8005cf4:	482d      	ldr	r0, [pc, #180]	@ (8005dac <main+0xf0>)
 8005cf6:	f7ff fef9 	bl	8005aec <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 8005cfa:	f7fd fb33 	bl	8003364 <SEGGER_SYSVIEW_Conf>

  status=  xTaskCreate(led_green_handler, "LED_Green_Task", 200, NULL, 3,&task1_handle);
 8005cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8005db0 <main+0xf4>)
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	2303      	movs	r3, #3
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	2300      	movs	r3, #0
 8005d08:	22c8      	movs	r2, #200	@ 0xc8
 8005d0a:	492a      	ldr	r1, [pc, #168]	@ (8005db4 <main+0xf8>)
 8005d0c:	482a      	ldr	r0, [pc, #168]	@ (8005db8 <main+0xfc>)
 8005d0e:	f7fb fa19 	bl	8001144 <xTaskCreate>
 8005d12:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d003      	beq.n	8005d22 <main+0x66>
 8005d1a:	4928      	ldr	r1, [pc, #160]	@ (8005dbc <main+0x100>)
 8005d1c:	2073      	movs	r0, #115	@ 0x73
 8005d1e:	f000 facb 	bl	80062b8 <vAssertCalled>
  next_task_handle = task1_handle;
 8005d22:	4b23      	ldr	r3, [pc, #140]	@ (8005db0 <main+0xf4>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a26      	ldr	r2, [pc, #152]	@ (8005dc0 <main+0x104>)
 8005d28:	6013      	str	r3, [r2, #0]
  status=  xTaskCreate(led_blue_handler, "LED_Blue_Task", 200, NULL, 2,&task2_handle);
 8005d2a:	4b26      	ldr	r3, [pc, #152]	@ (8005dc4 <main+0x108>)
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	2302      	movs	r3, #2
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	22c8      	movs	r2, #200	@ 0xc8
 8005d36:	4924      	ldr	r1, [pc, #144]	@ (8005dc8 <main+0x10c>)
 8005d38:	4824      	ldr	r0, [pc, #144]	@ (8005dcc <main+0x110>)
 8005d3a:	f7fb fa03 	bl	8001144 <xTaskCreate>
 8005d3e:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d003      	beq.n	8005d4e <main+0x92>
 8005d46:	491d      	ldr	r1, [pc, #116]	@ (8005dbc <main+0x100>)
 8005d48:	2076      	movs	r0, #118	@ 0x76
 8005d4a:	f000 fab5 	bl	80062b8 <vAssertCalled>
  status=  xTaskCreate(led_red_handler, "LED_Red_Task", 200, NULL, 1,&task3_handle);
 8005d4e:	4b20      	ldr	r3, [pc, #128]	@ (8005dd0 <main+0x114>)
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	2301      	movs	r3, #1
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	2300      	movs	r3, #0
 8005d58:	22c8      	movs	r2, #200	@ 0xc8
 8005d5a:	491e      	ldr	r1, [pc, #120]	@ (8005dd4 <main+0x118>)
 8005d5c:	481e      	ldr	r0, [pc, #120]	@ (8005dd8 <main+0x11c>)
 8005d5e:	f7fb f9f1 	bl	8001144 <xTaskCreate>
 8005d62:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d003      	beq.n	8005d72 <main+0xb6>
 8005d6a:	4914      	ldr	r1, [pc, #80]	@ (8005dbc <main+0x100>)
 8005d6c:	2078      	movs	r0, #120	@ 0x78
 8005d6e:	f000 faa3 	bl	80062b8 <vAssertCalled>
  status=  xTaskCreate(button_handler, "Button_Task", 200, NULL, 4,&btn_task_handle);
 8005d72:	4b1a      	ldr	r3, [pc, #104]	@ (8005ddc <main+0x120>)
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	2304      	movs	r3, #4
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	22c8      	movs	r2, #200	@ 0xc8
 8005d7e:	4918      	ldr	r1, [pc, #96]	@ (8005de0 <main+0x124>)
 8005d80:	4818      	ldr	r0, [pc, #96]	@ (8005de4 <main+0x128>)
 8005d82:	f7fb f9df 	bl	8001144 <xTaskCreate>
 8005d86:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d003      	beq.n	8005d96 <main+0xda>
 8005d8e:	490b      	ldr	r1, [pc, #44]	@ (8005dbc <main+0x100>)
 8005d90:	207a      	movs	r0, #122	@ 0x7a
 8005d92:	f000 fa91 	bl	80062b8 <vAssertCalled>
  vTaskStartScheduler();
 8005d96:	f7fb fca5 	bl	80016e4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005d9a:	bf00      	nop
 8005d9c:	e7fd      	b.n	8005d9a <main+0xde>
 8005d9e:	bf00      	nop
 8005da0:	e000edf0 	.word	0xe000edf0
 8005da4:	e0001000 	.word	0xe0001000
 8005da8:	c5acce55 	.word	0xc5acce55
 8005dac:	0003d090 	.word	0x0003d090
 8005db0:	2000d060 	.word	0x2000d060
 8005db4:	08007e4c 	.word	0x08007e4c
 8005db8:	080060e9 	.word	0x080060e9
 8005dbc:	08007e5c 	.word	0x08007e5c
 8005dc0:	2000d05c 	.word	0x2000d05c
 8005dc4:	2000d064 	.word	0x2000d064
 8005dc8:	08007e70 	.word	0x08007e70
 8005dcc:	080061c1 	.word	0x080061c1
 8005dd0:	2000d068 	.word	0x2000d068
 8005dd4:	08007e80 	.word	0x08007e80
 8005dd8:	08006155 	.word	0x08006155
 8005ddc:	2000d06c 	.word	0x2000d06c
 8005de0:	08007e90 	.word	0x08007e90
 8005de4:	0800622d 	.word	0x0800622d

08005de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b094      	sub	sp, #80	@ 0x50
 8005dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dee:	f107 031c 	add.w	r3, r7, #28
 8005df2:	2234      	movs	r2, #52	@ 0x34
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 fe48 	bl	8007a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005dfc:	f107 0308 	add.w	r3, r7, #8
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	60da      	str	r2, [r3, #12]
 8005e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e0c:	4b29      	ldr	r3, [pc, #164]	@ (8005eb4 <SystemClock_Config+0xcc>)
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e10:	4a28      	ldr	r2, [pc, #160]	@ (8005eb4 <SystemClock_Config+0xcc>)
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e18:	4b26      	ldr	r3, [pc, #152]	@ (8005eb4 <SystemClock_Config+0xcc>)
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e24:	4b24      	ldr	r3, [pc, #144]	@ (8005eb8 <SystemClock_Config+0xd0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005e2c:	4a22      	ldr	r2, [pc, #136]	@ (8005eb8 <SystemClock_Config+0xd0>)
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b20      	ldr	r3, [pc, #128]	@ (8005eb8 <SystemClock_Config+0xd0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e40:	2302      	movs	r3, #2
 8005e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e44:	2301      	movs	r3, #1
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e48:	2310      	movs	r3, #16
 8005e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005e50:	2300      	movs	r3, #0
 8005e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005e54:	2308      	movs	r3, #8
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005e58:	23a8      	movs	r3, #168	@ 0xa8
 8005e5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005e60:	2302      	movs	r3, #2
 8005e62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005e64:	2302      	movs	r3, #2
 8005e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e68:	f107 031c 	add.w	r3, r7, #28
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fe2f 	bl	8006ad0 <HAL_RCC_OscConfig>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005e78:	f000 fa31 	bl	80062de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e7c:	230f      	movs	r3, #15
 8005e7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e80:	2302      	movs	r3, #2
 8005e82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005e8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005e94:	f107 0308 	add.w	r3, r7, #8
 8005e98:	2105      	movs	r1, #5
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 f8c6 	bl	800702c <HAL_RCC_ClockConfig>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005ea6:	f000 fa1a 	bl	80062de <Error_Handler>
  }
}
 8005eaa:	bf00      	nop
 8005eac:	3750      	adds	r7, #80	@ 0x50
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	40007000 	.word	0x40007000

08005ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	@ 0x30
 8005ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ec2:	f107 031c 	add.w	r3, r7, #28
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	605a      	str	r2, [r3, #4]
 8005ecc:	609a      	str	r2, [r3, #8]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ede:	4b7c      	ldr	r3, [pc, #496]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005eea:	4b79      	ldr	r3, [pc, #484]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	4a78      	ldr	r2, [pc, #480]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ef6:	4b76      	ldr	r3, [pc, #472]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f02:	4b73      	ldr	r3, [pc, #460]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f06:	4a72      	ldr	r2, [pc, #456]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f0e:	4b70      	ldr	r3, [pc, #448]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f26:	4b6a      	ldr	r3, [pc, #424]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f32:	4b67      	ldr	r3, [pc, #412]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	4a66      	ldr	r2, [pc, #408]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f38:	f043 0308 	orr.w	r3, r3, #8
 8005f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f3e:	4b64      	ldr	r3, [pc, #400]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	60bb      	str	r3, [r7, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f4a:	4b61      	ldr	r3, [pc, #388]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4e:	4a60      	ldr	r2, [pc, #384]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f56:	4b5e      	ldr	r3, [pc, #376]	@ (80060d0 <MX_GPIO_Init+0x214>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005f62:	2200      	movs	r2, #0
 8005f64:	f244 0181 	movw	r1, #16513	@ 0x4081
 8005f68:	485a      	ldr	r0, [pc, #360]	@ (80060d4 <MX_GPIO_Init+0x218>)
 8005f6a:	f000 fd7d 	bl	8006a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2140      	movs	r1, #64	@ 0x40
 8005f72:	4859      	ldr	r0, [pc, #356]	@ (80060d8 <MX_GPIO_Init+0x21c>)
 8005f74:	f000 fd78 	bl	8006a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005f78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005f7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005f88:	f107 031c 	add.w	r3, r7, #28
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4853      	ldr	r0, [pc, #332]	@ (80060dc <MX_GPIO_Init+0x220>)
 8005f90:	f000 fba6 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005f94:	2332      	movs	r3, #50	@ 0x32
 8005f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fa4:	230b      	movs	r3, #11
 8005fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fa8:	f107 031c 	add.w	r3, r7, #28
 8005fac:	4619      	mov	r1, r3
 8005fae:	484b      	ldr	r0, [pc, #300]	@ (80060dc <MX_GPIO_Init+0x220>)
 8005fb0:	f000 fb96 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005fb4:	2386      	movs	r3, #134	@ 0x86
 8005fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fc4:	230b      	movs	r3, #11
 8005fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc8:	f107 031c 	add.w	r3, r7, #28
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4844      	ldr	r0, [pc, #272]	@ (80060e0 <MX_GPIO_Init+0x224>)
 8005fd0:	f000 fb86 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005fd4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8005fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fe6:	f107 031c 	add.w	r3, r7, #28
 8005fea:	4619      	mov	r1, r3
 8005fec:	4839      	ldr	r0, [pc, #228]	@ (80060d4 <MX_GPIO_Init+0x218>)
 8005fee:	f000 fb77 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005ff2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006000:	2303      	movs	r3, #3
 8006002:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006004:	230b      	movs	r3, #11
 8006006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006008:	f107 031c 	add.w	r3, r7, #28
 800600c:	4619      	mov	r1, r3
 800600e:	4831      	ldr	r0, [pc, #196]	@ (80060d4 <MX_GPIO_Init+0x218>)
 8006010:	f000 fb66 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006014:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601a:	2302      	movs	r3, #2
 800601c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601e:	2300      	movs	r3, #0
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006022:	2303      	movs	r3, #3
 8006024:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006026:	2307      	movs	r3, #7
 8006028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800602a:	f107 031c 	add.w	r3, r7, #28
 800602e:	4619      	mov	r1, r3
 8006030:	482c      	ldr	r0, [pc, #176]	@ (80060e4 <MX_GPIO_Init+0x228>)
 8006032:	f000 fb55 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006036:	2340      	movs	r3, #64	@ 0x40
 8006038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800603a:	2301      	movs	r3, #1
 800603c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603e:	2300      	movs	r3, #0
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006042:	2300      	movs	r3, #0
 8006044:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006046:	f107 031c 	add.w	r3, r7, #28
 800604a:	4619      	mov	r1, r3
 800604c:	4822      	ldr	r0, [pc, #136]	@ (80060d8 <MX_GPIO_Init+0x21c>)
 800604e:	f000 fb47 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006052:	2380      	movs	r3, #128	@ 0x80
 8006054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006056:	2300      	movs	r3, #0
 8006058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605a:	2300      	movs	r3, #0
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800605e:	f107 031c 	add.w	r3, r7, #28
 8006062:	4619      	mov	r1, r3
 8006064:	481c      	ldr	r0, [pc, #112]	@ (80060d8 <MX_GPIO_Init+0x21c>)
 8006066:	f000 fb3b 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800606a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800606e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006070:	2302      	movs	r3, #2
 8006072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006074:	2300      	movs	r3, #0
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006078:	2303      	movs	r3, #3
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800607c:	230a      	movs	r3, #10
 800607e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006080:	f107 031c 	add.w	r3, r7, #28
 8006084:	4619      	mov	r1, r3
 8006086:	4816      	ldr	r0, [pc, #88]	@ (80060e0 <MX_GPIO_Init+0x224>)
 8006088:	f000 fb2a 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800608c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006092:	2300      	movs	r3, #0
 8006094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800609a:	f107 031c 	add.w	r3, r7, #28
 800609e:	4619      	mov	r1, r3
 80060a0:	480f      	ldr	r0, [pc, #60]	@ (80060e0 <MX_GPIO_Init+0x224>)
 80060a2:	f000 fb1d 	bl	80066e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80060a6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80060aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ac:	2302      	movs	r3, #2
 80060ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b4:	2303      	movs	r3, #3
 80060b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060b8:	230b      	movs	r3, #11
 80060ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060bc:	f107 031c 	add.w	r3, r7, #28
 80060c0:	4619      	mov	r1, r3
 80060c2:	4805      	ldr	r0, [pc, #20]	@ (80060d8 <MX_GPIO_Init+0x21c>)
 80060c4:	f000 fb0c 	bl	80066e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80060c8:	bf00      	nop
 80060ca:	3730      	adds	r7, #48	@ 0x30
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40023800 	.word	0x40023800
 80060d4:	40020400 	.word	0x40020400
 80060d8:	40021800 	.word	0x40021800
 80060dc:	40020800 	.word	0x40020800
 80060e0:	40020000 	.word	0x40020000
 80060e4:	40020c00 	.word	0x40020c00

080060e8 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80060f0:	4813      	ldr	r0, [pc, #76]	@ (8006140 <led_green_handler+0x58>)
 80060f2:	f7ff fbb3 	bl	800585c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN);
 80060f6:	2101      	movs	r1, #1
 80060f8:	4812      	ldr	r0, [pc, #72]	@ (8006144 <led_green_handler+0x5c>)
 80060fa:	f000 fcce 	bl	8006a9a <HAL_GPIO_TogglePin>
		status =xTaskNotifyWait(0,0,NULL,1000);
 80060fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	2200      	movs	r2, #0
 8006108:	2100      	movs	r1, #0
 800610a:	2000      	movs	r0, #0
 800610c:	f7fb ffa2 	bl	8002054 <xTaskGenericNotifyWait>
 8006110:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d1eb      	bne.n	80060f0 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8006118:	f7fb fb42 	bl	80017a0 <vTaskSuspendAll>
			next_task_handle = task2_handle;
 800611c:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <led_green_handler+0x60>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a0a      	ldr	r2, [pc, #40]	@ (800614c <led_green_handler+0x64>)
 8006122:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8006124:	f7fb fb4a 	bl	80017bc <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, LED_GREEN, GPIO_PIN_RESET);
 8006128:	2200      	movs	r2, #0
 800612a:	2101      	movs	r1, #1
 800612c:	4805      	ldr	r0, [pc, #20]	@ (8006144 <led_green_handler+0x5c>)
 800612e:	f000 fc9b 	bl	8006a68 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Suspend Green LED Task");
 8006132:	4807      	ldr	r0, [pc, #28]	@ (8006150 <led_green_handler+0x68>)
 8006134:	f7ff fb92 	bl	800585c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(NULL);
 8006138:	2000      	movs	r0, #0
 800613a:	f7fb f997 	bl	800146c <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 800613e:	e7d7      	b.n	80060f0 <led_green_handler+0x8>
 8006140:	08007e9c 	.word	0x08007e9c
 8006144:	40020400 	.word	0x40020400
 8006148:	2000d064 	.word	0x2000d064
 800614c:	2000d05c 	.word	0x2000d05c
 8006150:	08007eb0 	.word	0x08007eb0

08006154 <led_red_handler>:
		}

	}
}
static void led_red_handler(void* parameters)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af02      	add	r7, sp, #8
 800615a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
		while(1)
		{

			SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 800615c:	4814      	ldr	r0, [pc, #80]	@ (80061b0 <led_red_handler+0x5c>)
 800615e:	f7ff fb7d 	bl	800585c <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_TogglePin(GPIOB, LED_RED);
 8006162:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006166:	4813      	ldr	r0, [pc, #76]	@ (80061b4 <led_red_handler+0x60>)
 8006168:	f000 fc97 	bl	8006a9a <HAL_GPIO_TogglePin>
			status =xTaskNotifyWait(0,0,NULL,400);
 800616c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	2300      	movs	r3, #0
 8006174:	2200      	movs	r2, #0
 8006176:	2100      	movs	r1, #0
 8006178:	2000      	movs	r0, #0
 800617a:	f7fb ff6b 	bl	8002054 <xTaskGenericNotifyWait>
 800617e:	60f8      	str	r0, [r7, #12]
			if (status == pdTRUE)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d1ea      	bne.n	800615c <led_red_handler+0x8>
			{
				vTaskSuspendAll();
 8006186:	f7fb fb0b 	bl	80017a0 <vTaskSuspendAll>
				next_task_handle = NULL;
 800618a:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <led_red_handler+0x64>)
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
				xTaskResumeAll();
 8006190:	f7fb fb14 	bl	80017bc <xTaskResumeAll>
				HAL_GPIO_WritePin(GPIOB, LED_RED, GPIO_PIN_RESET);
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800619a:	4806      	ldr	r0, [pc, #24]	@ (80061b4 <led_red_handler+0x60>)
 800619c:	f000 fc64 	bl	8006a68 <HAL_GPIO_WritePin>
				SEGGER_SYSVIEW_PrintfTarget("Suspend Red LED Task");
 80061a0:	4806      	ldr	r0, [pc, #24]	@ (80061bc <led_red_handler+0x68>)
 80061a2:	f7ff fb5b 	bl	800585c <SEGGER_SYSVIEW_PrintfTarget>
				//vTaskDelete(btn_task_handle);
				vTaskSuspend(NULL);
 80061a6:	2000      	movs	r0, #0
 80061a8:	f7fb f960 	bl	800146c <vTaskSuspend>
			SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80061ac:	e7d6      	b.n	800615c <led_red_handler+0x8>
 80061ae:	bf00      	nop
 80061b0:	08007ec8 	.word	0x08007ec8
 80061b4:	40020400 	.word	0x40020400
 80061b8:	2000d05c 	.word	0x2000d05c
 80061bc:	08007edc 	.word	0x08007edc

080061c0 <led_blue_handler>:
			}

		}
}
static void led_blue_handler(void* parameters)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	6078      	str	r0, [r7, #4]
	BaseType_t status;
			while(1)
			{
				SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 80061c8:	4813      	ldr	r0, [pc, #76]	@ (8006218 <led_blue_handler+0x58>)
 80061ca:	f7ff fb47 	bl	800585c <SEGGER_SYSVIEW_PrintfTarget>
				HAL_GPIO_TogglePin(GPIOB, LED_BLUE);
 80061ce:	2180      	movs	r1, #128	@ 0x80
 80061d0:	4812      	ldr	r0, [pc, #72]	@ (800621c <led_blue_handler+0x5c>)
 80061d2:	f000 fc62 	bl	8006a9a <HAL_GPIO_TogglePin>
				status =xTaskNotifyWait(0,0,NULL,800);
 80061d6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	2000      	movs	r0, #0
 80061e4:	f7fb ff36 	bl	8002054 <xTaskGenericNotifyWait>
 80061e8:	60f8      	str	r0, [r7, #12]
				if (status == pdTRUE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d1eb      	bne.n	80061c8 <led_blue_handler+0x8>
				{
					vTaskSuspendAll();
 80061f0:	f7fb fad6 	bl	80017a0 <vTaskSuspendAll>
					next_task_handle = task3_handle;
 80061f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <led_blue_handler+0x60>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006224 <led_blue_handler+0x64>)
 80061fa:	6013      	str	r3, [r2, #0]
					xTaskResumeAll();
 80061fc:	f7fb fade 	bl	80017bc <xTaskResumeAll>
					HAL_GPIO_WritePin(GPIOB, LED_BLUE, GPIO_PIN_RESET);
 8006200:	2200      	movs	r2, #0
 8006202:	2180      	movs	r1, #128	@ 0x80
 8006204:	4805      	ldr	r0, [pc, #20]	@ (800621c <led_blue_handler+0x5c>)
 8006206:	f000 fc2f 	bl	8006a68 <HAL_GPIO_WritePin>
					SEGGER_SYSVIEW_PrintfTarget("Suspend Blue LED Task");
 800620a:	4807      	ldr	r0, [pc, #28]	@ (8006228 <led_blue_handler+0x68>)
 800620c:	f7ff fb26 	bl	800585c <SEGGER_SYSVIEW_PrintfTarget>
					vTaskSuspend(NULL);
 8006210:	2000      	movs	r0, #0
 8006212:	f7fb f92b 	bl	800146c <vTaskSuspend>
				SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8006216:	e7d7      	b.n	80061c8 <led_blue_handler+0x8>
 8006218:	08007ef4 	.word	0x08007ef4
 800621c:	40020400 	.word	0x40020400
 8006220:	2000d068 	.word	0x2000d068
 8006224:	2000d05c 	.word	0x2000d05c
 8006228:	08007f08 	.word	0x08007f08

0800622c <button_handler>:
				}

			}
}
void button_handler(void * params)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af02      	add	r7, sp, #8
 8006232:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		btn_read  = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800623c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006240:	4818      	ldr	r0, [pc, #96]	@ (80062a4 <button_handler+0x78>)
 8006242:	f000 fbf9 	bl	8006a38 <HAL_GPIO_ReadPin>
 8006246:	4603      	mov	r3, r0
 8006248:	73bb      	strb	r3, [r7, #14]
		if (btn_read){
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d022      	beq.n	8006296 <button_handler+0x6a>
		if (!prev_read)
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11f      	bne.n	8006296 <button_handler+0x6a>
		{
			xTaskNotify(next_task_handle,0,eNoAction);
 8006256:	4b14      	ldr	r3, [pc, #80]	@ (80062a8 <button_handler+0x7c>)
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	2300      	movs	r3, #0
 8006260:	2200      	movs	r2, #0
 8006262:	2100      	movs	r1, #0
 8006264:	f7fb ff7a 	bl	800215c <xTaskGenericNotify>
			if (next_task_handle == NULL)
 8006268:	4b0f      	ldr	r3, [pc, #60]	@ (80062a8 <button_handler+0x7c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d112      	bne.n	8006296 <button_handler+0x6a>
			{
						next_task_handle = task1_handle;
 8006270:	4b0e      	ldr	r3, [pc, #56]	@ (80062ac <button_handler+0x80>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a0c      	ldr	r2, [pc, #48]	@ (80062a8 <button_handler+0x7c>)
 8006276:	6013      	str	r3, [r2, #0]
						vTaskResume(task1_handle);
 8006278:	4b0c      	ldr	r3, [pc, #48]	@ (80062ac <button_handler+0x80>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f7fb f9cb 	bl	8001618 <vTaskResume>
						vTaskResume(task2_handle);
 8006282:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <button_handler+0x84>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f7fb f9c6 	bl	8001618 <vTaskResume>
						vTaskResume(task3_handle);
 800628c:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <button_handler+0x88>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f7fb f9c1 	bl	8001618 <vTaskResume>
			}
		}}
		prev_read = btn_read;
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 800629a:	200a      	movs	r0, #10
 800629c:	f7fb f8b2 	bl	8001404 <vTaskDelay>
		btn_read  = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80062a0:	e7cc      	b.n	800623c <button_handler+0x10>
 80062a2:	bf00      	nop
 80062a4:	40020800 	.word	0x40020800
 80062a8:	2000d05c 	.word	0x2000d05c
 80062ac:	2000d060 	.word	0x2000d060
 80062b0:	2000d064 	.word	0x2000d064
 80062b4:	2000d068 	.word	0x2000d068

080062b8 <vAssertCalled>:

	}

}
void vAssertCalled( unsigned long ulLine, const char * const pcFileName )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
//static portBASE_TYPE xPrinted = pdFALSE;
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]

    /* Parameters are not used. */
    ( void ) ulLine;
    ( void ) pcFileName;

    taskENTER_CRITICAL();
 80062c6:	f7fc fd47 	bl	8002d58 <vPortEnterCritical>
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 1 )
 80062ca:	bf00      	nop
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d0fc      	beq.n	80062cc <vAssertCalled+0x14>
        {
        }
    }
    taskEXIT_CRITICAL();
 80062d2:	f7fc fd6b 	bl	8002dac <vPortExitCritical>
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062de:	b480      	push	{r7}
 80062e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062e2:	b672      	cpsid	i
}
 80062e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <Error_Handler+0x8>
	...

080062ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80062f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006330 <HAL_MspInit+0x44>)
 80062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006330 <HAL_MspInit+0x44>)
 80062f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80062fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006330 <HAL_MspInit+0x44>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006306:	607b      	str	r3, [r7, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800630a:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <HAL_MspInit+0x44>)
 800630c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630e:	4a08      	ldr	r2, [pc, #32]	@ (8006330 <HAL_MspInit+0x44>)
 8006310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006314:	6453      	str	r3, [r2, #68]	@ 0x44
 8006316:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <HAL_MspInit+0x44>)
 8006318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8006322:	f7fc fca3 	bl	8002c6c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800

08006334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08e      	sub	sp, #56	@ 0x38
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8006344:	4b33      	ldr	r3, [pc, #204]	@ (8006414 <HAL_InitTick+0xe0>)
 8006346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006348:	4a32      	ldr	r2, [pc, #200]	@ (8006414 <HAL_InitTick+0xe0>)
 800634a:	f043 0308 	orr.w	r3, r3, #8
 800634e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006350:	4b30      	ldr	r3, [pc, #192]	@ (8006414 <HAL_InitTick+0xe0>)
 8006352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800635c:	f107 0210 	add.w	r2, r7, #16
 8006360:	f107 0314 	add.w	r3, r7, #20
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f001 f870 	bl	800744c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006376:	f001 f855 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 800637a:	6378      	str	r0, [r7, #52]	@ 0x34
 800637c:	e004      	b.n	8006388 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800637e:	f001 f851 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 8006382:	4603      	mov	r3, r0
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638a:	4a23      	ldr	r2, [pc, #140]	@ (8006418 <HAL_InitTick+0xe4>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	0c9b      	lsrs	r3, r3, #18
 8006392:	3b01      	subs	r3, #1
 8006394:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8006396:	4b21      	ldr	r3, [pc, #132]	@ (800641c <HAL_InitTick+0xe8>)
 8006398:	4a21      	ldr	r2, [pc, #132]	@ (8006420 <HAL_InitTick+0xec>)
 800639a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800639c:	4b1f      	ldr	r3, [pc, #124]	@ (800641c <HAL_InitTick+0xe8>)
 800639e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80063a2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80063a4:	4a1d      	ldr	r2, [pc, #116]	@ (800641c <HAL_InitTick+0xe8>)
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80063aa:	4b1c      	ldr	r3, [pc, #112]	@ (800641c <HAL_InitTick+0xe8>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063b0:	4b1a      	ldr	r3, [pc, #104]	@ (800641c <HAL_InitTick+0xe8>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063b6:	4b19      	ldr	r3, [pc, #100]	@ (800641c <HAL_InitTick+0xe8>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80063bc:	4817      	ldr	r0, [pc, #92]	@ (800641c <HAL_InitTick+0xe8>)
 80063be:	f001 f877 	bl	80074b0 <HAL_TIM_Base_Init>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80063c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11b      	bne.n	8006408 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80063d0:	4812      	ldr	r0, [pc, #72]	@ (800641c <HAL_InitTick+0xe8>)
 80063d2:	f001 f8cf 	bl	8007574 <HAL_TIM_Base_Start_IT>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80063dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d111      	bne.n	8006408 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80063e4:	2032      	movs	r0, #50	@ 0x32
 80063e6:	f000 f96d 	bl	80066c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b0f      	cmp	r3, #15
 80063ee:	d808      	bhi.n	8006402 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80063f0:	2200      	movs	r2, #0
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	2032      	movs	r0, #50	@ 0x32
 80063f6:	f000 f949 	bl	800668c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006424 <HAL_InitTick+0xf0>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e002      	b.n	8006408 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006408:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800640c:	4618      	mov	r0, r3
 800640e:	3738      	adds	r7, #56	@ 0x38
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40023800 	.word	0x40023800
 8006418:	431bde83 	.word	0x431bde83
 800641c:	2000d070 	.word	0x2000d070
 8006420:	40000c00 	.word	0x40000c00
 8006424:	20000014 	.word	0x20000014

08006428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800642c:	bf00      	nop
 800642e:	e7fd      	b.n	800642c <NMI_Handler+0x4>

08006430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <HardFault_Handler+0x4>

08006438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <MemManage_Handler+0x4>

08006440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006444:	bf00      	nop
 8006446:	e7fd      	b.n	8006444 <BusFault_Handler+0x4>

08006448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800644c:	bf00      	nop
 800644e:	e7fd      	b.n	800644c <UsageFault_Handler+0x4>

08006450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006464:	4802      	ldr	r0, [pc, #8]	@ (8006470 <TIM5_IRQHandler+0x10>)
 8006466:	f001 f8fd 	bl	8007664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800646a:	bf00      	nop
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	2000d070 	.word	0x2000d070

08006474 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006478:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <SystemInit+0x20>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647e:	4a05      	ldr	r2, [pc, #20]	@ (8006494 <SystemInit+0x20>)
 8006480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	e000ed00 	.word	0xe000ed00

08006498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006498:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80064d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800649c:	f7ff ffea 	bl	8006474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80064a0:	480c      	ldr	r0, [pc, #48]	@ (80064d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80064a2:	490d      	ldr	r1, [pc, #52]	@ (80064d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80064a4:	4a0d      	ldr	r2, [pc, #52]	@ (80064dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80064a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064a8:	e002      	b.n	80064b0 <LoopCopyDataInit>

080064aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064ae:	3304      	adds	r3, #4

080064b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064b4:	d3f9      	bcc.n	80064aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064b6:	4a0a      	ldr	r2, [pc, #40]	@ (80064e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80064b8:	4c0a      	ldr	r4, [pc, #40]	@ (80064e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80064ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064bc:	e001      	b.n	80064c2 <LoopFillZerobss>

080064be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064c0:	3204      	adds	r2, #4

080064c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064c4:	d3fb      	bcc.n	80064be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80064c6:	f001 fae9 	bl	8007a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064ca:	f7ff fbf7 	bl	8005cbc <main>
  bx  lr    
 80064ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80064d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80064d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064d8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80064dc:	08007f84 	.word	0x08007f84
  ldr r2, =_sbss
 80064e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80064e4:	2000d0c0 	.word	0x2000d0c0

080064e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064e8:	e7fe      	b.n	80064e8 <ADC_IRQHandler>

080064ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064ee:	2003      	movs	r0, #3
 80064f0:	f000 f8c1 	bl	8006676 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064f4:	200f      	movs	r0, #15
 80064f6:	f7ff ff1d 	bl	8006334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064fa:	f7ff fef7 	bl	80062ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return uwTick;
 8006508:	4b03      	ldr	r3, [pc, #12]	@ (8006518 <HAL_GetTick+0x14>)
 800650a:	681b      	ldr	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	2000d0bc 	.word	0x2000d0bc

0800651c <__NVIC_SetPriorityGrouping>:
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800652c:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <__NVIC_SetPriorityGrouping+0x40>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006538:	4013      	ands	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006544:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <__NVIC_SetPriorityGrouping+0x44>)
 8006546:	4313      	orrs	r3, r2
 8006548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800654a:	4a04      	ldr	r2, [pc, #16]	@ (800655c <__NVIC_SetPriorityGrouping+0x40>)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	60d3      	str	r3, [r2, #12]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	e000ed00 	.word	0xe000ed00
 8006560:	05fa0000 	.word	0x05fa0000

08006564 <__NVIC_GetPriorityGrouping>:
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006568:	4b04      	ldr	r3, [pc, #16]	@ (800657c <__NVIC_GetPriorityGrouping+0x18>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	0a1b      	lsrs	r3, r3, #8
 800656e:	f003 0307 	and.w	r3, r3, #7
}
 8006572:	4618      	mov	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	e000ed00 	.word	0xe000ed00

08006580 <__NVIC_EnableIRQ>:
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800658a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658e:	2b00      	cmp	r3, #0
 8006590:	db0b      	blt.n	80065aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	f003 021f 	and.w	r2, r3, #31
 8006598:	4907      	ldr	r1, [pc, #28]	@ (80065b8 <__NVIC_EnableIRQ+0x38>)
 800659a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	2001      	movs	r0, #1
 80065a2:	fa00 f202 	lsl.w	r2, r0, r2
 80065a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	e000e100 	.word	0xe000e100

080065bc <__NVIC_SetPriority>:
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	6039      	str	r1, [r7, #0]
 80065c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	db0a      	blt.n	80065e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	490c      	ldr	r1, [pc, #48]	@ (8006608 <__NVIC_SetPriority+0x4c>)
 80065d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065da:	0112      	lsls	r2, r2, #4
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	440b      	add	r3, r1
 80065e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80065e4:	e00a      	b.n	80065fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4908      	ldr	r1, [pc, #32]	@ (800660c <__NVIC_SetPriority+0x50>)
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	3b04      	subs	r3, #4
 80065f4:	0112      	lsls	r2, r2, #4
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	440b      	add	r3, r1
 80065fa:	761a      	strb	r2, [r3, #24]
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	e000e100 	.word	0xe000e100
 800660c:	e000ed00 	.word	0xe000ed00

08006610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006610:	b480      	push	{r7}
 8006612:	b089      	sub	sp, #36	@ 0x24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f1c3 0307 	rsb	r3, r3, #7
 800662a:	2b04      	cmp	r3, #4
 800662c:	bf28      	it	cs
 800662e:	2304      	movcs	r3, #4
 8006630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	3304      	adds	r3, #4
 8006636:	2b06      	cmp	r3, #6
 8006638:	d902      	bls.n	8006640 <NVIC_EncodePriority+0x30>
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3b03      	subs	r3, #3
 800663e:	e000      	b.n	8006642 <NVIC_EncodePriority+0x32>
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006644:	f04f 32ff 	mov.w	r2, #4294967295
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43da      	mvns	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	401a      	ands	r2, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006658:	f04f 31ff 	mov.w	r1, #4294967295
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	fa01 f303 	lsl.w	r3, r1, r3
 8006662:	43d9      	mvns	r1, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006668:	4313      	orrs	r3, r2
         );
}
 800666a:	4618      	mov	r0, r3
 800666c:	3724      	adds	r7, #36	@ 0x24
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff ff4c 	bl	800651c <__NVIC_SetPriorityGrouping>
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800669e:	f7ff ff61 	bl	8006564 <__NVIC_GetPriorityGrouping>
 80066a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	6978      	ldr	r0, [r7, #20]
 80066aa:	f7ff ffb1 	bl	8006610 <NVIC_EncodePriority>
 80066ae:	4602      	mov	r2, r0
 80066b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff ff80 	bl	80065bc <__NVIC_SetPriority>
}
 80066bc:	bf00      	nop
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff ff54 	bl	8006580 <__NVIC_EnableIRQ>
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b089      	sub	sp, #36	@ 0x24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80066ea:	2300      	movs	r3, #0
 80066ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	e175      	b.n	80069ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006700:	2201      	movs	r2, #1
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4013      	ands	r3, r2
 8006712:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	429a      	cmp	r2, r3
 800671a:	f040 8164 	bne.w	80069e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	2b01      	cmp	r3, #1
 8006728:	d005      	beq.n	8006736 <HAL_GPIO_Init+0x56>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d130      	bne.n	8006798 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	2203      	movs	r2, #3
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43db      	mvns	r3, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4013      	ands	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4313      	orrs	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800676c:	2201      	movs	r2, #1
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	091b      	lsrs	r3, r3, #4
 8006782:	f003 0201 	and.w	r2, r3, #1
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4313      	orrs	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d017      	beq.n	80067d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	2203      	movs	r2, #3
 80067b0:	fa02 f303 	lsl.w	r3, r2, r3
 80067b4:	43db      	mvns	r3, r3
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	4013      	ands	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d123      	bne.n	8006828 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	08da      	lsrs	r2, r3, #3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3208      	adds	r2, #8
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	220f      	movs	r2, #15
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	4013      	ands	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4313      	orrs	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	08da      	lsrs	r2, r3, #3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3208      	adds	r2, #8
 8006822:	69b9      	ldr	r1, [r7, #24]
 8006824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	2203      	movs	r2, #3
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4013      	ands	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f003 0203 	and.w	r2, r3, #3
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80be 	beq.w	80069e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800686a:	4b66      	ldr	r3, [pc, #408]	@ (8006a04 <HAL_GPIO_Init+0x324>)
 800686c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686e:	4a65      	ldr	r2, [pc, #404]	@ (8006a04 <HAL_GPIO_Init+0x324>)
 8006870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006874:	6453      	str	r3, [r2, #68]	@ 0x44
 8006876:	4b63      	ldr	r3, [pc, #396]	@ (8006a04 <HAL_GPIO_Init+0x324>)
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006882:	4a61      	ldr	r2, [pc, #388]	@ (8006a08 <HAL_GPIO_Init+0x328>)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	089b      	lsrs	r3, r3, #2
 8006888:	3302      	adds	r3, #2
 800688a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	220f      	movs	r2, #15
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43db      	mvns	r3, r3
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	4013      	ands	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a58      	ldr	r2, [pc, #352]	@ (8006a0c <HAL_GPIO_Init+0x32c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d037      	beq.n	800691e <HAL_GPIO_Init+0x23e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a57      	ldr	r2, [pc, #348]	@ (8006a10 <HAL_GPIO_Init+0x330>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d031      	beq.n	800691a <HAL_GPIO_Init+0x23a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a56      	ldr	r2, [pc, #344]	@ (8006a14 <HAL_GPIO_Init+0x334>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d02b      	beq.n	8006916 <HAL_GPIO_Init+0x236>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a55      	ldr	r2, [pc, #340]	@ (8006a18 <HAL_GPIO_Init+0x338>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d025      	beq.n	8006912 <HAL_GPIO_Init+0x232>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a54      	ldr	r2, [pc, #336]	@ (8006a1c <HAL_GPIO_Init+0x33c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d01f      	beq.n	800690e <HAL_GPIO_Init+0x22e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a53      	ldr	r2, [pc, #332]	@ (8006a20 <HAL_GPIO_Init+0x340>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d019      	beq.n	800690a <HAL_GPIO_Init+0x22a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a52      	ldr	r2, [pc, #328]	@ (8006a24 <HAL_GPIO_Init+0x344>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_GPIO_Init+0x226>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a51      	ldr	r2, [pc, #324]	@ (8006a28 <HAL_GPIO_Init+0x348>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00d      	beq.n	8006902 <HAL_GPIO_Init+0x222>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a50      	ldr	r2, [pc, #320]	@ (8006a2c <HAL_GPIO_Init+0x34c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d007      	beq.n	80068fe <HAL_GPIO_Init+0x21e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a4f      	ldr	r2, [pc, #316]	@ (8006a30 <HAL_GPIO_Init+0x350>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d101      	bne.n	80068fa <HAL_GPIO_Init+0x21a>
 80068f6:	2309      	movs	r3, #9
 80068f8:	e012      	b.n	8006920 <HAL_GPIO_Init+0x240>
 80068fa:	230a      	movs	r3, #10
 80068fc:	e010      	b.n	8006920 <HAL_GPIO_Init+0x240>
 80068fe:	2308      	movs	r3, #8
 8006900:	e00e      	b.n	8006920 <HAL_GPIO_Init+0x240>
 8006902:	2307      	movs	r3, #7
 8006904:	e00c      	b.n	8006920 <HAL_GPIO_Init+0x240>
 8006906:	2306      	movs	r3, #6
 8006908:	e00a      	b.n	8006920 <HAL_GPIO_Init+0x240>
 800690a:	2305      	movs	r3, #5
 800690c:	e008      	b.n	8006920 <HAL_GPIO_Init+0x240>
 800690e:	2304      	movs	r3, #4
 8006910:	e006      	b.n	8006920 <HAL_GPIO_Init+0x240>
 8006912:	2303      	movs	r3, #3
 8006914:	e004      	b.n	8006920 <HAL_GPIO_Init+0x240>
 8006916:	2302      	movs	r3, #2
 8006918:	e002      	b.n	8006920 <HAL_GPIO_Init+0x240>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <HAL_GPIO_Init+0x240>
 800691e:	2300      	movs	r3, #0
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	f002 0203 	and.w	r2, r2, #3
 8006926:	0092      	lsls	r2, r2, #2
 8006928:	4093      	lsls	r3, r2
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4313      	orrs	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006930:	4935      	ldr	r1, [pc, #212]	@ (8006a08 <HAL_GPIO_Init+0x328>)
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	089b      	lsrs	r3, r3, #2
 8006936:	3302      	adds	r3, #2
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800693e:	4b3d      	ldr	r3, [pc, #244]	@ (8006a34 <HAL_GPIO_Init+0x354>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	43db      	mvns	r3, r3
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	4013      	ands	r3, r2
 800694c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006962:	4a34      	ldr	r2, [pc, #208]	@ (8006a34 <HAL_GPIO_Init+0x354>)
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006968:	4b32      	ldr	r3, [pc, #200]	@ (8006a34 <HAL_GPIO_Init+0x354>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	43db      	mvns	r3, r3
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	4013      	ands	r3, r2
 8006976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800698c:	4a29      	ldr	r2, [pc, #164]	@ (8006a34 <HAL_GPIO_Init+0x354>)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006992:	4b28      	ldr	r3, [pc, #160]	@ (8006a34 <HAL_GPIO_Init+0x354>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	43db      	mvns	r3, r3
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4013      	ands	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80069b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a34 <HAL_GPIO_Init+0x354>)
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006a34 <HAL_GPIO_Init+0x354>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	4013      	ands	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069e0:	4a14      	ldr	r2, [pc, #80]	@ (8006a34 <HAL_GPIO_Init+0x354>)
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	3301      	adds	r3, #1
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	2b0f      	cmp	r3, #15
 80069f0:	f67f ae86 	bls.w	8006700 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	3724      	adds	r7, #36	@ 0x24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40023800 	.word	0x40023800
 8006a08:	40013800 	.word	0x40013800
 8006a0c:	40020000 	.word	0x40020000
 8006a10:	40020400 	.word	0x40020400
 8006a14:	40020800 	.word	0x40020800
 8006a18:	40020c00 	.word	0x40020c00
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	40021400 	.word	0x40021400
 8006a24:	40021800 	.word	0x40021800
 8006a28:	40021c00 	.word	0x40021c00
 8006a2c:	40022000 	.word	0x40022000
 8006a30:	40022400 	.word	0x40022400
 8006a34:	40013c00 	.word	0x40013c00

08006a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	e001      	b.n	8006a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	807b      	strh	r3, [r7, #2]
 8006a74:	4613      	mov	r3, r2
 8006a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a78:	787b      	ldrb	r3, [r7, #1]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a7e:	887a      	ldrh	r2, [r7, #2]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006a84:	e003      	b.n	8006a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006a86:	887b      	ldrh	r3, [r7, #2]
 8006a88:	041a      	lsls	r2, r3, #16
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	619a      	str	r2, [r3, #24]
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006aac:	887a      	ldrh	r2, [r7, #2]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	041a      	lsls	r2, r3, #16
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	43d9      	mvns	r1, r3
 8006ab8:	887b      	ldrh	r3, [r7, #2]
 8006aba:	400b      	ands	r3, r1
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	619a      	str	r2, [r3, #24]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e29b      	b.n	800701e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8087 	beq.w	8006c02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006af4:	4b96      	ldr	r3, [pc, #600]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 030c 	and.w	r3, r3, #12
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d00c      	beq.n	8006b1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b00:	4b93      	ldr	r3, [pc, #588]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 030c 	and.w	r3, r3, #12
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d112      	bne.n	8006b32 <HAL_RCC_OscConfig+0x62>
 8006b0c:	4b90      	ldr	r3, [pc, #576]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b18:	d10b      	bne.n	8006b32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d06c      	beq.n	8006c00 <HAL_RCC_OscConfig+0x130>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d168      	bne.n	8006c00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e275      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCC_OscConfig+0x7a>
 8006b3c:	4b84      	ldr	r3, [pc, #528]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a83      	ldr	r2, [pc, #524]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	e02e      	b.n	8006ba8 <HAL_RCC_OscConfig+0xd8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10c      	bne.n	8006b6c <HAL_RCC_OscConfig+0x9c>
 8006b52:	4b7f      	ldr	r3, [pc, #508]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7e      	ldr	r2, [pc, #504]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a7b      	ldr	r2, [pc, #492]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e01d      	b.n	8006ba8 <HAL_RCC_OscConfig+0xd8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCC_OscConfig+0xc0>
 8006b76:	4b76      	ldr	r3, [pc, #472]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a75      	ldr	r2, [pc, #468]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	4b73      	ldr	r3, [pc, #460]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a72      	ldr	r2, [pc, #456]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	e00b      	b.n	8006ba8 <HAL_RCC_OscConfig+0xd8>
 8006b90:	4b6f      	ldr	r3, [pc, #444]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a6e      	ldr	r2, [pc, #440]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a6b      	ldr	r2, [pc, #428]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d013      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7ff fca8 	bl	8006504 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7ff fca4 	bl	8006504 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	@ 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e229      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bca:	4b61      	ldr	r3, [pc, #388]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <HAL_RCC_OscConfig+0xe8>
 8006bd6:	e014      	b.n	8006c02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd8:	f7ff fc94 	bl	8006504 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be0:	f7ff fc90 	bl	8006504 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b64      	cmp	r3, #100	@ 0x64
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e215      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bf2:	4b57      	ldr	r3, [pc, #348]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0x110>
 8006bfe:	e000      	b.n	8006c02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d069      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c0e:	4b50      	ldr	r3, [pc, #320]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 030c 	and.w	r3, r3, #12
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00b      	beq.n	8006c32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 030c 	and.w	r3, r3, #12
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d11c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x190>
 8006c26:	4b4a      	ldr	r3, [pc, #296]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d116      	bne.n	8006c60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c32:	4b47      	ldr	r3, [pc, #284]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <HAL_RCC_OscConfig+0x17a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d001      	beq.n	8006c4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e1e9      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4a:	4b41      	ldr	r3, [pc, #260]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	493d      	ldr	r1, [pc, #244]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c5e:	e040      	b.n	8006ce2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d023      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c68:	4b39      	ldr	r3, [pc, #228]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a38      	ldr	r2, [pc, #224]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c74:	f7ff fc46 	bl	8006504 <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c7c:	f7ff fc42 	bl	8006504 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e1c7      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c8e:	4b30      	ldr	r3, [pc, #192]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f0      	beq.n	8006c7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4929      	ldr	r1, [pc, #164]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	600b      	str	r3, [r1, #0]
 8006cae:	e018      	b.n	8006ce2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cb0:	4b27      	ldr	r3, [pc, #156]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a26      	ldr	r2, [pc, #152]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbc:	f7ff fc22 	bl	8006504 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc4:	f7ff fc1e 	bl	8006504 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e1a3      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d038      	beq.n	8006d60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d019      	beq.n	8006d2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cf6:	4b16      	ldr	r3, [pc, #88]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfa:	4a15      	ldr	r2, [pc, #84]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006cfc:	f043 0301 	orr.w	r3, r3, #1
 8006d00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d02:	f7ff fbff 	bl	8006504 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d0a:	f7ff fbfb 	bl	8006504 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e180      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x23a>
 8006d28:	e01a      	b.n	8006d60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d2a:	4b09      	ldr	r3, [pc, #36]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d2e:	4a08      	ldr	r2, [pc, #32]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d36:	f7ff fbe5 	bl	8006504 <HAL_GetTick>
 8006d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d3c:	e00a      	b.n	8006d54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d3e:	f7ff fbe1 	bl	8006504 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d903      	bls.n	8006d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e166      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
 8006d50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d54:	4b92      	ldr	r3, [pc, #584]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1ee      	bne.n	8006d3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80a4 	beq.w	8006eb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d6e:	4b8c      	ldr	r3, [pc, #560]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10d      	bne.n	8006d96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d7a:	4b89      	ldr	r3, [pc, #548]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	4a88      	ldr	r2, [pc, #544]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d86:	4b86      	ldr	r3, [pc, #536]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d92:	2301      	movs	r3, #1
 8006d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d96:	4b83      	ldr	r3, [pc, #524]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d118      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006da2:	4b80      	ldr	r3, [pc, #512]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d4>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a7f      	ldr	r2, [pc, #508]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d4>)
 8006da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dae:	f7ff fba9 	bl	8006504 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db6:	f7ff fba5 	bl	8006504 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b64      	cmp	r3, #100	@ 0x64
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e12a      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dc8:	4b76      	ldr	r3, [pc, #472]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0f0      	beq.n	8006db6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d106      	bne.n	8006dea <HAL_RCC_OscConfig+0x31a>
 8006ddc:	4b70      	ldr	r3, [pc, #448]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de0:	4a6f      	ldr	r2, [pc, #444]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006de8:	e02d      	b.n	8006e46 <HAL_RCC_OscConfig+0x376>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10c      	bne.n	8006e0c <HAL_RCC_OscConfig+0x33c>
 8006df2:	4b6b      	ldr	r3, [pc, #428]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df6:	4a6a      	ldr	r2, [pc, #424]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006df8:	f023 0301 	bic.w	r3, r3, #1
 8006dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dfe:	4b68      	ldr	r3, [pc, #416]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e02:	4a67      	ldr	r2, [pc, #412]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e04:	f023 0304 	bic.w	r3, r3, #4
 8006e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e0a:	e01c      	b.n	8006e46 <HAL_RCC_OscConfig+0x376>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b05      	cmp	r3, #5
 8006e12:	d10c      	bne.n	8006e2e <HAL_RCC_OscConfig+0x35e>
 8006e14:	4b62      	ldr	r3, [pc, #392]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e18:	4a61      	ldr	r2, [pc, #388]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e1a:	f043 0304 	orr.w	r3, r3, #4
 8006e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e20:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e24:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e26:	f043 0301 	orr.w	r3, r3, #1
 8006e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e2c:	e00b      	b.n	8006e46 <HAL_RCC_OscConfig+0x376>
 8006e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e32:	4a5b      	ldr	r2, [pc, #364]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e3a:	4b59      	ldr	r3, [pc, #356]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3e:	4a58      	ldr	r2, [pc, #352]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e40:	f023 0304 	bic.w	r3, r3, #4
 8006e44:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d015      	beq.n	8006e7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4e:	f7ff fb59 	bl	8006504 <HAL_GetTick>
 8006e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e54:	e00a      	b.n	8006e6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e56:	f7ff fb55 	bl	8006504 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e0d8      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ee      	beq.n	8006e56 <HAL_RCC_OscConfig+0x386>
 8006e78:	e014      	b.n	8006ea4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7a:	f7ff fb43 	bl	8006504 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e80:	e00a      	b.n	8006e98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e82:	f7ff fb3f 	bl	8006504 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e0c2      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e98:	4b41      	ldr	r3, [pc, #260]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1ee      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d105      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eae:	4a3c      	ldr	r2, [pc, #240]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eb4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 80ae 	beq.w	800701c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ec0:	4b37      	ldr	r3, [pc, #220]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 030c 	and.w	r3, r3, #12
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d06d      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d14b      	bne.n	8006f6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed4:	4b32      	ldr	r3, [pc, #200]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a31      	ldr	r2, [pc, #196]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7ff fb10 	bl	8006504 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee8:	f7ff fb0c 	bl	8006504 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e091      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efa:	4b29      	ldr	r3, [pc, #164]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	019b      	lsls	r3, r3, #6
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f28:	061b      	lsls	r3, r3, #24
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f30:	071b      	lsls	r3, r3, #28
 8006f32:	491b      	ldr	r1, [pc, #108]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f38:	4b19      	ldr	r3, [pc, #100]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a18      	ldr	r2, [pc, #96]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7ff fade 	bl	8006504 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4c:	f7ff fada 	bl	8006504 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e05f      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f5e:	4b10      	ldr	r3, [pc, #64]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0x47c>
 8006f6a:	e057      	b.n	800701c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a0b      	ldr	r2, [pc, #44]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7ff fac4 	bl	8006504 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f80:	f7ff fac0 	bl	8006504 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e045      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f92:	4b03      	ldr	r3, [pc, #12]	@ (8006fa0 <HAL_RCC_OscConfig+0x4d0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f0      	bne.n	8006f80 <HAL_RCC_OscConfig+0x4b0>
 8006f9e:	e03d      	b.n	800701c <HAL_RCC_OscConfig+0x54c>
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8007028 <HAL_RCC_OscConfig+0x558>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d030      	beq.n	8007018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d129      	bne.n	8007018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d122      	bne.n	8007018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fd8:	4013      	ands	r3, r2
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d119      	bne.n	8007018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	085b      	lsrs	r3, r3, #1
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d10f      	bne.n	8007018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007002:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007004:	429a      	cmp	r2, r3
 8007006:	d107      	bne.n	8007018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40023800 	.word	0x40023800

0800702c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e0d0      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007044:	4b6a      	ldr	r3, [pc, #424]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 030f 	and.w	r3, r3, #15
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d910      	bls.n	8007074 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007052:	4b67      	ldr	r3, [pc, #412]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f023 020f 	bic.w	r2, r3, #15
 800705a:	4965      	ldr	r1, [pc, #404]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	4313      	orrs	r3, r2
 8007060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007062:	4b63      	ldr	r3, [pc, #396]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d001      	beq.n	8007074 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0b8      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d020      	beq.n	80070c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800708c:	4b59      	ldr	r3, [pc, #356]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4a58      	ldr	r2, [pc, #352]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 8007092:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007096:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070a4:	4b53      	ldr	r3, [pc, #332]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4a52      	ldr	r2, [pc, #328]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80070aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80070ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b0:	4b50      	ldr	r3, [pc, #320]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	494d      	ldr	r1, [pc, #308]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d040      	beq.n	8007150 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d107      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d6:	4b47      	ldr	r3, [pc, #284]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d115      	bne.n	800710e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e07f      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d107      	bne.n	80070fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ee:	4b41      	ldr	r3, [pc, #260]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e073      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070fe:	4b3d      	ldr	r3, [pc, #244]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e06b      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800710e:	4b39      	ldr	r3, [pc, #228]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f023 0203 	bic.w	r2, r3, #3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4936      	ldr	r1, [pc, #216]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 800711c:	4313      	orrs	r3, r2
 800711e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007120:	f7ff f9f0 	bl	8006504 <HAL_GetTick>
 8007124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007126:	e00a      	b.n	800713e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007128:	f7ff f9ec 	bl	8006504 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007136:	4293      	cmp	r3, r2
 8007138:	d901      	bls.n	800713e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e053      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800713e:	4b2d      	ldr	r3, [pc, #180]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 020c 	and.w	r2, r3, #12
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	429a      	cmp	r2, r3
 800714e:	d1eb      	bne.n	8007128 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007150:	4b27      	ldr	r3, [pc, #156]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d210      	bcs.n	8007180 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800715e:	4b24      	ldr	r3, [pc, #144]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 020f 	bic.w	r2, r3, #15
 8007166:	4922      	ldr	r1, [pc, #136]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	4313      	orrs	r3, r2
 800716c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800716e:	4b20      	ldr	r3, [pc, #128]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d001      	beq.n	8007180 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e032      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800718c:	4b19      	ldr	r3, [pc, #100]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	4916      	ldr	r1, [pc, #88]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071aa:	4b12      	ldr	r3, [pc, #72]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	490e      	ldr	r1, [pc, #56]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071be:	f000 f821 	bl	8007204 <HAL_RCC_GetSysClockFreq>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c8>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	091b      	lsrs	r3, r3, #4
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	490a      	ldr	r1, [pc, #40]	@ (80071f8 <HAL_RCC_ClockConfig+0x1cc>)
 80071d0:	5ccb      	ldrb	r3, [r1, r3]
 80071d2:	fa22 f303 	lsr.w	r3, r2, r3
 80071d6:	4a09      	ldr	r2, [pc, #36]	@ (80071fc <HAL_RCC_ClockConfig+0x1d0>)
 80071d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071da:	4b09      	ldr	r3, [pc, #36]	@ (8007200 <HAL_RCC_ClockConfig+0x1d4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff f8a8 	bl	8006334 <HAL_InitTick>

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40023c00 	.word	0x40023c00
 80071f4:	40023800 	.word	0x40023800
 80071f8:	08007f5c 	.word	0x08007f5c
 80071fc:	20000010 	.word	0x20000010
 8007200:	20000014 	.word	0x20000014

08007204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007208:	b094      	sub	sp, #80	@ 0x50
 800720a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007210:	2300      	movs	r3, #0
 8007212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007214:	2300      	movs	r3, #0
 8007216:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800721c:	4b79      	ldr	r3, [pc, #484]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 030c 	and.w	r3, r3, #12
 8007224:	2b08      	cmp	r3, #8
 8007226:	d00d      	beq.n	8007244 <HAL_RCC_GetSysClockFreq+0x40>
 8007228:	2b08      	cmp	r3, #8
 800722a:	f200 80e1 	bhi.w	80073f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0x34>
 8007232:	2b04      	cmp	r3, #4
 8007234:	d003      	beq.n	800723e <HAL_RCC_GetSysClockFreq+0x3a>
 8007236:	e0db      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007238:	4b73      	ldr	r3, [pc, #460]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x204>)
 800723a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800723c:	e0db      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800723e:	4b72      	ldr	r3, [pc, #456]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x204>)
 8007240:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007242:	e0d8      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007244:	4b6f      	ldr	r3, [pc, #444]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800724c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800724e:	4b6d      	ldr	r3, [pc, #436]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d063      	beq.n	8007322 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725a:	4b6a      	ldr	r3, [pc, #424]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	099b      	lsrs	r3, r3, #6
 8007260:	2200      	movs	r2, #0
 8007262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007264:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726c:	633b      	str	r3, [r7, #48]	@ 0x30
 800726e:	2300      	movs	r3, #0
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
 8007272:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007276:	4622      	mov	r2, r4
 8007278:	462b      	mov	r3, r5
 800727a:	f04f 0000 	mov.w	r0, #0
 800727e:	f04f 0100 	mov.w	r1, #0
 8007282:	0159      	lsls	r1, r3, #5
 8007284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007288:	0150      	lsls	r0, r2, #5
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4621      	mov	r1, r4
 8007290:	1a51      	subs	r1, r2, r1
 8007292:	6139      	str	r1, [r7, #16]
 8007294:	4629      	mov	r1, r5
 8007296:	eb63 0301 	sbc.w	r3, r3, r1
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072a8:	4659      	mov	r1, fp
 80072aa:	018b      	lsls	r3, r1, #6
 80072ac:	4651      	mov	r1, sl
 80072ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072b2:	4651      	mov	r1, sl
 80072b4:	018a      	lsls	r2, r1, #6
 80072b6:	4651      	mov	r1, sl
 80072b8:	ebb2 0801 	subs.w	r8, r2, r1
 80072bc:	4659      	mov	r1, fp
 80072be:	eb63 0901 	sbc.w	r9, r3, r1
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072d6:	4690      	mov	r8, r2
 80072d8:	4699      	mov	r9, r3
 80072da:	4623      	mov	r3, r4
 80072dc:	eb18 0303 	adds.w	r3, r8, r3
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	462b      	mov	r3, r5
 80072e4:	eb49 0303 	adc.w	r3, r9, r3
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072f6:	4629      	mov	r1, r5
 80072f8:	028b      	lsls	r3, r1, #10
 80072fa:	4621      	mov	r1, r4
 80072fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007300:	4621      	mov	r1, r4
 8007302:	028a      	lsls	r2, r1, #10
 8007304:	4610      	mov	r0, r2
 8007306:	4619      	mov	r1, r3
 8007308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800730a:	2200      	movs	r2, #0
 800730c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800730e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007314:	f7f8 ffde 	bl	80002d4 <__aeabi_uldivmod>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4613      	mov	r3, r2
 800731e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007320:	e058      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007322:	4b38      	ldr	r3, [pc, #224]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	099b      	lsrs	r3, r3, #6
 8007328:	2200      	movs	r2, #0
 800732a:	4618      	mov	r0, r3
 800732c:	4611      	mov	r1, r2
 800732e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007332:	623b      	str	r3, [r7, #32]
 8007334:	2300      	movs	r3, #0
 8007336:	627b      	str	r3, [r7, #36]	@ 0x24
 8007338:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800733c:	4642      	mov	r2, r8
 800733e:	464b      	mov	r3, r9
 8007340:	f04f 0000 	mov.w	r0, #0
 8007344:	f04f 0100 	mov.w	r1, #0
 8007348:	0159      	lsls	r1, r3, #5
 800734a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800734e:	0150      	lsls	r0, r2, #5
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4641      	mov	r1, r8
 8007356:	ebb2 0a01 	subs.w	sl, r2, r1
 800735a:	4649      	mov	r1, r9
 800735c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800736c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007370:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007374:	ebb2 040a 	subs.w	r4, r2, sl
 8007378:	eb63 050b 	sbc.w	r5, r3, fp
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	00eb      	lsls	r3, r5, #3
 8007386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800738a:	00e2      	lsls	r2, r4, #3
 800738c:	4614      	mov	r4, r2
 800738e:	461d      	mov	r5, r3
 8007390:	4643      	mov	r3, r8
 8007392:	18e3      	adds	r3, r4, r3
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	464b      	mov	r3, r9
 8007398:	eb45 0303 	adc.w	r3, r5, r3
 800739c:	607b      	str	r3, [r7, #4]
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073aa:	4629      	mov	r1, r5
 80073ac:	028b      	lsls	r3, r1, #10
 80073ae:	4621      	mov	r1, r4
 80073b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073b4:	4621      	mov	r1, r4
 80073b6:	028a      	lsls	r2, r1, #10
 80073b8:	4610      	mov	r0, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073be:	2200      	movs	r2, #0
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	61fa      	str	r2, [r7, #28]
 80073c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073c8:	f7f8 ff84 	bl	80002d4 <__aeabi_uldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4613      	mov	r3, r2
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80073d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	0c1b      	lsrs	r3, r3, #16
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	3301      	adds	r3, #1
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80073e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073ee:	e002      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x204>)
 80073f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3750      	adds	r7, #80	@ 0x50
 80073fc:	46bd      	mov	sp, r7
 80073fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007402:	bf00      	nop
 8007404:	40023800 	.word	0x40023800
 8007408:	00f42400 	.word	0x00f42400

0800740c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007410:	4b03      	ldr	r3, [pc, #12]	@ (8007420 <HAL_RCC_GetHCLKFreq+0x14>)
 8007412:	681b      	ldr	r3, [r3, #0]
}
 8007414:	4618      	mov	r0, r3
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000010 	.word	0x20000010

08007424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007428:	f7ff fff0 	bl	800740c <HAL_RCC_GetHCLKFreq>
 800742c:	4602      	mov	r2, r0
 800742e:	4b05      	ldr	r3, [pc, #20]	@ (8007444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	0a9b      	lsrs	r3, r3, #10
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	4903      	ldr	r1, [pc, #12]	@ (8007448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800743a:	5ccb      	ldrb	r3, [r1, r3]
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007440:	4618      	mov	r0, r3
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40023800 	.word	0x40023800
 8007448:	08007f6c 	.word	0x08007f6c

0800744c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	220f      	movs	r2, #15
 800745a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800745c:	4b12      	ldr	r3, [pc, #72]	@ (80074a8 <HAL_RCC_GetClockConfig+0x5c>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 0203 	and.w	r2, r3, #3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007468:	4b0f      	ldr	r3, [pc, #60]	@ (80074a8 <HAL_RCC_GetClockConfig+0x5c>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007474:	4b0c      	ldr	r3, [pc, #48]	@ (80074a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007480:	4b09      	ldr	r3, [pc, #36]	@ (80074a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800748e:	4b07      	ldr	r3, [pc, #28]	@ (80074ac <HAL_RCC_GetClockConfig+0x60>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 020f 	and.w	r2, r3, #15
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	601a      	str	r2, [r3, #0]
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40023800 	.word	0x40023800
 80074ac:	40023c00 	.word	0x40023c00

080074b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e049      	b.n	8007556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f841 	bl	800755e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f000 f9f2 	bl	80078d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
	...

08007574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d001      	beq.n	800758c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e054      	b.n	8007636 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a26      	ldr	r2, [pc, #152]	@ (8007644 <HAL_TIM_Base_Start_IT+0xd0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d022      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x80>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b6:	d01d      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x80>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a22      	ldr	r2, [pc, #136]	@ (8007648 <HAL_TIM_Base_Start_IT+0xd4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d018      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x80>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a21      	ldr	r2, [pc, #132]	@ (800764c <HAL_TIM_Base_Start_IT+0xd8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d013      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x80>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007650 <HAL_TIM_Base_Start_IT+0xdc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00e      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x80>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a1e      	ldr	r2, [pc, #120]	@ (8007654 <HAL_TIM_Base_Start_IT+0xe0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d009      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x80>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007658 <HAL_TIM_Base_Start_IT+0xe4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x80>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1b      	ldr	r2, [pc, #108]	@ (800765c <HAL_TIM_Base_Start_IT+0xe8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d115      	bne.n	8007620 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	4b19      	ldr	r3, [pc, #100]	@ (8007660 <HAL_TIM_Base_Start_IT+0xec>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b06      	cmp	r3, #6
 8007604:	d015      	beq.n	8007632 <HAL_TIM_Base_Start_IT+0xbe>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800760c:	d011      	beq.n	8007632 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0201 	orr.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761e:	e008      	b.n	8007632 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0201 	orr.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	e000      	b.n	8007634 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40010000 	.word	0x40010000
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40000c00 	.word	0x40000c00
 8007654:	40010400 	.word	0x40010400
 8007658:	40014000 	.word	0x40014000
 800765c:	40001800 	.word	0x40001800
 8007660:	00010007 	.word	0x00010007

08007664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d020      	beq.n	80076c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01b      	beq.n	80076c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0202 	mvn.w	r2, #2
 8007698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8f3 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 80076b4:	e005      	b.n	80076c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f8e5 	bl	8007886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f8f6 	bl	80078ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d020      	beq.n	8007714 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01b      	beq.n	8007714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0204 	mvn.w	r2, #4
 80076e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2202      	movs	r2, #2
 80076ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f8cd 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 8007700:	e005      	b.n	800770e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f8bf 	bl	8007886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f8d0 	bl	80078ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d020      	beq.n	8007760 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01b      	beq.n	8007760 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0208 	mvn.w	r2, #8
 8007730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2204      	movs	r2, #4
 8007736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f8a7 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 800774c:	e005      	b.n	800775a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f899 	bl	8007886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f8aa 	bl	80078ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b00      	cmp	r3, #0
 8007768:	d020      	beq.n	80077ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f003 0310 	and.w	r3, r3, #16
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01b      	beq.n	80077ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f06f 0210 	mvn.w	r2, #16
 800777c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2208      	movs	r2, #8
 8007782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f881 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 8007798:	e005      	b.n	80077a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f873 	bl	8007886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f884 	bl	80078ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00c      	beq.n	80077d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d007      	beq.n	80077d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0201 	mvn.w	r2, #1
 80077c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f851 	bl	8007872 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00c      	beq.n	80077fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80077f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f923 	bl	8007a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00c      	beq.n	8007822 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800781a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f91b 	bl	8007a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00c      	beq.n	8007846 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800783e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f83e 	bl	80078c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00c      	beq.n	800786a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f06f 0220 	mvn.w	r2, #32
 8007862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f8e3 	bl	8007a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
	...

080078d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a46      	ldr	r2, [pc, #280]	@ (8007a04 <TIM_Base_SetConfig+0x12c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f6:	d00f      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a43      	ldr	r2, [pc, #268]	@ (8007a08 <TIM_Base_SetConfig+0x130>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00b      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a42      	ldr	r2, [pc, #264]	@ (8007a0c <TIM_Base_SetConfig+0x134>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d007      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a41      	ldr	r2, [pc, #260]	@ (8007a10 <TIM_Base_SetConfig+0x138>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a40      	ldr	r2, [pc, #256]	@ (8007a14 <TIM_Base_SetConfig+0x13c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d108      	bne.n	800792a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a35      	ldr	r2, [pc, #212]	@ (8007a04 <TIM_Base_SetConfig+0x12c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d02b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007938:	d027      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a32      	ldr	r2, [pc, #200]	@ (8007a08 <TIM_Base_SetConfig+0x130>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d023      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a31      	ldr	r2, [pc, #196]	@ (8007a0c <TIM_Base_SetConfig+0x134>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01f      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a30      	ldr	r2, [pc, #192]	@ (8007a10 <TIM_Base_SetConfig+0x138>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d01b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a2f      	ldr	r2, [pc, #188]	@ (8007a14 <TIM_Base_SetConfig+0x13c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d017      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a2e      	ldr	r2, [pc, #184]	@ (8007a18 <TIM_Base_SetConfig+0x140>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2d      	ldr	r2, [pc, #180]	@ (8007a1c <TIM_Base_SetConfig+0x144>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a2c      	ldr	r2, [pc, #176]	@ (8007a20 <TIM_Base_SetConfig+0x148>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a2b      	ldr	r2, [pc, #172]	@ (8007a24 <TIM_Base_SetConfig+0x14c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a2a      	ldr	r2, [pc, #168]	@ (8007a28 <TIM_Base_SetConfig+0x150>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a29      	ldr	r2, [pc, #164]	@ (8007a2c <TIM_Base_SetConfig+0x154>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a10      	ldr	r2, [pc, #64]	@ (8007a04 <TIM_Base_SetConfig+0x12c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d003      	beq.n	80079d0 <TIM_Base_SetConfig+0xf8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a12      	ldr	r2, [pc, #72]	@ (8007a14 <TIM_Base_SetConfig+0x13c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d103      	bne.n	80079d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d105      	bne.n	80079f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f023 0201 	bic.w	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	611a      	str	r2, [r3, #16]
  }
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40010400 	.word	0x40010400
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	40014400 	.word	0x40014400
 8007a20:	40014800 	.word	0x40014800
 8007a24:	40001800 	.word	0x40001800
 8007a28:	40001c00 	.word	0x40001c00
 8007a2c:	40002000 	.word	0x40002000

08007a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <memcmp>:
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	3901      	subs	r1, #1
 8007a70:	4402      	add	r2, r0
 8007a72:	4290      	cmp	r0, r2
 8007a74:	d101      	bne.n	8007a7a <memcmp+0xe>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e005      	b.n	8007a86 <memcmp+0x1a>
 8007a7a:	7803      	ldrb	r3, [r0, #0]
 8007a7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	d001      	beq.n	8007a88 <memcmp+0x1c>
 8007a84:	1b18      	subs	r0, r3, r4
 8007a86:	bd10      	pop	{r4, pc}
 8007a88:	3001      	adds	r0, #1
 8007a8a:	e7f2      	b.n	8007a72 <memcmp+0x6>

08007a8c <memset>:
 8007a8c:	4402      	add	r2, r0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d100      	bne.n	8007a96 <memset+0xa>
 8007a94:	4770      	bx	lr
 8007a96:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9a:	e7f9      	b.n	8007a90 <memset+0x4>

08007a9c <__libc_init_array>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ad4 <__libc_init_array+0x38>)
 8007aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ad8 <__libc_init_array+0x3c>)
 8007aa2:	1b64      	subs	r4, r4, r5
 8007aa4:	10a4      	asrs	r4, r4, #2
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	42a6      	cmp	r6, r4
 8007aaa:	d109      	bne.n	8007ac0 <__libc_init_array+0x24>
 8007aac:	4d0b      	ldr	r5, [pc, #44]	@ (8007adc <__libc_init_array+0x40>)
 8007aae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ae0 <__libc_init_array+0x44>)
 8007ab0:	f000 f826 	bl	8007b00 <_init>
 8007ab4:	1b64      	subs	r4, r4, r5
 8007ab6:	10a4      	asrs	r4, r4, #2
 8007ab8:	2600      	movs	r6, #0
 8007aba:	42a6      	cmp	r6, r4
 8007abc:	d105      	bne.n	8007aca <__libc_init_array+0x2e>
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac4:	4798      	blx	r3
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	e7ee      	b.n	8007aa8 <__libc_init_array+0xc>
 8007aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ace:	4798      	blx	r3
 8007ad0:	3601      	adds	r6, #1
 8007ad2:	e7f2      	b.n	8007aba <__libc_init_array+0x1e>
 8007ad4:	08007f7c 	.word	0x08007f7c
 8007ad8:	08007f7c 	.word	0x08007f7c
 8007adc:	08007f7c 	.word	0x08007f7c
 8007ae0:	08007f80 	.word	0x08007f80

08007ae4 <memcpy>:
 8007ae4:	440a      	add	r2, r1
 8007ae6:	4291      	cmp	r1, r2
 8007ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aec:	d100      	bne.n	8007af0 <memcpy+0xc>
 8007aee:	4770      	bx	lr
 8007af0:	b510      	push	{r4, lr}
 8007af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007afa:	4291      	cmp	r1, r2
 8007afc:	d1f9      	bne.n	8007af2 <memcpy+0xe>
 8007afe:	bd10      	pop	{r4, pc}

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
