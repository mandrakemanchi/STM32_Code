
MPU6050_Calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b28  08005b28  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b28  08005b28  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b28  08005b28  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b2c  08005b2c  00006b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005b30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08005b3c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08005b3c  00007164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c08e  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f32  00000000  00000000  000130c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00014ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a77  00000000  00000000  00015d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001792d  00000000  00000000  000167cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6e0  00000000  00000000  0002e0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008980e  00000000  00000000  0003d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6fea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  000c7030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ca974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ae4 	.word	0x08005ae4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005ae4 	.word	0x08005ae4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2f>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80004d0:	bf24      	itt	cs
 80004d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80004d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80004da:	d90d      	bls.n	80004f8 <__aeabi_d2f+0x30>
 80004dc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80004ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f0:	bf08      	it	eq
 80004f2:	f020 0001 	biceq.w	r0, r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80004fc:	d121      	bne.n	8000542 <__aeabi_d2f+0x7a>
 80004fe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000502:	bfbc      	itt	lt
 8000504:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000508:	4770      	bxlt	lr
 800050a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800050e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000512:	f1c2 0218 	rsb	r2, r2, #24
 8000516:	f1c2 0c20 	rsb	ip, r2, #32
 800051a:	fa10 f30c 	lsls.w	r3, r0, ip
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	bf18      	it	ne
 8000524:	f040 0001 	orrne.w	r0, r0, #1
 8000528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000534:	ea40 000c 	orr.w	r0, r0, ip
 8000538:	fa23 f302 	lsr.w	r3, r3, r2
 800053c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000540:	e7cc      	b.n	80004dc <__aeabi_d2f+0x14>
 8000542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000546:	d107      	bne.n	8000558 <__aeabi_d2f+0x90>
 8000548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800054c:	bf1e      	ittt	ne
 800054e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000552:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000556:	4770      	bxne	lr
 8000558:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800055c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000560:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__aeabi_frsub>:
 8000568:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800056c:	e002      	b.n	8000574 <__addsf3>
 800056e:	bf00      	nop

08000570 <__aeabi_fsub>:
 8000570:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000574 <__addsf3>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	bf1f      	itttt	ne
 8000578:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800057c:	ea92 0f03 	teqne	r2, r3
 8000580:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000584:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000588:	d06a      	beq.n	8000660 <__addsf3+0xec>
 800058a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000592:	bfc1      	itttt	gt
 8000594:	18d2      	addgt	r2, r2, r3
 8000596:	4041      	eorgt	r1, r0
 8000598:	4048      	eorgt	r0, r1
 800059a:	4041      	eorgt	r1, r0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	2b19      	cmp	r3, #25
 80005a2:	bf88      	it	hi
 80005a4:	4770      	bxhi	lr
 80005a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005b2:	bf18      	it	ne
 80005b4:	4240      	negne	r0, r0
 80005b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4249      	negne	r1, r1
 80005c6:	ea92 0f03 	teq	r2, r3
 80005ca:	d03f      	beq.n	800064c <__addsf3+0xd8>
 80005cc:	f1a2 0201 	sub.w	r2, r2, #1
 80005d0:	fa41 fc03 	asr.w	ip, r1, r3
 80005d4:	eb10 000c 	adds.w	r0, r0, ip
 80005d8:	f1c3 0320 	rsb	r3, r3, #32
 80005dc:	fa01 f103 	lsl.w	r1, r1, r3
 80005e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80005e4:	d502      	bpl.n	80005ec <__addsf3+0x78>
 80005e6:	4249      	negs	r1, r1
 80005e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80005f0:	d313      	bcc.n	800061a <__addsf3+0xa6>
 80005f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005f6:	d306      	bcc.n	8000606 <__addsf3+0x92>
 80005f8:	0840      	lsrs	r0, r0, #1
 80005fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fe:	f102 0201 	add.w	r2, r2, #1
 8000602:	2afe      	cmp	r2, #254	@ 0xfe
 8000604:	d251      	bcs.n	80006aa <__addsf3+0x136>
 8000606:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800060a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060e:	bf08      	it	eq
 8000610:	f020 0001 	biceq.w	r0, r0, #1
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	4770      	bx	lr
 800061a:	0049      	lsls	r1, r1, #1
 800061c:	eb40 0000 	adc.w	r0, r0, r0
 8000620:	3a01      	subs	r2, #1
 8000622:	bf28      	it	cs
 8000624:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000628:	d2ed      	bcs.n	8000606 <__addsf3+0x92>
 800062a:	fab0 fc80 	clz	ip, r0
 800062e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000632:	ebb2 020c 	subs.w	r2, r2, ip
 8000636:	fa00 f00c 	lsl.w	r0, r0, ip
 800063a:	bfaa      	itet	ge
 800063c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000640:	4252      	neglt	r2, r2
 8000642:	4318      	orrge	r0, r3
 8000644:	bfbc      	itt	lt
 8000646:	40d0      	lsrlt	r0, r2
 8000648:	4318      	orrlt	r0, r3
 800064a:	4770      	bx	lr
 800064c:	f092 0f00 	teq	r2, #0
 8000650:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000654:	bf06      	itte	eq
 8000656:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800065a:	3201      	addeq	r2, #1
 800065c:	3b01      	subne	r3, #1
 800065e:	e7b5      	b.n	80005cc <__addsf3+0x58>
 8000660:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000668:	bf18      	it	ne
 800066a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066e:	d021      	beq.n	80006b4 <__addsf3+0x140>
 8000670:	ea92 0f03 	teq	r2, r3
 8000674:	d004      	beq.n	8000680 <__addsf3+0x10c>
 8000676:	f092 0f00 	teq	r2, #0
 800067a:	bf08      	it	eq
 800067c:	4608      	moveq	r0, r1
 800067e:	4770      	bx	lr
 8000680:	ea90 0f01 	teq	r0, r1
 8000684:	bf1c      	itt	ne
 8000686:	2000      	movne	r0, #0
 8000688:	4770      	bxne	lr
 800068a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800068e:	d104      	bne.n	800069a <__addsf3+0x126>
 8000690:	0040      	lsls	r0, r0, #1
 8000692:	bf28      	it	cs
 8000694:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000698:	4770      	bx	lr
 800069a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800069e:	bf3c      	itt	cc
 80006a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006a4:	4770      	bxcc	lr
 80006a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006b2:	4770      	bx	lr
 80006b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b8:	bf16      	itet	ne
 80006ba:	4608      	movne	r0, r1
 80006bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006c0:	4601      	movne	r1, r0
 80006c2:	0242      	lsls	r2, r0, #9
 80006c4:	bf06      	itte	eq
 80006c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ca:	ea90 0f01 	teqeq	r0, r1
 80006ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80006d2:	4770      	bx	lr

080006d4 <__aeabi_ui2f>:
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e004      	b.n	80006e4 <__aeabi_i2f+0x8>
 80006da:	bf00      	nop

080006dc <__aeabi_i2f>:
 80006dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	ea5f 0c00 	movs.w	ip, r0
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80006f0:	4601      	mov	r1, r0
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	e01c      	b.n	8000732 <__aeabi_l2f+0x2a>

080006f8 <__aeabi_ul2f>:
 80006f8:	ea50 0201 	orrs.w	r2, r0, r1
 80006fc:	bf08      	it	eq
 80006fe:	4770      	bxeq	lr
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e00a      	b.n	800071c <__aeabi_l2f+0x14>
 8000706:	bf00      	nop

08000708 <__aeabi_l2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000714:	d502      	bpl.n	800071c <__aeabi_l2f+0x14>
 8000716:	4240      	negs	r0, r0
 8000718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800071c:	ea5f 0c01 	movs.w	ip, r1
 8000720:	bf02      	ittt	eq
 8000722:	4684      	moveq	ip, r0
 8000724:	4601      	moveq	r1, r0
 8000726:	2000      	moveq	r0, #0
 8000728:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800072c:	bf08      	it	eq
 800072e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000732:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000736:	fabc f28c 	clz	r2, ip
 800073a:	3a08      	subs	r2, #8
 800073c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000740:	db10      	blt.n	8000764 <__aeabi_l2f+0x5c>
 8000742:	fa01 fc02 	lsl.w	ip, r1, r2
 8000746:	4463      	add	r3, ip
 8000748:	fa00 fc02 	lsl.w	ip, r0, r2
 800074c:	f1c2 0220 	rsb	r2, r2, #32
 8000750:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000754:	fa20 f202 	lsr.w	r2, r0, r2
 8000758:	eb43 0002 	adc.w	r0, r3, r2
 800075c:	bf08      	it	eq
 800075e:	f020 0001 	biceq.w	r0, r0, #1
 8000762:	4770      	bx	lr
 8000764:	f102 0220 	add.w	r2, r2, #32
 8000768:	fa01 fc02 	lsl.w	ip, r1, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000774:	fa21 f202 	lsr.w	r2, r1, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000782:	4770      	bx	lr

08000784 <__aeabi_fmul>:
 8000784:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800078c:	bf1e      	ittt	ne
 800078e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000792:	ea92 0f0c 	teqne	r2, ip
 8000796:	ea93 0f0c 	teqne	r3, ip
 800079a:	d06f      	beq.n	800087c <__aeabi_fmul+0xf8>
 800079c:	441a      	add	r2, r3
 800079e:	ea80 0c01 	eor.w	ip, r0, r1
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	bf18      	it	ne
 80007a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007aa:	d01e      	beq.n	80007ea <__aeabi_fmul+0x66>
 80007ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b8:	fba0 3101 	umull	r3, r1, r0, r1
 80007bc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80007c0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80007c4:	bf3e      	ittt	cc
 80007c6:	0049      	lslcc	r1, r1, #1
 80007c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007cc:	005b      	lslcc	r3, r3, #1
 80007ce:	ea40 0001 	orr.w	r0, r0, r1
 80007d2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80007d6:	2afd      	cmp	r2, #253	@ 0xfd
 80007d8:	d81d      	bhi.n	8000816 <__aeabi_fmul+0x92>
 80007da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80007de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e2:	bf08      	it	eq
 80007e4:	f020 0001 	biceq.w	r0, r0, #1
 80007e8:	4770      	bx	lr
 80007ea:	f090 0f00 	teq	r0, #0
 80007ee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80007f2:	bf08      	it	eq
 80007f4:	0249      	lsleq	r1, r1, #9
 80007f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fe:	3a7f      	subs	r2, #127	@ 0x7f
 8000800:	bfc2      	ittt	gt
 8000802:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000806:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800080a:	4770      	bxgt	lr
 800080c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	3a01      	subs	r2, #1
 8000816:	dc5d      	bgt.n	80008d4 <__aeabi_fmul+0x150>
 8000818:	f112 0f19 	cmn.w	r2, #25
 800081c:	bfdc      	itt	le
 800081e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000822:	4770      	bxle	lr
 8000824:	f1c2 0200 	rsb	r2, r2, #0
 8000828:	0041      	lsls	r1, r0, #1
 800082a:	fa21 f102 	lsr.w	r1, r1, r2
 800082e:	f1c2 0220 	rsb	r2, r2, #32
 8000832:	fa00 fc02 	lsl.w	ip, r0, r2
 8000836:	ea5f 0031 	movs.w	r0, r1, rrx
 800083a:	f140 0000 	adc.w	r0, r0, #0
 800083e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000842:	bf08      	it	eq
 8000844:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000848:	4770      	bx	lr
 800084a:	f092 0f00 	teq	r2, #0
 800084e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000852:	bf02      	ittt	eq
 8000854:	0040      	lsleq	r0, r0, #1
 8000856:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800085a:	3a01      	subeq	r2, #1
 800085c:	d0f9      	beq.n	8000852 <__aeabi_fmul+0xce>
 800085e:	ea40 000c 	orr.w	r0, r0, ip
 8000862:	f093 0f00 	teq	r3, #0
 8000866:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800086a:	bf02      	ittt	eq
 800086c:	0049      	lsleq	r1, r1, #1
 800086e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000872:	3b01      	subeq	r3, #1
 8000874:	d0f9      	beq.n	800086a <__aeabi_fmul+0xe6>
 8000876:	ea41 010c 	orr.w	r1, r1, ip
 800087a:	e78f      	b.n	800079c <__aeabi_fmul+0x18>
 800087c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000880:	ea92 0f0c 	teq	r2, ip
 8000884:	bf18      	it	ne
 8000886:	ea93 0f0c 	teqne	r3, ip
 800088a:	d00a      	beq.n	80008a2 <__aeabi_fmul+0x11e>
 800088c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000890:	bf18      	it	ne
 8000892:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000896:	d1d8      	bne.n	800084a <__aeabi_fmul+0xc6>
 8000898:	ea80 0001 	eor.w	r0, r0, r1
 800089c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008a0:	4770      	bx	lr
 80008a2:	f090 0f00 	teq	r0, #0
 80008a6:	bf17      	itett	ne
 80008a8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80008ac:	4608      	moveq	r0, r1
 80008ae:	f091 0f00 	teqne	r1, #0
 80008b2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80008b6:	d014      	beq.n	80008e2 <__aeabi_fmul+0x15e>
 80008b8:	ea92 0f0c 	teq	r2, ip
 80008bc:	d101      	bne.n	80008c2 <__aeabi_fmul+0x13e>
 80008be:	0242      	lsls	r2, r0, #9
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008c2:	ea93 0f0c 	teq	r3, ip
 80008c6:	d103      	bne.n	80008d0 <__aeabi_fmul+0x14c>
 80008c8:	024b      	lsls	r3, r1, #9
 80008ca:	bf18      	it	ne
 80008cc:	4608      	movne	r0, r1
 80008ce:	d108      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008d0:	ea80 0001 	eor.w	r0, r0, r1
 80008d4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008d8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e0:	4770      	bx	lr
 80008e2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bx	lr

080008ec <__aeabi_fdiv>:
 80008ec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f4:	bf1e      	ittt	ne
 80008f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008fa:	ea92 0f0c 	teqne	r2, ip
 80008fe:	ea93 0f0c 	teqne	r3, ip
 8000902:	d069      	beq.n	80009d8 <__aeabi_fdiv+0xec>
 8000904:	eba2 0203 	sub.w	r2, r2, r3
 8000908:	ea80 0c01 	eor.w	ip, r0, r1
 800090c:	0249      	lsls	r1, r1, #9
 800090e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000912:	d037      	beq.n	8000984 <__aeabi_fdiv+0x98>
 8000914:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000918:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800091c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000920:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000924:	428b      	cmp	r3, r1
 8000926:	bf38      	it	cc
 8000928:	005b      	lslcc	r3, r3, #1
 800092a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800092e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000932:	428b      	cmp	r3, r1
 8000934:	bf24      	itt	cs
 8000936:	1a5b      	subcs	r3, r3, r1
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000940:	bf24      	itt	cs
 8000942:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000946:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094e:	bf24      	itt	cs
 8000950:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800095c:	bf24      	itt	cs
 800095e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000962:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	bf18      	it	ne
 800096a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096e:	d1e0      	bne.n	8000932 <__aeabi_fdiv+0x46>
 8000970:	2afd      	cmp	r2, #253	@ 0xfd
 8000972:	f63f af50 	bhi.w	8000816 <__aeabi_fmul+0x92>
 8000976:	428b      	cmp	r3, r1
 8000978:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097c:	bf08      	it	eq
 800097e:	f020 0001 	biceq.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000988:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800098c:	327f      	adds	r2, #127	@ 0x7f
 800098e:	bfc2      	ittt	gt
 8000990:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000994:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000998:	4770      	bxgt	lr
 800099a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800099e:	f04f 0300 	mov.w	r3, #0
 80009a2:	3a01      	subs	r2, #1
 80009a4:	e737      	b.n	8000816 <__aeabi_fmul+0x92>
 80009a6:	f092 0f00 	teq	r2, #0
 80009aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009ae:	bf02      	ittt	eq
 80009b0:	0040      	lsleq	r0, r0, #1
 80009b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009b6:	3a01      	subeq	r2, #1
 80009b8:	d0f9      	beq.n	80009ae <__aeabi_fdiv+0xc2>
 80009ba:	ea40 000c 	orr.w	r0, r0, ip
 80009be:	f093 0f00 	teq	r3, #0
 80009c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009c6:	bf02      	ittt	eq
 80009c8:	0049      	lsleq	r1, r1, #1
 80009ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80009ce:	3b01      	subeq	r3, #1
 80009d0:	d0f9      	beq.n	80009c6 <__aeabi_fdiv+0xda>
 80009d2:	ea41 010c 	orr.w	r1, r1, ip
 80009d6:	e795      	b.n	8000904 <__aeabi_fdiv+0x18>
 80009d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009dc:	ea92 0f0c 	teq	r2, ip
 80009e0:	d108      	bne.n	80009f4 <__aeabi_fdiv+0x108>
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	f47f af7d 	bne.w	80008e2 <__aeabi_fmul+0x15e>
 80009e8:	ea93 0f0c 	teq	r3, ip
 80009ec:	f47f af70 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 80009f0:	4608      	mov	r0, r1
 80009f2:	e776      	b.n	80008e2 <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	d104      	bne.n	8000a04 <__aeabi_fdiv+0x118>
 80009fa:	024b      	lsls	r3, r1, #9
 80009fc:	f43f af4c 	beq.w	8000898 <__aeabi_fmul+0x114>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e76e      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a04:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a08:	bf18      	it	ne
 8000a0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a0e:	d1ca      	bne.n	80009a6 <__aeabi_fdiv+0xba>
 8000a10:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a14:	f47f af5c 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 8000a18:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a1c:	f47f af3c 	bne.w	8000898 <__aeabi_fmul+0x114>
 8000a20:	e75f      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a22:	bf00      	nop

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 fc50 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f814 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 f8ac 	bl	8000b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a34:	f000 f884 	bl	8000b40 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a38:	f000 f854 	bl	8000ae4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000a3c:	f000 f908 	bl	8000c50 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000a40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a44:	4803      	ldr	r0, [pc, #12]	@ (8000a54 <main+0x30>)
 8000a46:	f001 f985 	bl	8001d54 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f000 fc70 	bl	8001330 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000a50:	bf00      	nop
 8000a52:	e7f5      	b.n	8000a40 <main+0x1c>
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	@ 0x40
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	2228      	movs	r2, #40	@ 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f005 f810 	bl	8005a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a96:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 f989 	bl	8004db8 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000aac:	f000 f9a0 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f004 fbf6 	bl	80052bc <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ad6:	f000 f98b 	bl	8000df0 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3740      	adds	r7, #64	@ 0x40
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000aea:	4a13      	ldr	r2, [pc, #76]	@ (8000b38 <MX_I2C1_Init+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <MX_I2C1_Init+0x58>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <MX_I2C1_Init+0x50>)
 8000b22:	f001 f949 	bl	8001db8 <HAL_I2C_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f000 f960 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000028 	.word	0x20000028
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <MX_DMA_Init+0x48>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <MX_DMA_Init+0x48>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <MX_DMA_Init+0x48>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2010      	movs	r0, #16
 8000b64:	f000 fcbd 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b68:	2010      	movs	r0, #16
 8000b6a:	f000 fcd6 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2011      	movs	r0, #17
 8000b74:	f000 fcb5 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b78:	2011      	movs	r0, #17
 8000b7a:	f000 fcce 	bl	800151a <HAL_NVIC_EnableIRQ>

}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba0:	4b28      	ldr	r3, [pc, #160]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a27      	ldr	r2, [pc, #156]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000ba6:	f043 0320 	orr.w	r3, r3, #32
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0320 	and.w	r3, r3, #32
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a21      	ldr	r2, [pc, #132]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <MX_GPIO_Init+0xb8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bee:	4816      	ldr	r0, [pc, #88]	@ (8000c48 <MX_GPIO_Init+0xbc>)
 8000bf0:	f001 f898 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480e      	ldr	r0, [pc, #56]	@ (8000c48 <MX_GPIO_Init+0xbc>)
 8000c0e:	f000 ff05 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c12:	2310      	movs	r3, #16
 8000c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <MX_GPIO_Init+0xc0>)
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4619      	mov	r1, r3
 8000c24:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <MX_GPIO_Init+0xbc>)
 8000c26:	f000 fef9 	bl	8001a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f000 fc57 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f000 fc70 	bl	800151a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	10110000 	.word	0x10110000

08000c50 <MPU6050_Init>:

/* USER CODE BEGIN 4 */
void MPU6050_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af04      	add	r7, sp, #16
	 uint8_t chipid = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	71fb      	strb	r3, [r7, #7]
	 uint8_t tmp = 0x00;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71bb      	strb	r3, [r7, #6]

	 // Check device ID WHO_AM_I
	 HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDRESS<<1, MPU6050_RA_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &chipid, 1, I2C_TIMEOUT);
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	9302      	str	r3, [sp, #8]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	2275      	movs	r2, #117	@ 0x75
 8000c70:	21d0      	movs	r1, #208	@ 0xd0
 8000c72:	4846      	ldr	r0, [pc, #280]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000c74:	f001 faf2 	bl	800225c <HAL_I2C_Mem_Read>
	 HAL_Delay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 fb59 	bl	8001330 <HAL_Delay>
	 if (chipid == 0x68)  // 0x68 is the MPU6050 device ID
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b68      	cmp	r3, #104	@ 0x68
 8000c82:	d17e      	bne.n	8000d82 <MPU6050_Init+0x132>
	 {
	 // Power management register 0X6B we should write all 0's to wake the sensor up
		 tmp = 0x00;
 8000c84:	2300      	movs	r3, #0
 8000c86:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1,(MPU6050_I2C_ADDRESS << 1) ,MPU6050_RA_PWR_MGMT_1 , I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT);
 8000c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	1dbb      	adds	r3, r7, #6
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	226b      	movs	r2, #107	@ 0x6b
 8000c9a:	21d0      	movs	r1, #208	@ 0xd0
 8000c9c:	483b      	ldr	r0, [pc, #236]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000c9e:	f001 f9e3 	bl	8002068 <HAL_I2C_Mem_Write>

	 // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
	 tmp = 0x07;
 8000ca2:	2307      	movs	r3, #7
 8000ca4:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDRESS <<1, MPU6050_RA_SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &tmp, 1, 1000);
 8000ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2301      	movs	r3, #1
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	1dbb      	adds	r3, r7, #6
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	2219      	movs	r2, #25
 8000cb8:	21d0      	movs	r1, #208	@ 0xd0
 8000cba:	4834      	ldr	r0, [pc, #208]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000cbc:	f001 f9d4 	bl	8002068 <HAL_I2C_Mem_Write>

	 // Set accelerometer configuration in ACCEL_CONFIG Register
	 // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
	 tmp = 0x00;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDRESS<<1, MPU6050_RA_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, 1000);
 8000cc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	1dbb      	adds	r3, r7, #6
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	221c      	movs	r2, #28
 8000cd6:	21d0      	movs	r1, #208	@ 0xd0
 8000cd8:	482c      	ldr	r0, [pc, #176]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000cda:	f001 f9c5 	bl	8002068 <HAL_I2C_Mem_Write>
	 HAL_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 fb26 	bl	8001330 <HAL_Delay>
	 //read MPU6050_PWR_MGMT_2 register
	 HAL_I2C_Mem_Read(&hi2c1, (MPU6050_I2C_ADDRESS << 1), MPU6050_RA_PWR_MGMT_2,I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT);
 8000ce4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	2301      	movs	r3, #1
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	1dbb      	adds	r3, r7, #6
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	226c      	movs	r2, #108	@ 0x6c
 8000cf6:	21d0      	movs	r1, #208	@ 0xd0
 8000cf8:	4824      	ldr	r0, [pc, #144]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000cfa:	f001 faaf 	bl	800225c <HAL_I2C_Mem_Read>
	 HAL_Delay(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f000 fb16 	bl	8001330 <HAL_Delay>
	 //enable acc/gyro xyz
	 tmp &= ~(0x38 | 0x07);
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1, (MPU6050_I2C_ADDRESS << 1), MPU6050_RA_PWR_MGMT_2, I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT);
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	2301      	movs	r3, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	226c      	movs	r2, #108	@ 0x6c
 8000d20:	21d0      	movs	r1, #208	@ 0xd0
 8000d22:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000d24:	f001 f9a0 	bl	8002068 <HAL_I2C_Mem_Write>


	 //gyro 2000dps
	 tmp = ( 0x03 << 3 );
 8000d28:	2318      	movs	r3, #24
 8000d2a:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1, (MPU6050_I2C_ADDRESS << 1) ,MPU6050_RA_GYRO_CONFIG,I2C_MEMADD_SIZE_8BIT, &tmp, 1, I2C_TIMEOUT);
 8000d2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d30:	9302      	str	r3, [sp, #8]
 8000d32:	2301      	movs	r3, #1
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	221b      	movs	r2, #27
 8000d3e:	21d0      	movs	r1, #208	@ 0xd0
 8000d40:	4812      	ldr	r0, [pc, #72]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000d42:	f001 f991 	bl	8002068 <HAL_I2C_Mem_Write>

	 // Configure INT pin and enable Data Ready interrupt
	 tmp = 0x01;  // Enable Data Ready interrupt
 8000d46:	2301      	movs	r3, #1
 8000d48:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDRESS <<1, MPU6050_RA_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, &tmp, 1, 1000);
 8000d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	2301      	movs	r3, #1
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	1dbb      	adds	r3, r7, #6
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	2238      	movs	r2, #56	@ 0x38
 8000d5c:	21d0      	movs	r1, #208	@ 0xd0
 8000d5e:	480b      	ldr	r0, [pc, #44]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000d60:	f001 f982 	bl	8002068 <HAL_I2C_Mem_Write>

	  // Set interrupt pin configuration (active high, push-pull)
	  tmp = 0x00;
 8000d64:	2300      	movs	r3, #0
 8000d66:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDRESS <<1, MPU6050_RA_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, 1000);
 8000d68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	1dbb      	adds	r3, r7, #6
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	2237      	movs	r2, #55	@ 0x37
 8000d7a:	21d0      	movs	r1, #208	@ 0xd0
 8000d7c:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <MPU6050_Init+0x13c>)
 8000d7e:	f001 f973 	bl	8002068 <HAL_I2C_Mem_Write>
	 }

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000028 	.word	0x20000028

08000d90 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4) {
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	2b10      	cmp	r3, #16
 8000d9e:	d10c      	bne.n	8000dba <HAL_GPIO_EXTI_Callback+0x2a>
        // MPU6050 interrupt triggered, initiate DMA read of acceleration data
        uint8_t reg_addr = MPU6050_RA_ACCEL_XOUT_H;
 8000da0:	233b      	movs	r3, #59	@ 0x3b
 8000da2:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_I2C_ADDRESS<<1, reg_addr, I2C_MEMADD_SIZE_8BIT, accel_data, 6);
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	2306      	movs	r3, #6
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0x34>)
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2301      	movs	r3, #1
 8000db2:	21d0      	movs	r1, #208	@ 0xd0
 8000db4:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8000db6:	f001 fcc5 	bl	8002744 <HAL_I2C_Mem_Read_DMA>
    }
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000104 	.word	0x20000104
 8000dc8:	20000028 	.word	0x20000028

08000dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dde:	f000 fa8b 	bl	80012f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40000800 	.word	0x40000800

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <Error_Handler+0x8>

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <HAL_MspInit+0x6c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a18      	ldr	r2, [pc, #96]	@ (8000e68 <HAL_MspInit+0x6c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <HAL_MspInit+0x6c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <HAL_MspInit+0x6c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <HAL_MspInit+0x6c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <HAL_MspInit+0x6c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2105      	movs	r1, #5
 8000e36:	2001      	movs	r0, #1
 8000e38:	f000 fb53 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f000 fb6c 	bl	800151a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_MspInit+0x70>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <HAL_MspInit+0x70>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010000 	.word	0x40010000

08000e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a43      	ldr	r2, [pc, #268]	@ (8000f98 <HAL_I2C_MspInit+0x128>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d17f      	bne.n	8000f90 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <HAL_I2C_MspInit+0x12c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a41      	ldr	r2, [pc, #260]	@ (8000f9c <HAL_I2C_MspInit+0x12c>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f9c <HAL_I2C_MspInit+0x12c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea8:	23c0      	movs	r3, #192	@ 0xc0
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eac:	2312      	movs	r3, #18
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4839      	ldr	r0, [pc, #228]	@ (8000fa0 <HAL_I2C_MspInit+0x130>)
 8000ebc:	f000 fdae 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec0:	4b36      	ldr	r3, [pc, #216]	@ (8000f9c <HAL_I2C_MspInit+0x12c>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	4a35      	ldr	r2, [pc, #212]	@ (8000f9c <HAL_I2C_MspInit+0x12c>)
 8000ec6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eca:	61d3      	str	r3, [r2, #28]
 8000ecc:	4b33      	ldr	r3, [pc, #204]	@ (8000f9c <HAL_I2C_MspInit+0x12c>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000ed8:	4b32      	ldr	r3, [pc, #200]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000eda:	4a33      	ldr	r2, [pc, #204]	@ (8000fa8 <HAL_I2C_MspInit+0x138>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ede:	4b31      	ldr	r3, [pc, #196]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000eec:	2280      	movs	r2, #128	@ 0x80
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f02:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f08:	4826      	ldr	r0, [pc, #152]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000f0a:	f000 fb15 	bl	8001538 <HAL_DMA_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000f14:	f7ff ff6c 	bl	8000df0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000f1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <HAL_I2C_MspInit+0x134>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000f24:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f26:	4a22      	ldr	r2, [pc, #136]	@ (8000fb0 <HAL_I2C_MspInit+0x140>)
 8000f28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f54:	4815      	ldr	r0, [pc, #84]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f56:	f000 faef 	bl	8001538 <HAL_DMA_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8000f60:	f7ff ff46 	bl	8000df0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f6a:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <HAL_I2C_MspInit+0x13c>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	201f      	movs	r0, #31
 8000f76:	f000 fab4 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f7a:	201f      	movs	r0, #31
 8000f7c:	f000 facd 	bl	800151a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2020      	movs	r0, #32
 8000f86:	f000 faac 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f8a:	2020      	movs	r0, #32
 8000f8c:	f000 fac5 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010c00 	.word	0x40010c00
 8000fa4:	2000007c 	.word	0x2000007c
 8000fa8:	40020080 	.word	0x40020080
 8000fac:	200000c0 	.word	0x200000c0
 8000fb0:	4002006c 	.word	0x4002006c

08000fb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	@ 0x38
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000fca:	4b34      	ldr	r3, [pc, #208]	@ (800109c <HAL_InitTick+0xe8>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a33      	ldr	r2, [pc, #204]	@ (800109c <HAL_InitTick+0xe8>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b31      	ldr	r3, [pc, #196]	@ (800109c <HAL_InitTick+0xe8>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe2:	f107 0210 	add.w	r2, r7, #16
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f004 fac1 	bl	8005574 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d103      	bne.n	8001004 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ffc:	f004 faa6 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 8001000:	6378      	str	r0, [r7, #52]	@ 0x34
 8001002:	e004      	b.n	800100e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001004:	f004 faa2 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 8001008:	4603      	mov	r3, r0
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800100e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001010:	4a23      	ldr	r2, [pc, #140]	@ (80010a0 <HAL_InitTick+0xec>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	0c9b      	lsrs	r3, r3, #18
 8001018:	3b01      	subs	r3, #1
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800101c:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <HAL_InitTick+0xf0>)
 800101e:	4a22      	ldr	r2, [pc, #136]	@ (80010a8 <HAL_InitTick+0xf4>)
 8001020:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <HAL_InitTick+0xf0>)
 8001024:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001028:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800102a:	4a1e      	ldr	r2, [pc, #120]	@ (80010a4 <HAL_InitTick+0xf0>)
 800102c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800102e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001030:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <HAL_InitTick+0xf0>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <HAL_InitTick+0xf0>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_InitTick+0xf0>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001042:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <HAL_InitTick+0xf0>)
 8001044:	f004 fae4 	bl	8005610 <HAL_TIM_Base_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800104e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001052:	2b00      	cmp	r3, #0
 8001054:	d11b      	bne.n	800108e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001056:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <HAL_InitTick+0xf0>)
 8001058:	f004 fb32 	bl	80056c0 <HAL_TIM_Base_Start_IT>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001062:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800106a:	201e      	movs	r0, #30
 800106c:	f000 fa55 	bl	800151a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	d808      	bhi.n	8001088 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001076:	2200      	movs	r2, #0
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	201e      	movs	r0, #30
 800107c:	f000 fa31 	bl	80014e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001080:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_InitTick+0xf8>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e002      	b.n	800108e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800108e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001092:	4618      	mov	r0, r3
 8001094:	3738      	adds	r7, #56	@ 0x38
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	431bde83 	.word	0x431bde83
 80010a4:	20000118 	.word	0x20000118
 80010a8:	40000800 	.word	0x40000800
 80010ac:	20000004 	.word	0x20000004

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80010e8:	f003 fe4e 	bl	8004d88 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80010f4:	2010      	movs	r0, #16
 80010f6:	f000 fe47 	bl	8001d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <DMA1_Channel6_IRQHandler+0x10>)
 8001106:	f000 fb49 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000c0 	.word	0x200000c0
 8001114:	00000000 	.word	0x00000000

08001118 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800111e:	4840      	ldr	r0, [pc, #256]	@ (8001220 <DMA1_Channel7_IRQHandler+0x108>)
 8001120:	f000 fb3c 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */


    // Process accel_data to obtain raw acceleration values
    int16_t accel_x_raw = (int16_t)(accel_data[0] << 8 | accel_data[1]);
 8001124:	4b3f      	ldr	r3, [pc, #252]	@ (8001224 <DMA1_Channel7_IRQHandler+0x10c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <DMA1_Channel7_IRQHandler+0x10c>)
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	80fb      	strh	r3, [r7, #6]
    int16_t accel_y_raw = (int16_t)(accel_data[2] << 8 | accel_data[3]);
 8001136:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <DMA1_Channel7_IRQHandler+0x10c>)
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <DMA1_Channel7_IRQHandler+0x10c>)
 8001140:	78db      	ldrb	r3, [r3, #3]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	80bb      	strh	r3, [r7, #4]
    int16_t accel_z_raw = (int16_t)(accel_data[4] << 8 | accel_data[5]);
 8001148:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <DMA1_Channel7_IRQHandler+0x10c>)
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <DMA1_Channel7_IRQHandler+0x10c>)
 8001152:	795b      	ldrb	r3, [r3, #5]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	807b      	strh	r3, [r7, #2]

    // Convert raw data to m/s²
     accel_x_m_s2 = (accel_x_raw / ACCEL_SENSITIVITY_2G) * GRAVITY - 0.41;
 800115a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fabc 	bl	80006dc <__aeabi_i2f>
 8001164:	4603      	mov	r3, r0
 8001166:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fbbe 	bl	80008ec <__aeabi_fdiv>
 8001170:	4603      	mov	r3, r0
 8001172:	492d      	ldr	r1, [pc, #180]	@ (8001228 <DMA1_Channel7_IRQHandler+0x110>)
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fb05 	bl	8000784 <__aeabi_fmul>
 800117a:	4603      	mov	r3, r0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f94b 	bl	8000418 <__aeabi_f2d>
 8001182:	a325      	add	r3, pc, #148	@ (adr r3, 8001218 <DMA1_Channel7_IRQHandler+0x100>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7fe ffe6 	bl	8000158 <__aeabi_dsub>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff f998 	bl	80004c8 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4a24      	ldr	r2, [pc, #144]	@ (800122c <DMA1_Channel7_IRQHandler+0x114>)
 800119c:	6013      	str	r3, [r2, #0]
     accel_y_m_s2 = (accel_y_raw / ACCEL_SENSITIVITY_2G) * GRAVITY;
 800119e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fa9a 	bl	80006dc <__aeabi_i2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fb9c 	bl	80008ec <__aeabi_fdiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	491c      	ldr	r1, [pc, #112]	@ (8001228 <DMA1_Channel7_IRQHandler+0x110>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fae3 	bl	8000784 <__aeabi_fmul>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <DMA1_Channel7_IRQHandler+0x118>)
 80011c4:	601a      	str	r2, [r3, #0]
     accel_z_m_s2 = (accel_z_raw / ACCEL_SENSITIVITY_2G) * GRAVITY + 0.41;
 80011c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fa86 	bl	80006dc <__aeabi_i2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fb88 	bl	80008ec <__aeabi_fdiv>
 80011dc:	4603      	mov	r3, r0
 80011de:	4912      	ldr	r1, [pc, #72]	@ (8001228 <DMA1_Channel7_IRQHandler+0x110>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff facf 	bl	8000784 <__aeabi_fmul>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f915 	bl	8000418 <__aeabi_f2d>
 80011ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8001218 <DMA1_Channel7_IRQHandler+0x100>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7fe ffb2 	bl	800015c <__adddf3>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff f962 	bl	80004c8 <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	4a0b      	ldr	r2, [pc, #44]	@ (8001234 <DMA1_Channel7_IRQHandler+0x11c>)
 8001208:	6013      	str	r3, [r2, #0]

      // Handle the acceleration data here (e.g., store, process, or transmit)
  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	a3d70a3d 	.word	0xa3d70a3d
 800121c:	3fda3d70 	.word	0x3fda3d70
 8001220:	2000007c 	.word	0x2000007c
 8001224:	20000104 	.word	0x20000104
 8001228:	411ce80a 	.word	0x411ce80a
 800122c:	2000010c 	.word	0x2000010c
 8001230:	20000110 	.word	0x20000110
 8001234:	20000114 	.word	0x20000114

08001238 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <TIM4_IRQHandler+0x10>)
 800123e:	f004 fa91 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000118 	.word	0x20000118

0800124c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <I2C1_EV_IRQHandler+0x10>)
 8001252:	f001 fbfd 	bl	8002a50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000028 	.word	0x20000028

08001260 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <I2C1_ER_IRQHandler+0x10>)
 8001266:	f001 fd46 	bl	8002cf6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000028 	.word	0x20000028

08001274 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001280:	f7ff fff8 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001286:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800129c:	4c09      	ldr	r4, [pc, #36]	@ (80012c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012aa:	f004 fbf7 	bl	8005a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ae:	f7ff fbb9 	bl	8000a24 <main>
  bx lr
 80012b2:	4770      	bx	lr
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012bc:	08005b30 	.word	0x08005b30
  ldr r2, =_sbss
 80012c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012c4:	20000164 	.word	0x20000164

080012c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_2_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_Init+0x28>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_Init+0x28>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f8f5 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f7ff fe66 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fd88 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40022000 	.word	0x40022000

080012f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_IncTick+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_IncTick+0x20>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a03      	ldr	r2, [pc, #12]	@ (8001318 <HAL_IncTick+0x20>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000008 	.word	0x20000008
 8001318:	20000160 	.word	0x20000160

0800131c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b02      	ldr	r3, [pc, #8]	@ (800132c <HAL_GetTick+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000160 	.word	0x20000160

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff fff0 	bl	800131c <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffe0 	bl	800131c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4906      	ldr	r1, [pc, #24]	@ (8001410 <__NVIC_EnableIRQ+0x34>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	@ (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff4f 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff64 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ffb2 	bl	8001468 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff81 	bl	8001414 <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff57 	bl	80013dc <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e043      	b.n	80015d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_DMA_Init+0xa8>)
 8001556:	4413      	add	r3, r2
 8001558:	4a22      	ldr	r2, [pc, #136]	@ (80015e4 <HAL_DMA_Init+0xac>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	009a      	lsls	r2, r3, #2
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1f      	ldr	r2, [pc, #124]	@ (80015e8 <HAL_DMA_Init+0xb0>)
 800156a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001582:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	bffdfff8 	.word	0xbffdfff8
 80015e4:	cccccccd 	.word	0xcccccccd
 80015e8:	40020000 	.word	0x40020000

080015ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_DMA_Start_IT+0x20>
 8001608:	2302      	movs	r3, #2
 800160a:	e04b      	b.n	80016a4 <HAL_DMA_Start_IT+0xb8>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d13a      	bne.n	8001696 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f9bc 	bl	80019c2 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 020e 	orr.w	r2, r2, #14
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e00f      	b.n	8001684 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0204 	bic.w	r2, r2, #4
 8001672:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 020a 	orr.w	r2, r2, #10
 8001682:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e005      	b.n	80016a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800169e:	2302      	movs	r3, #2
 80016a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d005      	beq.n	80016d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2204      	movs	r2, #4
 80016c8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e051      	b.n	8001774 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 020e 	bic.w	r2, r2, #14
 80016de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <HAL_DMA_Abort_IT+0xd4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d029      	beq.n	800174e <HAL_DMA_Abort_IT+0xa2>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a21      	ldr	r2, [pc, #132]	@ (8001784 <HAL_DMA_Abort_IT+0xd8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d022      	beq.n	800174a <HAL_DMA_Abort_IT+0x9e>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1f      	ldr	r2, [pc, #124]	@ (8001788 <HAL_DMA_Abort_IT+0xdc>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01a      	beq.n	8001744 <HAL_DMA_Abort_IT+0x98>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_DMA_Abort_IT+0xe0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d012      	beq.n	800173e <HAL_DMA_Abort_IT+0x92>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <HAL_DMA_Abort_IT+0xe4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00a      	beq.n	8001738 <HAL_DMA_Abort_IT+0x8c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <HAL_DMA_Abort_IT+0xe8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d102      	bne.n	8001732 <HAL_DMA_Abort_IT+0x86>
 800172c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001730:	e00e      	b.n	8001750 <HAL_DMA_Abort_IT+0xa4>
 8001732:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001736:	e00b      	b.n	8001750 <HAL_DMA_Abort_IT+0xa4>
 8001738:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800173c:	e008      	b.n	8001750 <HAL_DMA_Abort_IT+0xa4>
 800173e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001742:	e005      	b.n	8001750 <HAL_DMA_Abort_IT+0xa4>
 8001744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001748:	e002      	b.n	8001750 <HAL_DMA_Abort_IT+0xa4>
 800174a:	2310      	movs	r3, #16
 800174c:	e000      	b.n	8001750 <HAL_DMA_Abort_IT+0xa4>
 800174e:	2301      	movs	r3, #1
 8001750:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <HAL_DMA_Abort_IT+0xec>)
 8001752:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
    } 
  }
  return status;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40020008 	.word	0x40020008
 8001784:	4002001c 	.word	0x4002001c
 8001788:	40020030 	.word	0x40020030
 800178c:	40020044 	.word	0x40020044
 8001790:	40020058 	.word	0x40020058
 8001794:	4002006c 	.word	0x4002006c
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	2204      	movs	r2, #4
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d04f      	beq.n	8001864 <HAL_DMA_IRQHandler+0xc8>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d04a      	beq.n	8001864 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d107      	bne.n	80017ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0204 	bic.w	r2, r2, #4
 80017ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a66      	ldr	r2, [pc, #408]	@ (800198c <HAL_DMA_IRQHandler+0x1f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d029      	beq.n	800184a <HAL_DMA_IRQHandler+0xae>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a65      	ldr	r2, [pc, #404]	@ (8001990 <HAL_DMA_IRQHandler+0x1f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d022      	beq.n	8001846 <HAL_DMA_IRQHandler+0xaa>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a63      	ldr	r2, [pc, #396]	@ (8001994 <HAL_DMA_IRQHandler+0x1f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01a      	beq.n	8001840 <HAL_DMA_IRQHandler+0xa4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a62      	ldr	r2, [pc, #392]	@ (8001998 <HAL_DMA_IRQHandler+0x1fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d012      	beq.n	800183a <HAL_DMA_IRQHandler+0x9e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a60      	ldr	r2, [pc, #384]	@ (800199c <HAL_DMA_IRQHandler+0x200>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00a      	beq.n	8001834 <HAL_DMA_IRQHandler+0x98>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a5f      	ldr	r2, [pc, #380]	@ (80019a0 <HAL_DMA_IRQHandler+0x204>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d102      	bne.n	800182e <HAL_DMA_IRQHandler+0x92>
 8001828:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800182c:	e00e      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800182e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001832:	e00b      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001834:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001838:	e008      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800183a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800183e:	e005      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001844:	e002      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 8001846:	2340      	movs	r3, #64	@ 0x40
 8001848:	e000      	b.n	800184c <HAL_DMA_IRQHandler+0xb0>
 800184a:	2304      	movs	r3, #4
 800184c:	4a55      	ldr	r2, [pc, #340]	@ (80019a4 <HAL_DMA_IRQHandler+0x208>)
 800184e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8094 	beq.w	8001982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001862:	e08e      	b.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	2202      	movs	r2, #2
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d056      	beq.n	8001922 <HAL_DMA_IRQHandler+0x186>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d051      	beq.n	8001922 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 020a 	bic.w	r2, r2, #10
 800189a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a38      	ldr	r2, [pc, #224]	@ (800198c <HAL_DMA_IRQHandler+0x1f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d029      	beq.n	8001902 <HAL_DMA_IRQHandler+0x166>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a37      	ldr	r2, [pc, #220]	@ (8001990 <HAL_DMA_IRQHandler+0x1f4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d022      	beq.n	80018fe <HAL_DMA_IRQHandler+0x162>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a35      	ldr	r2, [pc, #212]	@ (8001994 <HAL_DMA_IRQHandler+0x1f8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x15c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a34      	ldr	r2, [pc, #208]	@ (8001998 <HAL_DMA_IRQHandler+0x1fc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d012      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x156>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a32      	ldr	r2, [pc, #200]	@ (800199c <HAL_DMA_IRQHandler+0x200>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00a      	beq.n	80018ec <HAL_DMA_IRQHandler+0x150>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <HAL_DMA_IRQHandler+0x204>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d102      	bne.n	80018e6 <HAL_DMA_IRQHandler+0x14a>
 80018e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018e4:	e00e      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018ea:	e00b      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f0:	e008      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f6:	e005      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018fc:	e002      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 80018fe:	2320      	movs	r3, #32
 8001900:	e000      	b.n	8001904 <HAL_DMA_IRQHandler+0x168>
 8001902:	2302      	movs	r3, #2
 8001904:	4a27      	ldr	r2, [pc, #156]	@ (80019a4 <HAL_DMA_IRQHandler+0x208>)
 8001906:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	2b00      	cmp	r3, #0
 8001916:	d034      	beq.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001920:	e02f      	b.n	8001982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	2208      	movs	r2, #8
 8001928:	409a      	lsls	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d028      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 020e 	bic.w	r2, r2, #14
 800194a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
    }
  }
  return;
 8001982:	bf00      	nop
 8001984:	bf00      	nop
}
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40020008 	.word	0x40020008
 8001990:	4002001c 	.word	0x4002001c
 8001994:	40020030 	.word	0x40020030
 8001998:	40020044 	.word	0x40020044
 800199c:	40020058 	.word	0x40020058
 80019a0:	4002006c 	.word	0x4002006c
 80019a4:	40020000 	.word	0x40020000

080019a8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d108      	bne.n	8001a02 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a00:	e007      	b.n	8001a12 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	60da      	str	r2, [r3, #12]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b08b      	sub	sp, #44	@ 0x2c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	e169      	b.n	8001d04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a30:	2201      	movs	r2, #1
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 8158 	bne.w	8001cfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a9a      	ldr	r2, [pc, #616]	@ (8001cbc <HAL_GPIO_Init+0x2a0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d05e      	beq.n	8001b16 <HAL_GPIO_Init+0xfa>
 8001a58:	4a98      	ldr	r2, [pc, #608]	@ (8001cbc <HAL_GPIO_Init+0x2a0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d875      	bhi.n	8001b4a <HAL_GPIO_Init+0x12e>
 8001a5e:	4a98      	ldr	r2, [pc, #608]	@ (8001cc0 <HAL_GPIO_Init+0x2a4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d058      	beq.n	8001b16 <HAL_GPIO_Init+0xfa>
 8001a64:	4a96      	ldr	r2, [pc, #600]	@ (8001cc0 <HAL_GPIO_Init+0x2a4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d86f      	bhi.n	8001b4a <HAL_GPIO_Init+0x12e>
 8001a6a:	4a96      	ldr	r2, [pc, #600]	@ (8001cc4 <HAL_GPIO_Init+0x2a8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d052      	beq.n	8001b16 <HAL_GPIO_Init+0xfa>
 8001a70:	4a94      	ldr	r2, [pc, #592]	@ (8001cc4 <HAL_GPIO_Init+0x2a8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d869      	bhi.n	8001b4a <HAL_GPIO_Init+0x12e>
 8001a76:	4a94      	ldr	r2, [pc, #592]	@ (8001cc8 <HAL_GPIO_Init+0x2ac>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d04c      	beq.n	8001b16 <HAL_GPIO_Init+0xfa>
 8001a7c:	4a92      	ldr	r2, [pc, #584]	@ (8001cc8 <HAL_GPIO_Init+0x2ac>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d863      	bhi.n	8001b4a <HAL_GPIO_Init+0x12e>
 8001a82:	4a92      	ldr	r2, [pc, #584]	@ (8001ccc <HAL_GPIO_Init+0x2b0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d046      	beq.n	8001b16 <HAL_GPIO_Init+0xfa>
 8001a88:	4a90      	ldr	r2, [pc, #576]	@ (8001ccc <HAL_GPIO_Init+0x2b0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d85d      	bhi.n	8001b4a <HAL_GPIO_Init+0x12e>
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d82a      	bhi.n	8001ae8 <HAL_GPIO_Init+0xcc>
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	d859      	bhi.n	8001b4a <HAL_GPIO_Init+0x12e>
 8001a96:	a201      	add	r2, pc, #4	@ (adr r2, 8001a9c <HAL_GPIO_Init+0x80>)
 8001a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9c:	08001b17 	.word	0x08001b17
 8001aa0:	08001af1 	.word	0x08001af1
 8001aa4:	08001b03 	.word	0x08001b03
 8001aa8:	08001b45 	.word	0x08001b45
 8001aac:	08001b4b 	.word	0x08001b4b
 8001ab0:	08001b4b 	.word	0x08001b4b
 8001ab4:	08001b4b 	.word	0x08001b4b
 8001ab8:	08001b4b 	.word	0x08001b4b
 8001abc:	08001b4b 	.word	0x08001b4b
 8001ac0:	08001b4b 	.word	0x08001b4b
 8001ac4:	08001b4b 	.word	0x08001b4b
 8001ac8:	08001b4b 	.word	0x08001b4b
 8001acc:	08001b4b 	.word	0x08001b4b
 8001ad0:	08001b4b 	.word	0x08001b4b
 8001ad4:	08001b4b 	.word	0x08001b4b
 8001ad8:	08001b4b 	.word	0x08001b4b
 8001adc:	08001b4b 	.word	0x08001b4b
 8001ae0:	08001af9 	.word	0x08001af9
 8001ae4:	08001b0d 	.word	0x08001b0d
 8001ae8:	4a79      	ldr	r2, [pc, #484]	@ (8001cd0 <HAL_GPIO_Init+0x2b4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aee:	e02c      	b.n	8001b4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e029      	b.n	8001b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	3304      	adds	r3, #4
 8001afe:	623b      	str	r3, [r7, #32]
          break;
 8001b00:	e024      	b.n	8001b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	3308      	adds	r3, #8
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e01f      	b.n	8001b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	330c      	adds	r3, #12
 8001b12:	623b      	str	r3, [r7, #32]
          break;
 8001b14:	e01a      	b.n	8001b4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e013      	b.n	8001b4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	611a      	str	r2, [r3, #16]
          break;
 8001b36:	e009      	b.n	8001b4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	615a      	str	r2, [r3, #20]
          break;
 8001b42:	e003      	b.n	8001b4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_Init+0x130>
          break;
 8001b4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2bff      	cmp	r3, #255	@ 0xff
 8001b50:	d801      	bhi.n	8001b56 <HAL_GPIO_Init+0x13a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_Init+0x13e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2bff      	cmp	r3, #255	@ 0xff
 8001b60:	d802      	bhi.n	8001b68 <HAL_GPIO_Init+0x14c>
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x152>
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	3b08      	subs	r3, #8
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	210f      	movs	r1, #15
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	6a39      	ldr	r1, [r7, #32]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80b1 	beq.w	8001cfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb4:	4a48      	ldr	r2, [pc, #288]	@ (8001cd8 <HAL_GPIO_Init+0x2bc>)
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a40      	ldr	r2, [pc, #256]	@ (8001cdc <HAL_GPIO_Init+0x2c0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_GPIO_Init+0x1ec>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce0 <HAL_GPIO_Init+0x2c4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d00d      	beq.n	8001c04 <HAL_GPIO_Init+0x1e8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3e      	ldr	r2, [pc, #248]	@ (8001ce4 <HAL_GPIO_Init+0x2c8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d007      	beq.n	8001c00 <HAL_GPIO_Init+0x1e4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce8 <HAL_GPIO_Init+0x2cc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <HAL_GPIO_Init+0x1e0>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e006      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	e004      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c0c:	f002 0203 	and.w	r2, r2, #3
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	4093      	lsls	r3, r2
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c1a:	492f      	ldr	r1, [pc, #188]	@ (8001cd8 <HAL_GPIO_Init+0x2bc>)
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c34:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	492c      	ldr	r1, [pc, #176]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c42:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4928      	ldr	r1, [pc, #160]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c5c:	4b23      	ldr	r3, [pc, #140]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4922      	ldr	r1, [pc, #136]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c6a:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	491e      	ldr	r1, [pc, #120]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4918      	ldr	r1, [pc, #96]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4914      	ldr	r1, [pc, #80]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d021      	beq.n	8001cf0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	490e      	ldr	r1, [pc, #56]	@ (8001cec <HAL_GPIO_Init+0x2d0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
 8001cb8:	e021      	b.n	8001cfe <HAL_GPIO_Init+0x2e2>
 8001cba:	bf00      	nop
 8001cbc:	10320000 	.word	0x10320000
 8001cc0:	10310000 	.word	0x10310000
 8001cc4:	10220000 	.word	0x10220000
 8001cc8:	10210000 	.word	0x10210000
 8001ccc:	10120000 	.word	0x10120000
 8001cd0:	10110000 	.word	0x10110000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	40011400 	.word	0x40011400
 8001cec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_GPIO_Init+0x304>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	4909      	ldr	r1, [pc, #36]	@ (8001d20 <HAL_GPIO_Init+0x304>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f47f ae8e 	bne.w	8001a30 <HAL_GPIO_Init+0x14>
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	@ 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
 8001d30:	4613      	mov	r3, r2
 8001d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d34:	787b      	ldrb	r3, [r7, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d40:	e003      	b.n	8001d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	611a      	str	r2, [r3, #16]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	041a      	lsls	r2, r3, #16
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43d9      	mvns	r1, r3
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	400b      	ands	r3, r1
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	611a      	str	r2, [r3, #16]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fff2 	bl	8000d90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e12b      	b.n	8002022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f846 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	@ 0x24
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e1c:	f003 fb96 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 8001e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a81      	ldr	r2, [pc, #516]	@ (800202c <HAL_I2C_Init+0x274>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d807      	bhi.n	8001e3c <HAL_I2C_Init+0x84>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a80      	ldr	r2, [pc, #512]	@ (8002030 <HAL_I2C_Init+0x278>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bf94      	ite	ls
 8001e34:	2301      	movls	r3, #1
 8001e36:	2300      	movhi	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e006      	b.n	8001e4a <HAL_I2C_Init+0x92>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4a7d      	ldr	r2, [pc, #500]	@ (8002034 <HAL_I2C_Init+0x27c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	bf94      	ite	ls
 8001e44:	2301      	movls	r3, #1
 8001e46:	2300      	movhi	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0e7      	b.n	8002022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4a78      	ldr	r2, [pc, #480]	@ (8002038 <HAL_I2C_Init+0x280>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	@ (800202c <HAL_I2C_Init+0x274>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d802      	bhi.n	8001e8c <HAL_I2C_Init+0xd4>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	e009      	b.n	8001ea0 <HAL_I2C_Init+0xe8>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	4a69      	ldr	r2, [pc, #420]	@ (800203c <HAL_I2C_Init+0x284>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001eb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	495c      	ldr	r1, [pc, #368]	@ (800202c <HAL_I2C_Init+0x274>)
 8001ebc:	428b      	cmp	r3, r1
 8001ebe:	d819      	bhi.n	8001ef4 <HAL_I2C_Init+0x13c>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e59      	subs	r1, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_I2C_Init+0x138>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e59      	subs	r1, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	e051      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e04f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <HAL_I2C_Init+0x168>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e012      	b.n	8001f46 <HAL_I2C_Init+0x18e>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	0099      	lsls	r1, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Init+0x196>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e022      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10e      	bne.n	8001f74 <HAL_I2C_Init+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e58      	subs	r0, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	0099      	lsls	r1, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6911      	ldr	r1, [r2, #16]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	000186a0 	.word	0x000186a0
 8002030:	001e847f 	.word	0x001e847f
 8002034:	003d08ff 	.word	0x003d08ff
 8002038:	431bde83 	.word	0x431bde83
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	2b80      	cmp	r3, #128	@ 0x80
 8002054:	d103      	bne.n	800205e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  }
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	817b      	strh	r3, [r7, #10]
 800207a:	460b      	mov	r3, r1
 800207c:	813b      	strh	r3, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002082:	f7ff f94b 	bl	800131c <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b20      	cmp	r3, #32
 8002092:	f040 80d9 	bne.w	8002248 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2319      	movs	r3, #25
 800209c:	2201      	movs	r2, #1
 800209e:	496d      	ldr	r1, [pc, #436]	@ (8002254 <HAL_I2C_Mem_Write+0x1ec>)
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f002 fbef 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
 80020ae:	e0cc      	b.n	800224a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_I2C_Mem_Write+0x56>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e0c5      	b.n	800224a <HAL_I2C_Mem_Write+0x1e2>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d007      	beq.n	80020e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2221      	movs	r2, #33	@ 0x21
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2240      	movs	r2, #64	@ 0x40
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a3a      	ldr	r2, [r7, #32]
 800210e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002114:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a4d      	ldr	r2, [pc, #308]	@ (8002258 <HAL_I2C_Mem_Write+0x1f0>)
 8002124:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002126:	88f8      	ldrh	r0, [r7, #6]
 8002128:	893a      	ldrh	r2, [r7, #8]
 800212a:	8979      	ldrh	r1, [r7, #10]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4603      	mov	r3, r0
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f002 f868 	bl	800420c <I2C_RequestMemoryWrite>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d052      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e081      	b.n	800224a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f002 fcb4 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	2b04      	cmp	r3, #4
 800215c:	d107      	bne.n	800216e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d11b      	bne.n	80021e8 <HAL_I2C_Mem_Write+0x180>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d017      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1aa      	bne.n	8002146 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f002 fca7 	bl	8004b48 <I2C_WaitOnBTFFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	2b04      	cmp	r3, #4
 8002206:	d107      	bne.n	8002218 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002216:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e016      	b.n	800224a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	00100002 	.word	0x00100002
 8002258:	ffff0000 	.word	0xffff0000

0800225c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	@ 0x30
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4603      	mov	r3, r0
 800226c:	817b      	strh	r3, [r7, #10]
 800226e:	460b      	mov	r3, r1
 8002270:	813b      	strh	r3, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800227a:	f7ff f84f 	bl	800131c <HAL_GetTick>
 800227e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b20      	cmp	r3, #32
 800228a:	f040 8250 	bne.w	800272e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2319      	movs	r3, #25
 8002294:	2201      	movs	r2, #1
 8002296:	4982      	ldr	r1, [pc, #520]	@ (80024a0 <HAL_I2C_Mem_Read+0x244>)
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f002 faf3 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
 80022a6:	e243      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Mem_Read+0x5a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e23c      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d007      	beq.n	80022dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2222      	movs	r2, #34	@ 0x22
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	@ 0x40
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800230c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a62      	ldr	r2, [pc, #392]	@ (80024a4 <HAL_I2C_Mem_Read+0x248>)
 800231c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800231e:	88f8      	ldrh	r0, [r7, #6]
 8002320:	893a      	ldrh	r2, [r7, #8]
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4603      	mov	r3, r0
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f002 f802 	bl	8004338 <I2C_RequestMemoryRead>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1f8      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d113      	bne.n	800236e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e1cc      	b.n	8002708 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002372:	2b01      	cmp	r3, #1
 8002374:	d11e      	bne.n	80023b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002384:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002386:	b672      	cpsid	i
}
 8002388:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023b0:	b662      	cpsie	i
}
 80023b2:	e035      	b.n	8002420 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d11e      	bne.n	80023fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023cc:	b672      	cpsid	i
}
 80023ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023f6:	b662      	cpsie	i
}
 80023f8:	e012      	b.n	8002420 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002408:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002420:	e172      	b.n	8002708 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	2b03      	cmp	r3, #3
 8002428:	f200 811f 	bhi.w	800266a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002430:	2b01      	cmp	r3, #1
 8002432:	d123      	bne.n	800247c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002436:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f002 fbff 	bl	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e173      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800247a:	e145      	b.n	8002708 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	2b02      	cmp	r3, #2
 8002482:	d152      	bne.n	800252a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248a:	2200      	movs	r2, #0
 800248c:	4906      	ldr	r1, [pc, #24]	@ (80024a8 <HAL_I2C_Mem_Read+0x24c>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f002 f9f8 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e148      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
 800249e:	bf00      	nop
 80024a0:	00100002 	.word	0x00100002
 80024a4:	ffff0000 	.word	0xffff0000
 80024a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80024ac:	b672      	cpsid	i
}
 80024ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024f2:	b662      	cpsie	i
}
 80024f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002528:	e0ee      	b.n	8002708 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	2200      	movs	r2, #0
 8002532:	4981      	ldr	r1, [pc, #516]	@ (8002738 <HAL_I2C_Mem_Read+0x4dc>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f002 f9a5 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0f5      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002552:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
}
 8002556:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800258a:	4b6c      	ldr	r3, [pc, #432]	@ (800273c <HAL_I2C_Mem_Read+0x4e0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	08db      	lsrs	r3, r3, #3
 8002590:	4a6b      	ldr	r2, [pc, #428]	@ (8002740 <HAL_I2C_Mem_Read+0x4e4>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0a1a      	lsrs	r2, r3, #8
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00da      	lsls	r2, r3, #3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d118      	bne.n	80025e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80025d2:	b662      	cpsie	i
}
 80025d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0a6      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d1d9      	bne.n	80025a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002632:	b662      	cpsie	i
}
 8002634:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002668:	e04e      	b.n	8002708 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f002 fae4 	bl	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e058      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d124      	bne.n	8002708 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f ae88 	bne.w	8002422 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3728      	adds	r7, #40	@ 0x28
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	00010004 	.word	0x00010004
 800273c:	20000000 	.word	0x20000000
 8002740:	14f8b589 	.word	0x14f8b589

08002744 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	@ 0x30
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	460b      	mov	r3, r1
 8002758:	813b      	strh	r3, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800275e:	f7fe fddd 	bl	800131c <HAL_GetTick>
 8002762:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b20      	cmp	r3, #32
 8002772:	f040 8168 	bne.w	8002a46 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002776:	4b98      	ldr	r3, [pc, #608]	@ (80029d8 <HAL_I2C_Mem_Read_DMA+0x294>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	4a97      	ldr	r2, [pc, #604]	@ (80029dc <HAL_I2C_Mem_Read_DMA+0x298>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	0a1a      	lsrs	r2, r3, #8
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	009a      	lsls	r2, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	3b01      	subs	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d112      	bne.n	80027c2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	e142      	b.n	8002a48 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d0df      	beq.n	8002790 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_I2C_Mem_Read_DMA+0x9a>
 80027da:	2302      	movs	r3, #2
 80027dc:	e134      	b.n	8002a48 <HAL_I2C_Mem_Read_DMA+0x304>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d007      	beq.n	8002804 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002812:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2222      	movs	r2, #34	@ 0x22
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a67      	ldr	r2, [pc, #412]	@ (80029e0 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002846:	897a      	ldrh	r2, [r7, #10]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002852:	88fa      	ldrh	r2, [r7, #6]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80c2 	beq.w	80029ec <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286c:	2b00      	cmp	r3, #0
 800286e:	d024      	beq.n	80028ba <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	4a5b      	ldr	r2, [pc, #364]	@ (80029e4 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8002876:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287c:	4a5a      	ldr	r2, [pc, #360]	@ (80029e8 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002884:	2200      	movs	r2, #0
 8002886:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288c:	2200      	movs	r2, #0
 800288e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3310      	adds	r3, #16
 800289a:	4619      	mov	r1, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	461a      	mov	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	f7fe fea1 	bl	80015ec <HAL_DMA_Start_IT>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80028b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d17b      	bne.n	80029b0 <HAL_I2C_Mem_Read_DMA+0x26c>
 80028b8:	e013      	b.n	80028e2 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0b2      	b.n	8002a48 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80028e2:	88f8      	ldrh	r0, [r7, #6]
 80028e4:	893a      	ldrh	r2, [r7, #8]
 80028e6:	8979      	ldrh	r1, [r7, #10]
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	2323      	movs	r3, #35	@ 0x23
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4603      	mov	r3, r0
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f001 fd20 	bl	8004338 <I2C_RequestMemoryRead>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d023      	beq.n	8002946 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fed2 	bl	80016ac <HAL_DMA_Abort_IT>
 8002908:	4603      	mov	r3, r0
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	2200      	movs	r2, #0
 8002914:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002924:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e080      	b.n	8002a48 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294a:	2b01      	cmp	r3, #1
 800294c:	d108      	bne.n	8002960 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e007      	b.n	8002970 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800296e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	e048      	b.n	8002a42 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e037      	b.n	8002a48 <HAL_I2C_Mem_Read_DMA+0x304>
 80029d8:	20000000 	.word	0x20000000
 80029dc:	14f8b589 	.word	0x14f8b589
 80029e0:	ffff0000 	.word	0xffff0000
 80029e4:	08004509 	.word	0x08004509
 80029e8:	080046c7 	.word	0x080046c7
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80029ec:	88f8      	ldrh	r0, [r7, #6]
 80029ee:	893a      	ldrh	r2, [r7, #8]
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2323      	movs	r3, #35	@ 0x23
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	4603      	mov	r3, r0
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f001 fc9b 	bl	8004338 <I2C_RequestMemoryRead>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e01d      	b.n	8002a48 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a30:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3728      	adds	r7, #40	@ 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d003      	beq.n	8002a88 <HAL_I2C_EV_IRQHandler+0x38>
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b40      	cmp	r3, #64	@ 0x40
 8002a84:	f040 80b1 	bne.w	8002bea <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_I2C_EV_IRQHandler+0x6e>
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002aa8:	d003      	beq.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x62>
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x66>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_I2C_EV_IRQHandler+0x68>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	f000 8114 	beq.w	8002ce6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x90>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f002 f93d 	bl	8004d52 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fd74 	bl	80035c6 <I2C_Master_SB>
 8002ade:	e083      	b.n	8002be8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0xac>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fdeb 	bl	80036d0 <I2C_Master_ADD10>
 8002afa:	e075      	b.n	8002be8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_I2C_EV_IRQHandler+0xc8>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fe06 	bl	8003722 <I2C_Master_ADDR>
 8002b16:	e067      	b.n	8002be8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d036      	beq.n	8002b90 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b30:	f000 80db 	beq.w	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x10a>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x10a>
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f9d4 	bl	8002f00 <I2C_MasterTransmit_TXE>
 8002b58:	e046      	b.n	8002be8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80c2 	beq.w	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80bc 	beq.w	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b72:	7bbb      	ldrb	r3, [r7, #14]
 8002b74:	2b21      	cmp	r3, #33	@ 0x21
 8002b76:	d103      	bne.n	8002b80 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fa5d 	bl	8003038 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b7e:	e0b4      	b.n	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b40      	cmp	r3, #64	@ 0x40
 8002b84:	f040 80b1 	bne.w	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 facb 	bl	8003124 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8e:	e0ac      	b.n	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b9e:	f000 80a4 	beq.w	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x178>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x178>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d103      	bne.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb47 	bl	8003254 <I2C_MasterReceive_RXNE>
 8002bc6:	e00f      	b.n	8002be8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 808b 	beq.w	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8085 	beq.w	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fbff 	bl	80033e4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be6:	e080      	b.n	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
 8002be8:	e07f      	b.n	8002cea <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e007      	b.n	8002c0c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d011      	beq.n	8002c3a <HAL_I2C_EV_IRQHandler+0x1ea>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00c      	beq.n	8002c3a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c30:	69b9      	ldr	r1, [r7, #24]
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 ffcc 	bl	8003bd0 <I2C_Slave_ADDR>
 8002c38:	e05a      	b.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_I2C_EV_IRQHandler+0x206>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f001 f806 	bl	8003c60 <I2C_Slave_STOPF>
 8002c54:	e04c      	b.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c56:	7bbb      	ldrb	r3, [r7, #14]
 8002c58:	2b21      	cmp	r3, #33	@ 0x21
 8002c5a:	d002      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x212>
 8002c5c:	7bbb      	ldrb	r3, [r7, #14]
 8002c5e:	2b29      	cmp	r3, #41	@ 0x29
 8002c60:	d120      	bne.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x238>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x238>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fee9 	bl	8003a58 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c86:	e032      	b.n	8002cee <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d02d      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x29e>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d028      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 ff18 	bl	8003ad2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ca2:	e024      	b.n	8002cee <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <HAL_I2C_EV_IRQHandler+0x27a>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_I2C_EV_IRQHandler+0x27a>
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 ff25 	bl	8003b12 <I2C_SlaveReceive_RXNE>
 8002cc8:	e012      	b.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 ff55 	bl	8003b8e <I2C_SlaveReceive_BTF>
 8002ce4:	e004      	b.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002ce6:	bf00      	nop
 8002ce8:	e002      	b.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b08a      	sub	sp, #40	@ 0x28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_I2C_ER_IRQHandler+0x5a>
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002d3e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_I2C_ER_IRQHandler+0x80>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002d74:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d03e      	beq.n	8002dfe <HAL_I2C_ER_IRQHandler+0x108>
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d039      	beq.n	8002dfe <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002d8a:	7efb      	ldrb	r3, [r7, #27]
 8002d8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002da4:	7ebb      	ldrb	r3, [r7, #26]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d112      	bne.n	8002dd0 <HAL_I2C_ER_IRQHandler+0xda>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10f      	bne.n	8002dd0 <HAL_I2C_ER_IRQHandler+0xda>
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	2b21      	cmp	r3, #33	@ 0x21
 8002db4:	d008      	beq.n	8002dc8 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b29      	cmp	r3, #41	@ 0x29
 8002dba:	d005      	beq.n	8002dc8 <HAL_I2C_ER_IRQHandler+0xd2>
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b28      	cmp	r3, #40	@ 0x28
 8002dc0:	d106      	bne.n	8002dd0 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b21      	cmp	r3, #33	@ 0x21
 8002dc6:	d103      	bne.n	8002dd0 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f001 f879 	bl	8003ec0 <I2C_Slave_AF>
 8002dce:	e016      	b.n	8002dfe <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dd8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002de2:	7efb      	ldrb	r3, [r7, #27]
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d002      	beq.n	8002dee <HAL_I2C_ER_IRQHandler+0xf8>
 8002de8:	7efb      	ldrb	r3, [r7, #27]
 8002dea:	2b40      	cmp	r3, #64	@ 0x40
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_I2C_ER_IRQHandler+0x12e>
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002e22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f001 f8b6 	bl	8003fa8 <I2C_ITError>
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3728      	adds	r7, #40	@ 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d150      	bne.n	8002fc8 <I2C_MasterTransmit_TXE+0xc8>
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b21      	cmp	r3, #33	@ 0x21
 8002f2a:	d14d      	bne.n	8002fc8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d01d      	beq.n	8002f6e <I2C_MasterTransmit_TXE+0x6e>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d01a      	beq.n	8002f6e <I2C_MasterTransmit_TXE+0x6e>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f3e:	d016      	beq.n	8002f6e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f4e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2211      	movs	r2, #17
 8002f54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff6c 	bl	8002e44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f6c:	e060      	b.n	8003030 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f7c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d107      	bne.n	8002fb8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff81 	bl	8002eb8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fb6:	e03b      	b.n	8003030 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff3f 	bl	8002e44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fc6:	e033      	b.n	8003030 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b21      	cmp	r3, #33	@ 0x21
 8002fcc:	d005      	beq.n	8002fda <I2C_MasterTransmit_TXE+0xda>
 8002fce:	7bbb      	ldrb	r3, [r7, #14]
 8002fd0:	2b40      	cmp	r3, #64	@ 0x40
 8002fd2:	d12d      	bne.n	8003030 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b22      	cmp	r3, #34	@ 0x22
 8002fd8:	d12a      	bne.n	8003030 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d108      	bne.n	8002ff6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ff4:	e01c      	b.n	8003030 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b40      	cmp	r3, #64	@ 0x40
 8003000:	d103      	bne.n	800300a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f88e 	bl	8003124 <I2C_MemoryTransmit_TXE_BTF>
}
 8003008:	e012      	b.n	8003030 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800302e:	e7ff      	b.n	8003030 <I2C_MasterTransmit_TXE+0x130>
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b21      	cmp	r3, #33	@ 0x21
 8003050:	d164      	bne.n	800311c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d012      	beq.n	8003082 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003080:	e04c      	b.n	800311c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d01d      	beq.n	80030c4 <I2C_MasterTransmit_BTF+0x8c>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b20      	cmp	r3, #32
 800308c:	d01a      	beq.n	80030c4 <I2C_MasterTransmit_BTF+0x8c>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003094:	d016      	beq.n	80030c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2211      	movs	r2, #17
 80030aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fec1 	bl	8002e44 <HAL_I2C_MasterTxCpltCallback>
}
 80030c2:	e02b      	b.n	800311c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d107      	bne.n	800310e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fed6 	bl	8002eb8 <HAL_I2C_MemTxCpltCallback>
}
 800310c:	e006      	b.n	800311c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fe94 	bl	8002e44 <HAL_I2C_MasterTxCpltCallback>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003132:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11d      	bne.n	8003178 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10b      	bne.n	800315c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	b2da      	uxtb	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003154:	1c9a      	adds	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800315a:	e077      	b.n	800324c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003160:	b29b      	uxth	r3, r3
 8003162:	121b      	asrs	r3, r3, #8
 8003164:	b2da      	uxtb	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003176:	e069      	b.n	800324c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800317c:	2b01      	cmp	r3, #1
 800317e:	d10b      	bne.n	8003198 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003184:	b2da      	uxtb	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003196:	e059      	b.n	800324c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319c:	2b02      	cmp	r3, #2
 800319e:	d152      	bne.n	8003246 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b22      	cmp	r3, #34	@ 0x22
 80031a4:	d10d      	bne.n	80031c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80031c0:	e044      	b.n	800324c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b21      	cmp	r3, #33	@ 0x21
 80031d0:	d112      	bne.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80031f6:	e029      	b.n	800324c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d124      	bne.n	800324c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b21      	cmp	r3, #33	@ 0x21
 8003206:	d121      	bne.n	800324c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003216:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003226:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff fe3a 	bl	8002eb8 <HAL_I2C_MemTxCpltCallback>
}
 8003244:	e002      	b.n	800324c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe fefa 	bl	8002040 <I2C_Flush_DR>
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b22      	cmp	r3, #34	@ 0x22
 8003266:	f040 80b9 	bne.w	80033dc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d921      	bls.n	80032c2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	f040 8096 	bne.w	80033dc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032be:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80032c0:	e08c      	b.n	80033dc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d07f      	beq.n	80033ca <I2C_MasterReceive_RXNE+0x176>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d002      	beq.n	80032d6 <I2C_MasterReceive_RXNE+0x82>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d179      	bne.n	80033ca <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f001 fc7e 	bl	8004bd8 <I2C_WaitOnSTOPRequestThroughIT>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d14c      	bne.n	800337c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003300:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d10a      	bne.n	8003352 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fdbd 	bl	8002eca <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003350:	e044      	b.n	80033dc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d002      	beq.n	8003366 <I2C_MasterReceive_RXNE+0x112>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b20      	cmp	r3, #32
 8003364:	d103      	bne.n	800336e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
 800336c:	e002      	b.n	8003374 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2212      	movs	r2, #18
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fd6e 	bl	8002e56 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800337a:	e02f      	b.n	80033dc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800338a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fd8a 	bl	8002edc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033c8:	e008      	b.n	80033dc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033d8:	605a      	str	r2, [r3, #4]
}
 80033da:	e7ff      	b.n	80033dc <I2C_MasterReceive_RXNE+0x188>
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d11b      	bne.n	8003434 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003432:	e0c4      	b.n	80035be <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b03      	cmp	r3, #3
 800343c:	d129      	bne.n	8003492 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800344c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b04      	cmp	r3, #4
 8003452:	d00a      	beq.n	800346a <I2C_MasterReceive_BTF+0x86>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d007      	beq.n	800346a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003468:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003490:	e095      	b.n	80035be <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d17d      	bne.n	8003598 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d002      	beq.n	80034a8 <I2C_MasterReceive_BTF+0xc4>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d108      	bne.n	80034ba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e016      	b.n	80034e8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d002      	beq.n	80034c6 <I2C_MasterReceive_BTF+0xe2>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d108      	bne.n	80034d8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e007      	b.n	80034e8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003542:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b40      	cmp	r3, #64	@ 0x40
 8003556:	d10a      	bne.n	800356e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fcaf 	bl	8002eca <HAL_I2C_MemRxCpltCallback>
}
 800356c:	e027      	b.n	80035be <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d002      	beq.n	8003582 <I2C_MasterReceive_BTF+0x19e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b20      	cmp	r3, #32
 8003580:	d103      	bne.n	800358a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
 8003588:	e002      	b.n	8003590 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2212      	movs	r2, #18
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff fc60 	bl	8002e56 <HAL_I2C_MasterRxCpltCallback>
}
 8003596:	e012      	b.n	80035be <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d117      	bne.n	800360a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80035f4:	e067      	b.n	80036c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	611a      	str	r2, [r3, #16]
}
 8003608:	e05d      	b.n	80036c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003612:	d133      	bne.n	800367c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b21      	cmp	r3, #33	@ 0x21
 800361e:	d109      	bne.n	8003634 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003630:	611a      	str	r2, [r3, #16]
 8003632:	e008      	b.n	8003646 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <I2C_Master_SB+0x92>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d108      	bne.n	800366a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d032      	beq.n	80036c6 <I2C_Master_SB+0x100>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02d      	beq.n	80036c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003678:	605a      	str	r2, [r3, #4]
}
 800367a:	e024      	b.n	80036c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10e      	bne.n	80036a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003688:	b29b      	uxth	r3, r3
 800368a:	11db      	asrs	r3, r3, #7
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0306 	and.w	r3, r3, #6
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f063 030f 	orn	r3, r3, #15
 8003698:	b2da      	uxtb	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]
}
 80036a0:	e011      	b.n	80036c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10d      	bne.n	80036c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	11db      	asrs	r3, r3, #7
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f003 0306 	and.w	r3, r3, #6
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f063 030e 	orn	r3, r3, #14
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	611a      	str	r2, [r3, #16]
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <I2C_Master_ADD10+0x26>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <I2C_Master_ADD10+0x48>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003716:	605a      	str	r2, [r3, #4]
  }
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003722:	b480      	push	{r7}
 8003724:	b091      	sub	sp, #68	@ 0x44
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003730:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b22      	cmp	r3, #34	@ 0x22
 800374a:	f040 8174 	bne.w	8003a36 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <I2C_Master_ADDR+0x54>
 8003756:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d10b      	bne.n	8003776 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	633b      	str	r3, [r7, #48]	@ 0x30
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	633b      	str	r3, [r7, #48]	@ 0x30
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	633b      	str	r3, [r7, #48]	@ 0x30
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	e16b      	b.n	8003a4e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11d      	bne.n	80037ba <I2C_Master_ADDR+0x98>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003786:	d118      	bne.n	80037ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80037b8:	e149      	b.n	8003a4e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e120      	b.n	8003a2e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	f040 808a 	bne.w	800390c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037fe:	d137      	bne.n	8003870 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800380e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800381a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800381e:	d113      	bne.n	8003848 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003830:	2300      	movs	r3, #0
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	e0f2      	b.n	8003a2e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e0de      	b.n	8003a2e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003872:	2b08      	cmp	r3, #8
 8003874:	d02e      	beq.n	80038d4 <I2C_Master_ADDR+0x1b2>
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003878:	2b20      	cmp	r3, #32
 800387a:	d02b      	beq.n	80038d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800387c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387e:	2b12      	cmp	r3, #18
 8003880:	d102      	bne.n	8003888 <I2C_Master_ADDR+0x166>
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	2b01      	cmp	r3, #1
 8003886:	d125      	bne.n	80038d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388a:	2b04      	cmp	r3, #4
 800388c:	d00e      	beq.n	80038ac <I2C_Master_ADDR+0x18a>
 800388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003890:	2b02      	cmp	r3, #2
 8003892:	d00b      	beq.n	80038ac <I2C_Master_ADDR+0x18a>
 8003894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003896:	2b10      	cmp	r3, #16
 8003898:	d008      	beq.n	80038ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e007      	b.n	80038bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	e0ac      	b.n	8003a2e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e090      	b.n	8003a2e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d158      	bne.n	80039c8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003918:	2b04      	cmp	r3, #4
 800391a:	d021      	beq.n	8003960 <I2C_Master_ADDR+0x23e>
 800391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391e:	2b02      	cmp	r3, #2
 8003920:	d01e      	beq.n	8003960 <I2C_Master_ADDR+0x23e>
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003924:	2b10      	cmp	r3, #16
 8003926:	d01b      	beq.n	8003960 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003936:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e012      	b.n	8003986 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800396e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003994:	d14b      	bne.n	8003a2e <I2C_Master_ADDR+0x30c>
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800399c:	d00b      	beq.n	80039b6 <I2C_Master_ADDR+0x294>
 800399e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d008      	beq.n	80039b6 <I2C_Master_ADDR+0x294>
 80039a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d005      	beq.n	80039b6 <I2C_Master_ADDR+0x294>
 80039aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d002      	beq.n	80039b6 <I2C_Master_ADDR+0x294>
 80039b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d13b      	bne.n	8003a2e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	e032      	b.n	8003a2e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e6:	d117      	bne.n	8003a18 <I2C_Master_ADDR+0x2f6>
 80039e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039ee:	d00b      	beq.n	8003a08 <I2C_Master_ADDR+0x2e6>
 80039f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d008      	beq.n	8003a08 <I2C_Master_ADDR+0x2e6>
 80039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d005      	beq.n	8003a08 <I2C_Master_ADDR+0x2e6>
 80039fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d002      	beq.n	8003a08 <I2C_Master_ADDR+0x2e6>
 8003a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d107      	bne.n	8003a18 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a16:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003a34:	e00b      	b.n	8003a4e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
}
 8003a4c:	e7ff      	b.n	8003a4e <I2C_Master_ADDR+0x32c>
 8003a4e:	bf00      	nop
 8003a50:	3744      	adds	r7, #68	@ 0x44
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02b      	beq.n	8003aca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d114      	bne.n	8003aca <I2C_SlaveTransmit_TXE+0x72>
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b29      	cmp	r3, #41	@ 0x29
 8003aa4:	d111      	bne.n	8003aca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2221      	movs	r2, #33	@ 0x21
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2228      	movs	r2, #40	@ 0x28
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff f9cf 	bl	8002e68 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d011      	beq.n	8003b08 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02c      	beq.n	8003b86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d114      	bne.n	8003b86 <I2C_SlaveReceive_RXNE+0x74>
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b60:	d111      	bne.n	8003b86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2222      	movs	r2, #34	@ 0x22
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2228      	movs	r2, #40	@ 0x28
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff f97a 	bl	8002e7a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003bea:	2b28      	cmp	r3, #40	@ 0x28
 8003bec:	d125      	bne.n	8003c3a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	81bb      	strh	r3, [r7, #12]
 8003c1c:	e002      	b.n	8003c24 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c2c:	89ba      	ldrh	r2, [r7, #12]
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff f92a 	bl	8002e8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c38:	e00e      	b.n	8003c58 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cbc:	d172      	bne.n	8003da4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b22      	cmp	r3, #34	@ 0x22
 8003cc2:	d002      	beq.n	8003cca <I2C_Slave_STOPF+0x6a>
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc8:	d135      	bne.n	8003d36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	f043 0204 	orr.w	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd fe50 	bl	80019a8 <HAL_DMA_GetState>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d049      	beq.n	8003da2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	4a69      	ldr	r2, [pc, #420]	@ (8003eb8 <I2C_Slave_STOPF+0x258>)
 8003d14:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd fcc6 	bl	80016ac <HAL_DMA_Abort_IT>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d03d      	beq.n	8003da2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d30:	4610      	mov	r0, r2
 8003d32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d34:	e035      	b.n	8003da2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f043 0204 	orr.w	r2, r3, #4
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fe1a 	bl	80019a8 <HAL_DMA_GetState>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d014      	beq.n	8003da4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8003eb8 <I2C_Slave_STOPF+0x258>)
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd fc90 	bl	80016ac <HAL_DMA_Abort_IT>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4798      	blx	r3
 8003da0:	e000      	b.n	8003da4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003da2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d03e      	beq.n	8003e2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d112      	bne.n	8003de2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dec:	2b40      	cmp	r3, #64	@ 0x40
 8003dee:	d112      	bne.n	8003e16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	f043 0204 	orr.w	r2, r3, #4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8b7 	bl	8003fa8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003e3a:	e039      	b.n	8003eb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e40:	d109      	bne.n	8003e56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2228      	movs	r2, #40	@ 0x28
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff f812 	bl	8002e7a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b28      	cmp	r3, #40	@ 0x28
 8003e60:	d111      	bne.n	8003e86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a15      	ldr	r2, [pc, #84]	@ (8003ebc <I2C_Slave_STOPF+0x25c>)
 8003e66:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff f811 	bl	8002ea6 <HAL_I2C_ListenCpltCallback>
}
 8003e84:	e014      	b.n	8003eb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	2b22      	cmp	r3, #34	@ 0x22
 8003e8c:	d002      	beq.n	8003e94 <I2C_Slave_STOPF+0x234>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b22      	cmp	r3, #34	@ 0x22
 8003e92:	d10d      	bne.n	8003eb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fe ffe5 	bl	8002e7a <HAL_I2C_SlaveRxCpltCallback>
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	08004735 	.word	0x08004735
 8003ebc:	ffff0000 	.word	0xffff0000

08003ec0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ece:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d002      	beq.n	8003ee2 <I2C_Slave_AF+0x22>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d129      	bne.n	8003f36 <I2C_Slave_AF+0x76>
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b28      	cmp	r3, #40	@ 0x28
 8003ee6:	d126      	bne.n	8003f36 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <I2C_Slave_AF+0xe4>)
 8003eec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003efc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f06:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe ffb9 	bl	8002ea6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003f34:	e031      	b.n	8003f9a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b21      	cmp	r3, #33	@ 0x21
 8003f3a:	d129      	bne.n	8003f90 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a19      	ldr	r2, [pc, #100]	@ (8003fa4 <I2C_Slave_AF+0xe4>)
 8003f40:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2221      	movs	r2, #33	@ 0x21
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f66:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f70:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f80:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fe f85c 	bl	8002040 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fe ff6d 	bl	8002e68 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f8e:	e004      	b.n	8003f9a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f98:	615a      	str	r2, [r3, #20]
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	ffff0000 	.word	0xffff0000

08003fa8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fc0:	7bbb      	ldrb	r3, [r7, #14]
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d002      	beq.n	8003fcc <I2C_ITError+0x24>
 8003fc6:	7bbb      	ldrb	r3, [r7, #14]
 8003fc8:	2b40      	cmp	r3, #64	@ 0x40
 8003fca:	d10a      	bne.n	8003fe2 <I2C_ITError+0x3a>
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b22      	cmp	r3, #34	@ 0x22
 8003fd0:	d107      	bne.n	8003fe2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fe8:	2b28      	cmp	r3, #40	@ 0x28
 8003fea:	d107      	bne.n	8003ffc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2228      	movs	r2, #40	@ 0x28
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ffa:	e015      	b.n	8004028 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800400a:	d00a      	beq.n	8004022 <I2C_ITError+0x7a>
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b60      	cmp	r3, #96	@ 0x60
 8004010:	d007      	beq.n	8004022 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004036:	d162      	bne.n	80040fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004046:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d020      	beq.n	8004098 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405a:	4a6a      	ldr	r2, [pc, #424]	@ (8004204 <I2C_ITError+0x25c>)
 800405c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd fb22 	bl	80016ac <HAL_DMA_Abort_IT>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8089 	beq.w	8004182 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004092:	4610      	mov	r0, r2
 8004094:	4798      	blx	r3
 8004096:	e074      	b.n	8004182 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	4a59      	ldr	r2, [pc, #356]	@ (8004204 <I2C_ITError+0x25c>)
 800409e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd fb01 	bl	80016ac <HAL_DMA_Abort_IT>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d068      	beq.n	8004182 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ba:	2b40      	cmp	r3, #64	@ 0x40
 80040bc:	d10b      	bne.n	80040d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040f8:	4610      	mov	r0, r2
 80040fa:	4798      	blx	r3
 80040fc:	e041      	b.n	8004182 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b60      	cmp	r3, #96	@ 0x60
 8004108:	d125      	bne.n	8004156 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	2b40      	cmp	r3, #64	@ 0x40
 8004124:	d10b      	bne.n	800413e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fe fecd 	bl	8002eee <HAL_I2C_AbortCpltCallback>
 8004154:	e015      	b.n	8004182 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004160:	2b40      	cmp	r3, #64	@ 0x40
 8004162:	d10b      	bne.n	800417c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fe fead 	bl	8002edc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d113      	bne.n	80041fc <I2C_ITError+0x254>
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b28      	cmp	r3, #40	@ 0x28
 80041d8:	d110      	bne.n	80041fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <I2C_ITError+0x260>)
 80041de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe fe55 	bl	8002ea6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	08004735 	.word	0x08004735
 8004208:	ffff0000 	.word	0xffff0000

0800420c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4603      	mov	r3, r0
 800421c:	817b      	strh	r3, [r7, #10]
 800421e:	460b      	mov	r3, r1
 8004220:	813b      	strh	r3, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004234:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2200      	movs	r2, #0
 800423e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fb1e 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800425c:	d103      	bne.n	8004266 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004264:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e05f      	b.n	800432a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004278:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	6a3a      	ldr	r2, [r7, #32]
 800427e:	492d      	ldr	r1, [pc, #180]	@ (8004334 <I2C_RequestMemoryWrite+0x128>)
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fb79 	bl	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e04c      	b.n	800432a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a8:	6a39      	ldr	r1, [r7, #32]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fc04 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d107      	bne.n	80042ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e02b      	b.n	800432a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d8:	893b      	ldrh	r3, [r7, #8]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]
 80042e2:	e021      	b.n	8004328 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f4:	6a39      	ldr	r1, [r7, #32]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fbde 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	2b04      	cmp	r3, #4
 8004308:	d107      	bne.n	800431a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004318:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e005      	b.n	800432a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800431e:	893b      	ldrh	r3, [r7, #8]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	00010002 	.word	0x00010002

08004338 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	4603      	mov	r3, r0
 8004348:	817b      	strh	r3, [r7, #10]
 800434a:	460b      	mov	r3, r1
 800434c:	813b      	strh	r3, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004360:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	2200      	movs	r2, #0
 800437a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fa80 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004398:	d103      	bne.n	80043a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e0aa      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	4952      	ldr	r1, [pc, #328]	@ (8004504 <I2C_RequestMemoryRead+0x1cc>)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fadb 	bl	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e097      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e4:	6a39      	ldr	r1, [r7, #32]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fb66 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d107      	bne.n	800440a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e076      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	e021      	b.n	8004464 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004420:	893b      	ldrh	r3, [r7, #8]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	b29b      	uxth	r3, r3
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004430:	6a39      	ldr	r1, [r7, #32]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fb40 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	2b04      	cmp	r3, #4
 8004444:	d107      	bne.n	8004456 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e050      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800445a:	893b      	ldrh	r3, [r7, #8]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004466:	6a39      	ldr	r1, [r7, #32]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fb25 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	2b04      	cmp	r3, #4
 800447a:	d107      	bne.n	800448c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800448a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e035      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800449e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f9e9 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c6:	d103      	bne.n	80044d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e013      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044d4:	897b      	ldrh	r3, [r7, #10]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	6a3a      	ldr	r2, [r7, #32]
 80044e8:	4906      	ldr	r1, [pc, #24]	@ (8004504 <I2C_RequestMemoryRead+0x1cc>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fa44 	bl	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	00010002 	.word	0x00010002

08004508 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004524:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800453a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004548:	2200      	movs	r2, #0
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	2200      	movs	r2, #0
 800455a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004562:	2b21      	cmp	r3, #33	@ 0x21
 8004564:	d007      	beq.n	8004576 <I2C_DMAXferCplt+0x6e>
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800456c:	2b22      	cmp	r3, #34	@ 0x22
 800456e:	d131      	bne.n	80045d4 <I2C_DMAXferCplt+0xcc>
 8004570:	7cbb      	ldrb	r3, [r7, #18]
 8004572:	2b20      	cmp	r3, #32
 8004574:	d12e      	bne.n	80045d4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004584:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2200      	movs	r2, #0
 800458a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	2b29      	cmp	r3, #41	@ 0x29
 8004590:	d10a      	bne.n	80045a8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2221      	movs	r2, #33	@ 0x21
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2228      	movs	r2, #40	@ 0x28
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045a0:	6978      	ldr	r0, [r7, #20]
 80045a2:	f7fe fc61 	bl	8002e68 <HAL_I2C_SlaveTxCpltCallback>
 80045a6:	e00c      	b.n	80045c2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ac:	d109      	bne.n	80045c2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2222      	movs	r2, #34	@ 0x22
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2228      	movs	r2, #40	@ 0x28
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045bc:	6978      	ldr	r0, [r7, #20]
 80045be:	f7fe fc5c 	bl	8002e7a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80045d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045d2:	e074      	b.n	80046be <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d06e      	beq.n	80046be <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d107      	bne.n	80045fa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004608:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004610:	d009      	beq.n	8004626 <I2C_DMAXferCplt+0x11e>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d006      	beq.n	8004626 <I2C_DMAXferCplt+0x11e>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800461e:	d002      	beq.n	8004626 <I2C_DMAXferCplt+0x11e>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b20      	cmp	r3, #32
 8004624:	d107      	bne.n	8004636 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004634:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004644:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004654:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2200      	movs	r2, #0
 800465a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f7fe fc39 	bl	8002edc <HAL_I2C_ErrorCallback>
}
 800466a:	e028      	b.n	80046be <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b40      	cmp	r3, #64	@ 0x40
 800467e:	d10a      	bne.n	8004696 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800468e:	6978      	ldr	r0, [r7, #20]
 8004690:	f7fe fc1b 	bl	8002eca <HAL_I2C_MemRxCpltCallback>
}
 8004694:	e013      	b.n	80046be <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d002      	beq.n	80046aa <I2C_DMAXferCplt+0x1a2>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d103      	bne.n	80046b2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b0:	e002      	b.n	80046b8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2212      	movs	r2, #18
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	f7fe fbcc 	bl	8002e56 <HAL_I2C_MasterRxCpltCallback>
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e0:	2200      	movs	r2, #0
 80046e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f0:	2200      	movs	r2, #0
 80046f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004702:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f043 0210 	orr.w	r2, r3, #16
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7fe fbd8 	bl	8002edc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800474e:	4b4b      	ldr	r3, [pc, #300]	@ (800487c <I2C_DMAAbort+0x148>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	08db      	lsrs	r3, r3, #3
 8004754:	4a4a      	ldr	r2, [pc, #296]	@ (8004880 <I2C_DMAAbort+0x14c>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0a1a      	lsrs	r2, r3, #8
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	00da      	lsls	r2, r3, #3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800477a:	e00a      	b.n	8004792 <I2C_DMAAbort+0x5e>
    }
    count--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b01      	subs	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800478c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004790:	d0ea      	beq.n	8004768 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479e:	2200      	movs	r2, #0
 80047a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ae:	2200      	movs	r2, #0
 80047b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d4:	2200      	movs	r2, #0
 80047d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e4:	2200      	movs	r2, #0
 80047e6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b60      	cmp	r3, #96	@ 0x60
 8004802:	d10e      	bne.n	8004822 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800481a:	6978      	ldr	r0, [r7, #20]
 800481c:	f7fe fb67 	bl	8002eee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004820:	e027      	b.n	8004872 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004828:	2b28      	cmp	r3, #40	@ 0x28
 800482a:	d117      	bne.n	800485c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800484a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2228      	movs	r2, #40	@ 0x28
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800485a:	e007      	b.n	800486c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800486c:	6978      	ldr	r0, [r7, #20]
 800486e:	f7fe fb35 	bl	8002edc <HAL_I2C_ErrorCallback>
}
 8004872:	bf00      	nop
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000000 	.word	0x20000000
 8004880:	14f8b589 	.word	0x14f8b589

08004884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004894:	e048      	b.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d044      	beq.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fc fd3d 	bl	800131c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d139      	bne.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	0c1b      	lsrs	r3, r3, #16
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10d      	bne.n	80048da <I2C_WaitOnFlagUntilTimeout+0x56>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	43da      	mvns	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4013      	ands	r3, r2
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	e00c      	b.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	43da      	mvns	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4013      	ands	r3, r2
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d116      	bne.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e023      	b.n	8004970 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d10d      	bne.n	800494e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	43da      	mvns	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	e00c      	b.n	8004968 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	43da      	mvns	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4013      	ands	r3, r2
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	429a      	cmp	r2, r3
 800496c:	d093      	beq.n	8004896 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004986:	e071      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004996:	d123      	bne.n	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e067      	b.n	8004ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d041      	beq.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e8:	f7fc fc98 	bl	800131c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d136      	bne.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10c      	bne.n	8004a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	e00b      	b.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e021      	b.n	8004ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10c      	bne.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e00b      	b.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf14      	ite	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	2300      	moveq	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f af6d 	bne.w	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac4:	e034      	b.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f915 	bl	8004cf6 <I2C_IsAcknowledgeFailed>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e034      	b.n	8004b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d028      	beq.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ade:	f7fc fc1d 	bl	800131c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d11d      	bne.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d016      	beq.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e007      	b.n	8004b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3a:	2b80      	cmp	r3, #128	@ 0x80
 8004b3c:	d1c3      	bne.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b54:	e034      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f8cd 	bl	8004cf6 <I2C_IsAcknowledgeFailed>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e034      	b.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d028      	beq.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fc fbd5 	bl	800131c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11d      	bne.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d016      	beq.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e007      	b.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d1c3      	bne.n	8004b56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004be4:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	08db      	lsrs	r3, r3, #3
 8004bea:	4a13      	ldr	r2, [pc, #76]	@ (8004c38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	0a1a      	lsrs	r2, r3, #8
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d107      	bne.n	8004c16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e008      	b.n	8004c28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c24:	d0e9      	beq.n	8004bfa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000000 	.word	0x20000000
 8004c38:	14f8b589 	.word	0x14f8b589

08004c3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c48:	e049      	b.n	8004cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d119      	bne.n	8004c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0210 	mvn.w	r2, #16
 8004c60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e030      	b.n	8004cee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8c:	f7fc fb46 	bl	800131c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d302      	bcc.n	8004ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11d      	bne.n	8004cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cac:	2b40      	cmp	r3, #64	@ 0x40
 8004cae:	d016      	beq.n	8004cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e007      	b.n	8004cee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b40      	cmp	r3, #64	@ 0x40
 8004cea:	d1ae      	bne.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0c:	d11b      	bne.n	8004d46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	f043 0204 	orr.w	r2, r3, #4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004d62:	d103      	bne.n	8004d6c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d6a:	e007      	b.n	8004d7c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004d74:	d102      	bne.n	8004d7c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004d8c:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004d98:	f000 f808 	bl	8004dac <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004d9c:	4b02      	ldr	r3, [pc, #8]	@ (8004da8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004d9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004da2:	615a      	str	r2, [r3, #20]
  }
}
 8004da4:	bf00      	nop
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40010400 	.word	0x40010400

08004dac <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e272      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8087 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dd8:	4b92      	ldr	r3, [pc, #584]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d00c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004de4:	4b8f      	ldr	r3, [pc, #572]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d112      	bne.n	8004e16 <HAL_RCC_OscConfig+0x5e>
 8004df0:	4b8c      	ldr	r3, [pc, #560]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfc:	d10b      	bne.n	8004e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfe:	4b89      	ldr	r3, [pc, #548]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d06c      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x12c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d168      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e24c      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCC_OscConfig+0x76>
 8004e20:	4b80      	ldr	r3, [pc, #512]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7f      	ldr	r2, [pc, #508]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e02e      	b.n	8004e8c <HAL_RCC_OscConfig+0xd4>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x98>
 8004e36:	4b7b      	ldr	r3, [pc, #492]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	4b78      	ldr	r3, [pc, #480]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a77      	ldr	r2, [pc, #476]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e01d      	b.n	8004e8c <HAL_RCC_OscConfig+0xd4>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCC_OscConfig+0xbc>
 8004e5a:	4b72      	ldr	r3, [pc, #456]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a71      	ldr	r2, [pc, #452]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	4b6f      	ldr	r3, [pc, #444]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e00b      	b.n	8004e8c <HAL_RCC_OscConfig+0xd4>
 8004e74:	4b6b      	ldr	r3, [pc, #428]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a6a      	ldr	r2, [pc, #424]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4b68      	ldr	r3, [pc, #416]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a67      	ldr	r2, [pc, #412]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d013      	beq.n	8004ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fc fa42 	bl	800131c <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fc fa3e 	bl	800131c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	@ 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e200      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b5d      	ldr	r3, [pc, #372]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0xe4>
 8004eba:	e014      	b.n	8004ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fc fa2e 	bl	800131c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec4:	f7fc fa2a 	bl	800131c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	@ 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e1ec      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed6:	4b53      	ldr	r3, [pc, #332]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x10c>
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d063      	beq.n	8004fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004efe:	4b49      	ldr	r3, [pc, #292]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d11c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x18c>
 8004f0a:	4b46      	ldr	r3, [pc, #280]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d116      	bne.n	8004f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f16:	4b43      	ldr	r3, [pc, #268]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_RCC_OscConfig+0x176>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e1c0      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4939      	ldr	r1, [pc, #228]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	e03a      	b.n	8004fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f4c:	4b36      	ldr	r3, [pc, #216]	@ (8005028 <HAL_RCC_OscConfig+0x270>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fc f9e3 	bl	800131c <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5a:	f7fc f9df 	bl	800131c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e1a1      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f78:	4b2a      	ldr	r3, [pc, #168]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4927      	ldr	r1, [pc, #156]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	600b      	str	r3, [r1, #0]
 8004f8c:	e015      	b.n	8004fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f8e:	4b26      	ldr	r3, [pc, #152]	@ (8005028 <HAL_RCC_OscConfig+0x270>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fc f9c2 	bl	800131c <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f9c:	f7fc f9be 	bl	800131c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e180      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	4b1d      	ldr	r3, [pc, #116]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d03a      	beq.n	800503c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d019      	beq.n	8005002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fce:	4b17      	ldr	r3, [pc, #92]	@ (800502c <HAL_RCC_OscConfig+0x274>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd4:	f7fc f9a2 	bl	800131c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fdc:	f7fc f99e 	bl	800131c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e160      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f000 faea 	bl	80055d4 <RCC_Delay>
 8005000:	e01c      	b.n	800503c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005002:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <HAL_RCC_OscConfig+0x274>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005008:	f7fc f988 	bl	800131c <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800500e:	e00f      	b.n	8005030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7fc f984 	bl	800131c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d908      	bls.n	8005030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e146      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
 8005028:	42420000 	.word	0x42420000
 800502c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005030:	4b92      	ldr	r3, [pc, #584]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e9      	bne.n	8005010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80a6 	beq.w	8005196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504a:	2300      	movs	r3, #0
 800504c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504e:	4b8b      	ldr	r3, [pc, #556]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505a:	4b88      	ldr	r3, [pc, #544]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4a87      	ldr	r2, [pc, #540]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005064:	61d3      	str	r3, [r2, #28]
 8005066:	4b85      	ldr	r3, [pc, #532]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005076:	4b82      	ldr	r3, [pc, #520]	@ (8005280 <HAL_RCC_OscConfig+0x4c8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d118      	bne.n	80050b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005082:	4b7f      	ldr	r3, [pc, #508]	@ (8005280 <HAL_RCC_OscConfig+0x4c8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a7e      	ldr	r2, [pc, #504]	@ (8005280 <HAL_RCC_OscConfig+0x4c8>)
 8005088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508e:	f7fc f945 	bl	800131c <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005096:	f7fc f941 	bl	800131c <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b64      	cmp	r3, #100	@ 0x64
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e103      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a8:	4b75      	ldr	r3, [pc, #468]	@ (8005280 <HAL_RCC_OscConfig+0x4c8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x312>
 80050bc:	4b6f      	ldr	r3, [pc, #444]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4a6e      	ldr	r2, [pc, #440]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	6213      	str	r3, [r2, #32]
 80050c8:	e02d      	b.n	8005126 <HAL_RCC_OscConfig+0x36e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x334>
 80050d2:	4b6a      	ldr	r3, [pc, #424]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	4a69      	ldr	r2, [pc, #420]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	6213      	str	r3, [r2, #32]
 80050de:	4b67      	ldr	r3, [pc, #412]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4a66      	ldr	r2, [pc, #408]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	f023 0304 	bic.w	r3, r3, #4
 80050e8:	6213      	str	r3, [r2, #32]
 80050ea:	e01c      	b.n	8005126 <HAL_RCC_OscConfig+0x36e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	d10c      	bne.n	800510e <HAL_RCC_OscConfig+0x356>
 80050f4:	4b61      	ldr	r3, [pc, #388]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	4a60      	ldr	r2, [pc, #384]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6213      	str	r3, [r2, #32]
 8005100:	4b5e      	ldr	r3, [pc, #376]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	4a5d      	ldr	r2, [pc, #372]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	6213      	str	r3, [r2, #32]
 800510c:	e00b      	b.n	8005126 <HAL_RCC_OscConfig+0x36e>
 800510e:	4b5b      	ldr	r3, [pc, #364]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	4a5a      	ldr	r2, [pc, #360]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005114:	f023 0301 	bic.w	r3, r3, #1
 8005118:	6213      	str	r3, [r2, #32]
 800511a:	4b58      	ldr	r3, [pc, #352]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	4a57      	ldr	r2, [pc, #348]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d015      	beq.n	800515a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512e:	f7fc f8f5 	bl	800131c <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	e00a      	b.n	800514c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fc f8f1 	bl	800131c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e0b1      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	4b4b      	ldr	r3, [pc, #300]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ee      	beq.n	8005136 <HAL_RCC_OscConfig+0x37e>
 8005158:	e014      	b.n	8005184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fc f8df 	bl	800131c <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005162:	f7fc f8db 	bl	800131c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005170:	4293      	cmp	r3, r2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e09b      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005178:	4b40      	ldr	r3, [pc, #256]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ee      	bne.n	8005162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518a:	4b3c      	ldr	r3, [pc, #240]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	4a3b      	ldr	r2, [pc, #236]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8087 	beq.w	80052ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a0:	4b36      	ldr	r3, [pc, #216]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d061      	beq.n	8005270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d146      	bne.n	8005242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b4:	4b33      	ldr	r3, [pc, #204]	@ (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fc f8af 	bl	800131c <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fc f8ab 	bl	800131c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e06d      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d4:	4b29      	ldr	r3, [pc, #164]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d108      	bne.n	80051fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4921      	ldr	r1, [pc, #132]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051fc:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a19      	ldr	r1, [r3, #32]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	430b      	orrs	r3, r1
 800520e:	491b      	ldr	r1, [pc, #108]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005214:	4b1b      	ldr	r3, [pc, #108]	@ (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521a:	f7fc f87f 	bl	800131c <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005222:	f7fc f87b 	bl	800131c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e03d      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005234:	4b11      	ldr	r3, [pc, #68]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x46a>
 8005240:	e035      	b.n	80052ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b10      	ldr	r3, [pc, #64]	@ (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fc f868 	bl	800131c <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fc f864 	bl	800131c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e026      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005262:	4b06      	ldr	r3, [pc, #24]	@ (800527c <HAL_RCC_OscConfig+0x4c4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x498>
 800526e:	e01e      	b.n	80052ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d107      	bne.n	8005288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e019      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
 800527c:	40021000 	.word	0x40021000
 8005280:	40007000 	.word	0x40007000
 8005284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_RCC_OscConfig+0x500>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	429a      	cmp	r2, r3
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000

080052bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0d0      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d0:	4b6a      	ldr	r3, [pc, #424]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d910      	bls.n	8005300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b67      	ldr	r3, [pc, #412]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0207 	bic.w	r2, r3, #7
 80052e6:	4965      	ldr	r1, [pc, #404]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b63      	ldr	r3, [pc, #396]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b8      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b59      	ldr	r3, [pc, #356]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4a58      	ldr	r2, [pc, #352]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005330:	4b53      	ldr	r3, [pc, #332]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a52      	ldr	r2, [pc, #328]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800533a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b50      	ldr	r3, [pc, #320]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	494d      	ldr	r1, [pc, #308]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d040      	beq.n	80053dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b47      	ldr	r3, [pc, #284]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d115      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537a:	4b41      	ldr	r3, [pc, #260]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e073      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538a:	4b3d      	ldr	r3, [pc, #244]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e06b      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539a:	4b39      	ldr	r3, [pc, #228]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4936      	ldr	r1, [pc, #216]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ac:	f7fb ffb6 	bl	800131c <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b4:	f7fb ffb2 	bl	800131c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e053      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 020c 	and.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	429a      	cmp	r2, r3
 80053da:	d1eb      	bne.n	80053b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053dc:	4b27      	ldr	r3, [pc, #156]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d210      	bcs.n	800540c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ea:	4b24      	ldr	r3, [pc, #144]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 0207 	bic.w	r2, r3, #7
 80053f2:	4922      	ldr	r1, [pc, #136]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b20      	ldr	r3, [pc, #128]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e032      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b19      	ldr	r3, [pc, #100]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4916      	ldr	r1, [pc, #88]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005436:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	490e      	ldr	r1, [pc, #56]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005446:	4313      	orrs	r3, r2
 8005448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800544a:	f000 f821 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800544e:	4602      	mov	r2, r0
 8005450:	4b0b      	ldr	r3, [pc, #44]	@ (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	490a      	ldr	r1, [pc, #40]	@ (8005484 <HAL_RCC_ClockConfig+0x1c8>)
 800545c:	5ccb      	ldrb	r3, [r1, r3]
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <HAL_RCC_ClockConfig+0x1cc>)
 8005464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005466:	4b09      	ldr	r3, [pc, #36]	@ (800548c <HAL_RCC_ClockConfig+0x1d0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fb fda2 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40022000 	.word	0x40022000
 8005480:	40021000 	.word	0x40021000
 8005484:	08005afc 	.word	0x08005afc
 8005488:	20000000 	.word	0x20000000
 800548c:	20000004 	.word	0x20000004

08005490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x94>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d002      	beq.n	80054c0 <HAL_RCC_GetSysClockFreq+0x30>
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d003      	beq.n	80054c6 <HAL_RCC_GetSysClockFreq+0x36>
 80054be:	e027      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x98>)
 80054c2:	613b      	str	r3, [r7, #16]
      break;
 80054c4:	e027      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	0c9b      	lsrs	r3, r3, #18
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	4a17      	ldr	r2, [pc, #92]	@ (800552c <HAL_RCC_GetSysClockFreq+0x9c>)
 80054d0:	5cd3      	ldrb	r3, [r2, r3]
 80054d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054de:	4b11      	ldr	r3, [pc, #68]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x94>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	0c5b      	lsrs	r3, r3, #17
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	4a11      	ldr	r2, [pc, #68]	@ (8005530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054ea:	5cd3      	ldrb	r3, [r2, r3]
 80054ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x98>)
 80054f2:	fb03 f202 	mul.w	r2, r3, r2
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e004      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a0c      	ldr	r2, [pc, #48]	@ (8005534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	613b      	str	r3, [r7, #16]
      break;
 800550e:	e002      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x98>)
 8005512:	613b      	str	r3, [r7, #16]
      break;
 8005514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005516:	693b      	ldr	r3, [r7, #16]
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000
 8005528:	007a1200 	.word	0x007a1200
 800552c:	08005b14 	.word	0x08005b14
 8005530:	08005b24 	.word	0x08005b24
 8005534:	003d0900 	.word	0x003d0900

08005538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800553c:	4b02      	ldr	r3, [pc, #8]	@ (8005548 <HAL_RCC_GetHCLKFreq+0x10>)
 800553e:	681b      	ldr	r3, [r3, #0]
}
 8005540:	4618      	mov	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	20000000 	.word	0x20000000

0800554c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005550:	f7ff fff2 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4903      	ldr	r1, [pc, #12]	@ (8005570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000
 8005570:	08005b0c 	.word	0x08005b0c

08005574 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	220f      	movs	r2, #15
 8005582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005584:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <HAL_RCC_GetClockConfig+0x58>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0203 	and.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005590:	4b0e      	ldr	r3, [pc, #56]	@ (80055cc <HAL_RCC_GetClockConfig+0x58>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800559c:	4b0b      	ldr	r3, [pc, #44]	@ (80055cc <HAL_RCC_GetClockConfig+0x58>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055a8:	4b08      	ldr	r3, [pc, #32]	@ (80055cc <HAL_RCC_GetClockConfig+0x58>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	08db      	lsrs	r3, r3, #3
 80055ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055b6:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <HAL_RCC_GetClockConfig+0x5c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0207 	and.w	r2, r3, #7
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40022000 	.word	0x40022000

080055d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <RCC_Delay+0x34>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	@ (800560c <RCC_Delay+0x38>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	0a5b      	lsrs	r3, r3, #9
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055f0:	bf00      	nop
  }
  while (Delay --);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1e5a      	subs	r2, r3, #1
 80055f6:	60fa      	str	r2, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f9      	bne.n	80055f0 <RCC_Delay+0x1c>
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	20000000 	.word	0x20000000
 800560c:	10624dd3 	.word	0x10624dd3

08005610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e041      	b.n	80056a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f839 	bl	80056ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f000 f99c 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d001      	beq.n	80056d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e03a      	b.n	800574e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a18      	ldr	r2, [pc, #96]	@ (8005758 <HAL_TIM_Base_Start_IT+0x98>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_TIM_Base_Start_IT+0x58>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005702:	d009      	beq.n	8005718 <HAL_TIM_Base_Start_IT+0x58>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a14      	ldr	r2, [pc, #80]	@ (800575c <HAL_TIM_Base_Start_IT+0x9c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_TIM_Base_Start_IT+0x58>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <HAL_TIM_Base_Start_IT+0xa0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d111      	bne.n	800573c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b06      	cmp	r3, #6
 8005728:	d010      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573a:	e007      	b.n	800574c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800

08005764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d020      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0202 	mvn.w	r2, #2
 8005798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8d1 	bl	8005956 <HAL_TIM_IC_CaptureCallback>
 80057b4:	e005      	b.n	80057c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8c4 	bl	8005944 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8d3 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d020      	beq.n	8005814 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01b      	beq.n	8005814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0204 	mvn.w	r2, #4
 80057e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8ab 	bl	8005956 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f89e 	bl	8005944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f8ad 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d020      	beq.n	8005860 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01b      	beq.n	8005860 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0208 	mvn.w	r2, #8
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2204      	movs	r2, #4
 8005836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f885 	bl	8005956 <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f878 	bl	8005944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f887 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b00      	cmp	r3, #0
 8005868:	d020      	beq.n	80058ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0210 	mvn.w	r2, #16
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2208      	movs	r2, #8
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f85f 	bl	8005956 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f852 	bl	8005944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f861 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0201 	mvn.w	r2, #1
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fb fa7e 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f8c3 	bl	8005a7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f831 	bl	800597a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00c      	beq.n	800593c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0220 	mvn.w	r2, #32
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f896 	bl	8005a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a5c <TIM_Base_SetConfig+0xd0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_Base_SetConfig+0x30>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059aa:	d007      	beq.n	80059bc <TIM_Base_SetConfig+0x30>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005a60 <TIM_Base_SetConfig+0xd4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_Base_SetConfig+0x30>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a64 <TIM_Base_SetConfig+0xd8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d108      	bne.n	80059ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a22      	ldr	r2, [pc, #136]	@ (8005a5c <TIM_Base_SetConfig+0xd0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_Base_SetConfig+0x62>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059dc:	d007      	beq.n	80059ee <TIM_Base_SetConfig+0x62>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a60 <TIM_Base_SetConfig+0xd4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_Base_SetConfig+0x62>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a64 <TIM_Base_SetConfig+0xd8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d108      	bne.n	8005a00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0d      	ldr	r2, [pc, #52]	@ (8005a5c <TIM_Base_SetConfig+0xd0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d103      	bne.n	8005a34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f023 0201 	bic.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	611a      	str	r2, [r3, #16]
  }
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800

08005a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr

08005a8c <memset>:
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4402      	add	r2, r0
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d100      	bne.n	8005a96 <memset+0xa>
 8005a94:	4770      	bx	lr
 8005a96:	f803 1b01 	strb.w	r1, [r3], #1
 8005a9a:	e7f9      	b.n	8005a90 <memset+0x4>

08005a9c <__libc_init_array>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	4d0c      	ldr	r5, [pc, #48]	@ (8005ad4 <__libc_init_array+0x38>)
 8005aa2:	4c0d      	ldr	r4, [pc, #52]	@ (8005ad8 <__libc_init_array+0x3c>)
 8005aa4:	1b64      	subs	r4, r4, r5
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	42a6      	cmp	r6, r4
 8005aaa:	d109      	bne.n	8005ac0 <__libc_init_array+0x24>
 8005aac:	f000 f81a 	bl	8005ae4 <_init>
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	4d0a      	ldr	r5, [pc, #40]	@ (8005adc <__libc_init_array+0x40>)
 8005ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8005ae0 <__libc_init_array+0x44>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	42a6      	cmp	r6, r4
 8005abc:	d105      	bne.n	8005aca <__libc_init_array+0x2e>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac4:	4798      	blx	r3
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7ee      	b.n	8005aa8 <__libc_init_array+0xc>
 8005aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ace:	4798      	blx	r3
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	e7f2      	b.n	8005aba <__libc_init_array+0x1e>
 8005ad4:	08005b28 	.word	0x08005b28
 8005ad8:	08005b28 	.word	0x08005b28
 8005adc:	08005b28 	.word	0x08005b28
 8005ae0:	08005b2c 	.word	0x08005b2c

08005ae4 <_init>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr

08005af0 <_fini>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr
